[{"question": "What is a significant advantage of State Space Models over attention mechanisms?\n", "true_answer": "State Space Models offer near-linear computational complexity, providing an advantage over attention mechanisms.", "source_doc": "multimodal.pdf", "source_id": "85b5cac71b", "retrieved_docs": ["SSMs by conditioning matrix A with a low-rank correction, and the Diagonal State Space (DSS)\nmodel [153], which proposes fully diagonal parameterization of state spaces for greater efficiency.\nH3 stacks two SSMs to interact with their output and input projection, bridging the gap between\nSSMs and attention while adapting to modern hardware. Mamba [77], a selective state space model,\nhas been introduced as a strong competitor to the Transformer architecture in large language models.\nMamba incorporates a selection mechanism to eliminate irrelevant data and develops a hardware-\naware parallel algorithm for recurrent operation. This results in competitive performance compared\nto LLMs of the same capacity, with faster inference speeds that scale linearly with time and con-\nstant memory usage. In conclusion, State Space Models offer significant potential as an alternative\nto attention mechanisms by providing near-linear computational complexity and effectively captur-", "Figure 13: The elements(left) block(middle) and architecture(right) in RWKV [151].\nThis approach parallelizes computations during training and maintains constant computational and\nmemory complexity during inference.\nState Space Models (SSMs) [152] can be formulated as a type of RNN for efficient autoregressive\ninference and have emerged as a promising alternative to attention mechanisms, offering near-linear\ncomputational complexity compared to the quadratic complexity of attention. SSMs are formulated\nas x\u2019(t) = Ax(t) + Bu(t), y(t) = Cx(t) + Du(t), mapping a single-dimension input signal u(t) to an N-\ndimension latent state x(t) before projecting it to a single-dimension output signal y(t), with A, B, C,\nand D being parameters learned by gradient descent [152]. Several techniques have been proposed\nto enhance SSMs, such as the Structured State Space sequence model (S4) [152], which refines\nSSMs by conditioning matrix A with a low-rank correction, and the Diagonal State Space (DSS)", "sequence lengths, as memory constraints limit batching across examples. Recent work has achieved\nsignificant improvements in computational efficiency through factorization tricks [ 21] and conditional\ncomputation [ 32], while also improving model performance in case of the latter. The fundamental\nconstraint of sequential computation, however, remains.\nAttention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,19]. In all but a few cases [ 27], however, such attention mechanisms\nare used in conjunction with a recurrent network.\nIn this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\nThe Transformer allows for significantly more parallelization and can reach a new state of the art in", "Efficient Attention Mechanisms One way of\naddressing the limited context of LLMs is by de-\nsigning more efficient attention mechanisms that\ncan process longer inputs. Ma et al. [350] intro-\nduce Luna , a linear unified nested attention mech-\nanism that approximates softmax attention with\ntwo nested linear attention functions, yielding only\nlinear (as opposed to quadratic) time and space\ncomplexity, allowing it to process much longer in-\nputs. Similarly, Shen et al. [496] and Li et al. [310]\npresent alternative attention mechanisms equivalent\nto the dot-product attention but which require sub-\nstantially less memory and compute resources. Guo\net al. [183] propose an attention mechanism called\nTransient Global , which is an extension of local\nattention where each token can attend to nearby\ntokens and a set of global tokens. It enables to han-\ndle sequences with up to 12,000 tokens. Similarly,\nCoLT5 [15] enables context lengths of up to 64,000", "based solely on attention mechanisms, dispensing with recurrence and convolutions\nentirely. Experiments on two machine translation tasks show these models to\nbe superior in quality while being more parallelizable and requiring significantly\nless time to train. Our model achieves 28.4 BLEU on the WMT 2014 English-\nto-German translation task, improving over the existing best results, including\nensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task,\nour model establishes a new single-model state-of-the-art BLEU score of 41.8 after\ntraining for 3.5 days on eight GPUs, a small fraction of the training costs of the\nbest models from the literature. We show that the Transformer generalizes well to\nother tasks by applying it successfully to English constituency parsing both with\nlarge and limited training data.\n\u2217Equal contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and started"], "retrieved_docs_id": ["85b5cac71b", "bb2e9ee3f0", "c998dcd0be", "7c06726552", "f6d48786ec"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does VCoder enhance the object identification ability of MLLMs?\n", "true_answer": "VCoder enhances the object identification ability of MLLMs by utilizing additional perception formats, such as segmentation masks and depth maps.", "source_doc": "hallucination.pdf", "source_id": "c461600dc0", "retrieved_docs": ["task encoders are dedicated to integrating various types of latent visual information extracted by\nmultiple visual encoders. Additionally, the structural knowledge enhancement module is designed\nto utilize visual tools, such as OCR tools and object detectors, to extract prior knowledge from\nvisual inputs.\nFollowing the approach of the structural knowledge enhancement module in [ 38], another line\nof research investigates the utilization of vision tool models to enhance the perception of MLLMs.\nVCoder [ 49] utilizes additional perception formats, such as segmentation masks and depth maps,\nto enhance the object identification ability of the MLLM. Another work [ 54] ensembles additional\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024.", "and analyze the elements in detail. Specifically, it includes three steps: descriptive sub-sentence\nidentification, atomic fact generation, and fact verification. The evaluation metric involves fine-\ngrained object hallucination categories, including entity, count, color, relation, and other attributes.\nThe final computation of FaithScore is the ratio of hallucinated content.\nBingo [ 21]Bingo (Bias and Interference Challenges in Visual Language Models) is a benchmark\nspecifically designed for assessing and analyzing the limitations of current popular MLLMs, such as\nGPT-4V [ 83]. It comprises 190 failure instances, along with 131 success instances as a comparison.\nThis benchmark reveals that state-of-the-art MLLMs show the phenomenon of bias and interference.\nBias refers to the model\u2019s susceptibility to generating hallucinatory outputs on specific types of\nexamples, such as OCR bias, region bias, etc. Interference refers to scenarios in which the judgment", "robust evaluation of object hallucination, POPE [844] pro-\nposes a polling-based object probing approach for convert-\ning object recognition into a series of binary questions, and\nthe results indicate that current MLLMs often struggle with\nobject hallucination. Cognition tasks, on the other hand, re-\nquire MLLMs to perform reasoning based on image percep-\ntion. A common reasoning task is visual question answering\n(VQA), where models answer questions about images that\ndemand reasoning about spatial relationships [845], general\nknowledge [846], or scene text [847]. To fully explore the\ncapabilities of MLLMs, HallusionBench [848] collects 200\nsophisticated visual dependent or supplement questions, on\nwhich even the most advanced MLLMs like LLaVA-1.5 [831]\nand GPT-4V [133] fail to achieve good performance.\n\u2022Evaluation paradigms. The responses of MLLMs can\nbe evaluated either in a closed-ended or an open-ended\nmanner. Traditional multimodal tasks often rely on a closed-", "ideas and foster the field\u2019s development.\nIn the realm of computer vision, object recognition is the core task, including sub-tasks such as\nobject classification [ 60], detection [ 27], and segmentation [ 37], etc. Similarly, studies on halluci-\nnation in MLLMs primarily focus on object hallucination. In pre-MLLM era, there is a pioneering\nwork on object hallucination in image captioning [ 90], evaluating object existence by comparing\ncaptions and image content. In MLLMs, object hallucination has been empirically categorized into\nthree categories: 1) category , which identifies nonexistent or incorrect object categories in the given\nimage; 2) attribute , which emphasizes descriptions of the objects\u2019 attributes, such as color, shape,\nmaterial, etc; and 3) relation , which assesses the relationships among objects, such as human-object\ninteractions or relative positions. Note that some literature may consider objects counting, objects", "can be categorized into two main types: perception and\ncognition tasks. Specifically, perception tasks aim to assess the\nmodel\u2019s abilities in understanding the basic semantics of the\nimage content, while cognition tasks evaluate models with\nmore complex tasks that require reasoning based on per-\nception results. The perception ability is typically evaluated\nthrough classification tasks about attributes of image ( e.g.,\ntopic and style) and object ( e.g.,existence and color) or OCR-\nrelated tasks, based on existing datasets or new datasets\nderived from existing images with annotations by humans\nor LLMs [836\u2013839]. A notable perception issue is hallucina-\ntion [840], where the model\u2019s responses contain inconsistent\ncontent with the image. Among existing studies about hallu-\ncination in MLLMs [834, 841, 842], object hallucination [843]\nhas received much research attention. To conduct a stable,\nrobust evaluation of object hallucination, POPE [844] pro-"], "retrieved_docs_id": ["c461600dc0", "db8870dfa6", "736e8a6bfb", "595dbaf855", "2297503119"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does the standard self-attention mechanism's time complexity affect large language models?\n", "true_answer": "The standard self-attention mechanism has a time complexity of O(n^2), where n is the sequence length. This quadratic complexity can lead to scalability issues, particularly when dealing with long sequences in large language models (LLMs).", "source_doc": "multimodal.pdf", "source_id": "323641b323", "retrieved_docs": ["Figure 11: Organization of efficient large language models advancements.\nOccupying a significant majority of the parameter volume in MLLMs, LLM serves as a crucial entry\npoint for enhancing the efficiency of MLLMs. In this section, similar to the survey paper [160], we\nprovide a brief overview of the research progress in efficient LLMs, offering inspiration for the\ndevelopment of Efficient MLLMs.\n4.1 Attention\nIn the standard self-attention mechanism, the time complexity is O(n2), where nis the sequence\nlength. This quadratic complexity arises due to the pairwise interactions between all input tokens,\nwhich can lead to scalability issues, especially when dealing with long sequences in LLMs. To\ntackle this, researchers have developed techniques to expedite attention mechanisms and reduce\ntime complexity, such as sharing-based attention, feature information reduction, kernelization or\nlow-rank, fixed and learnable pattern strategies, and hardware-assisted attention.", "Model Time Space\nTransformer O(T2d) O(T2+T d)\nReformer O(TlogT d)O(TlogT+T d)\nPerformer O(T d2logd)O(T dlogd+d2logd)\nLinear Transformers O(T d2) O(T d+d2)\nAFT-full O(T2d) O(T d)\nAFT-local O(T sd) O(T d)\nMEGA O(cT d) O(cd)\nRWKV (ours) O(Td) O(d)\nTable 1: Inference complexity comparison with different\nTransformers. Here Tdenotes the sequence length,\ndthe feature dimension, cis MEGA\u2019s chunk size of\nquadratic attention, and sis the size of a local window\nfor AFT.\nLLaMA (Touvron et al., 2023), and Chinchilla\n(Hoffmann et al., 2022) showcase the potential of\nTransformers in NLP. However, the self-attention\nmechanism\u2019s quadratic complexity makes it compu-\ntationally and memory intensive for tasks involving\nlong sequences and constrained resources. This\nhas stimulated research to enhance Transformers\u2019\nscalability, sometimes sacrificing some of their ef-\nfectiveness (Wang et al., 2020; Zaheer et al., 2020;\nDao et al., 2022a).\nTo tackle these challenges, we introduce the Re-", "ory. Observing a serial-position-like effect in lan-\nguage models is perhaps surprising, since the self-\nattention mechanisms underlying Transformer lan-\nguage models is technically equally capable of re-\ntrieving any token from their contexts.\n7 Conclusion\nWe empirically study how language models use\nlong input contexts via a series of controlled ex-\nperiments. We show that language model perfor-\nmance degrades significantly when changing the\nposition of relevant information, indicating that\nmodels struggle to robustly access and use infor-\nmation in long input contexts. In particular, per-\nformance is often lowest when models must use\ninformation in the middle of long input contexts.\nWe conduct a preliminary investigation of the role\nof (i) model architecture, (ii) query-aware contextu-\nalization, and (iii) instruction fine-tuning to better\nunderstand how they affect how language models\nuse context. Finally, we conclude with a practi-\ncal case study of open-domain question answering,", "between any two positions in the network. Convolutional layers are generally more expensive than\nrecurrent layers, by a factor of k. Separable convolutions [ 6], however, decrease the complexity\nconsiderably, to O(k\u00b7n\u00b7d+n\u00b7d2). Even with k=n, however, the complexity of a separable\nconvolution is equal to the combination of a self-attention layer and a point-wise feed-forward layer,\nthe approach we take in our model.\nAs side benefit, self-attention could yield more interpretable models. We inspect attention distributions\nfrom our models and present and discuss examples in the appendix. Not only do individual attention\nheads clearly learn to perform different tasks, many appear to exhibit behavior related to the syntactic\nand semantic structure of the sentences.\n5 Training\nThis section describes the training regime for our models.\n5.1 Training Data and Batching\nWe trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million", "that arise in real use-cases (e.g. typos) affect the performance of the model significantly. Thus, we re-\nstrict ourselves to perturbations that are both natural and relatively mild\u2014e.g., capitalization, common\nmisspellings\u2014see Figure 18 for an illustration and see Appendix D.1 for the full description. Since it is\ndifficult to uniformly specify how the gold-standard should change for these perturbations in long-form\ntext generation or language modeling, we restrict our measurement of invariance-related robustness to text\nclassification, question answering, and information retrieval scenarios.\nEquivariance. To complement invariance, we also test how semantics-altering perturbations influence\nmodel behavior. The goal is to understand whether a model is sensitive to perturbations that change the\ntarget output and does not latch on irrelevant parts of the instance. Unfortunately, unlike invariance, spec-"], "retrieved_docs_id": ["323641b323", "3f7442053f", "e8c8d8c36a", "452633e068", "d7b911a1f5"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is the source of ground truth objects used in the CCEval metric?\n", "true_answer": "The source of ground truth objects used in the CCEval metric is Visual Genome.", "source_doc": "hallucination.pdf", "source_id": "6e78496733", "retrieved_docs": ["randomly samples 100 images from Visual Genome to form a benchmark. In evaluation, GPT-4\nis utilized to parse the captions generated by MLLMs and extract objects. Additionally, this work\nintroduces the \"coverage\" metric on top of CHAIR to ensure that the captions are detailed enough.\nThis metric computes the ratio of objects in the caption that match the ground truth to the total\nnumber of ground truth objects. It additionally records the average number of objects as well as\nthe average length of captions as auxiliary metric. Compared with CHAIR, CCEval employs more\ndiverse objects, as reflected in the source of ground truth (Visual Genome vs. COCO) and caption\nparsing (GPT-4 vs. rule-based tool).\nMERLIM [ 100]MERLIM ( Multi-modal Evaluation benchma Rk for Large Image-language\nModels) is a test-bed aimed at empirically evaluating MLLMs on core computer vision tasks,\nincluding object recognition, instance counting, and identifying object-to-object relationships.", "MHaluBench [13] arXiv\u201924 Feb. MSCOCO [70] 1,860 Gen Acc/P/R/F \u2713 \u2713 \u2717 T2I\nVHTest [46] arXiv\u201924 Feb. MSCOCO [70] 1,200 Dis & Gen Acc \u2713 \u2713 \u2717 \u2713\nHal-Eavl [53] arXiv\u201924 Feb.MSCOCO [70] &\nLAION [92]10,000 Dis & GenAcc/P/R/F &\nLLM Assessment\u2713 \u2713 \u2713 Obj. Event\n(denoted as CHAIR \ud835\udc60):\nCHAIR \ud835\udc56=|{hallucinated objects }|\n|{all objects mentioned }|,\nCHAIR \ud835\udc60=|{sentences with hallucinated object }|\n|{all sentences}|.\nIn the paper of CHAIR [ 90], the range of objects is restricted to the 80 MSCOCO objects. Sentence\ntokenization and synonyms mapping are applied to determine whether a generated sentence\ncontains hallucinated objects. Ground-truth caption and object segmentations both serve as ground-\ntruth objects in the computation. In the MLLM era, this metric is still widely used for assessing the\nresponse of MLLMs.\nPOPE [ 69]. When used in MLLMs, the work of [ 69] argues that the CHAIR metric can be\naffected by the instruction designs and the length of generated captions. Therefore, it proposes a", "OpenCHAIR [ 5]The traditional CHAIR metric relies on the closed list of 80 objects in the\nMS-COCO dataset, limiting its application. To measure object hallucination in the open-vocabulary\nsettings, OpenCHAIR expands CHAIR by relaxing the strong reliance on the closed vocabulary.\nThe \u2019open-vocabulary\u2019 manifests in two ways. Firstly, when building the benchmark, it organizes a\ndataset consisting of synthetic images with corresponding captions, which include diverse, open-\nvocabulary objects using a text-to-image diffusion model. Secondly, during computing the metric,\nCHAIR checks if words or their synonyms (as given by fixed vocabulary lists) are found in ground-\ntruth annotations. In contrast, OpenCHAIR extracts concrete objects from a predicted caption and\nidentifies hallucinated objects from this list by querying an LLM. Similar to CHAIR, the final metric\ncomputation is based on the hallucination rate.", "affected by the instruction designs and the length of generated captions. Therefore, it proposes a\nnew evaluation metric as well as a benchmark, called Pooling-based Object Probing Evaluation\n(POPE). The basic idea is to convert the evaluation of hallucination into a binary classification task\nby prompting MLLMs with simple Yes-or-Noshort questions about the probing objects ( e.g., Is there\nacarin the image?) Compared to CHAIR, POPE offers increased stability and flexibility. Based on\nthis metric design, it further proposed an evaluation benchmark, drawing 500 images from the\nMSCOCO dataset. The questions in the benchmark consist of both positive and negative questions.\nThe positive questions are formed based on the ground-truth objects, while the negative questions\nare built from sampling nonexistent objects. The benchmark is divided into three subsets according\nto different negative sampling strategy: random, popular, and adversarial. Popular and adversarial", "tokens. The issue of \u2019losing attention\u2019 would also lead to the model\u2019s output response being\nirrelevant to the visual content.\n4 HALLUCINATION METRICS AND BENCHMARKS\nIn this section, we present a comprehensive overview of existing hallucination metrics and bench-\nmarks, which are designed to assess the extent of hallucinations generated by existing cutting-edge\nMLLMs. Currently, the primary focus of these benchmarks is on evaluating the object hallucination\nof MLLM-generated content. Tab. 1 illustrates a summary of related benchmarks.\nCHAIR [ 90]. As one of the early works, the metric of CHAIR was proposed to evaluate ob-\nject hallucination in the traditional image captioning task. This is achieved by computing what\nproportion of words generated are actually in the image according to the ground truth sentences\nand object segmentations. The computation of the CHAIR metric is straightforward and easy"], "retrieved_docs_id": ["6e78496733", "84a3c00c17", "c7d602443c", "d3d3d6a133", "52c95dc6e8"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is a challenge in the integration process of retrieved passages in the generation task?\n", "true_answer": "If not handled properly, the output might appear incoherent or disjointed.", "source_doc": "RAG.pdf", "source_id": "e75af48a5e", "retrieved_docs": ["equally diverse. Hallucination is a prominent issue where the\nmodel fabricates an answer that doesn\u2019t exist in the context.\nIrrelevance is another concern where the model generates an\nanswer that fails to address the query. Further, toxicity or\nbias, where the model generates a harmful or offensive re-\nsponse, is another problem.\nFinally, the augmentation process also faces several chal-\nlenges. Crucially, the effective integration of the context from\nretrieved passages with the current generation task is of ut-\nmost importance. If mishandled, the output might appear in-\ncoherent or disjointed. Redundancy and repetition are another\nissue, particularly when multiple retrieved passages contain\nsimilar information, leading to content repetition in the gen-\neration step. Moreover, determining the importance or rele-\nvance of multiple retrieved passages to the generation task is\nchallenging, and the augmentation process needs to balance", "ofhallucination snowballing , where the LLM over-\ncommits to early mistakes (before outputting the\nexplanation) in its generation, which it otherwise\nwould not make.\nRetrieval Augmentation One way to mitigate\nhallucinations is to ground the model\u2019s input on\nexternal knowledge, which is often referred to as\nretrieval augmentation . In other words, we can\ndecouple (i) memory storage of knowledge (e.g.,\ndatabases or search indexes [ 290]) and (ii) process-\ning of the knowledge to arrive at a more modular\narchitecture. For (i), a retriever module retrieves\nthe top- krelevant documents (or passages) for a\nquery from a large corpus of text. Then, for (ii),\nwe feed these retrieved documents to the language\nmodel together with the initial prompt. In theory,\nusing an external data source may also make it eas-\nier to interpret which knowledge is retrieved and\nupdate it without tediously fine-tuning the model.\nShuster et al. [507] demonstrate hallucinations in", "Published in Transactions on Machine Learning Research (08/2023)\nrelevance: a grade of 0 marks irrelevant passages, while higher grades (i.e., 1, 2, and 3) mark more relevant\npassages. To account for this difference, we use the Normalized Discounted Cumulative Gain ( NDCG)\nmetric as the main for the TREC track results. The format and the construction of the inputs are the same\nas the regular track.\nSimilar to the regular track, we compute two versions of each metric: (1) the vanilla top- kversion, where\nthe model scores the passages that appear in the top- kpassages from a BM25 retriever (e.g., the metric we\nrefer to as NDCG @10(topk = 30); (2) the boosted version, the model scores the passages in (1) andany\npassages that has an annotation in the relevance assessments provided (0, 1, 2, or 3) for that query even if\nthey were not retrieved by BM25 (e.g., what we refer to as simply NDCG @10).", "information retrieval process, providing more effective and\naccurate inputs for subsequent LLM processing.\n5.2 How to Optimize a Generator to Adapt Input\nData?\nIn the RAG model, the optimization of the generator is a cru-\ncial component of the architecture. The generator\u2019s task is\nto take the retrieved information and generate relevant text,\nthereby providing the final output of the model. The goal of\noptimizing the generator is to ensure that the generated text is\nboth natural and effectively utilizes the retrieved documents,\nin order to better satisfy the user\u2019s query needs.\nIn typical Large Language Model (LLM) generation tasks,\nthe input is usually a query. In RAG, the main difference\nlies in the fact that the input includes not only a query\nbut also various documents retrieved by the retriever (struc-\ntured/unstructured). The introduction of additional informa-\ntion may have a significant impact on the model\u2019s understand-", "Published in Transactions on Machine Learning Research (08/2023)\nQuery: how many eye drops per ml\nDoes the passage answer the query?\nAnswer:\nThe desired output would be \u201cYes\u201d. Accuracy for this scenario is measured using standard binary information\nretrieval metrics: Recall @k,Success @k, and RR@k, the last one being the main one.\nWe compute two versions of each metric: (1) the vanilla top- kversion, where the model scores the passages\nthat appear in the top- kpassages from a BM25 retriever (e.g., the metric we refer to as RR@10(topk = 30);\n(2) the boosted version, the model scores the passages in (1) andany passages annotated as relevant for\nthe query even if they were not retrieved by BM25 (e.g., what we refer to as simply RR@10). We think of\n(1) as providing an easy-to-realize lower-bound on the quality of the re-ranking system (i.e., the metrics are\ncapped due to the limited recall by the BM25 retriever), whereas the boosted metrics in (2) aim to establish"], "retrieved_docs_id": ["e75af48a5e", "662143e448", "7e527caae4", "7fabdba415", "e24730f8bc"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does the ChipNeMo project adapt large language models for chip design?\n", "true_answer": "The ChipNeMo project adapts large language models for chip design using domain-adaptive tokenization, domain-adaptive continued pretraining, and model alignment techniques.", "source_doc": "ChipNemo.pdf", "source_id": "36c5c0c7f1", "retrieved_docs": ["ChipNeMo: Domain-Adapted LLMs for Chip Design\nFigure 4: Domain-Adapted ChipNeMo Tokenizer Improvements.\n3.1. Domain-Adaptive Tokenization\nWe adapt the LLaMA2 tokenizer (containing 32K tokens) to\nchip design datasets using the previously outlined four-step\nprocess. Approximately 9K new tokens are added to the\nLLaMA2 tokenizer. The adapted tokenizers can improve\ntokenization efficiency by 1.6% to 3.3% across various chip\ndesign datasets as shown in Figure 4. We observe no obvious\nchanges to tokenizer efficiency on public data. Importantly,\nwe have not observed significant decline in the LLM\u2019s accu-\nracy on public benchmarks when using the domain-adapted\ntokenizers even prior to DAPT.\n3.2. Domain Adaptive Pretraining\nFigure 5: Chip Domain Benchmark Result for ChipNeMo.\nFigure 5 presents the outcomes for ChipNeMo models on\nthe AutoEval benchmark for chip design domain (detailed\nin Appendix A.5). Results on open domain academic bench-\nmark results are presented in Appendix A.6. Our research", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ndomain-specific data improves the retriever hit rate\nby 30% over a pre-trained state-of-the-art retriever, in\nturn improving overall quality of RAG responses.\nThe paper is organized as follows. Section 2 outlines do-\nmain adaptation and training methods used including the\nadapted tokenizer, DAPT, model alignment, and RAG. Sec-\ntion 3 describes the experimental results including human\nevaluations for each application. Section 4 describes rel-\nevant LLM methods and other work targeting LLMs for\nchip design. Finally, detailed results along with additional\nmodel training details and examples of text generated by the\napplication use-cases are illustrated in the Appendix.\n2. ChipNeMo Domain Adaptation Methods\nChipNeMo implements multiple domain adaptation tech-\nniques to adapt LLMs to the chip design domain. These\ntechniques include domain-adaptive tokenization for chip\ndesign data, domain adaptive pretraining with large corpus", "the raw dataset, then continued-pretrain a foundation model\nwith the domain-specific data. We call the resulting model a\nChipNeMo foundation model. DAPT is done on a fraction\nof the tokens used in pre-training, and is much cheaper, only\nrequiring roughly 1.5% of the pretraining compute.\nLLM tokenizers convert text into sequences of tokens for\ntraining and inference. A domain-adapted tokenizer im-\nproves the tokenization efficiency by tailoring rules and\npatterns for domain-specific terms such as keywords com-\nmonly found in RTL. For DAPT, we cannot retrain a new\ndomain-specific tokenizer from scratch, since it would make\nthe foundation model invalid. Instead of restricting Chip-\nNeMo to the pre-trained general-purpose tokenizer used\nby the foundation model, we instead adapt the pre-trained\ntokenizer to our chip design dataset, only adding new tokens\nfor domain-specific terms.\nChipNeMo foundation models are completion models whichrequire model alignment to adapt to tasks such as chat.", "ChipNeMo: Domain-Adapted LLMs for Chip Design\nMingjie Liu* 1Teodor-Dumitru Ene* 1Robert Kirby* 1Chris Cheng* 1Nathaniel Pinckney* 1\nRongjian Liang* 1Jonah Alben1Himyanshu Anand1Sanmitra Banerjee1Ismet Bayraktaroglu1\nBonita Bhaskaran1Bryan Catanzaro1Arjun Chaudhuri1Sharon Clay1Bill Dally1Laura Dang1\nParikshit Deshpande1Siddhanth Dhodhi1Sameer Halepete1Eric Hill1Jiashang Hu1Sumit Jain1\nAnkit Jindal1Brucek Khailany1George Kokai1Kishor Kunal1Xiaowei Li1Charley Lind1Hao Liu1\nStuart Oberman1Sujeet Omar1Ghasem Pasandi1Sreedhar Pratty1Jonathan Raiman1Ambar Sarkar1\nZhengjiang Shao1Hanfei Sun1Pratik P Suthar1Varun Tej1Walker Turner1Kaizhe Xu1Haoxing Ren1\nAbstract\nChipNeMo aims to explore the applications of\nlarge language models (LLMs) for industrial chip\ndesign. Instead of directly deploying off-the-\nshelf commercial or open-source LLMs, we in-\nstead adopt the following domain adaptation tech-\nniques: domain-adaptive tokenization, domain-\nadaptive continued pretraining, model alignment", "ChipNeMo: Domain-Adapted LLMs for Chip Design\n2Domain -Adaptive\nPretraining\n24B tokens of chip \ndesign docs/code\nThousands GPU hrs\nModel\nAlignmen t\n56K/128K \n(SteerLM /SFT)  insts\n+ 1.4K task insts\n100+ GPU hrsFoundation Models\nLLaMA2 \n(7B, 13B, 70B) \nChipNeMo \nChat Models\n(7B, 13B, 70B)ChipNeMo \nFoundation Models\n(7B, 13B, 70B)Pretraining\nTrillions tokens of \ninternet data\n105 \u2013 106 GPU hrs\nFigure 1: ChipNeMo Training Flow\n2023)) fine-tuned on additional Verilog data can outperform\nstate-of-art OpenAI GPT-3.5 models. Customizing LLMs\nin this manner also avoids security risks associated with\nsending proprietary chip design data to third party LLMs\nvia APIs. However, it would be prohibitively expensive to\ntrain domain-specific models for every domain from scratch,\nsince this often requires millions of GPU training hours. To\ncost-effectively train domain-specific models, we instead\npropose to combine the following techniques: Domain-"], "retrieved_docs_id": ["ac7c0c980b", "df0b9868f2", "273b593026", "36c5c0c7f1", "2079d05356"], "reranker_type": "None", "search_type": "text", "rr": 0.25, "hit": 1}, {"question": "What is one of the benchmarks used for evaluating video comprehension in multimodal large language models?\n", "true_answer": "Video-LLaV A", "source_doc": "multimodal.pdf", "source_id": "d85947fa4f", "retrieved_docs": ["Thoughts (PoT) learning and Visual Token Merging strategy while excelling in faster inference\nspeed at the same time. TextHawk [36] explores efficient fine-grained perception by designing four\ndedicated components to address challenges posed by document-oriented tasks. HRVDA [66] and\nMonkey [65] are also large multimodal models designed to address the challenges posed by high-\nresolution requirements in visual document understanding tasks.\n7.3 Video Comprehension\nVideos provide an impressively accurate representation of how humans continuously perceive the\nvisual world. Intelligent video understanding is vital for a variety of real-world applications, in-\ncluding video category classification, video captioning, and video-text retrieval. Several works like\nvideoChat [197] and Video-LLaMA [198] are LLM-based large multimodal models for end-to-end\nchat-centric video comprehension. However, these methods can only take in a limited number of\nframes for short video understanding.", "FastV[46], VTW[47]\nTraining (\u00a75)Pre-Training (\u00a75.1) Idefics2[48], TinyLLaV A[23], VILA[49]\nInstruction-Tuning (\u00a75.2) LaVIN[50], HyperLLaV A[51]\nDiverse Training Steps (\u00a75.3) SPHINX-X[14], Cobra[13], TinyGPT-V[28]\nParameter Efficient\nTransfer Learning (\u00a75.4)EAS [52], MemVP [53]\nData and Benchmarks (\u00a76)Pre-Training Data (\u00a76.1)CC595k[7], LLava-1.5-PT[54],\nShareGPT4V-PT[55],\nBunny-pretrain-LAION-2M[24],\nALLaV A-Caption-4V[29], etc.\nInstrcution-Tuning Data (\u00a76.2)LLaV A\u2019s IT[7], LLaV A-1.5\u2019s IT[54],\nShareGPT4V\u2019s IT[55], Bunny-695K[24],\nLVIS-INSTRUCT-4V[56], etc.\nBenchmarks (\u00a76.3)VQAv2[57], TextVQA[58], GQA[59],\nMME[60], MMBench[61], POPE[62]\nApplication (\u00a77)Biomedical Analysis (\u00a77.1) LLaV A-Rad [63], MoE-TinyMed [64]\nDocument Understanding (\u00a77.2)TextHawk [36], TinyChart [37],\nMonkey [65], HRVDA [66]\nVideo Comprehension (\u00a77.3)mPLUG-video [67], Video-LLaV A [44],\nMA-LMM [68], LLaMA-VID [69]\nFigure 2: Organization of efficient multimodal large language models advancements.", "dataset. Visual features such as captions and\nbounding boxes were used to encode images.\nLLaV A yields a 85.1% relative score compared\nwith GPT-4 on a synthetic multimodal instruction\nfollowing dataset. When fine-tuned on Science QA,\nthe synergy of LLaV A and GPT-4 achieves a new\nstate-of-the-art accuracy of 92.53%.\nVideo-LLaMA (Zhang et al., 2023b) is\na multimodal framework that enhances large\nlanguage models with the ability to understand\nboth visual and auditory content in videos. The\narchitecture of Video-LLaMA consists of two\nbranche encoders: the Vision-Language (VL)\nBranch and the Audio-Language (AL) Branch, and\na language decoder (Vicuna (7B/13B) (Chiang\net al., 2023), LLaMA (7B) (Touvron et al.,\n2023a), etc.). The VL Branch includes a frozen\npre-trained image encoder (pre-trained vision\ncomponent of BLIP-2 (Li et al., 2023d), which\nincludes a ViT-G/14 and a pre-trained Q-former),\na position embedding layer, a video Q-former and\na linear layer. The AL Branch includes a pre-", "121\n\u201cReform-eval: Evaluating large vision language mod-\nels via unified re-formulation of task-oriented bench-\nmarks,\u201d CoRR , vol. abs/2310.02569, 2023.\n[854] B. Li, R. Wang, G. Wang, Y. Ge, Y. Ge, and\nY. Shan, \u201cSeed-bench: Benchmarking multimodal\nllms with generative comprehension,\u201d CoRR , vol.\nabs/2307.16125, 2023.\n[855] W. Yu, Z. Yang, L. Li, J. Wang, K. Lin, Z. Liu,\nX. Wang, and L. Wang, \u201cMm-vet: Evaluating large\nmultimodal models for integrated capabilities,\u201d CoRR ,\nvol. abs/2308.02490, 2023.\n[856] J. Wang, L. Meng, Z. Weng, B. He, Z. Wu, and Y. Jiang,\n\u201cTo see is to believe: Prompting GPT-4V for better\nvisual instruction tuning,\u201d CoRR , vol. abs/2311.07574,\n2023.\n[857] Y. Zhang, R. Zhang, J. Gu, Y. Zhou, N. Lipka, D. Yang,\nand T. Sun, \u201cLlavar: Enhanced visual instruction tun-\ning for text-rich image understanding,\u201d arXiv preprint\narXiv:2306.17107 , 2023.\n[858] X. Qi, K. Huang, A. Panda, M. Wang, and P . Mittal,\n\u201cVisual adversarial examples jailbreak aligned large", "but dissimilar to chatbot benchmarks and vice versa for the Chip2 dataset and both models score\naccordingly on the MMLU and Vicuna benchmarks. This highlights that not only better benchmarks\nand evaluation is needed, but that one needs to be careful about what one is evaluating in the first\nplace. Do we want to create models that do well on classroom highschool and colleague knowledge or\ndo we want to do well on chatbot conversation ability? Maybe something else? Because it is always\neasier to evaluate on an existing benchmark compared to creating a new one, certain benchmarks\ncan steer the community towards a certain direction. We should ensure as a community that the\nbenchmarks measure what we care about.\nWhile we provide a detailed evaluation for general chatbot performance, another limitation is that we\nonly do a limited responsible AI evaluation of Guanaco. We evaluate the likelihood of Guanaco-65B"], "retrieved_docs_id": ["73fba2ab9b", "d85947fa4f", "559c71259f", "2678016e21", "616eafc149"], "reranker_type": "None", "search_type": "text", "rr": 0.5, "hit": 1}, {"question": "How does LURE correct hallucinations in generated text?\n", "true_answer": "LURE corrects hallucinations in generated text using a hallucination revisor, which transforms potentially hallucinatory descriptions into accurate ones. This is achieved by training the revisor model on a dataset, with the goal of reconstructing clean data from corrupted input.", "source_doc": "hallucination.pdf", "source_id": "ceeab98980", "retrieved_docs": ["than ever.\nCorrect!Does not exist!\n\u2705\n\"\nWrong authors!\n\"\nFigure 7: Example of Hallucinations with GPT-4 ,\naccessed on 02/06/2023.\nUnfortunately, LLMs often suffer from halluci-\nnations , which contain inaccurate information that\ncan be hard to detect due to the text\u2019s fluency. Fig. 7\nillustrates an example.\nTo distinguish between different types of hallu-\ncinations, we consider the provided source content\nof the model, e.g., the prompt, possibly includ-\ning examples or retrieved context. Based on such,\nwe can distinguish between intrinsic andextrinsic\nhallucinations [ 241]. In the former, the generated\ntext logically contradicts the source content. In\nthe latter, we cannot verify the output correctness\nfrom the provided source; the source content does\nnot provide enough information to assess the out-\nput, which is, therefore, under-determined. Extrin-\nsic hallucination is not necessarily erroneous, as it\nmerely means the model generated an output that", "mentioned in the generated sentences; 2) Question formulation asks questions around the extracted\nobjects; 3) Visual knowledge validation answers the formulated questions via expert models; 4)\nVisual claim generation converts the above Question-Answer (QA) pairs into a visual knowledge\nbase; 5) Hallucination correction modifies the hallucinations and adds the corresponding evidence\nunder the guidance of the visual knowledge base. Woodpecker is a training-free method, where\neach component can be implemented using either hand-crafted rules or off-the-shelf pre-trained\nmodels.\nAnother line of work rectifies the generated text using a dedicatedly trained revisor model.\nSpecifically, inspired by denoising autoencoders [ 101], which are designed to reconstruct clean data\nfrom corrupted input, LURE [ 137] employs a hallucination revisor that aims to transform potentially\nhallucinatory descriptions into accurate ones. To train such a revisor model, a dataset has been", "reduce hallucination. Visual context refers to the visual tokens that can be grounded from the\ngenerated text response. An oracle study showed that decoding from the provided optimal visual\ncontexts eliminates over 84.5% of hallucinations. Based on the insight and observation, the authors\ndesigned mechanisms to locate the fine-grained visual information to correct each generated\ntoken that might be hallucinating. This is essentially a visual content-guided decoding strategy.\nIn addition to token-level correction, HALC also incorporates a matching-based beam search that\nutilizes a visual matching score to steer the generation of the final outputs, balancing both object\nhallucination mitigation and text generation quality.\nOthers. The work of OPEAR [ 45] makes an interesting observation that most hallucinations\nare closely tied to the knowledge aggregation patterns manifested in the self-attention matrix,", "Correct!\nDoes not exist!\n\u2705\n\"Figure 9: Example of Retrieval-Augmented GPT-4 ,\naccessed on 02/06/2023.\nstep. Dziri et al. [136] observe a positive correlation\nbetween increased diversity in response generation\nand hallucinations.\nThe reason for inducing randomness and diver-\nsity in popular decoding strategies is that gener-\nating the most likely sequence often leads to an\nunsurprising and unnatural text compared to hu-\nman communication [ 489,207,662]. Zhang et al.\n[662] phrase this challenge as a trade-off between\ndiversity and quality. While this challenge re-\nmains largely unsolved, several approaches such\nas diverse beam search [ 567] and confident decod-\ning [ 552] try reducing the induced hallucinations\nat the decoding level.\nUncertainty-Aware Beam Search [ 620]is\nbased on the observation that higher predictive un-\ncertainty corresponds to a larger chance of gener-\nating hallucinations. Therefore, the method intro-\nduces a penalty term in the beam search to penalize", "Reinforcement Learning from Human Feedback (RLHF). HalDetect [ 32] first introduces the M-\nHalDetect dataset for detecting hallucinations, which covers a wide range of hallucinatory content,\nincluding non-existent objects, unfaithful descriptions, and inaccurate relationships. It then proposes\na multimodal reward model to detect hallucinations generated by MLLMs. The reward model is\ntrained on the M-HalDetect dataset to identify hallucinations in the generated text. To utilize\nthe trained reward model to reduce hallucinations, the authors introduced Fine-grained Direct\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024."], "retrieved_docs_id": ["f5bf6c34dc", "ceeab98980", "31eefbd9eb", "e0158da525", "7a0f374e2c"], "reranker_type": "None", "search_type": "text", "rr": 0.5, "hit": 1}, {"question": "How does the Knowledge Updates feature affect the retrieval knowledge base?\n", "true_answer": "The Knowledge Updates feature directly updates the retrieval knowledge base, ensuring information remains current without the need for frequent retraining. This is suitable for dynamic data environments.", "source_doc": "RAG.pdf", "source_id": "9c38efbac6", "retrieved_docs": ["Feature Comparison RAG Fine-tuning\nKnowledge UpdatesDirectly updates the retrieval knowledge\nbase, ensuring information remains current\nwithout the need for frequent retraining, suit-\nable for dynamic data environments.Stores static data, requiring retraining for\nknowledge and data updates.\nExternal KnowledgeProficient in utilizing external resources,\nparticularly suitable for documents or other\nstructured/unstructured databases.Can be applied to align the externally learned\nknowledge from pretraining with large lan-\nguage models, but may be less practical for\nfrequently changing data sources.\nData ProcessingRequires minimal data processing and han-\ndling.Relies on constructing high-quality datasets,\nand limited datasets may not yield significant\nperformance improvements.\nModel CustomizationFocuses on information retrieval and inte-\ngrating external knowledge but may not fully\ncustomize model behavior or writing style.Allows adjustments of LLM behavior, writ-", "Retrieval-Augmented Generation for Large Language Models: A Survey\nYunfan Gao1,Yun Xiong2,Xinyu Gao2,Kangxiang Jia2,Jinliu Pan2,Yuxi Bi3,Yi\nDai1,Jiawei Sun1and Haofen Wang1,3\u2217\n1Shanghai Research Institute for Intelligent Autonomous Systems, Tongji University\n2Shanghai Key Laboratory of Data Science, School of Computer Science, Fudan University\n3College of Design and Innovation,Tongji University\ngaoyunfan1602@gmail.com\nAbstract\nLarge language models (LLMs) demonstrate pow-\nerful capabilities, but they still face challenges in\npractical applications, such as hallucinations, slow\nknowledge updates, and lack of transparency in\nanswers. Retrieval-Augmented Generation (RAG)\nrefers to the retrieval of relevant information from\nexternal knowledge bases before answering ques-\ntions with LLMs. RAG has been demonstrated\nto significantly enhance answer accuracy, reduce\nmodel hallucination, particularly for knowledge-\nintensive tasks. By citing sources, users can verify", "Retrieval-Augmented LLM. Due to the huge amount of\nfact records in a KG, existing work typically adopts a\nretrieval model to first obtain a relatively small subgraph\nfrom KG, and then leverages it to enhance LLMs by en-\nriching the relevant knowledge. Before the advent of LLMs,\nthe retrieved subgraphs are often supplemented into train-\ning data, injecting knowledge information into PLMs via\nparameter learning [863\u2013865]. In contrast, to leverage the\nretrieved knowledge, LLMs mainly incorporate it as part of\nthe prompt, without parameter update. To implement this\napproach, there are two main technical problems, i.e.,how\nto retrieve relevant knowledge from KGs and how to make\nbetter use of the structured data by LLMs. For the first issue\n(i.e.,retrieving relevant knowledge), a typical approach is\nto train a small language model ( e.g., RoBERTa) to iden-\ntify question-related fact triples [866]. To further improve\nthe retrieval performance, several studies also propose an", "Datasets. Among the QA datasets discussed in \u00a73.3: questionAnswering , we focus on a subset that\ntests diverse forms of knowledge: HellaSwag ,OpenBookQA ,TruthfulQA , andMMLU . Of these,\nHellaSwag andOpenBookQA test general commonsense knowledge, with TruthfulQA further adding\n49To be more precise, since we are evaluating models as text-to-text interfaces, this means knowledge that is currently used\nby the interface. In other words, the knowledge need not be stored in the model and could, for example, be stored in an external\nknowledge base that is accessed by a retrieval-augmented model (Lewis et al., 2020c; Yasunaga et al., 2021; 2022a).\n36", "employs a graph encoding method that reflects the graph\nstructure into PTMs\u2019 representation space and utilizes a\nmulti-modal contrastive learning objective between graph-\ntext modes to ensure consistency between retrieved facts\nand generated text. KnowledgeGPT [Wang et al. , 2023c ]\ngenerates search queries for Knowledge Bases (KB) in code\nformat and includes predefined KB operation functions.\nApart from retrieval, KnowledgeGPT also offers the ca-\npability to store knowledge in a personalized knowledge\nbase to meet individual user needs. These structured data\nsources provide RAG with richer knowledge and context,\ncontributing to improved model performance.\nLLM Generated Content RAG\nObserving that the auxiliary information recalled by RAG\nis not always effective and may even have negative effects,\nsome studies have expanded the paradigm of RAG by delving\ndeeper into the internal knowledge of LLM. This approach\nutilizes the content generated by LLM itself for retrieval, aim-"], "retrieved_docs_id": ["9c38efbac6", "af911eac69", "d0140a8a43", "4c4af4ee13", "4c3ac6cb2e"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How is the \"Faithfulness Score\" calculated in the given context?\n", "true_answer": "The \"Faithfulness Score\" is calculated by comparing the number of statements supported by the context to the total number of statements, using a large language model (LLM) to break down the context into individual statements and verify their consistency with the original context.", "source_doc": "RAG.pdf", "source_id": "716582522f", "retrieved_docs": ["into individual statements using an LLM and verify\nwhether each statement is consistent with the context.\nUltimately, a \u201dFaithfulness Score\u201d is calculated by com-\nparing the number of supported statements to the total\nnumber of statements.\n2. Assessing Answer Relevance: Generate potential ques-\ntions using an LLM and calculate the similarity between\nthese questions and the original question. The Answer\nRelevance Score is derived by calculating the average\nsimilarity of all generated questions to the original ques-\ntion.\n3. Assessing Context Relevance: Extract sentences directly\nrelevant to the question using an LLM, and use the ratio\nof these sentences to the total number of sentences in the\ncontext as the Context Relevance Score.", "the parameter size of the model should not be too large.After\ngenerating the embedding, the next step is to create an in-\ndex, storing the original corpus chunks and embedding in the\nform of key-value pairs for quick and frequent searches in the\nfuture.\nRetrieve\nGiven a user\u2019s input, the same encoding model as in the first\nstage is used to convert the query into a vector. The similarity\nbetween the question embedding and the embedding of the\ndocument blocks in the corpus is calculated. The top K docu-\nment blocks are chosen as the augmented context information\nfor the current question based on the level of similarity.\nGeneration\nThe given question and related documents are combined into\na new prompt. The large language model is then tasked with\nanswering the question based on the provided information. It\nmay be decided whether to allow the large model to use its\nknowledge or only to answer based on the given information,\ndepending on the needs of different tasks. If there is historical", "in pre-trained LLMs. Then we discuss how it can potentially unlock the possibility of reducing\nKV cache size without an accuracy drop. Given the normalized attention score Softmax( QK\u22a4)\nmatrix that is calculated by the query matrix Qand the key matrix K, we set the threshold as one\npercent of the maximum value in each row and calculates the corresponding sparsity.\nObservation. We conduct zero-shot inference with the pre-trained OPT model on the validation\nset of Wiki-Text-103. We plot the layer-wise sparsity within attention blocks and visualize the\nnormalized attention score matrix. The results are presented in Figure 2 (a). We observe that although\nthe LLMs are densely trained, the resulting attention score matrices are highly sparse, with a sparsity\nover95% in almost all layers.\n4", "The calculated arithmetic intensity is 1.97. How-\never, the A100 80G GPU can perform 312 TFLOPs\nand transfer 2TB of data in one second, i.e.,its ideal\narithmetic intensity is 156. This indicates that the\nbottleneck in attention calculation lies in the process\nof data transfer ( i.e.,excessive I/O loading).\nDecoding Efficiency Issues. In this part, we briefly ana-\nlyze the decoding efficiency issues of LLMs. Overall, the\ndecoding process of LLMs can be divided into two stages\nfor overhead analysis: (1) the prefill stage, which computes\nthe hidden states of the input sequence, and (2) the incre-\nmental decoding stage, which generates a token and updates\nhidden states in an auto-regressive manner [321]. As shown\nin the above memory wall box, the arithmetic intensity of\nthe incremental decoding stage is only 1.97, which is far\nfrom the expected value of 156 (calculated according to\nthe standard configuration of A100 80GB GPU). In contrast,", "complex architectures. Vision-language mod-\nels (VLMs) such as VilBERT (Lu et al., 2019)\nand Flamingo (Alayrac et al., 2022), for exam-\nple, combine a language model with an image\nencoder, and are trained on a multi-modal cor-\npus of text-image pairs. This enables them to\npredict how a given sequence of words will con-\ntinue in the context of a given image. VLMs can\n6"], "retrieved_docs_id": ["716582522f", "f6fb53e151", "883f5e2638", "6790d5b05c", "3cba6c188f"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does RAG's generator improve the accuracy and relevance of the generated text?\n", "true_answer": "RAG's generator enhances accuracy and relevance by leveraging the retrieved information, in contrast to conventional generative models.", "source_doc": "RAG.pdf", "source_id": "cd69a480bb", "retrieved_docs": ["cross-attention scores, selecting the highest scoring input to-\nkens to effectively filter tokens. RECOMP [Xuet al. , 2023a ]\nproposes extractive and generative compressors, which gen-\nerate summaries by selecting relevant sentences or syn-\nthesizing document information to achieve multi-document\nquery focus summaries.In addition to that, a novel approach,\nPKG [Luoet al. , 2023 ], infuses knowledge into a white-box\nmodel through directive fine-tuning, and directly replaces the\nretriever module, used to directly output relevant documents\nbased on the query.\n5 Generator\nAnother core component in RAG is the generator, responsible\nfor transforming retrieved information into natural and fluent\ntext. Its design is inspired by traditional language models,\nbut in comparison to conventional generative models, RAG\u2019s\ngenerator enhances accuracy and relevance by leveraging the\nretrieved information. In RAG, the generator\u2019s input includes", "equal size.\n4. Sample s(t)from G, never generating any token\nin the red list.\nend for\nThe method works by generating a pseudo-random red list\nof tokens that are barred from appearing as s(t).The red list\ngenerator is seeded with the prior token s(t\u22121), enabling the\nred list to be reproduced later without access to the entire\ngenerated sequence.\nDetecting the watermark. While producing watermarked\ntext requires access to the language model, detecting the\nwatermark does not. A third party with knowledge of the\nhash function and random number generator can re-produce\nthe red list for each token and count how many times the red\nlist rule is violated. We can detect the watermark by testing\nthe following null hypothesis,\nH0: The text sequence is generated with\nno knowledge of the red list rule.(1)", "retrieved information. In RAG, the generator\u2019s input includes\nnot only traditional contextual information but also relevant\ntext segments obtained through the retriever. This allows the\ngenerator to better comprehend the context behind the ques-\ntion and produce responses that are more information-rich.\nFurthermore, the generator is guided by the retrieved text toensure consistency between the generated content and the re-\ntrieved information. It is the diversity of input data that has\nled to a series of targeted efforts during the generation phase,\nall aimed at better adapting the large model to the input data\nfrom queries and documents. We will delve into the intro-\nduction of the generator through aspects of post-retrieval pro-\ncessing and fine-tuning.\n5.1 How Can Retrieval Results be Enhanced via\nPost-retrieval Processing?\nIn terms of untuned large language models, most studies\nrely on well-recognized large language models like GPT-", "information retrieval process, providing more effective and\naccurate inputs for subsequent LLM processing.\n5.2 How to Optimize a Generator to Adapt Input\nData?\nIn the RAG model, the optimization of the generator is a cru-\ncial component of the architecture. The generator\u2019s task is\nto take the retrieved information and generate relevant text,\nthereby providing the final output of the model. The goal of\noptimizing the generator is to ensure that the generated text is\nboth natural and effectively utilizes the retrieved documents,\nin order to better satisfy the user\u2019s query needs.\nIn typical Large Language Model (LLM) generation tasks,\nthe input is usually a query. In RAG, the main difference\nlies in the fact that the input includes not only a query\nbut also various documents retrieved by the retriever (struc-\ntured/unstructured). The introduction of additional informa-\ntion may have a significant impact on the model\u2019s understand-", "not fall into either boredom or confusion traps. We also show how the observed cross-entropy varies\nwith increase in text length in the human-generated text corresponding to the tokens following the\ncontext for these experiments. Human-generated text converges to some limiting value of cross-\nentropy when the generated text is long enough and does not fall into either boredom or confusion.\nFinally, Fig. 5d shows cross-entropy for the mirostat-generated texts converges to the target cross-\nentropy within a few tokens and maintains the desired value of cross-entropy for long texts.\n5.4 H UMAN EVALUATIONS\nWe evaluated performance using human raters, which further indicated the importance and necessity\nof controlling cross-entropy rates for generating high-quality texts. We generated 300 tokens using\nGPT-2 from a \ufb01xed context with average cross-entropy rate \u03c4\u2208{2.5,3,4,5}using both mirostat\nand top-psampling. We presented these texts and a human-generated 300 word continuation of the"], "retrieved_docs_id": ["cd69a480bb", "50fd7e4e27", "fefa202c19", "7fabdba415", "dbca34fd88"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is the purpose of the source with the given context?\n", "true_answer": "The purpose of the source is to serve as a continually updated source of information, promoting ongoing growth in a certain field by providing brief overviews of key contributions.", "source_doc": "multimodal.pdf", "source_id": "6e2ea7a4ef", "retrieved_docs": ["designed for in-context learning nor to follow instructions in prompts. As one concrete recommendation as\nthe language modeling space matures, we recommend model developers explicitly declare how their models\nshould be evaluated and what the scope is of their generality/when models should be preferred. We believe\nthis disclosure will help to strike a productive balance between the general-purpose possibilities for language\nmodels in the abstract and what is concretely sensible for a given model.\n7 Adaptation via prompting\nAdaptation transforms a raw language model into a system that makes predictions on test instances. In\nshort, we use prompting as our adaptation method with 5 in-context examples (when in-context examples\nare included) as depicted in Figure 23. However, many lower-level details must be specified to fully define the\nadaptation procedure: we discuss important conceptual details here and defer the remainder to Appendix J.", "generate for a given prompt is quite large, so we rely on samples we hope are representative. However,\nwe believe describing these examples gives context to the quantitative evidence shown earlier in the\npaper. Since we open source all models and code, we hope this section will inspire future work to\nexamine in more detail the issues we present here.\nFactual Recall For questions such as \u201cWhat is the capital of Zambia?\u201d all models consistently\ngenerate correct answers, e.g.,\nGuanaco :The capital of Zambia is Lusaka.\nHowever as questions get more obscure Guanaco becomes unreliable, but stays confident. For\ninstance in response to this prompt from HotPotQA [68]:\nUser : In what year was the singer who popularized \u2018I\u2019ll Keep the Lovelight\nBurning\u2019 born?\nGuanaco :Al Jolson is credited with popularizing the song\n\u2018I\u2019ll Keep the Lovelight Burning,\u2019 and he was born in the year\n1886.\nGuanaco generates the wrong popularizer and the wrong birthday (though the birthday given is", "yet analyzed) are publicly available.29\nPrompt name Prompt Target\na_good_translation-source+target Given the following source text: [source sentence], a good L2 translation is: [target sentence]\ngpt3-target What is the L2 translation of the sentence: [source sentence]? [target sentence]\nversion-target if the original version says [source sentence]; then the L2 version should say: [target sentence]\nxglm-source+target L1: [source sentence] = L2: [target sentence]\nTable 5: Four prompts for the WMT\u201914 dataset (Bojar et al., 2014) for MT evaluation.\nAbove, \u201cL1\u201d and \u201cL2\u201d are replaced with language names (e.g. \u201cBengali\u201d and \u201cRussian\u201d).\n4.1.2 Infrastructure\nOur framework extends EleutherAI\u2019s Language Model Evaluation Harness (Gao et al.,\n2021) by integrating it with the promptsource (Bach et al., 2022) library described in\nSection 3.1.4. We release our Prompted Language Model Evaluation Harness as an open\nsource library for people to use. We use this framework in order to run the experiments", "competing proposals (Chen et al., 2021; Leike et al., 2018; Gabriel, 2020). Following Leike et al.\n(2018), our aim is to train models that act in accordance with user intentions. More practically, for\nthe purpose of our language tasks, we use a framework similar to Askell et al. (2021), who de\ufb01ne\nmodels to be aligned if they are helpful, honest, and harmless.\nTo be helpful, the model should follow instructions, but also infer intention from a few-shot prompt\nor another interpretable pattern such as \u201c Q: {question}\\nA: \u201d. Since a given prompt\u2019s intention\ncan be unclear or ambiguous, we rely on judgment from our labelers, and our main metric is labeler\npreference ratings. However, since our labelers are not the users who generated the prompts, there\ncould be a divergence between what a user actually intended and what the labeler thought was\nintended from only reading the prompt.\nIt is unclear how to measure honesty in purely generative models; this requires comparing the model\u2019s", "BigScience Workshop\nA.9.2 Prompts\na_good_translation-l1-l2-source+target\nGiven the following source text in L1: {{translation[l1]}} , a\ngood L2 translation is: ||| {{translation[l2]}}\ngpt-3-l1-l2-target\nQ: What is the {{L2}} translation of {{translation[l2]}} A:\nversion-l1-l2-target\nIf the original version says: {{translation[l1]}}; then the L2\nversion should say:\nxglm-l1-l2-source+target\n{{L1}}: {{translation[l1]}} = {{L2}}:\nA.10 DiaBLa\nPrompts for contextual MT results shown in Table 7.\nA.10.1 Data example\nPrompt name: xglm-source+target\nEnglish: We appear to have stopped moving. = French:\nAnswer:J\u2019ai l\u2019impression qu\u2019on s\u2019est arr\u00eat\u00e9s.\nA.10.2 Prompt\nxglm-source+target\n{% set trg_lang =\"French\" %}{% set src_lang =\"English\" %}\n{% if utterance_meta.lang == \"french\" %}\n{% set trg_lang = \"English\" %}{% set src_lang = \"French\" %}\n{% endif %}\n{{ src_lang }}: {{ orig }} = {{ trg_lang }}: ||| {{ ref }}\nThe dialogue set is bilingual (between native English and native French speakers). In"], "retrieved_docs_id": ["e1cd78ab51", "b8048261ec", "d47ee6e41f", "2d8456e4b2", "675d04d68d"], "reranker_type": "None", "search_type": "text", "rr": 0.0, "hit": 0}, {"question": "What is the task of the vision-language projector in this context?\n", "true_answer": "The task of the vision-language projector is to map the visual patch embeddings into the text feature space.", "source_doc": "multimodal.pdf", "source_id": "6ac775b4ef", "retrieved_docs": ["vision and language models. It commences with a convolutional stem, succeeded by Mobile Con-\nvolution Blocks in the first and second stages, and Transformer Blocks in the third stage. Remark-\nably, ViTamin-XL, with a modest count of 436M parameters, attains an 82.9% ImageNet zero-shot\naccuracy. This outperforms the 82.0% accuracy achieved by EV A-E [80], which operates with a pa-\nrameter count ten times larger, at 4.4B. Simply replacing LLaV A\u2019s image encoder with ViTamin-L\ncan establish new standards in various MLLM performance metrics.\n2.2 Vision-Language Projector\nThe task of the vision-language projector is to map the visual patch embeddings Zvinto the text\nfeature space:\nHv=P(Zv), (2)\nwhere Hvdenotes the projected visual embeddings. The aligned visual features are used as prompts\nand inputted into the language model along with the text embeddings. Vision-language projector\n5", "original LDP[20].\nMamba-based VL-Mamba[18] implements the 2D vision selective scanning(VSS) technique\nwithin its vision-language projector, facilitating the amalgamation of diverse learning method-\nologies. The VSS module primarily resolves the distinct processing approaches between one-\ndimensional sequential processing and two-dimensional non-causal visual information.\nHybrid Structure Honeybee [19] put forward two visual projectors, namely C-Abstractor and D-\nAbstractor, which adhere to two primary design principles: (i) providing adaptability in terms of the\nnumber of visual tokens, and (ii) efficiently maintaining the local context. C-Abstractor, or Convo-\nlutional Abstractor, focuses on proficiently modeling the local context by employing a convolutional\narchitecture. This structure consists of LResNet blocks, followed by adaptive average pooling and\nadditional LResNet blocks, which facilitate the abstraction of visual features to any squared num-", "Figure 5: MobileVLM v2 [17] and Honeybee [19] efficient vision-language projector.\n2.3 Small Language Model\nThe pre-trained small language model(SLM) serves as the core component of MLLMs, endowing\nit with many outstanding capabilities, such as zero-shot generalization, instruction following, and\nin-context learning. The SLM accepts input sequences containing multiple modalities and outputs\ncorresponding text sequences. A text tokenizer is typically bundled with the SLM, mapping text\nprompts Xqto the text tokens Hq. The text tokens Hqand the visual tokens Hvare concatenated as\nthe input of the language model, which outputs the final response sequence Yain an autoregressive\nmanner:\np(Ya|Hv, Hq) =LY\ni=1p(yi|Hv, Hq, y<i), (3)\nwhere Ldenotes the length of Ya. As the SLM contributes the vast majority of MLLM parameters,\nits selection is closely related to the lightweight nature of MLLM. In comparison to conventional", "Figure 4: BRA VE [12] concatenates features from K different Vision Encoders in a sequence-wise\nmanner. These concatenated features are then reduced by the MEQ-Former.\navoids the high cost of training an end-to-end multimodal model from scratch and effectively lever-\nages the capabilities of pre-trained language and vision models.\nMLP-based As outlined in [7, 54], the vision-language projector is typically realized using a\nstraightforward, learnable Linear Projector or a Multi-Layer Perceptron (MLP), i.e., several linear\nprojectors interleaved with non-linear activation functions, as illustrated in Table.1.\nAttention-based BLIP2 [15] introduces Q-Former, a lightweight transformer, which employs a\nset of learnable query vectors to extract visual features from a frozen vision model. Perceiver\nResampler, proposed by Flamingo[16], contemplates the use of learnable latent queries as Q in\ncross-attention, while image features are unfolded and concatenated with Q to serve as K and V in", "Figure 14: Training stages of efficient MLLMs.\nusing a standard cross-entropy loss function:\nmax\n\u03b8LX\ni=1logp\u03b8(xi|Xv, Xinstruct , Xa,<i), (4)\nwhere Lis the length of Xaand\u03b8denotes the trainable parameters. In order to better align different\nmodalities of knowledge and avoid catastrophic forgetting during the pre-training stage, \u03b8typically\nincludes only a learnable modality interface, i.e., a vision-language projector.\nWhich part to unfreeze? Considering that only training the connector may not well align the\nvision and text information when using SLMs, TinyLlava[23] also opt to partially freeze pre-\ntrained modules (i.e. vision encoder and SLM) to activate more parameters for learning alignment.\nVILA[49] reveals that updating the base LLM throughout the pre-training stage is essential to in-\nheriting some of the appealing LLM properties like in-context learning. ShareGPT4V[55] found\nthat unfreezing more parameters, particularly in the latter half of the vision encoder\u2019s layers, proves"], "retrieved_docs_id": ["6ac775b4ef", "3238be52f9", "00e8c4ea32", "1fea51e26c", "1bd741e7c9"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How many GPU hours are needed to train MiniGPT-v2?\n", "true_answer": "Over 800 GPU hours are needed to train MiniGPT-v2, based on NVIDIA A100 GPUs.", "source_doc": "multimodal.pdf", "source_id": "2f6f7fb082", "retrieved_docs": ["However, scalability comes at the cost of high resource demands, which hinders the development\nand deployment of large models. For example, the training of MiniGPT-v2 necessitates a total of\nover 800 GPU hours, as calculated based on NVIDIA A100 GPUs [9]. This imposes a substantial\nexpense that is difficult for researchers outside of major enterprises to bear. Aside from training,\n1* Equal contribution.\n2Yizhang Jin is an intern in Tencent, and Jian Li is the project leader.\nPreprint. Under review.arXiv:2405.10739v1  [cs.CV]  17 May 2024", "Pythia: A Suite for Analyzing Large Language Models\nD. Training Hardware and GPU hours\nWe additionally report the number of accelerators used to train each Pythia model size, alongside counts of total GPU-hours\nrequired for training our models at the throughputs that we achieve.\nModel Size GPU Count Total GPU hours required\n70 M 32 510\n160 M 32 1,030\n410 M 32 2,540\n1.0 B 64 4,830\n1.4 B 64 7,120\n2.8 B 64 14,240\n6.9 B 128 33,500\n12 B 256 72,300\nTotal 136,070\nTable 5. Model sizes in the Pythia suite, number of GPUs used during training, and the total number of GPU hours, calculated via\n(iteration time (s) \u00d7number of iterations \u00d7number of GPUs \u00f73600 s/hour). All GPUs are A100s with 40GB of memory.\nHere \u201ctotal\u201d refers to training one model of each size in our suite. For this paper, we trained two models of each size (one on\nthe Pile and one on the Pile deduplicated) and had to retrain both model suites an additional time as discussed in Appendix B.", "including the mPLUG-Owl series[3, 4], InternVL [5], EMU [6], LLaV A [7], InstructBLIP [8],\nMiniGPT-v2 [9], and MiniGPT-4[10]. These models circumvent the computational cost of train-\ning from scratch by effectively leveraging the pre-training knowledge of each modality. MLLMs\ninherit the cognitive capabilities of LLMs, showcasing numerous remarkable features such as robust\nlanguage generation and transfer learning abilities. Moreover, by establishing strong representa-\ntional connections and alignments with other modality-based models, MLLMs can process inputs\nfrom multiple modalities, significantly broadening their application scope.\nThe success of MLLMs is largely attributed to the scaling law: the performance of an AI model\nimproves as more resources, such as data, computational power, or model size, are invested into it.\nHowever, scalability comes at the cost of high resource demands, which hinders the development", "640\u00d7640 pixels \u2013 the latter requiring the effective modeling\nof sequences with over 1.2M tokens. This generation task\nbecomes increasingly challenging as the image\u2019s resolution\ngrows: doing well on this task requires the modeling of\nlocal patterns (textures, lines, etc.) and long-range context\nthat provides information about the high level structure of\nthe image. Inspired by recent works in Vision Transform-\ners (Dosovitskiy et al., 2020), we model image data patch\nby patch (more details can be found in Appendix D.1).\n6.2. Comparison with State of the Art\nWe train a large MEGABYTE model on ImageNet 64x64\nwith Global and Local models sized 2.7B and 350M parame-\nters, respectively, for 1.4T tokens. We estimate that training\nthis model consumed less than half the GPU hours we would\nhave needed to reproduce the best PerceiverAR model de-\nscribed by (Hawthorne et al., 2022). As shown in Table 4,\nMEGABYTE matches the state-of-the-art performance of", "largest publicly available models to date finetunable\non a single GPU. Using QLORA, we train the Gua-\nnaco family of models, with the second best model\nreaching 97.8% of the performance level of ChatGPT\non the Vicuna [ 10] benchmark, while being trainable\nin less than 12 hours on a single consumer GPU;\nusing a single professional GPU over 24 hours we\nachieve 99.3% with our largest model, essentially\nclosing the gap to ChatGPT on the Vicuna bench-\nmark. When deployed, our smallest Guanaco model\n(7B parameters) requires just 5 GB of memory and outperforms a 26 GB Alpaca model by more than\n20 percentage points on the Vicuna benchmark (Table 6).\nQLORAintroduces multiple innovations designed to reduce memory use without sacrificing per-\nformance: (1) 4-bit NormalFloat , an information theoretically optimal quantization data type for\nnormally distributed data that yields better empirical results than 4-bit Integers and 4-bit Floats."], "retrieved_docs_id": ["2f6f7fb082", "0a2bdce1fe", "7a547e4fbb", "8518fe7b13", "da7a5fe5f7"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is the primary optimization for enhancing the efficiency of efficient MLLMs?\n", "true_answer": "The primary optimization for enhancing the efficiency of efficient MLLMs includes handling high-resolution images, compressing vision tokens, implementing efficient structures, and utilizing compact language models.", "source_doc": "multimodal.pdf", "source_id": "de74717e46", "retrieved_docs": ["the domain of efficient MLLMs. In addition to the survey, we have established a GitHub repository\nwhere we compile the papers featured in the survey, organizing them with the same taxonomy at\nhttps://github.com/lijiannuist/Efficient-Multimodal-LLMs-Survey. We will actively maintain it and\nincorporate new research as it emerges.\n2 Architecture\nFollowing the standard MLLM framework, efficient MLLMs can be divided into three main mod-\nules: a visual encoder gtasked with receiving and processing visual inputs, a pre-trained language\nmodel that manages the received multimodal signals and performs reasoning, and a visual-language\nprojector Pwhich functions as a bridge to align the two modalities. To enhance the efficiency of the\ngeneral MLLMs, the primary optimization lies in handling high-resolution images, compressing vi-\nsion tokens, implementing efficient structures, and utilizing compact language models, among other", "for resource-sensitive tasks was provided, with some works employing visual token compression\nto boost efficiency, enabling the transfer of MLLM capabilities to resource-intensive tasks such as\nhigh-resolution image and video understanding[35, 39, 14, 40].\nIn this survey, we aim to present an exhaustive organization of the recent advancements in the rapidly\nevolving field of efficient MLLMs, as depicted in Figure.2. We organize the literature in a taxonomy\nconsisting of six primary categories, encompassing various aspects of efficient MLLMs, including\narchitecture ,efficient vision ,efficient LLMs ,training ,data and benchmarks , and applications .\n\u2022 Architecture focuses on the MLLM framework developed by efficient techniques to reduce\nthe computational cost. The architecture is composed of multiple modality-based funda-\nmental models, exhibits characteristics distinct from single-modal models, thus promoting\nthe development of novel technologies.", "Figure 11: Organization of efficient large language models advancements.\nOccupying a significant majority of the parameter volume in MLLMs, LLM serves as a crucial entry\npoint for enhancing the efficiency of MLLMs. In this section, similar to the survey paper [160], we\nprovide a brief overview of the research progress in efficient LLMs, offering inspiration for the\ndevelopment of Efficient MLLMs.\n4.1 Attention\nIn the standard self-attention mechanism, the time complexity is O(n2), where nis the sequence\nlength. This quadratic complexity arises due to the pairwise interactions between all input tokens,\nwhich can lead to scalability issues, especially when dealing with long sequences in LLMs. To\ntackle this, researchers have developed techniques to expedite attention mechanisms and reduce\ntime complexity, such as sharing-based attention, feature information reduction, kernelization or\nlow-rank, fixed and learnable pattern strategies, and hardware-assisted attention.", "beneficial when learning larger and more diverse datasets, showing the choice of training recipe is\nclosely related to the quality of the data.\nMulti-stage pre-training To maximize compute efficiency, Idefics2 [48] decomposes the pre-\ntraining in two stages. In the first stage, it limits the max image resolution to 384 pixels and use\na large global batch size. In the second stage, PDF documents are introduced to increase image\nresolution to a maximum of 980 pixels for the text to be legible.\n5.2 Instruction-Tuning\nInstruction-tuning (IT) is a crucial aspect of efficient MLLMs, which aims to fine-tune the models on\nspecific tasks by leveraging task-specific instructions. This approach is built upon the concept that\nMLLMs can understand and follow instructions provided in natural language, thereby enhancing\ntheir performance on the target task. The benefits of IT in efficient MLLMs are manifold. Firstly,", "and preserving user privacy.\nIn light of these challenges, there has been growing attention on the study of efficient MLLMs.\nThe primary objective of these endeavors is to decrease the resource consumption of MLLMs\nand broaden their applicability while minimizing performance degradation. Research on efficient\nMLLMs began with replacing large language models with lightweight counterparts and performing\ntypical visual instruction tuning. Subsequent studies further enhanced capabilities and expanded\nuse cases in the following ways: (1) lighter architectures were introduced with an emphasis on ef-\nficiency, aiming to reduce the number of parameters or computational complexity[25, 13, 18]; (2)\nmore specialized components were developed, focusing on efficiency optimizations tailored to ad-\nvanced architectures or imbuing specific properties, such as locality[19, 17, 12]; and (3) support\nfor resource-sensitive tasks was provided, with some works employing visual token compression"], "retrieved_docs_id": ["de74717e46", "cd55ca1477", "323641b323", "8bb6ba6dfa", "04b6ebc53f"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How is a foundation model adapted to a specific domain using DAPT?\n", "true_answer": "DAPT, or Domain-Adaptive Pre-Training, adapts a foundation model to a specific domain by continued pretraining with in-domain data. In this case, the domain-specific pre-training dataset is constructed from a collection of proprietary hardware-related code and natural language datasets.", "source_doc": "ChipNemo.pdf", "source_id": "926168a67f", "retrieved_docs": ["propose to combine the following techniques: Domain-\nAdaptive Pre-Training (DAPT) (Gururangan et al., 2020) of\nfoundation models with domain-adapted tokenizers, model\nalignment using general and domain-specific instructions,\nand retrieval-augmented generation (RAG) (Lewis et al.,\n2021b) with a trained domain-adapted retrieval model.\nAs shown in Figure 1, our approach is to start with a base\nfoundational model and apply DAPT followed by model\nalignment. DAPT, also known as continued pretraining with\nin-domain data, has been shown to be effective in areas such\nas biomedical and computer science publications, news, and\nreviews. In our case, we construct our domain-specific pre-\ntraining dataset from a collection of proprietary hardware-\nrelated code (e.g. software, RTL, verification testbenches,\netc.) and natural language datasets (e.g. hardware specifi-\ncations, documentation, etc.). We clean up and preprocess\nthe raw dataset, then continued-pretrain a foundation model", "the raw dataset, then continued-pretrain a foundation model\nwith the domain-specific data. We call the resulting model a\nChipNeMo foundation model. DAPT is done on a fraction\nof the tokens used in pre-training, and is much cheaper, only\nrequiring roughly 1.5% of the pretraining compute.\nLLM tokenizers convert text into sequences of tokens for\ntraining and inference. A domain-adapted tokenizer im-\nproves the tokenization efficiency by tailoring rules and\npatterns for domain-specific terms such as keywords com-\nmonly found in RTL. For DAPT, we cannot retrain a new\ndomain-specific tokenizer from scratch, since it would make\nthe foundation model invalid. Instead of restricting Chip-\nNeMo to the pre-trained general-purpose tokenizer used\nby the foundation model, we instead adapt the pre-trained\ntokenizer to our chip design dataset, only adding new tokens\nfor domain-specific terms.\nChipNeMo foundation models are completion models whichrequire model alignment to adapt to tasks such as chat.", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ndomain-specific data improves the retriever hit rate\nby 30% over a pre-trained state-of-the-art retriever, in\nturn improving overall quality of RAG responses.\nThe paper is organized as follows. Section 2 outlines do-\nmain adaptation and training methods used including the\nadapted tokenizer, DAPT, model alignment, and RAG. Sec-\ntion 3 describes the experimental results including human\nevaluations for each application. Section 4 describes rel-\nevant LLM methods and other work targeting LLMs for\nchip design. Finally, detailed results along with additional\nmodel training details and examples of text generated by the\napplication use-cases are illustrated in the Appendix.\n2. ChipNeMo Domain Adaptation Methods\nChipNeMo implements multiple domain adaptation tech-\nniques to adapt LLMs to the chip design domain. These\ntechniques include domain-adaptive tokenization for chip\ndesign data, domain adaptive pretraining with large corpus", "models: LLaMA2 7B/13B/70B. Each DAPT model is ini-\ntialized using the weights of their corresponding pretrained\nfoundational base models. We name our domain-adapted\nmodels ChipNeMo . We employ tokenizer augmentation\nas depicted in Section 2.1 and initialize embedding weight\naccordingly (Koto et al., 2021). We conduct further pre-\ntraining on domain-specific data by employing the standard\nautoregressive language modeling objective. All model\ntraining procedures are conducted using the NVIDIA NeMo\nframework (Kuchaiev et al., 2019), incorporating techniques\nsuch as tensor parallelism (Shoeybi et al., 2019) and flash\nattention (Dao et al., 2022) for enhanced efficiency.\nOur models undergo a consistent training regimen with\nsimilar configurations. A small learning rate of 5\u00b710\u22126\nis employed, and training is facilitated using the Adam\noptimizer, without the use of learning rate schedulers. The\nglobal batch size is set at 256, and a context window of 4096", "mark results are presented in Appendix A.6. Our research\nfindings can be summarized as follows:\n\u2022DAPT exerts a substantial positive impact on tasks\nwithin the domain itself. This effect is manifested in\nsignificant improvements in internal design knowledge\nas well as general circuit design knowledge.\n\u2022DAPT models exhibit a slight degradation in perfor-mance on open-domain academic benchmarks.\n\u2022The use of larger and more performant foundational\nmodels yields better zero-shot results on domain-\nspecific tasks. Furthermore, the employment of su-\nperior base models results in enhanced domain models\npost-DAPT, leading to heightened performance on in-\ndomain tasks.\n\u2022Improvements attributed to DAPT with in-domain\ntasks exhibit a positive correlation with model size,\nwith larger models demonstrating more pronounced\nenhancements in domain-specific task performance.\n3.3. Training Ablation Studies\nFor our ablation studies, we conducted multiple rounds of"], "retrieved_docs_id": ["926168a67f", "273b593026", "df0b9868f2", "7eb44773ae", "1769e97a8f"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does the DSP framework enhance the generation quality in the RAG method?\n", "true_answer": "The DSP framework enhances the generation quality in the RAG method by passing natural language text between a frozen Language Model (LM) and a Retrieval Model (RM), providing the model with more informative context.", "source_doc": "RAG.pdf", "source_id": "0264588829", "retrieved_docs": ["bility to tailor models according to specific requirements and\ndata formats, reducing the resource consumption compared\nto the pre-training phase while retaining the ability to adjust\nthe model\u2019s output style.\nInference Stage\nThe integration of RAG methods with LLM has become a\nprevalent research direction in the inference phase. Notably,\nthe research paradigm of Naive RAG relies on incorporating\nretrieval content during the inference stage.\nTo overcome the limitations of Naive RAG, researchers\nhave introduced richer context in the RAG during the in-\nference phase. The DSP [Khattab et al. , 2022 ]framework re-\nlies on a complex pipeline that involves passing natural lan-\nguage text between a frozen Language Model (LM) and a Re-\ntrieval Model (RM), providing the model with more informa-\ntive context to enhance generation quality. PKG equips LLMs\nwith a knowledge-guided module that allows access to rele-\nvant knowledge without altering the parameters of LLMs, en-", "Recite-Read [Sunet al. , 2022 ]transforms external re-\ntrieval into retrieval from model weights, initially hav-\ning LLM memorize task-relevant information and gener-\nate output for handling knowledge-intensive natural lan-\nguage processing tasks.\n\u2022Adjusting the Flow between Modules In the realm of\nadjusting the flow between modules, there is an empha-\nsis on enhancing interaction between language models\nand retrieval models. DSP [Khattab et al. , 2022 ]intro-\nduces the Demonstrate-Search-predict framework, treat-\ning the context learning system as an explicit program\nrather than a terminal task prompt to address knowledge-\nintensive tasks. ITER-RETGEN [Shao et al. , 2023 ]\nutilizes generated content to guide retrieval, itera-\ntively performing \u201cretrieval-enhanced generation\u201d and\n\u201cgeneration-enhanced retrieval\u201d in a Retrieve-Read-\nRetrieve-Read flow. Self-RAG [Asai et al. , 2023b ]fol-\nlows the decide-retrieve-reflect-read process, introduc-", "lows the decide-retrieve-reflect-read process, introduc-\ning a module for active judgment. This adaptive and\ndiverse approach allows for the dynamic organization of\nmodules within the Modular RAG framework.\n4 Retriever\nIn the context of RAG, the \u201dR\u201d stands for retrieval, serving\nthe role in the RAG pipeline of retrieving the top-k relevant\ndocuments from a vast knowledge base. However, crafting\na high-quality retriever is a non-trivial task. In this chapter,\nwe organize our discussions around three key questions: 1)\nHow to acquire accurate semantic representations? 2) How\nto match the semantic spaces of queries and documents? 3)\nHow to align the output of the retriever with the preferences\nof the Large Language Model ?\n4.1 How to acquire accurate semantic\nrepresentations?\nIn RAG, semantic space is the multidimensional space where\nquery and Document are mapped. When we perform re-\ntrieval, it is measured within the semantic space. If the se-", "ments to assess the relevance between the retrieved doc-\numents and the query. This enhances the robustness of\nRAG [Yuet al. , 2023a ].\nNew Pattern\nThe organizational approach of Modular RAG is flexible,\nallowing for the substitution or reconfiguration of modules\nwithin the RAG process based on specific problem con-\ntexts. For Naive RAG, which consists of the two modules\nof retrieval and generation ( referred as read or sythesis in\nsome literature), this framework offers adaptability and abun-\ndance. Present research primarily explores two organizational\nparadigms, involving the addition or replacement of modules,\nas well as the adjustment of the organizational flow between\nmodules.\n\u2022Adding or Replacing Modules\nThe strategy of adding or replacing modules entails\nmaintaining the structure of Retrieval-Read while intro-\nducing additional modules to enhance specific function-\nalities. RRR [Maet al. , 2023a ]proposes the Rewrite-\nRetrieve-Read process, utilizing LLM performance as a", "ules and offers more flexibility.\nIn the subsequent chapters, we further analyze three key\nparts of RAG in detail. Chapter 4 introduces the retriever of\nRAG, how to process corpora to obtain better semantic repre-\nsentations, how to mitigate the semantic gap between Query\nand documents, and how to adjust the retriever to fit the gen-\nerator. Chapter 5 explains how the generator obtains better\ngeneration results by post-processing retrieved documents,\navoiding the \u201dLost in the middle\u201d issue, as well as methods to\nadjust the generator to fit the retriever. Subsequently, in Chap-\nter 6, we review the current retrieval enhancement methods\nfrom the aspects of the retrieval stage, retrieval data sources,\nand retrieval process.\nChapter 7 explains how to evaluate current RAG methods,\nincluding evaluation, key indicators, and current evaluation\nframeworks Finally, we provided an outlook on the poten-\ntial future research directions for RAG. As a method that"], "retrieved_docs_id": ["0264588829", "dfac20a7d8", "8fe8499442", "a016e8d322", "8cdb0d5ff2"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does the Funnel-Transformer model address the issue of computational efficiency in attention mechanisms?\n", "true_answer": "The Funnel-Transformer model addresses the issue of computational efficiency in attention mechanisms by progressively reducing the sequence size of hidden representations in self-attention models.", "source_doc": "multimodal.pdf", "source_id": "3045b9cbb1", "retrieved_docs": ["query heads into several groups, with each group\u2019s query heads sharing a common key-value head,\nthereby establishing a rigorous equilibrium between effectiveness and computational cost.\nFeature Information Reduction Feature Information Reduction, as evidenced by models such as\nFunnel-Transformer[145] and Set Transformer[146], addresses the crucial need for computational\nefficiency in attention mechanisms, specifically by reducing the dimensionality or quantity of input\nfeatures while preserving the essential information embedded within the data. A key motivation\nbehind this strategy stems from the potential redundancy in maintaining full-length hidden repre-\nsentations across all layers in Transformer models. Funnel-Transformer [145] tackles this issue by\nprogressively reducing the sequence size of hidden representations in self-attention models, such as\n14", "UniNet [102] introduced context-aware down-sampling modules improving information accommo-\ndation by transformer and MLP operators.\nOptimization of Attention Mechanisms Methods focus on reducing computational complexity\nby introducing adaptive attention, learning sparse attention patterns, and dynamically adjusting at-\ntention mechanisms. Fayyaz et al. [135] implemented adaptive attention by scoring and adaptively\nsampling significant tokens. PatchMerger [103] extracted global information among regional to-\nkens and exchanged local self-attention with information among regional tokens via self-attention.\nDynamicViT [104] proposed an attention masking strategy to differentiably prune tokens by block-\ning interactions with other tokens. Additionally, Sepvit [105] conducted local-global information\ninteraction within and across windows using depthwise separable self-attention. These methods\ncollectively optimize attention mechanisms, enhancing computational efficiency and performance.", "sequence lengths, as memory constraints limit batching across examples. Recent work has achieved\nsignificant improvements in computational efficiency through factorization tricks [ 21] and conditional\ncomputation [ 32], while also improving model performance in case of the latter. The fundamental\nconstraint of sequential computation, however, remains.\nAttention mechanisms have become an integral part of compelling sequence modeling and transduc-\ntion models in various tasks, allowing modeling of dependencies without regard to their distance in\nthe input or output sequences [ 2,19]. In all but a few cases [ 27], however, such attention mechanisms\nare used in conjunction with a recurrent network.\nIn this work we propose the Transformer, a model architecture eschewing recurrence and instead\nrelying entirely on an attention mechanism to draw global dependencies between input and output.\nThe Transformer allows for significantly more parallelization and can reach a new state of the art in", "tensors in the routing module or initializing the model with\na smaller range have been introduced [25]. More recently,\nthere is widespread speculation that GPT-4 has been devel-\noped based on the MoE architecture, but without official\nverification.\nEmergent Architectures. The conventional Transformer ar-\nchitectures typically suffer from quadratic computational\ncomplexity. Because of this, efficiency has become an im-\nportant issue when training and making inference with\nlong inputs. To improve efficiency, some studies aim to\ndevise new architectures for language modeling, including\nparameterized state space models ( e.g., S4 [247], GSS [248],\nand H3 [249]), long convolutions like Hyena [250], and\nTransformer-like architectures that incorporate recursive up-\ndate mechanisms ( e.g., RWKV [251] and RetNet [252]). The\nkey merits of these new architectures are twofold. First,\nthese models can generate outputs recursively like RNNs,", "more results.\nFigure 7: Cumulative time on text generation for LLMs.\nUnlike transformers, RWKV exhibits linear scaling.\n7 Future Work\nThere are several promising directions for future\nwork on the RWKV architecture. Work can be\ndone to increase model expressivity by enhancing\nthe time-decay formulations and exploring initial\nmodel states while maintaining efficiency.\nThe RWKV computational efficiency can be\nfurther improved by applying a parallel scan in\nthewkv tstep to reduce the computational cost to\nO(Blog(T)d).\nThe mechanisms used in RWKV can be applied\nto encoder-decoder architectures, potentially re-\nplacing the cross-attention mechanism. This could\nbe applicable in seq2seq or multimodal settings,\nthereby enhancing efficiency during both training\nand inference.\nRWKV\u2019s state (or context ) can be leveraged for\ninterpretability, predictability in sequence data, and\nsafety. Manipulating the hidden state could also\nguide behavior and allow greater customizability\nthrough prompt tuning."], "retrieved_docs_id": ["3045b9cbb1", "e7939ae097", "c998dcd0be", "d194b5f625", "a34d33f5e3"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is the architecture of the C-Abstractor in the Hybrid Structure Honeybee project?\n", "true_answer": "The C-Abstractor, or Conventional Abstractor, in the Hybrid Structure Honeybee project employs a convolutional architecture consisting of LResNet blocks, followed by adaptive average pooling and additional LResNet blocks for abstracting visual features.", "source_doc": "multimodal.pdf", "source_id": "3238be52f9", "retrieved_docs": ["original LDP[20].\nMamba-based VL-Mamba[18] implements the 2D vision selective scanning(VSS) technique\nwithin its vision-language projector, facilitating the amalgamation of diverse learning method-\nologies. The VSS module primarily resolves the distinct processing approaches between one-\ndimensional sequential processing and two-dimensional non-causal visual information.\nHybrid Structure Honeybee [19] put forward two visual projectors, namely C-Abstractor and D-\nAbstractor, which adhere to two primary design principles: (i) providing adaptability in terms of the\nnumber of visual tokens, and (ii) efficiently maintaining the local context. C-Abstractor, or Convo-\nlutional Abstractor, focuses on proficiently modeling the local context by employing a convolutional\narchitecture. This structure consists of LResNet blocks, followed by adaptive average pooling and\nadditional LResNet blocks, which facilitate the abstraction of visual features to any squared num-", "system\u2019s overall architecture. But to the extent\nthat the relationship between words and things\nfor a given VLM-based system is di\ufb00erent than\nit is for human language-users, it might be pru-\ndent not to take literally talk of what that system\n\u201cknows\u201d or \u201cbelieves\u201d.\n9 What About Embodiment?\nHumans are members of a community of\nlanguage-users inhabiting a shared world, and\n11Of course, there is causal structure to the computa-\ntionscarried out by the model during inference. But this\nis not the same as there being causal relations between\nwords and the things those words are taken to be about.this primal fact makes them essentially di\ufb00erent\nto large language models. Human language users\ncan consult the world to settle their disagree-\nments and update their beliefs. They can, so to\nspeak, \u201ctriangulate\u201d on objective reality. In iso-\nlation, an LLM is not the sort of thing that can\ndo this, but in application, LLMs are embedded\nin larger systems. What if an LLM is embedded", "4.6.1 Architecture\nTable 6investigates the e\ufb00ects of the architecture (block) and its inner SSM layer (Figure 3). We \ufb01nd that\n\u2022Among previous non-selective (LTI) SSMs, which are equivalent to global convolutions, performance is very\nsimilar.\n\u2022Replacing the complex-valued S4 variant from previous work with a real-valued one does not a\ufb00ect performance\nmuch, suggesting that (at least for LM) real-valued SSMs may be a better choice when accounting for hardware\ne\ufb03ciency.\n\u2022Replacing any of these with a selective SSM (S6) signi\ufb01cantly improves performance, validating the motivation\nof Section 3.\n\u2022The Mamba architecture performs similarly to the H3 architecture (and seems slightly better when using a\nselective layer).\nWe also investigate interleaving the Mamba block with other blocks such as MLP (a traditional architecture) MHA\n(a hybrid attention architecture) in Appendix E.2.2 .\n4.6.2 Selective SSM", "which are unaffordable for low-resource settings. Therefore, it is straight-forward to ask, can we design a\nlightweight method to generate adaptive models with comparable accuracy using signi\ufb01cantly less time\nand resource consumption?\nIn this paper, we propose LadaBERT (Lightweight adaptation of BERT through hybrid model com-\npression) to tackle this problem. Speci\ufb01cally, LadaBERT is based on an iterative hybrid model com-\npression framework consisting of weighting pruning, matrix factorization and knowledge distillation.\nInitially, the architecture and weights of student model are inherited from the BERT teacher. In each\niteration, the student model is \ufb01rst compressed by a small ratio based on weight pruning and matrix\nfactorization, and is then \ufb01ne-tuned under the guidance of teacher model through knowledge distillation.\nBecause weight pruning and matrix factorization help to generate better initial and intermediate status", "people and institutions might legally \u201cown\u201d that data, making them data rights-holders. As\nmachinelearning developersgatherandcollatethatdataintoever-largerdatasetstosupport\ntraining larger models, it becomes increasingly important to develop new ways of accounting\nfor the interests of all parties involved \u2013 developers, data subjects, and rights-holders alike.\nThe BigScience effort aimed to address these needs through a multidisciplinary lens\ncombining technical, legal, and sociological expertise. The group focused on two main\ninterrelated goals at two different time scales: the design of a structure for long-term inter-\nnational data governance that prioritizes the agency of the data rights-holders, and concrete\nrecommendations for handling the data used directly in the BigScience project. Progress on\nthe first goal is presented in the work of Jernite et al. (2022), which further motivates the\nneeds and requirements of data governance, and outlines the structure needed for a network"], "retrieved_docs_id": ["3238be52f9", "2d1119f947", "09f3db1093", "33da8d53fc", "09a5227bb7"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does OpenAI's embeddings-ada-02 handle context compared to full-size language models like GPT-4?\n", "true_answer": "OpenAI's embeddings-ada-02 is more sophisticated than static embedding models and can capture a certain level of context, but it may not be as sensitive to context as the latest full-size language models like GPT-4.", "source_doc": "RAG.pdf", "source_id": "5b18d3e068", "retrieved_docs": ["as much context as possible to ensure \u201chealthy\u201d out-\ncomes.Built upon the principles of large language mod-\nels like GPT, OpenAI\u2019s embeddings-ada-02 is more so-\nphisticated than static embedding models, capturing a\ncertain level of context. While it excels in contextual\nunderstanding, it may not exhibit the same sensitivity to\ncontext as the latest full-size language models like GPT-\n4.\nPost-Retrieval Process\nAfter retrieving valuable context from the database, merg-\ning it with the query for input into LLM poses challenges.\nPresenting all relevant documents to the LLM at once may\nexceed the context window limit. Concatenating numerous\ndocuments to form a lengthy retrieval prompt is ineffective,\nintroducing noise and hindering the LLM\u2019s focus on crucial\ninformation. Additional processing of the retrieved content is\nnecessary to address these issues.\n\u2022ReRank: Re-ranking to relocate the most relevant in-\nformation to the edges of the prompt is a straightfor-", "2023; Rubin and Berant, 2023, inter alia ) have\nresulted in language models with larger context\nwindows (e.g., 4096, 32K, and even 100K tokens),\nbut it remains unclear how these extended-context\nlanguage models make use of their input contexts\nwhen performing downstream tasks.\nWe empirically investigate this question via\ncontrolled experiments with a variety of state-of-\nthe-art open (MPT-30B-Instruct, LongChat-13B\n(16K)) and closed (OpenAI\u2019s GPT-3.5-Turbo and\nAnthropic\u2019s Claude-1.3) language models in set-\ntings that require accessing and using information\nwithin an input context. In particular, our experi-\nments make controlled changes to the input context\nsize and the position of the relevant information\nwithin the input context and study their effects on\nlanguage model performance. If language models\ncan robustly use information within long input con-\ntexts, then their performance should be minimally\naffected by the position of the relevant information\nin the input context.", "tings. Another trend is to imitate closed-source\nmodels like ChatGPT by collecting a dataset of\nAPI outputs (against OpenAI\u2019s terms and condi-\ntions) and fine-tuning an open-source LM with\nit [540]. However, Gudibande et al. [180] point\nout that such imitation models are only good at\nmimicking the proprietary model\u2019s style but not\nits content, a distinction that has been discussed\nextensively in the causality literature [ 253]. They\nconclude that substantial capability gaps between\nfine-tuned open-sourced and closed-source models\nremain, motivating future work for better imitation\ndata.\n2.2 Tokenizer-Reliance\nTokenization is the process of breaking a sequence\nof words or characters into smaller units called\ntokens, such that they can be fed into the model.\nOne common tokenization approach is subword to-\nkenization , where we split words into smaller units,\ncalled subwords orWordPieces [490]. The goal\nis to handle rare and out-of-vocabulary words in", "limited GPU memory, but it does not target the online serv-\ning settings. OLLA [ 48] optimizes the lifetime and location\nof tensors to reduce fragmentation, but it does not do fine-\ngrained block-level management or online serving. FlashAt-\ntention [ 13] applies tiling and kernel optimizations to reduce\nthe peak memory of attention computation and reduce I/O\ncosts. This paper introduces a new idea of block-level mem-\nory management in the context of online serving.\n10 Conclusion\nThis paper proposes PagedAttention, a new attention algo-\nrithm that allows attention keys and values to be stored\nin non-contiguous paged memory, and presents vLLM, a\nhigh-throughput LLM serving system with efficient mem-\nory management enabled by PagedAttention. Inspired by\noperating systems, we demonstrate how established tech-\nniques, such as virtual memory and copy-on-write, can be\nadapted to efficiently manage KV cache and handle various\ndecoding algorithms in LLM serving. Our experiments show", "i\ufb01cation to the perplexity calculation. Unlike RNN-based\nlanguage models, transformers operate on a \ufb01xed window in-\nput size. Therefore they cannot fully calculate P(t|0 :t\u22121)\nand can only calculate P(t|t\u2212w:t\u22121)wherewis the\nsize of our context: 1024 tokens. However, calculating this\nvalue for every token in our dataset is prohibitively expen-\nsive since we must compute approximately Tevaluations\nof awsized context. To evaluate our models ef\ufb01ciently we\ntake a middle ground approach termed overlapping evalu-\nation where we advance the sliding window by some over-\nlapoeach time and only compute the cross entropy losses\ncorresponding to the last otokens of the window. In our\nexperiments we utilize an overlap oof 32, and compute\nlosses over all sliding windows in such a fashion.\nE.2. LAMBADA Cloze Accuracy\nThe capability to handle long term contexts is crucial for\nstate of the art language models and is a necessary prerequi-\nsite for problems like long-form generation and document-"], "retrieved_docs_id": ["5b18d3e068", "af5472ed0b", "c2683bcf9e", "cfe8c12649", "608bbf7ba8"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does Retrieval-Augmented Generation (RAG) improve the performance of large language models?\n", "true_answer": "RAG improves the performance of large language models by retrieving relevant information from external knowledge bases before answering questions, which enhances answer accuracy, reduces model hallucination, and is particularly beneficial for knowledge-intensive tasks.", "source_doc": "RAG.pdf", "source_id": "af911eac69", "retrieved_docs": ["Retrieval-Augmented Generation for Large Language Models: A Survey\nYunfan Gao1,Yun Xiong2,Xinyu Gao2,Kangxiang Jia2,Jinliu Pan2,Yuxi Bi3,Yi\nDai1,Jiawei Sun1and Haofen Wang1,3\u2217\n1Shanghai Research Institute for Intelligent Autonomous Systems, Tongji University\n2Shanghai Key Laboratory of Data Science, School of Computer Science, Fudan University\n3College of Design and Innovation,Tongji University\ngaoyunfan1602@gmail.com\nAbstract\nLarge language models (LLMs) demonstrate pow-\nerful capabilities, but they still face challenges in\npractical applications, such as hallucinations, slow\nknowledge updates, and lack of transparency in\nanswers. Retrieval-Augmented Generation (RAG)\nrefers to the retrieval of relevant information from\nexternal knowledge bases before answering ques-\ntions with LLMs. RAG has been demonstrated\nto significantly enhance answer accuracy, reduce\nmodel hallucination, particularly for knowledge-\nintensive tasks. By citing sources, users can verify", "providing an effective solution to the incomplete and insuf-\nficient knowledge problem inherent in purely parameterized\nmodels.\nThe paper systematically reviews and analyzes the current\nresearch approaches and future development paths of RAG,\nsummarizing them into three main paradigms: Naive RAG,\nAdvanced RAG, and Modular RAG. Subsequently, the paper\nprovides a consolidated summary of the three core compo-\nnents: Retrieval, Augmented, and Generation, highlighting\nthe improvement directions and current technological char-\nacteristics of RAG. In the section on augmentation methods,the current work is organized into three aspects: the augmen-\ntation stages of RAG, augmentation data sources, and aug-\nmentation process. Furthermore, the paper summarizes the\nevaluation system, applicable scenarios, and other relevant\ncontent related to RAG. Through this article, readers gain a\nmore comprehensive and systematic understanding of large\nmodels and retrieval-Augmented generation. They become", "putational expenses for both training and inference. To ad-\ndress the limitations of purely parameterized models, lan-\nguage models can adopt a semi-parameterized approach by\nintegrating a non-parameterized corpus database with pa-\nrameterized models. This approach is known as Retrieval-\nAugmented Generation (RAG).\nThe term Retrieval-Augmented Generation (RAG) was\nfirst introduced by [Lewis et al. , 2020 ]. It combines a pre-\ntrained retriever with a pre-trained seq2seq model (generator)\nand undergoes end-to-end fine-tuning to capture knowledge\nin a more interpretable and modular way. Before the advent\nof large models, RAG primarily focused on direct optimiza-\ntion of end-to-end models. Dense retrievals on the retrieval\nside, such as the use of vector-based Dense Passage Retrieval\n(DPR) [Karpukhin et al. , 2020 ], and training smaller models\non the generation side are common practices. Due to the\noverall smaller parameter size, both the retriever and gener-", "BioMedLLM(Venigalla et al., 2022) for biomed, and Galac-\ntica(Taylor et al., 2022) for science. These models were\nusually trained on more than 100B tokens of raw domain\ndata. The second approach is domain-adaptive pretraining\n(DAPT) (Gururangan et al., 2020) which continues to train\na pretrained foundation model on additional raw domain\ndata. It shows slight performance boost on domain-specific\ntasks in domains such as biomedical, computer science pub-\nlications, news, and reviews. In one example, (Lewkowycz\net al., 2022) continued-pretrained a foundation model on\ntechnical content datasets and achieved state-of-the-art per-\nformance on many quantitative reasoning tasks.\nRetrieval Augmented Generation (RAG) helps ground the\nLLM to generate accurate information and to extract up-to-\ndate information to improve knowledge-intensive NLP tasks\n(Lewis et al., 2021a). It is observed that smaller models with\nRAG can outperform larger models without RAG (Borgeaud", "els. In comparison with them, this paper aims to systemati-\ncally outline the entire process of Retrieval-Augmented Gen-\neration (RAG) and focuses specifically on research related to\naugmenting the generation of large language models through\nknowledge retrieval.\nThe development of RAG algorithms and models is il-\nlustrated in Fig 1. On a timeline, most of the research re-\nlated to RAG emerged after 2020, with a significant turn-\ning point in December 2022 when ChatGPT was released.\nSince the release of ChatGPT, research in the field of natu-\nral language processing has entered the era of large models.\nNaive RAG techniques quickly gained prominence, leading\nto a rapid increase in the number of related studies.In terms\nof enhancement strategies, research on reinforcement during\nthe pre-training and supervised fine-tuning stages has been\nongoing since the concept of RAG was introduced. However,\nmost of the research on reinforcement during the inference"], "retrieved_docs_id": ["af911eac69", "1bd400d39e", "33aae5a21d", "a92ee29506", "483a7b216e"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does MoE-LLaV increase model capacity without significantly compromising inference speed?\n", "true_answer": "MoE-LLaV increases model capacity by modulating the total count of model parameters while keeping the activated parameters unchanged, which does not significantly affect the inference speed.", "source_doc": "multimodal.pdf", "source_id": "ffe176eb03", "retrieved_docs": ["which can pose a significant computational challenge within the context window of LLMs. Ely-\nsium [92] provides a trade-off between performance and visual token consumption, where T-Selector\nis introduced as a visual token compression network to enable LLMs to distinguish individual frames\nwhile reducing visual token use. VideoLLaV A [44], building upon LanguageBind [93], unifies vi-\nsual representation into the language feature space to advance foundational LLMs towards a unified\nlanguage-vision LLM without incurring a large computational burden.\n2.5 Efficient Structures\nEfficient structures primarily explore three directions: Mixture-of-Experts, Mamba and Inference\nAcceleration.\nMixture of Experts MoE enhances model capacity by modulating the total count of model pa-\nrameters while maintaining the activated parameters unchanged, hence, not significantly compro-\nmising the inference speed. MoE-LLaV A[25] presents an MoE-based sparse MLLM framework", "mising the inference speed. MoE-LLaV A[25] presents an MoE-based sparse MLLM framework\nthat effectively increases the number of parameters without compromising computational efficiency.\nFurthermore, it introduces MoE-Tuning, a three-stage training strategy designed to adapt MoE [89]\nto MLLMs and prevent model degradation caused by sparsity. MM1[30] designs two variants of\nMoE models. The first is a 3B-MoE model that employs 64 experts and substitutes a dense layer\nwith a sparse one every two layers. The second is a 7B-MoE model that utilizes 32 experts and\nsubstitutes a dense layer with a sparse one every four layers.\nMamba Cobra [13] incorporates the efficient Mamba [77] language model into the vision modal-\nity and explores different modal fusion schemes to develop an effective multi-modal Mamba. Exper-\niments show that it not only achieves competitive performance with state-of-the-art efficient meth-", "expressiveness and generalization capabilities. Adapter-based tuning introduces lightweight adapter\nmodules into the pre-trained model\u2019s architecture. These adapter modules, typically composed of\nfeed-forward neural networks with a small number of parameters, are inserted between the layers\nof the original model. During fine-tuning, only the adapter parameters are updated, while the pre-\ntrained model\u2019s parameters remain fixed. This method significantly reduces the number of trainable\nparameters, leading to faster training and inference times without compromising the model\u2019s per-\nformance. LLM-Adapters [154] presents a framework for integrating various adapters into large\nlanguage models, enabling parameter-efficient fine-tuning for diverse tasks. This framework en-\n16", "These techniques enable ultra-low-bit precision with reduced model sizes and faster inference with-\nout compromising model performance. Our detailed contributions include:\n\u2022Sensitivity-based Non-Uniform Quantization: We demonstrate that uniform quantization, as\ncommonly adopted in prior works, is sub-optimal for LLM inference for two reasons. First,\nthe weight distributions in LLMs exhibit clear non-uniform patterns (Fig. 3). Second, the in-\nference computation in prior works does not benefit from uniform quantization as the arith-\nmetic is performed in FP16 precision, not in reduced precision. To address these, we propose\na novel sensitivity-based non-uniform quantization method to achieve a more optimal quantiza-\ntion scheme for LLMs. Our approach significantly improves the perplexity of the LLaMA-7B\nmodel at 3-bit precision from 28.26 of uniform quantization to 7.75 on the C4 dataset (Sec. 4.1).", "(from 6.7B to 175B) and evaluation benchmarks (HELM and lm-eval-harness). More importantly,\ncan enhance the performance of existing KV cache sparsification techniques.\n\u2022In Section 5.2, we demonstrate that H2Ocan increase the inference throughput by up to 3\u00d7,29\u00d7,\n29\u00d7compared to the state-of-the-art inference engine FlexGen, DeepSpeed and the widely used\nHugging Face Accelerate without compromising model quality.\n\u2022In Section 5.3, we present extensive ablation studies to show the effectiveness of H2Ounder\ndifferent sequence lengths, especially the input with infinite sequence length and its compatibility\nwith quantization.\nAll details (hyperparameters, data splits, etc.), along with additional experiments, are in Appendix A.\n5.1 End-to-End Results\nWe demonstrate that H2Ocan reduce KV cache memory footprint by 5-10\u00d7while achieving compa-\nrable accuracy on a majority of tasks.\nSetup. Our experiments are based on three representative model families of LLMs, including the"], "retrieved_docs_id": ["ffe176eb03", "5510d4cc4e", "004ffc5dd9", "9571eac220", "a265d1549e"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does the Memory Module in RAG find relevant memories?\n", "true_answer": "The Memory Module in RAG finds relevant memories by leveraging the memory capabilities of the LLM itself and finding memories most similar to the current input. It iteratively employs a retrieval-enhanced generator to create an unbounded memory pool.", "source_doc": "RAG.pdf", "source_id": "9067222c76", "retrieved_docs": ["RAG, the search module, tailored to specific sce-\nnarios, incorporates direct searches on (additional)\ncorpora in the process using LLM-generated code,\nquery languages (e.g., SQL, Cypher), or other cus-\ntom tools. The data sources for searching can include\nsearch engines, text data, tabular data, or knowledge\ngraphs [Wang et al. , 2023c ].\n\u2022Memory Module: Leveraging the memory capabili-\nties of LLM itself to guide retrieval, the principle in-\nvolves finding memories most similar to the current in-\nput. Self-mem [Cheng et al. , 2023b ]iteratively employs\na retrieval-enhanced generator to create an unbounded\nmemory pool, combining the \u201coriginal question\u201d and\n\u201cdual question.\u201d A retrieval-enhanced generative model\ncan use its own outputs to enhance itself, making the\ntext closer to the data distribution in the reasoning pro-\ncess, with the model\u2019s own outputs rather than training\ndata[Wang et al. , 2022a ].\n\u2022Extra Generation Module: In retrieved content, re-", "lows the decide-retrieve-reflect-read process, introduc-\ning a module for active judgment. This adaptive and\ndiverse approach allows for the dynamic organization of\nmodules within the Modular RAG framework.\n4 Retriever\nIn the context of RAG, the \u201dR\u201d stands for retrieval, serving\nthe role in the RAG pipeline of retrieving the top-k relevant\ndocuments from a vast knowledge base. However, crafting\na high-quality retriever is a non-trivial task. In this chapter,\nwe organize our discussions around three key questions: 1)\nHow to acquire accurate semantic representations? 2) How\nto match the semantic spaces of queries and documents? 3)\nHow to align the output of the retriever with the preferences\nof the Large Language Model ?\n4.1 How to acquire accurate semantic\nrepresentations?\nIn RAG, semantic space is the multidimensional space where\nquery and Document are mapped. When we perform re-\ntrieval, it is measured within the semantic space. If the se-", "cross-attention scores, selecting the highest scoring input to-\nkens to effectively filter tokens. RECOMP [Xuet al. , 2023a ]\nproposes extractive and generative compressors, which gen-\nerate summaries by selecting relevant sentences or syn-\nthesizing document information to achieve multi-document\nquery focus summaries.In addition to that, a novel approach,\nPKG [Luoet al. , 2023 ], infuses knowledge into a white-box\nmodel through directive fine-tuning, and directly replaces the\nretriever module, used to directly output relevant documents\nbased on the query.\n5 Generator\nAnother core component in RAG is the generator, responsible\nfor transforming retrieved information into natural and fluent\ntext. Its design is inspired by traditional language models,\nbut in comparison to conventional generative models, RAG\u2019s\ngenerator enhances accuracy and relevance by leveraging the\nretrieved information. In RAG, the generator\u2019s input includes", "Modular RAG\nThe modular RAG structure breaks away from the traditional\nNaive RAG framework of indexing, retrieval, and genera-\ntion, offering greater diversity and flexibility in the over-\nall process. On one hand, it integrates various methods to\nexpand functional modules, such as incorporating a search\nmodule in similarity retrieval and applying a fine-tuning ap-\nproach in the retriever [Linet al. , 2023 ]. Additionally, spe-\ncific problems have led to the emergence of restructured\nRAG modules [Yuet al. , 2022 ]and iterative approaches like\n[Shao et al. , 2023 ]. The modular RAG paradigm is becom-\ning the mainstream in the RAG domain, allowing for ei-\nther a serialized pipeline or an end-to-end training approach\nacross multiple modules.The comparison between three RAG\nparadigms is illustrated in Fig 3.\nNew Modules\n\u2022Search Module: Diverging from the similarity re-\ntrieval between queries and corpora in Naive/Advanced\nRAG, the search module, tailored to specific sce-", "is costly for LLMs, and too much irrelevant information\ncan reduce the efficiency of LLMs in utilizing context.\nThe OpenAI report also mentioned \u201dContext Recall\u201d as\na supplementary metric, measuring the model\u2019s abil-\nity to retrieve all relevant information needed to an-\nswer a question. This metric reflects the search opti-\nmization level of the RAG retrieval module. A low re-\ncall rate indicates a potential need for optimization of\nthe search functionality, such as introducing re-ranking\nmechanisms or fine-tuning embeddings, to ensure more\nrelevant content retrieval.\nKey abilities\nThe work of RGB [Chen et al. , 2023b ]analyzed the perfor-\nmance of different large language models in terms of four\nbasic abilities required for RAG, including Noise Robust-\nness, Negative Rejection, Information Integration, and Coun-\nterfactual Robustness, establishing a benchmark for retrieval-\naugmented generation.RGB focuses on the following four\nabilities:\n1.Noise Robustness"], "retrieved_docs_id": ["9067222c76", "8fe8499442", "cd69a480bb", "1d479682a6", "6291d3f5de"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does REPLUG improve the initial retrieval model?\n", "true_answer": "REPLUG improves the initial retrieval model by obtaining feedback from the language model through supervised signals.", "source_doc": "RAG.pdf", "source_id": "662eb558d5", "retrieved_docs": ["domain question-answering tasks. Concerning retriever fine-\ntuning, REPlUG [Shiet al. , 2023 ]treats the language model\n(LM) as a black box and enhances it through an adjustable re-\ntrieval model. By obtaining feedback from the black-box lan-\nguage model through supervised signals, REPLUG improves\nthe initial retrieval model. UPRISE [Cheng et al. , 2023a ], on\nthe other hand, fine-tunes retrievers by creating a lightweight\nand versatile retriever through fine-tuning on diverse task\nsets. This retriever can automatically provide retrieval\nprompts for zero-shot tasks, showcasing its universality and\nimproved performance across tasks and models.\nSimultaneously, methods for fine-tuning generators in-\nclude Self-Mem [Cheng et al. , 2023b ], which fine-tunes the\ngenerator through a memory pool of examples, and\nSelf-RAG [Asai et al. , 2023b ], which satisfies active re-\ntrieval needs by generating reflection tokens. The RA-\nDIT[Linet al. , 2023 ]method fine-tunes both the generator", "as:\n\u03b6=X\nqX\nd+\u2208Da+X\nd\u2212\u2208D\u2212l\u0000\nf\u0000\nq, d+\u0001\n, f\u0000\nq, d\u2212\u0001\u0001\n(1)\nwhere Da+is the documents preferred by the LLM in the\nretrieved set and Da\u2212is not preferred. lis the standard cross\nentropy loss. In the end,it is suggested that LLMs may have a\npreference for focusing on readable rather than information-\nrich documents\nREPLUG [Shiet al. , 2023 ]uses a retriever and an LLM to\ncalculate the probability distributions of the retrieved docu-\nments, and then performs supervised training by calculating\nthe KL divergence. This simple and effective training method\nenhances the performance of the retrieval model by using an\nLM as the supervisory signal, eliminating the need for any", "Retrieval-Augmented LLM. Due to the huge amount of\nfact records in a KG, existing work typically adopts a\nretrieval model to first obtain a relatively small subgraph\nfrom KG, and then leverages it to enhance LLMs by en-\nriching the relevant knowledge. Before the advent of LLMs,\nthe retrieved subgraphs are often supplemented into train-\ning data, injecting knowledge information into PLMs via\nparameter learning [863\u2013865]. In contrast, to leverage the\nretrieved knowledge, LLMs mainly incorporate it as part of\nthe prompt, without parameter update. To implement this\napproach, there are two main technical problems, i.e.,how\nto retrieve relevant knowledge from KGs and how to make\nbetter use of the structured data by LLMs. For the first issue\n(i.e.,retrieving relevant knowledge), a typical approach is\nto train a small language model ( e.g., RoBERTa) to iden-\ntify question-related fact triples [866]. To further improve\nthe retrieval performance, several studies also propose an", "63.20 [742] Let\u2019s use python to solve math problems. Here are three examples\nhow to do it, \\n Q: Olivia has $23. She bought five bagels for $3\neach. How much money does she have left? \\n\u2018\u2018\u2018def solution(): \\n\n\"\"\"Olivia has $23. She bought five bagels for $3 each. How\nmuch money does she have left?\"\"\" \\n money_initial = 23 \\n\nbagels = 5 \\n bagel_cost = 3 \\n money_spent = bagels *\nbagel_cost \\n money_left = money_initial - money_spent \\n\nresult = money_left \\n return result\u2018\u2018\u2018 \\n ...... \\n How about\nthis question? \\n Q:79.30\nSDGCode Synthesis HumanEval I want you act as a code completer. Given a code snippet, your\nobjective is to complete the code and ensure that it can achieve\nthe described functionality.79.88 48.20 [743]\nText-to-SQL Spider ### Complete sqlite SQL query only and with no explanation. \\n\n#\\n### Sqlite SQL tables, with their properties: \\n#\\n{table}\\n#\n{foreign_key }\\n#\\n###{question }\\n SELECT70.10 84.10 [744]", "that arise in real use-cases (e.g. typos) affect the performance of the model significantly. Thus, we re-\nstrict ourselves to perturbations that are both natural and relatively mild\u2014e.g., capitalization, common\nmisspellings\u2014see Figure 18 for an illustration and see Appendix D.1 for the full description. Since it is\ndifficult to uniformly specify how the gold-standard should change for these perturbations in long-form\ntext generation or language modeling, we restrict our measurement of invariance-related robustness to text\nclassification, question answering, and information retrieval scenarios.\nEquivariance. To complement invariance, we also test how semantics-altering perturbations influence\nmodel behavior. The goal is to understand whether a model is sensitive to perturbations that change the\ntarget output and does not latch on irrelevant parts of the instance. Unfortunately, unlike invariance, spec-"], "retrieved_docs_id": ["662eb558d5", "9d81e48a55", "d0140a8a43", "ffc2b162cf", "d7b911a1f5"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is the main factor contributing to the success of multimodal large language models (MLLMs)?\n", "true_answer": "The success of MLLMs is largely attributed to the scaling law, which states that the performance of an AI model improves as more resources, such as data, computational power, or model size, are invested into it.", "source_doc": "multimodal.pdf", "source_id": "7a547e4fbb", "retrieved_docs": ["Organization of this survey. In this paper, we present a comprehensive survey of the latest\ndevelopments regarding hallucinations in MLLMs. The survey is organized as follows: We begin by\nproviding sufficient context and defining concepts related to LLMs, MLLMs, hallucination, etc. Next,\nwe delve into an in-depth analysis of the factors contributing to hallucinations in MLLMs. Following\nthis, we present a set of metrics and benchmarks employed for evaluating hallucinations in MLLMs.\nWe then elaborate on a range of approaches designed to mitigate hallucinations in MLLMs. Finally,\nwe delve into the challenges and open questions that frame the current limitations and future\nprospects of this field, offering insights and delineating potential pathways for forthcoming research.\n2 DEFINITIONS\n2.1 Large Language Models\nBefore moving to multimodal large language models, it is essential to introduce the concept of large", "cient MLLMs, research state of efficient structures and strategies, and the appli-\ncations. Finally, we discuss the limitations of current efficient MLLM research\nand promising future directions. Please refer to our GitHub repository for more\ndetails: https://github.com/lijiannuist/Efficient-Multimodal-LLMs-Survey.\n1 Introduction\nLarge-scale pretraining, a leading approach in Artificial Intelligence(AI), has seen general-purpose\nmodels like large language and multimodal models outperform specialized deep learning models\nacross many tasks. The remarkable abilities of Large Language Models (LLM) have inspired efforts\nto merge them with other modality-based models to enhance multimodal competencies. This con-\ncept is further supported by the remarkable success of proprietary models like OpenAI\u2019s GPT-4V [1]\nand Google\u2019s Gemini[2]. As a result, Multimodal Large Language Models (MLLMs) have emerged,\nincluding the mPLUG-Owl series[3, 4], InternVL [5], EMU [6], LLaV A [7], InstructBLIP [8],", "Hallucination of Multimodal Large Language Models: A Survey 5\nVision InputVision ModelLLMImageVideo\u2026CLIP DINO-v2Linear\u2026LLaMAVicunaChatGLMFuyuDecodingGreedyBeam SearchSamplingText InputInstruction\u2026TokenizerBPE SentencePiece\u2026\nFig. 2. Popular architecture of multimodal large language model.\nintegration of human feedback into the training loop has demonstrated effectiveness in enhancing\nthe alignment of LLMs.\n2.2 Multimodal Large Language Models\nMLLMs [ 22,75,111,138] typically refers to a series of models that enable LLMs to perceive and\ncomprehend data from various modalities. Among them, vision+LLM is particularly prominent,\nowing to the extensive research on vision-language models (VLMs) [ 51,88,116] prior to LLMs. As a\nresult, MLLMs are sometimes referred to as vision-LLMs (VLLMs) or large vision language models\n(LVLMs). The goal of MLLMs is to activate the visual capabilities of LLMs, enabling them to \"see\"", "2 Bai, et al.\n1 INTRODUCTION\nRecently, the emergence of large language models (LLMs) [ 29,81,85,99,132] has dominated a wide\nrange of tasks in natural language processing (NLP), achieving unprecedented progress in language\nunderstanding [ 39,47], generation [ 128,140] and reasoning [ 20,58,87,107,115]. Leveraging\nthe capabilities of robust LLMs, multimodal large language models (MLLMs) [ 22,75,111,138],\nsometimes referred to as large vision-language models (LVLMs), are attracting increasing attention.\nMLLMs show promising ability in multimodal tasks, such as image captioning [ 66], visual question\nanswering [ 22,75], etc. However, there is a concerning trend associated with the rapid advancement\nin MLLMs. These models exhibit an inclination to generate hallucinations [ 69,76,137], resulting in\nseemingly plausible yet factually spurious content.\nThe problem of hallucination originates from LLMs themselves. In the NLP community, the", "even OCR-free NLP (directly fed with document images), (ii) perception-language\ntasks, including multimodal dialogue, image captioning, visual question answering,\nand (iii) vision tasks, such as image recognition with descriptions (specifying\nclassi\ufb01cation via text instructions). We also show that MLLMs can bene\ufb01t from\ncross-modal transfer, i.e., transfer knowledge from language to multimodal, and\nfrom multimodal to language. In addition, we introduce a dataset of Raven IQ test,\nwhich diagnoses the nonverbal reasoning capability of MLLMs.\nInput Prompt CompletionQuestion: Explain why \nthis photo is funny? \nAnswer:\nThe cat is wearing a \nmask that gives the \ncat a smile.\nQuestion: Why did the \nlittle boy cry? Answer:\nBecause his scooter \nbroke.Question: What is the \nhairstyle of the blond \ncalled? Answer:\npony tailQuestion: When will the \nmovie be released? \nAnswer:\nOn June 27\n5 + 4 = 9Question: The result \nis? Answer:What is TorchScale ?\nA library that allows"], "retrieved_docs_id": ["e1b4ac9436", "e021f7788d", "f49f3b54ce", "da0a465b6c", "1da9964ec4"], "reranker_type": "None", "search_type": "text", "rr": 0.0, "hit": 0}, {"question": "What is the number of MLLMs (Multimodal Large Language Models) evaluated in Table 4?\n", "true_answer": "22 MLLMs were evaluated in Table 4.", "source_doc": "multimodal.pdf", "source_id": "de63235613", "retrieved_docs": ["cient MLLMs, research state of efficient structures and strategies, and the appli-\ncations. Finally, we discuss the limitations of current efficient MLLM research\nand promising future directions. Please refer to our GitHub repository for more\ndetails: https://github.com/lijiannuist/Efficient-Multimodal-LLMs-Survey.\n1 Introduction\nLarge-scale pretraining, a leading approach in Artificial Intelligence(AI), has seen general-purpose\nmodels like large language and multimodal models outperform specialized deep learning models\nacross many tasks. The remarkable abilities of Large Language Models (LLM) have inspired efforts\nto merge them with other modality-based models to enhance multimodal competencies. This con-\ncept is further supported by the remarkable success of proprietary models like OpenAI\u2019s GPT-4V [1]\nand Google\u2019s Gemini[2]. As a result, Multimodal Large Language Models (MLLMs) have emerged,\nincluding the mPLUG-Owl series[3, 4], InternVL [5], EMU [6], LLaV A [7], InstructBLIP [8],", "Hallucination of Multimodal Large Language Models: A Survey 5\nVision InputVision ModelLLMImageVideo\u2026CLIP DINO-v2Linear\u2026LLaMAVicunaChatGLMFuyuDecodingGreedyBeam SearchSamplingText InputInstruction\u2026TokenizerBPE SentencePiece\u2026\nFig. 2. Popular architecture of multimodal large language model.\nintegration of human feedback into the training loop has demonstrated effectiveness in enhancing\nthe alignment of LLMs.\n2.2 Multimodal Large Language Models\nMLLMs [ 22,75,111,138] typically refers to a series of models that enable LLMs to perceive and\ncomprehend data from various modalities. Among them, vision+LLM is particularly prominent,\nowing to the extensive research on vision-language models (VLMs) [ 51,88,116] prior to LLMs. As a\nresult, MLLMs are sometimes referred to as vision-LLMs (VLLMs) or large vision language models\n(LVLMs). The goal of MLLMs is to activate the visual capabilities of LLMs, enabling them to \"see\"", "general-purpose interface, i.e., language models.\nNew capabilities of MLLMs. As shown in Table 1, apart from the capabilities found in previous\nLLMs [ BMR+20,CND+22], MLLMs enable new usages and possibilities. First, we can conduct\nzero- and few-shot multimodal learning by using natural language instructions and demonstration\nexamples. Second, we observe promising signals of nonverbal reasoning by evaluating the Raven\nIQ test, which measures the \ufb02uid reasoning ability of humans. Third, MLLMs naturally support\nmulti-turn interactions for general modalities, such as multimodal dialogue.\n2 K OSMOS -1: A Multimodal Large Language Model\nAs shown in Figure 1, KOSMOS -1is a multimodal language model that can perceive general\nmodalities, follow instructions, learn in context, and generate outputs. Given the previous context, the\nmodel learns to generate texts in an auto-regressive manner. Speci\ufb01cally, the backbone of KOSMOS -1", "images. In addition, Resampler [ ADL+22] is used as an attentive pooling mechanism to reduce the\nnumber of image embeddings.\n2.2 Multimodal Large Language Models (MLLMs)\nAfter obtaining the embeddings of an input sequence, we feed them into the Transformer-based\ndecoder. The left-to-right causal model processes the sequence in an auto-regressive manner, which\nproduces the next token by conditioning on past timesteps. The causal masking is used to mask\nout future information. A softmax classi\ufb01er upon Transformer is used to generate tokens over the\nvocabulary.\nMLLMs serve as general-purpose interfaces [ HSD+22] that can perform interactions with both\nnatural language and multimodal input. The framework is \ufb02exible to handle various data types,\nas long as we can represent input as vectors. MLLMs combine the best of two worlds. First, the\nlanguage models naturally inherit the capabilities of in-context learning and instruction following.", "even OCR-free NLP (directly fed with document images), (ii) perception-language\ntasks, including multimodal dialogue, image captioning, visual question answering,\nand (iii) vision tasks, such as image recognition with descriptions (specifying\nclassi\ufb01cation via text instructions). We also show that MLLMs can bene\ufb01t from\ncross-modal transfer, i.e., transfer knowledge from language to multimodal, and\nfrom multimodal to language. In addition, we introduce a dataset of Raven IQ test,\nwhich diagnoses the nonverbal reasoning capability of MLLMs.\nInput Prompt CompletionQuestion: Explain why \nthis photo is funny? \nAnswer:\nThe cat is wearing a \nmask that gives the \ncat a smile.\nQuestion: Why did the \nlittle boy cry? Answer:\nBecause his scooter \nbroke.Question: What is the \nhairstyle of the blond \ncalled? Answer:\npony tailQuestion: When will the \nmovie be released? \nAnswer:\nOn June 27\n5 + 4 = 9Question: The result \nis? Answer:What is TorchScale ?\nA library that allows"], "retrieved_docs_id": ["e021f7788d", "f49f3b54ce", "5494ed4540", "5107b7792e", "1da9964ec4"], "reranker_type": "None", "search_type": "text", "rr": 0.0, "hit": 0}, {"question": "How does the Extra Generation Module generate required context according to Wang et al. (2022a)?\n", "true_answer": "The Extra Generation Module generates required context by using a large language model (LLM) to produce the content. This approach is more likely to contain relevant information compared to direct retrieval.", "source_doc": "RAG.pdf", "source_id": "3ed835a82b", "retrieved_docs": ["data[Wang et al. , 2022a ].\n\u2022Extra Generation Module: In retrieved content, re-\ndundancy and noise are common issues. Instead of di-\nrectly retrieving from a data source, the Extra Gener-\nation Module leverages LLM to generate the required\ncontext [Yuet al. , 2022 ]. Content generated by LLM is\nmore likely to contain relevant information compared to\ndirect retrieval.", "RAG, the search module, tailored to specific sce-\nnarios, incorporates direct searches on (additional)\ncorpora in the process using LLM-generated code,\nquery languages (e.g., SQL, Cypher), or other cus-\ntom tools. The data sources for searching can include\nsearch engines, text data, tabular data, or knowledge\ngraphs [Wang et al. , 2023c ].\n\u2022Memory Module: Leveraging the memory capabili-\nties of LLM itself to guide retrieval, the principle in-\nvolves finding memories most similar to the current in-\nput. Self-mem [Cheng et al. , 2023b ]iteratively employs\na retrieval-enhanced generator to create an unbounded\nmemory pool, combining the \u201coriginal question\u201d and\n\u201cdual question.\u201d A retrieval-enhanced generative model\ncan use its own outputs to enhance itself, making the\ntext closer to the data distribution in the reasoning pro-\ncess, with the model\u2019s own outputs rather than training\ndata[Wang et al. , 2022a ].\n\u2022Extra Generation Module: In retrieved content, re-", "Retrieve-Read process, utilizing LLM performance as a\nreward in reinforcement learning for a rewritter module.\nThis allows the rewritter to adjust retrieval queries, im-\nproving the downstream task performance of the reader.\nSimilarly, modules can be selectively replaced in ap-\nproaches like Generate-Read [Yuet al. , 2022 ], where the\nLLM generation module replaces the retrieval module.", "through co-writing and follow-up interviews with\n15 industry experts.\nSimilarly, Yang et al. [637] propose using GPT-3\nwith a Recursive Reprompting and Revision frame-\nwork (Re3) to generate stories over 2,000 words\nlong. The Re3 approach uses zero-shot prompting\nwith GPT-3 to generate a plan (settings, characters,\noutline, etc.). It then recursively prompts GPT-3 to\ngenerate story continuations using a specified dy-\nnamic prompting procedure. Possible story contin-\nuations are then ranked for coherence and relevance\nusing separate fine-tuned Longformer models as\npart of a Rewrite module. Finally, local edits to\nthe selected continuations are made by detecting\nfactual inconsistencies using the combination of a\nGPT-3 model [ 403] and a BART model [ 303] as\npart of an Edit module. This process can then be\niterated for fully automated story generation.\nFinally, Yang et al. [636] introduce the Detailed\nOutline Control (DOC) framework to maintain plot", "is costly for LLMs, and too much irrelevant information\ncan reduce the efficiency of LLMs in utilizing context.\nThe OpenAI report also mentioned \u201dContext Recall\u201d as\na supplementary metric, measuring the model\u2019s abil-\nity to retrieve all relevant information needed to an-\nswer a question. This metric reflects the search opti-\nmization level of the RAG retrieval module. A low re-\ncall rate indicates a potential need for optimization of\nthe search functionality, such as introducing re-ranking\nmechanisms or fine-tuning embeddings, to ensure more\nrelevant content retrieval.\nKey abilities\nThe work of RGB [Chen et al. , 2023b ]analyzed the perfor-\nmance of different large language models in terms of four\nbasic abilities required for RAG, including Noise Robust-\nness, Negative Rejection, Information Integration, and Coun-\nterfactual Robustness, establishing a benchmark for retrieval-\naugmented generation.RGB focuses on the following four\nabilities:\n1.Noise Robustness"], "retrieved_docs_id": ["3ed835a82b", "9067222c76", "79cd640612", "03a0f5c1e3", "6291d3f5de"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does the approach of augmented pre-training perform in knowledge-intensive tasks compared to standard GPT models?\n", "true_answer": "The approach of augmented pre-training outperforms standard GPT models in handling knowledge-intensive tasks, particularly in open-domain question answering.", "source_doc": "RAG.pdf", "source_id": "7411eec79c", "retrieved_docs": ["Figure 4: Taxonomy of RAG\u2019s Core Components\nextension of RETRO, increased the model\u2019s parameter scale.\nStudies have found consistent improvements in text genera-\ntion quality, factual accuracy, low toxicity, and downstream\ntask accuracy, particularly in knowledge-intensive tasks such\nas open-domain question answering. These research findings\nhighlight the promising direction of pretraining autoregres-\nsive language models in conjunction with retrieval for future\nfoundational models.\nIn summary, the advantages and limitations of augmented\npre-training are evident. On the positive side, this approach\noffers a more powerful foundational model, outperforming\nstandard GPT models in perplexity, text generation quality,\nand downstream task performance. Moreover, it achieves\nhigher efficiency by utilizing fewer parameters compared to\npurely pre-trained models. It particularly excels in handling\nknowledge-intensive tasks, allowing the creation of domain-", "provide enough information about whether the produced answer would contradict.\nRetrieval-augmented language model pre-training\n(REALM) [ 186] inserts retrieved documents\ninto the pre-training examples. While Guu et al.\n[186] designed REALM for extractive tasks\nsuch as question-answering, Lewis et al. [304]\npropose retrieval-augmented generation (RAG), a\nlanguage generation framework using retrievers\nfor knowledge-intensive tasks that humans could\nnot solve without access to an external knowledge\nsource. Yogatama et al. [646] propose the adaptive\nSemiparametric Language Models architecture,\nwhich incorporates the current local context, a\nshort-term memory that caches earlier-computed\nhidden states, and a long-term memory based on a\nkey-value store of (hidden-state, output) tuples. To\nequip a retrieval-augmented LLM with few-shot\nabilities that were before only emergent in LLMs\nwith many more parameters, Izacard et al. [236]\npropose a KL-divergence loss term for retrieval", "ity without being updated. In what follows, we discuss two\nkey questions about the ICL ability of LLMs, i.e.,\u201chow does\npre-training affect the ICL ability \u201d and \u201c how do LLMs perform\nICL during inference \u201d.\nHow Pre-Training Affects ICL? ICL is first proposed in\nGPT-3 [55], and it has been shown that the ICL ability\nbecomes more significant with a larger model size. Further,\nsome studies reveal that small-scale PLMs can also demon-\nstrate a strong ICL ability by continual pre-training [490]\nor fine-tuning [491] on specially designed training tasks,\nwhich typically involve additional task examples in theinput during the training process. It suggests that the design\nof training tasks is an important influence factor on the ICL\ncapability of LLMs. Besides training tasks, recent studies\nhave also investigated the relationship between ICL and\npre-training corpora [488, 492]. For example, ICL can be\ntheoretically explained as the product of pre-training on", "on Empirical Methods in Natural Language Processing,\nEMNLP 2020, Online, November 16-20, 2020 , 2020, pp.\n5418\u20135426.\n[653] G. Izacard, P . S. H. Lewis, M. Lomeli, L. Hos-\nseini, F. Petroni, T. Schick, J. Dwivedi-Yu, A. Joulin,\nS. Riedel, and E. Grave, \u201cFew-shot learning with\nretrieval augmented language models,\u201d CoRR , vol.\nabs/2208.03299, 2022.\n[654] K. Guu, K. Lee, Z. Tung, P . Pasupat, and M. Chang,\n\u201cRetrieval augmented language model pre-training,\u201d\ninProceedings of the 37th International Conference on\nMachine Learning, ICML 2020, 13-18 July 2020, Virtual\nEvent , 2020, pp. 3929\u20133938.\n[655] P . S. H. Lewis, E. Perez, A. Piktus, F. Petroni,\nV . Karpukhin, N. Goyal, H. K \u00a8uttler, M. Lewis, W. Yih,\nT. Rockt \u00a8aschel, S. Riedel, and D. Kiela, \u201cRetrieval-\naugmented generation for knowledge-intensive NLP\ntasks,\u201d in Advances in Neural Information Processing\nSystems 33: Annual Conference on Neural Information\nProcessing Systems 2020, NeurIPS 2020, December 6-12,\n2020, virtual , 2020.", "BioMedLLM(Venigalla et al., 2022) for biomed, and Galac-\ntica(Taylor et al., 2022) for science. These models were\nusually trained on more than 100B tokens of raw domain\ndata. The second approach is domain-adaptive pretraining\n(DAPT) (Gururangan et al., 2020) which continues to train\na pretrained foundation model on additional raw domain\ndata. It shows slight performance boost on domain-specific\ntasks in domains such as biomedical, computer science pub-\nlications, news, and reviews. In one example, (Lewkowycz\net al., 2022) continued-pretrained a foundation model on\ntechnical content datasets and achieved state-of-the-art per-\nformance on many quantitative reasoning tasks.\nRetrieval Augmented Generation (RAG) helps ground the\nLLM to generate accurate information and to extract up-to-\ndate information to improve knowledge-intensive NLP tasks\n(Lewis et al., 2021a). It is observed that smaller models with\nRAG can outperform larger models without RAG (Borgeaud"], "retrieved_docs_id": ["7411eec79c", "f7770d2394", "b0a5af4ba8", "8ef99f2f5d", "a92ee29506"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does the SPHINX-X project create image captions with fine-grained correspondence to texts?\n", "true_answer": "The SPHINX-X project creates image captions with fine-grained correspondence to texts by using GPT-4V to generate captions from marked images and domain-specific guidelines.", "source_doc": "multimodal.pdf", "source_id": "7d5705c52b", "retrieved_docs": ["simultaneously saving all text annotations along with their respective bounding boxes. Ultimately,\nthese elements are converted into a unified question-answering format.\nWhile multi-task datasets provide an abundant source of data, they may not always be suitable\nfor complex real-world situations, such as engaging in multi-turn conversations. To address this\nchallenge, some research has explored the use of self-instruction by leveraging LLMs to gener-\nate text-based or multimodal instruction-following data from a limited number of hand-annotated\nsamples. SPHINX-X[14] assembles a rich multi-domain dataset with fine-grained correspondence\nbetween images and texts.It gathers images from diverse sources and then employs annotations to\napply various markers onto the original images. By prompting GPT-4V with these marked images\nand tailored domain-specific guidelines, the system generates captions that offer an image overview,", "regional details and object relationships insight. During the training process, SPHINX-X utilizes the\nunaltered images rather than the marked ones. ALLaV A[29] propose to distill a caption and a QA\npair for an image within a single session. Specifically, it prompts GPT-4V with an image, and ask it\nto first generate a fine-grained caption then a VQA pair.\nAdditionally, excluding multimodal instructional data, conversations solely based on language be-\ntween users and assistants can significantly contribute to enhancing a model\u2019s conversational exper-\ntise and responsiveness to directives.For example, VILA\u2019s[49] research demonstrates that integrating\ntext-only instructional data with image-text data during the fine-tuning process not only mitigates the\ndecline in performance for text-only tasks but also enhances the accuracy of MLLM-related tasks.\nDataset Name Type I \u2192O Source Method #.Instance Representative Publications", "as image captions.\nSimilarly, RLHF-V [ 119] also employs the RLHF paradigm to enhance the pre-trained MLLM.\nSpecifically, this work emphasizes two improvements: 1) at the data level, it proposes to collect\nhuman feedback in the form of fine-grained segment-level corrections, providing a clear, dense,\nand fine-grained human preference. 2) at the method level, it proposes dense direct preference\noptimization (DDPO) that directly optimizes the policy model against dense and fine-grained\nsegment-level preference.\nAnother similar work, ViGoR [ 110], also designs a fine-grained reward model to update pre-\ntrained MLLMs, aiming to improve visual grounding and reduce hallucination. The reward modeling\nin this work encompasses both human preferences and automatic metrics. Specifically, it collects\nhuman judgment and preferences for the responses generated by MLLMs by asking crowd-workers\nto provide fine-grained feedback at the sentence level. The collected human preference data is", "Hallucination of Multimodal Large Language Models: A Survey 19\nPreference Optimization (FDPO). FDPO uses fine-grained preferences from individual examples to\ndirectly reduce hallucinations in generated text by enhancing the model\u2019s ability to distinguish\nbetween accurate and inaccurate descriptions.\nLLaVA-RLHF [ 96] also try to involve human feedback to mitigate hallucination. It extends the\nRLHF paradigm from the text domain to the task of vision-language alignment, where human\nannotators were asked to compare two responses and pinpoint the hallucinated one. The MLLM is\ntrained to maximize the human reward simulated by an reward model. To address the potential\nissue of reward hacking ,i.e.,achieving high scores from the reward model does not necessarily lead\nto improvement in human judgements, it proposes an algorithm named Factually Augmented RLHF.\nThis algorithm calibrates the reward signals by augmenting them with additional information such\nas image captions.", "Multi-view Input Directly employing high-resolution vision encoders for fine-grained percep-\ntion is prohibitively costly and does not align with practical usage requirements. Therefore, to\nutilize low-resolution vision encoders while enabling MLLM to perceive detailed information, a\ncommon approach is to input multi-view HR images, i.e., a global view: low-resolution images\nobtained through resizing, and a local view: image patches derived from splitting. For example,\n7"], "retrieved_docs_id": ["7d5705c52b", "54fa378ef2", "9da785fedf", "92e73c053a", "f8392fc0db"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is one ability of the RGB model in augmented generation that deals with erroneous information?\n", "true_answer": "Counterfactual Robustness is the ability of the RGB model in augmented generation that deals with erroneous information by identifying and handling it when receiving instructions about potential risks in retrieved information.", "source_doc": "RAG.pdf", "source_id": "070aa6c4f4", "retrieved_docs": ["augmented generation.RGB focuses on the following four\nabilities:\n1.Noise Robustness\nThis capability measures the model\u2019s efficiency in han-\ndling noisy documents, which are those related to the\nquestion but do not contain useful information.\n2.Negative Rejection\nWhen documents retrieved by the model lack the knowl-\nedge required to answer a question, the model should\ncorrectly refuse to respond. In the test setting for neg-\native rejection, external documents contain only noise.\nIdeally, the LLM should issue a \u201dlack of information\u201d or\nsimilar refusal signal.\n3.Information Integration\nThis ability assesses whether the model can integrate\ninformation from multiple documents to answer more\ncomplex questions.4.Counterfactual Robustness\nThis test aims to evaluate whether the model can iden-\ntify and deal with known erroneous information in doc-\numents when receiving instructions about potential risks\nin retrieved information. Counterfactual robustness tests", "is costly for LLMs, and too much irrelevant information\ncan reduce the efficiency of LLMs in utilizing context.\nThe OpenAI report also mentioned \u201dContext Recall\u201d as\na supplementary metric, measuring the model\u2019s abil-\nity to retrieve all relevant information needed to an-\nswer a question. This metric reflects the search opti-\nmization level of the RAG retrieval module. A low re-\ncall rate indicates a potential need for optimization of\nthe search functionality, such as introducing re-ranking\nmechanisms or fine-tuning embeddings, to ensure more\nrelevant content retrieval.\nKey abilities\nThe work of RGB [Chen et al. , 2023b ]analyzed the perfor-\nmance of different large language models in terms of four\nbasic abilities required for RAG, including Noise Robust-\nness, Negative Rejection, Information Integration, and Coun-\nterfactual Robustness, establishing a benchmark for retrieval-\naugmented generation.RGB focuses on the following four\nabilities:\n1.Noise Robustness", "3.3 Computer Programming\nOne of LLMs\u2019 most advanced and broadly adopted\napplications is generating and completing computer\nprograms in various programming languages. This\nsection deals with programming-specific LLMs\nwhere the model is fine-tuned or pre-trained ex-\nclusively for programming applications, but it is\nimportant to note the increasing use of general\nchatbots partially trained on code datasets (such\nas ChatGPT) for programming tasks.\n3.3.1 Code Generation\nCode generation refers to using an LLM to output\nnew code for a given specification or problem pro-\n37", "et al. (2022) in the PaLM paper or by Gao et al. (2021b) in the EleutherAI Language Model Evaluation\nHarness) as well as past results for the models we evaluate on our scenarios (e.g. the HellaSwag accuracy\nreported by Brown et al. (2020) in the GPT-3 paper). Further, to build on BIG-Bench specifically, we\nhighlight that our codebase integrates all BIG-Bench scenarios, augmented with metrics beyond accuracy\nand the ability to evaluate all models we support. We emphasize that at this time, no common standard\nexists for language modeling evaluation, especially as the capabilities, harms, and limitations of these models\nare still being understood through the ongoing design of evaluations. We believe that establishing such a\nstandard is necessary for the ecosystem to mature, and that holistic approaches are integral for building just\nstandards.\n10 What is missing\nOne of our three requirements for holistic evaluation is the recognition of limitations: holistic evaluation", "affected by the position of the relevant information\nin the input context.\nWe first experiment with multi-document ques-\ntion answering, which requires models to reason\nover provided documents to find relevant informa-\ntion and use it to answer a given question; this task\nmimics the retrieval-augmented generation setup\nunderlying many commercial generative search and\nquestion answering applications (e.g., Bing Chat).\nIn this setting, we control (i) the input context\nlength by changing the number of documents in\nthe input context (akin to retrieving more or less\ndocuments in retrieval-augmented generation), and\n(ii) control the position of the relevant information\nwithin the input context by changing the order of\nthe documents to place the relevant document at\nthe beginning, middle or end of the context.\nWe find that changing the position of relevant\ninformation in the input context can substantially\naffect model performance, indicating that current"], "retrieved_docs_id": ["070aa6c4f4", "6291d3f5de", "4569042e3a", "03bd7ee782", "dfe81b1fca"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is the perplexity score of the Mini-Gemini [26] Gemma-2B model?\n", "true_answer": "The perplexity score of the Mini-Gemini [26] Gemma-2B model is 56.2.", "source_doc": "multimodal.pdf", "source_id": "0ad4077d27", "retrieved_docs": ["Cobra [13] Mamba-2.8B 75.9 58.5 - 46.0 52.0 - - - - - - 88.0 - -\nMini-Gemini [26] Gemma-2B - - - 56.2 - 31.7/29.1 29.4 1341.0 312.0 59.8 - - - 31.1\nVary-toy [27] Qwen-1.8B - - - - - - - - - - - - - 29.0\nTinyGPT-V [28] Phi-2 (2.7B) - 33.6 - - 24.8 - - - - - - - - -\nSPHINX-Tiny [14] TinyLlama-1.1B - - - 57.8 - - 26.4 1261.2 242.1 56.6 17.1/- 82.2 52.3 23.8\nALLaV A-Longer [29] Phi-2 (2.7B) - 50.0 - 50.3 - 33.2/- - 1564.6\u202064.6 - - 71.7 35.5\nMM1-3B [30] MM1-3B 82.5 - 76.1 72.9 - 38.6/35.7 32.6 1469.4 303.1 70.8 63.9/69.4 87.6 76.8 42.2\nLLaV A-Gemma [31] Gemma-2b-it 71.4 58.7 - - - - - 1133.0 307.0 - - 85.3 - 19.1\nMipha-3B [32] Phi-2 (2.7B) 81.3\u221763.9\u221770.9 56.6 47.5 - - 1488.9 295.0 69.7 - 86.7 - 32.1\nVL-Mamba [18] Mamba-2.8B 76.6 56.2 65.4 48.9 - - - 1369.6 - 57.0 - 84.4 - 32.6\nMiniCPM-V 2.0[33] MiniCPM-2.4B - - - 74.1 - 38.2/- 38.7 1808.6\u202069.6 - - - -\nDeepSeek-VL [34] DeepSeek-LLM-1B - - - - - 32.2/- 31.1 - - 64.6 -/66.7 87.6 - 36.8", "Efficient MLLMArchitecture (\u00a72)Vision Encoder (\u00a72.1)ViTamin [11], BRA VE[12],\nCobra[13], SPHINX-X[14]\nVision-Language Projector (\u00a72.2)QFormer [15], Perceiver Resampler[16],\nLDPv2[17], VSS[18], C/D-Abstractor[19],\nMEQ-Former[12]\nSmall Language Models (\u00a72.3)MobileVLM [20], LLaV A-Phi [21],\nImp-v1 [22], TinyLLaV A [23],\nBunny [24], Gemini Nano-2 [2],\nMobileVLM-v2 [17], MoE-LLaV A [25],\nCobra [13], Mini-Gemini [26],\nVary-toy [27], TinyGPT-V [28],\nSPHINX-Tiny [14], ALLaV A [29],\nMM1 [30], LLaV A-Gemma [31],\nMipha [32], VL-Mamba [18]\nMiniCPM-V 2.0 [33], DeepSeek-VL [34]\nVision Token Compression (\u00a72.4)Mini-Gemini [26], LLaV A-UHD [35],\nTextHawk [36], TinyChart [37], P2G [38],\nIXC2-4KHD [39], SPHINX-X[14], S2[40]\nLLaV A-PruMerge[41], MADTP[42],\nMoV A[43], Video-LLaV A[44]\nEfficient Structures (\u00a72.5)SPD [45], MoE-LLaV A [25],\nMM1 [30], Cobra [13], VL-Mamba [18],\nFastV[46], VTW[47]\nTraining (\u00a75)Pre-Training (\u00a75.1) Idefics2[48], TinyLLaV A[23], VILA[49]", "Dataset Name Type I \u2192O Source Method #.Instance Representative Publications\nLLaV A\u2019s IT [7] SFT I+T \u2192T MS-COCO[173] Auto. 150KMobileVLM [20], LLaV A-Phi [21],\nMini-Gemini [26], Vary-toy [27],\nTinyGPT-V [28], Imp-v1 [22],\nALLaV A [29],SPHINX-X [14],\nLLaV A-Gemma [31],MM1 [30]\nShareGPT4V\u2019s IT[55] SFT I+T \u2192TLCS, COCO [173], SAM [174],\nTextCaps[175], WikiArt [176]Auto.+Manu. \u2013Tiny-LLaV A [23], Mini-Gemini [26],\nMM1 [30], DeepSeek-VL [34],\nSPHINX-X [14]\nLLaV A-1.5\u2019s IT [54] SFT I+T \u2192TLLaV A[7],Visual Genome[177],\nVQAv2[57], ShareGPT[178],\nA-OKVQA[179],TextCaps[175],\nGQA[59], OKVQA[180],\nOCRVQA, RefCOCO[169, 181]Auto.+Manu. 665KTiny-LLava [23], VL-Mamba [18],\nCobra [13], LLaV A-Gemma [31],\nMipha [32], MoE-LLaV A [25]\nLRV-Instruct [182] SFT I+T \u2192T Visual Genome[177] Auto. 300K MoE-LLaV A [25], Cobra[13]\nLVIS-INSTRUCT-4V[56] SFT I+T \u2192T LVIS [183] Auto. 220KMoE-LLaV A [25], SPHINX-X [14],\nDeepSeek-VL [34], Cobra[13]", "GPUs. LLaV A-PruMerge[41] and MADTP [42] propose an adaptive visual token reduction ap-\nproach that significantly decreases the number of visual tokens while preserving comparable model\nperformance. TinyChart [37] and TextHawk [36] focus on document-oriented tasks, with the former\nadopting the Vision Token Merging module and the latter introducing the ReSampling and ReAr-\nrangement module. These modules can enhance fine-grained visual perception and information\ncompression capabilities.\nMulti-Scale Information Fusion Utilizing multi-scale image information is indeed crucial for\nvisual feature extraction. This approach allows the model to capture both the fine-grained details\npresent in smaller scales and the broader context available in larger scales. Mini-Gemini [26] com-\nprises twin encoders, one for high-resolution images and the other for low-resolution visual em-\nbedding. It proposes Patch Info Mining, which uses low-resolution visual embeddings as queries", "its selection is closely related to the lightweight nature of MLLM. In comparison to conventional\nMLLMs with parameter sizes ranging from 7 billion to tens of billions[87, 88], efficient MLLMs\ntypically employ language models with less than 3 billion parameters, such as phi2-2.7B[74] by\nMicrosoft and Gemma-2B[78] by Google. Phi-2 trained on special data recipes can match the per-\nformance of models 25 times larger trained on regular data. Phi-3-mini [86] can be easily deployed\nlocally on a modern phone and achieves a quality that seems on-par with models such as Mixtral\n8x7B [89] and GPT-3.5. In addition to utilizing pre-trained models, MobileVLM[20] downscales\nLLaMA[87] and trains from scratch using open-source datasets. The specific model scaling is illus-\ntrated in the Table.1 and Table.4.\n2.4 Vision Token Compression\nInitial research has underscored the potential of MLLMs across various tasks, including visual ques-"], "retrieved_docs_id": ["0ad4077d27", "93d03b64f9", "8854744a1c", "8e97c297be", "26327c579e"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does ITRG enhance adaptability for tasks requiring multiple-step reasoning?\n", "true_answer": "ITRG enhances adaptability for tasks requiring multiple-step reasoning by iteratively retrieving and searching for the correct reasoning path.", "source_doc": "RAG.pdf", "source_id": "1f6c13012c", "retrieved_docs": ["vant knowledge without altering the parameters of LLMs, en-\nabling the model to perform more sophisticated tasks. Addi-\ntionally, CREA-ICL [Liet al. , 2023b ]leverages synchronous\nretrieval of cross-lingual knowledge to assist in acquiring ad-\nditional information, while RECITE forms context by sam-\npling one or more paragraphs from LLMs.\nDuring the inference phase, optimizing the process of RAG\ncan benefit adaptation to more challenging tasks. For ex-ample, ITRG [Feng et al. , 2023a ]enhances adaptability for\ntasks requiring multiple-step reasoning by iteratively retriev-\ning and searching for the correct reasoning path. ITER-\nRETGEN [Shao et al. , 2023 ]employs an iterative approach\nto coalesce retrieval and generation, achieving an alternating\nprocess of \u201dretrieval-enhanced generation\u201d and \u201dgeneration-\nenhanced retrieval.\u201d\nOn the other hand, IRCOT [Trivedi et al. , 2022 ]merges the\nconcepts of RAG and CoT [Weiet al. , 2022 ], employing al-", "Figure 1.2: Larger models make increasingly ef\ufb01cient use of in-context information. We show in-context learning\nperformance on a simple task requiring the model to remove random symbols from a word, both with and without a\nnatural language task description (see Sec. 3.9.2). The steeper \u201cin-context learning curves\u201d for large models demonstrate\nimproved ability to learn a task from contextual information. We see qualitatively similar behavior across a wide range\nof tasks.\nsuf\ufb01cient to enable a human to perform a new task to at least a reasonable degree of competence. Aside from pointing\nto a conceptual limitation in our current NLP techniques, this adaptability has practical advantages \u2013 it allows humans\nto seamlessly mix together or switch between many tasks and skills, for example performing addition during a lengthy\ndialogue. To be broadly useful, we would someday like our NLP systems to have this same \ufb02uidity and generality.", "precise nature. Furthermore, the authors in [508] propose\nto dynamically select text or code as the format of CoTs to\ncombine their advantages.\n6.3.2 Improved CoT Prompting Strategies\nDespite the performance improvement in complex reason-\ning tasks, CoT prompting still suffers from problems like\nincorrect reasoning and instability. In this part, we first\nintroduce how to design better CoT prompts and enhanced\nCoT generation strategies, and then introduce the extension\nof the basic chain structure of CoT. Figure 15 illustrates the\nevolution of representative CoT prompting strategies.\nBetter Prompt Design. Since CoT prompting relies on\nprompts to elicit the reasoning capabilities of LLMs, the\ndesign of prompts is critical to its performance. As a di-\nrect approach, it is shown that using diverse CoTs ( i.e.,\nmultiple reasoning paths for each problem) can effectively\nenhance the performance [437]. Another intuitive idea is\nthat prompts with more complex reasoning paths are more", "6.3 Reasoning\nWe evaluate PaLM on a suite of reasoning tasks , which require multi-step arithmetic or commonsense logical\nreasoning to produce the correct answer. While language models have been shown to perform a wide range of\ntasks, it is commonly accepted that language models still struggle to perform tasks that require multi-step\nreasoning (Rae et al., 2021). The two broad categories of reasoning benchmarks evaluated in this work are as\nfollows:\n\u2022Arithmetic reasoning \u2013 These tasks often involve grade-school level natural language math problems\nwhich require multi-step logical inference. The math itself is typically trivial, and the di\ufb03cult part is\ntransforming the natural language into mathematical equations. In this work, we evaluated both the\ncalculator form and direct inference form, where the model itself performs the math.\nInput : Q: Roger has 5 tennis balls. He buys 2 more cans of tennis balls. Each can has 3 tennis balls. How many\ntennis balls does he have now?", "refine the reasoning processes, Self-Refine [685] elicits feed-\nback from LLMs on self-generated solutions, enabling the\niterative refinement of solutions based on the feedback.\nMoreover, several studies improve the consistency in the\nreasoning chain of LLMs through the integration of process-\nbased supervision during training [688, 689]. As a promis-\ning solution, recent approaches reformulate the complex\nreasoning tasks into code generation tasks, where the strict\nexecution of the generated code ensures the consistency\nbetween the reasoning process and the outcome. Also,\nit has been revealed that there might exist inconsistency\nbetween tasks with similar inputs, where small changesin the task description may cause the model to produce\ndifferent results [49, 592]. To mitigate this problem, self-\nconsistency [436] adopts the ensemble of multiple reasoning\npaths to enhance the decoding process of LLMs.\nReasoning Inconsistency\nLLMs may generate the correct answer following"], "retrieved_docs_id": ["1f6c13012c", "74ba43f588", "537553d577", "b7a64173f5", "c938be55de"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does Llama-2 optimize memory bandwidth during autoregressive decoding?\n", "true_answer": "Llama-2 optimizes memory bandwidth during autoregressive decoding by using a technique called grouped-query attention (GQA), which is a Sharing-based Attention mechanism that partitions all query heads into several groups, with each group\u2019s query heads sharing a common key-value head.", "source_doc": "multimodal.pdf", "source_id": "7d67b0debb", "retrieved_docs": ["low-rank, fixed and learnable pattern strategies, and hardware-assisted attention.\nSharing-based Attention Sharing-based Attention aims to expedite attention computation dur-\ning inference by by sharing computation resources across multiple Key-Value heads. For exam-\nple, Llama-2 [91] incorporates a technique called grouped-query attention (GQA) [143] to opti-\nmize memory bandwidth during the autoregressive decoding. GQA is a Sharing-based Attention\ntechnique that seeks to achieve a balance between performance and efficiency, positioned between\nmulti-head attention and multi-query attention [144] mechanisms. In multi-head attention, each head\nutilizes a distinct set of linear transformation parameters for queries, keys, and values. Conversely,\nmulti-query attention shares a single set of key-value heads across all queries. GQA partitions all\nquery heads into several groups, with each group\u2019s query heads sharing a common key-value head,", "advance, which eliminates most memory waste in existing\nsystems, as in Fig. 2.\n4.3 Decoding with PagedAttention and vLLM\nNext, we walk through an example, as in Fig. 6, to demon-\nstrate how vLLM executes PagedAttention and manages the\nmemory during the decoding process of a single input se-\nquence: 1\u25cbAs in OS\u2019s virtual memory, vLLM does not require\nreserving the memory for the maximum possible generated\nsequence length initially. Instead, it reserves only the nec-\nessary KV blocks to accommodate the KV cache generated\nduring prompt computation. In this case, The prompt has 7\ntokens, so vLLM maps the first 2 logical KV blocks (0 and\n1) to 2 physical KV blocks (7 and 1, respectively). In the\nprefill step, vLLM generates the KV cache of the prompts\nand the first output token with a conventional self-attention\nalgorithm (e.g., [ 13]). vLLM then stores the KV cache of the\nfirst 4 tokens in logical block 0 and the following 3 tokens\nin logical block 1. The remaining slot is reserved for the", "On the other hand, the KV cache during the autoregressive\ngeneration phase should remain unshared due to the dif-\nferent sample results and their dependence on context and\nposition. The extent of KV cache sharing depends on the\nspecific decoding algorithm employed. In more sophisticated\nalgorithms like beam search [ 49], different request beams\ncan share larger portions (up to 55% memory saving, see\u00a76.3) of their KV cache, and the sharing pattern evolves as\nthe decoding process advances.\nScheduling for unknown input & output lengths. The\nrequests to an LLM service exhibit variability in their input\nand output lengths. This requires the memory management\nsystem to accommodate a wide range of prompt lengths. In\naddition, as the output length of a request grows at decoding,\nthe memory required for its KV cache also expands and may\nexhaust available memory for incoming requests or ongoing\ngeneration for existing prompts. The system needs to make", "be accommodated. Moreover, inefficient memory manage-\nment can further decrease the batch size, as shown in Fig. 2.\nAdditionally, given the current trends, the GPU\u2019s computa-\ntion speed grows faster than the memory capacity [ 17]. For\nexample, from NVIDIA A100 to H100, The FLOPS increases\nby more than 2x, but the GPU memory stays at 80GB max-\nimum. Therefore, we believe the memory will become an\nincreasingly significant bottleneck.\nComplex decoding algorithms. LLM services offer a range\nof decoding algorithms for users to select from, each with\nvarying implications for memory management complexity.\nFor example, when users request multiple random samples\nfrom a single input prompt, a typical use case in program\nsuggestion [ 18], the KV cache of the prompt part, which\naccounts for 12% of the total KV cache memory in our ex-\nperiment (\u00a76.3), can be shared to minimize memory usage.\nOn the other hand, the KV cache during the autoregressive", "ward passes throughout the whole network.\n2.5 High Inference Latency\nAccording to Pope et al. [431] , Weng [605] , two\nreasons why LLMs exhibit high inference latencies\nare: (1) low parallelizability since the inference\nprocedure proceeds one token at a time and (2)\nlarge memory footprints , due to the model size\nand the transient states needed during decoding\n(e.g., attention key and value tensors). Further, the\nauthors also discuss the quadratic scaling of the\nattention mechanisms in Transformers, which we\ndiscuss separately in Sec. 2.6.\nHigh Inference Latency [431, 605]\nLLM inference latencies remain high be-\ncause of low parallelizability and large mem-\nory footprints.\nIn the following section, we review techniques\nused to address these challenges by e.g., reduc-\ning the memory footprint (size and/or bandwidth),\nor accelerating specific computational operations.\nNote that some of these techniques may also be\napplicable during the training process, but we dis-"], "retrieved_docs_id": ["7d67b0debb", "6b1f080e0f", "99dba88b12", "75b52830d5", "39c57adfca"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What percentage of the overall cost does DAPT account for in ChipNeMo training?\n", "true_answer": "DAPT accounts for less than 1.5% of the overall cost in ChipNeMo training.", "source_doc": "ChipNemo.pdf", "source_id": "d9ae12f819", "retrieved_docs": ["large adapter exhibiting a slight improvement.\n3.4. Training Cost\nAll models have undergone training using 128 A100 GPUs.\nWe estimate the costs associated with domain adaptive pre-\ntraining for ChipNeMo as illustrated in Table 1. It is worth\nnoting that DAPT accounts for less than 1.5% of the overall\n5", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ndomain-specific data improves the retriever hit rate\nby 30% over a pre-trained state-of-the-art retriever, in\nturn improving overall quality of RAG responses.\nThe paper is organized as follows. Section 2 outlines do-\nmain adaptation and training methods used including the\nadapted tokenizer, DAPT, model alignment, and RAG. Sec-\ntion 3 describes the experimental results including human\nevaluations for each application. Section 4 describes rel-\nevant LLM methods and other work targeting LLMs for\nchip design. Finally, detailed results along with additional\nmodel training details and examples of text generated by the\napplication use-cases are illustrated in the Appendix.\n2. ChipNeMo Domain Adaptation Methods\nChipNeMo implements multiple domain adaptation tech-\nniques to adapt LLMs to the chip design domain. These\ntechniques include domain-adaptive tokenization for chip\ndesign data, domain adaptive pretraining with large corpus", "the raw dataset, then continued-pretrain a foundation model\nwith the domain-specific data. We call the resulting model a\nChipNeMo foundation model. DAPT is done on a fraction\nof the tokens used in pre-training, and is much cheaper, only\nrequiring roughly 1.5% of the pretraining compute.\nLLM tokenizers convert text into sequences of tokens for\ntraining and inference. A domain-adapted tokenizer im-\nproves the tokenization efficiency by tailoring rules and\npatterns for domain-specific terms such as keywords com-\nmonly found in RTL. For DAPT, we cannot retrain a new\ndomain-specific tokenizer from scratch, since it would make\nthe foundation model invalid. Instead of restricting Chip-\nNeMo to the pre-trained general-purpose tokenizer used\nby the foundation model, we instead adapt the pre-trained\ntokenizer to our chip design dataset, only adding new tokens\nfor domain-specific terms.\nChipNeMo foundation models are completion models whichrequire model alignment to adapt to tasks such as chat.", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ncost of pretraining a foundational model from scratch.\nModel Size Pretraining DAPT SFT\n7B 184,320 2,620 90\n13B 368,640 4,940 160\n70B 1,720,320 20,500 840\nTable 1: Training cost of LLaMA2 models in A100 GPU hours.\nPretraining cost from (Touvron et al., 2023).\n3.5. RAG and Engineering Assistant Chatbot\nWe created a benchmark to evaluate the performance of\ndesign chat assistance, which uses the RAG method. This\nbenchmark includes 88 questions in three categories: archi-\ntecture/design/verification specifications (Specs), testbench\nregression documentation (Testbench), and build infrastruc-\nture documentation (Build). For each question, we specify\nthe golden answer as well as the paragraphs in the design\ndocument that contains the relevant knowledge for the an-\nswer. These questions are created by designers manually\nbased on a set of design documents as the data store for\nretrieval. It includes about 1.8K documents, which were", "ChipNeMo: Domain-Adapted LLMs for Chip Design\nour application of a low learning rate.\nWe refer readers to Appendix for details on the training data\ncollection process A.2, training data blend A.3, and imple-\nmentation details and ablation studies on domain-adaptive\npretraining A.6.\n2.3. Model Alignment\nAfter DAPT, we perform model alignment. We specifically\nleverage two alignment techniques: supervised fine-tuning\n(SFT) and SteerLM (Dong et al., 2023). We adopt the iden-\ntical hyperparameter training configuration as DAPT for all\nmodels, with the exception of using a reduced global batch\nsize of 128. We employ an autoregressive optimization ob-\njective, implementing a strategy where losses associated\nwith tokens originating from the system and user prompts\nare masked (Touvron et al., 2023). This approach ensures\nthat during backpropagation, our focus is exclusively di-\nrected towards the optimization of answer tokens.\nWe combined our domain alignment dataset, consisting"], "retrieved_docs_id": ["d9ae12f819", "df0b9868f2", "273b593026", "7313e64a59", "a5a7c4ceb0"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does a purely parameterized language model acquire and store world knowledge?\n", "true_answer": "A purely parameterized language model acquires world knowledge from vast corpora and stores it in the parameters of the model.", "source_doc": "RAG.pdf", "source_id": "fc82ce8e28", "retrieved_docs": ["play distinct roles. Parametric knowledge is acquired through\ntraining LLMs and stored in the neural network weights, rep-\nresenting the model\u2019s understanding and generalization of\nthe training data, forming the foundation for generated re-\nsponses. Non-parametric knowledge, on the other hand, re-\nsides in external knowledge sources such as vector databases,\nnot encoded directly into the model but treated as updatable\nsupplementary information. Non-parametric knowledge em-\npowers LLMs to access and leverage the latest or domain-\nspecific information, enhancing the accuracy and relevance\nof responses.\nPurely parameterized language models (LLMs) store their\nworld knowledge, which is acquired from vast corpora, in\nthe parameters of the model. Nevertheless, such models have\ntheir limitations. Firstly, it is difficult to retain all the knowl-\nedge from the training corpus, especially for less common\nand more specific knowledge. Secondly, since the model", "putational expenses for both training and inference. To ad-\ndress the limitations of purely parameterized models, lan-\nguage models can adopt a semi-parameterized approach by\nintegrating a non-parameterized corpus database with pa-\nrameterized models. This approach is known as Retrieval-\nAugmented Generation (RAG).\nThe term Retrieval-Augmented Generation (RAG) was\nfirst introduced by [Lewis et al. , 2020 ]. It combines a pre-\ntrained retriever with a pre-trained seq2seq model (generator)\nand undergoes end-to-end fine-tuning to capture knowledge\nin a more interpretable and modular way. Before the advent\nof large models, RAG primarily focused on direct optimiza-\ntion of end-to-end models. Dense retrievals on the retrieval\nside, such as the use of vector-based Dense Passage Retrieval\n(DPR) [Karpukhin et al. , 2020 ], and training smaller models\non the generation side are common practices. Due to the\noverall smaller parameter size, both the retriever and gener-", "lows the decide-retrieve-reflect-read process, introduc-\ning a module for active judgment. This adaptive and\ndiverse approach allows for the dynamic organization of\nmodules within the Modular RAG framework.\n4 Retriever\nIn the context of RAG, the \u201dR\u201d stands for retrieval, serving\nthe role in the RAG pipeline of retrieving the top-k relevant\ndocuments from a vast knowledge base. However, crafting\na high-quality retriever is a non-trivial task. In this chapter,\nwe organize our discussions around three key questions: 1)\nHow to acquire accurate semantic representations? 2) How\nto match the semantic spaces of queries and documents? 3)\nHow to align the output of the retriever with the preferences\nof the Large Language Model ?\n4.1 How to acquire accurate semantic\nrepresentations?\nIn RAG, semantic space is the multidimensional space where\nquery and Document are mapped. When we perform re-\ntrieval, it is measured within the semantic space. If the se-", "sources to acquire precise knowledge [458], while more ef-\nforts should be made to investigate how to adapt to the data\nvariety in a cost-effective way. Second, with the evolution of\nreal-world information, the knowledge stored in LLMs may\nbecome outdated or incorrect. It is necessary to explore how\nto synchronize the updated knowledge into LLMs through\na cost-effective manner [873, 874]. Third, it is promising to\ninvestigate the use of factual information from KG to align\nLLMs in generating more faithful content [875, 876], which\ncan help reduce the hallucination of LLMs.\nIn addition to exploring KG-enhanced LLMs, it is also\nmeaningful to leverage LLMs to improve the tasks on the\nKG side ( i.e.,LLM4KG) [861, 877]. A typical example is that\nLLMs can help supplement or construct the KG. We omit\nthe discussion of this part, since it is beyond our scope.\n8.1.6 LLM-based Agent\nThe research on agents in AI aims to develop entities that\ncan perceive the environment, make decisions, and take", "providing an effective solution to the incomplete and insuf-\nficient knowledge problem inherent in purely parameterized\nmodels.\nThe paper systematically reviews and analyzes the current\nresearch approaches and future development paths of RAG,\nsummarizing them into three main paradigms: Naive RAG,\nAdvanced RAG, and Modular RAG. Subsequently, the paper\nprovides a consolidated summary of the three core compo-\nnents: Retrieval, Augmented, and Generation, highlighting\nthe improvement directions and current technological char-\nacteristics of RAG. In the section on augmentation methods,the current work is organized into three aspects: the augmen-\ntation stages of RAG, augmentation data sources, and aug-\nmentation process. Furthermore, the paper summarizes the\nevaluation system, applicable scenarios, and other relevant\ncontent related to RAG. Through this article, readers gain a\nmore comprehensive and systematic understanding of large\nmodels and retrieval-Augmented generation. They become"], "retrieved_docs_id": ["fc82ce8e28", "33aae5a21d", "8fe8499442", "2d6e5b1f02", "1bd400d39e"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How do pre-trained language models primarily function?\n", "true_answer": "Pre-trained language models primarily function as completion machines.", "source_doc": "hallucination.pdf", "source_id": "f524021191", "retrieved_docs": ["tasks, which do not require generating full sentences or paragraphs. None of the large language models we\ncompare against in other sections (GPT-3, GLaM, Gopher, LaMDA, Megatron-Turing NLG) report few-shot\nor \ufb01netuning results on conditional natural language generation tasks (English or multilingual).\nOur work thus presents the \ufb01rst benchmark of large LMs for few-shot modeling of conditional natural language\ngeneration tasks. As a comparison point we evaluate against LaMDA 137B, which did not report results on\nthese benchmarks in Thoppilan et al. (2022) but was available for us to run.\nFor \ufb01netuning, prior SOTA results primarily came from \ufb01netuning T5 (Ra\ufb00el et al., 2020), mT5 (Xue et al.,\n2021b), or BART (Lewis et al., 2020), which are encoder-decoder models pre-trained with an in\ufb01lling objective\n(masked LM or span corruption). These models are signi\ufb01cantly smaller than PaLM, ranging from 130M to", "This can be attributed to the pre-training phase already capturing significant information, leaving the fine-tuning\nstage primarily to focus on task-specific adjustments. In essence, LoRA offers a compelling approach to parameter\nreduction by leveraging the notion of intrinsic dimension in weight matrices. By adopting a mathematically rigorous\nframework, LoRA enables more efficient adaptation of pre-trained language models to new tasks during the fine-tuning", "harm) in tasks such as translation, code generation, commonsense reasoning, open-ended dialog, arithmetic\nreasoning and question answering.\nAdditionally, bias can pervade a system depending on the speci\ufb01c downstream application, its speci\ufb01c training\npipeline, and application-level protections (e.g., safety \ufb01lters). While we evaluate the pre-trained model\nhere for fairness and toxicity along certain axes, it is possible that these biases can have varied downstream\nimpacts depending on how the model is used. It is also unclear if evaluations done on the pre-trained language\nmodels a\ufb00ect the downstream task evaluations after the models are \ufb01netuned. Therefore, we recommend\nappropriate measures be taken to assess the fairness gaps in the application context before deployment.\n11 Ethical Considerations\nThe ability to do language modeling at such large scale and quality unlocks the potential for a wide variety", "(LVLMs). The goal of MLLMs is to activate the visual capabilities of LLMs, enabling them to \"see\"\nthe world via images or videos. Combined with strong reasoning and language generation abilities,\nMLLMs trigger a series of downstream tasks in multimodal domains, such as image/video captioning\nand visual question answering. Additionally, MLLMs serve as the foundation for applications in\nother fields, such as AI assistants, embodied agents, and robotics.\nIntegrating the two modalities of vision and language involves primarily two types of approaches.\nThe first line of work is built upon off-the-shelf pre-trained uni-modal models. Specifically, these\nMLLMs usually incorporate a learnable interface between pre-trained visual encoders and LLMs.\nThe interface extracts and integrates information from visual modalities. Such interfaces can be\nfurther categorized into 1) learnable query-based and 2) projection layer based. Learnable query-", "holistically, as well as token-level tasks such as\nnamed entity recognition and question answering,\nwhere models are required to produce \ufb01ne-grained\noutput at the token level (Tjong Kim Sang and\nDe Meulder, 2003; Rajpurkar et al., 2016).There are two existing strategies for apply-\ning pre-trained language representations to down-\nstream tasks: feature-based and\ufb01ne-tuning . The\nfeature-based approach, such as ELMo (Peters\net al., 2018a), uses task-speci\ufb01c architectures that\ninclude the pre-trained representations as addi-\ntional features. The \ufb01ne-tuning approach, such as\nthe Generative Pre-trained Transformer (OpenAI\nGPT) (Radford et al., 2018), introduces minimal\ntask-speci\ufb01c parameters, and is trained on the\ndownstream tasks by simply \ufb01ne-tuning allpre-\ntrained parameters. The two approaches share the\nsame objective function during pre-training, where\nthey use unidirectional language models to learn\ngeneral language representations.\nWe argue that current techniques restrict the"], "retrieved_docs_id": ["fc7baf7fa0", "bf757f65af", "e474b3fe6d", "3799aaa107", "8b03dbb287"], "reranker_type": "None", "search_type": "text", "rr": 0.0, "hit": 0}, {"question": "How did using a larger learning rate affect the model's performance in the ablation studies?\n", "true_answer": "Using a larger learning rate led to substantial degradations across all domain-specific and academic benchmarks, except on coding.", "source_doc": "ChipNemo.pdf", "source_id": "49056b4ebb", "retrieved_docs": ["ablation studies to say this conclusively. However, Du et al. (2021) did perform ablation studies on the same\ntraining corpus, and show that the improvement in few-shot learning from careful data \ufb01ltering is extremely\nsigni\ufb01cant.\nSimilarly, we did not perform ablation studies to tease out the e\ufb00ects of (1) vs (2), due to the high training\ncost of performing such a study at full scale. In other words, a critical open scaling question is: \u201cHow would\na 62B parameter model trained for 7T tokens compare to our 540B parameter model trained for 780B tokens?\nWhat about a 120B model for 3.6T tokens? 240B for 1.8T tokens?\u201d It is clear that such a model would have\nroughly the same total training cost as PaLM 540B. However, if downstream task performance were to be\ncomparable, the smaller model would certainly be preferable, as the inference cost is proportional to its size.\nVery recently, Ho\ufb00mann et al. (2022) was published to explore this exact question. There, the authors train", "3.3. Training Ablation Studies\nFor our ablation studies, we conducted multiple rounds of\ndomain adaptive pre-training. We provide brief summaries\nand refer to the Appendix A.6 for details.\nThe differences between training with the augmented tok-\nenizer and the original tokenizer appeared to be negligible.\nWe thus primarily attribute the accuracy degradation on\nopen-domain academic benchmarks to domain data. More-\nover, the removal of the public dataset only slightly re-\ngressed on most tasks including academic benchmarks.\nIn our exploration, we experimented with employing a larger\nlearning rate, as in CodeLLaMA (Rozi `ere et al., 2023). We\nobserved large spikes in training loss at the initial training\nsteps. Although this approach eventually led to improved\ntraining and validation loss, we noted substantial degrada-\ntions across all domain-specific and academic benchmarks,\nexcept on coding. We hypothesize that a smaller learning", "mark results are presented in Appendix A.6. Our research\nfindings can be summarized as follows:\n\u2022DAPT exerts a substantial positive impact on tasks\nwithin the domain itself. This effect is manifested in\nsignificant improvements in internal design knowledge\nas well as general circuit design knowledge.\n\u2022DAPT models exhibit a slight degradation in perfor-mance on open-domain academic benchmarks.\n\u2022The use of larger and more performant foundational\nmodels yields better zero-shot results on domain-\nspecific tasks. Furthermore, the employment of su-\nperior base models results in enhanced domain models\npost-DAPT, leading to heightened performance on in-\ndomain tasks.\n\u2022Improvements attributed to DAPT with in-domain\ntasks exhibit a positive correlation with model size,\nwith larger models demonstrating more pronounced\nenhancements in domain-specific task performance.\n3.3. Training Ablation Studies\nFor our ablation studies, we conducted multiple rounds of", "token log-probability when conditioned on the document and question. For DPRD [ 46] (winograd\nschemas), we replace the de\ufb01nite pronoun with the two possible referrents and predict the resolution\nthat the generative model assigns higher average token log-probability to the rest of the sequence\nafter the substitution.\nAblation studies We perform three different ablation studies (Table 5). First, we examine the\nperformance of our method without the auxiliary LM objective during \ufb01ne-tuning. We observe that\nthe auxiliary objective helps on the NLI tasks and QQP. Overall, the trend suggests that larger datasets\nbene\ufb01t from the auxiliary objective but smaller datasets do not. Second, we analyze the effect of the\nTransformer by comparing it with a single layer 2048 unit LSTM using the same framework. We\nobserve a 5.6 average score drop when using the LSTM instead of the Transformer. The LSTM only\noutperforms the Transformer on one dataset \u2013 MRPC. Finally, we also compare with our transformer", "effect on scaling.\n\u2022The optimal choice of learning rate is sensitive to the target loss. When training close to convergence,\nit may be necessary to use a smaller learning rate to avoid divergences. But when conducting a short\ntraining run (eg due to compute limitations), it may be possible to use a larger learning rate. We did\nnot experiment with higher learning rates for training runs that did not proceed to convergence.\nD Supplemental Figures\nD.1 Early Stopping and Test vs Train\nIn section 5.3 we described the result shown in Figure 16, which provides a prediction for a lower bound on\nthe early stopping step. We also show the train and test loss for a given model size when training on different\nsized datasets.\nD.2 Universal Transformers\nWe compare the performance of standard Transformers to recurrent Transformers [DGV+18] in Figure 17.\nThese models re-use parameters, and so perform slightly better as a function of N, but slightly worse as a"], "retrieved_docs_id": ["23ab72b1b7", "49056b4ebb", "1769e97a8f", "7f205dcffa", "f6a9bd066d"], "reranker_type": "None", "search_type": "text", "rr": 0.5, "hit": 1}, {"question": "Which Microsoft language model, with less than 3 billion parameters, can match the performance of models 25 times larger?\n", "true_answer": "Phi-2, as trained on special data recipes, can match the performance of models 25 times larger trained on regular data.", "source_doc": "multimodal.pdf", "source_id": "26327c579e", "retrieved_docs": ["its selection is closely related to the lightweight nature of MLLM. In comparison to conventional\nMLLMs with parameter sizes ranging from 7 billion to tens of billions[87, 88], efficient MLLMs\ntypically employ language models with less than 3 billion parameters, such as phi2-2.7B[74] by\nMicrosoft and Gemma-2B[78] by Google. Phi-2 trained on special data recipes can match the per-\nformance of models 25 times larger trained on regular data. Phi-3-mini [86] can be easily deployed\nlocally on a modern phone and achieves a quality that seems on-par with models such as Mixtral\n8x7B [89] and GPT-3.5. In addition to utilizing pre-trained models, MobileVLM[20] downscales\nLLaMA[87] and trains from scratch using open-source datasets. The specific model scaling is illus-\ntrated in the Table.1 and Table.4.\n2.4 Vision Token Compression\nInitial research has underscored the potential of MLLMs across various tasks, including visual ques-", "Int8 absmax row-wise + decomposition 30.76 16.19 14.65 13.25 12.46\nAbsmax LLM.int8() (vector-wise + decomp) 25.83 15.93 14.44 13.24 12.45\nZeropoint LLM.int8() (vector-wise + decomp) 25.69 15.92 14.43 13.24 12.45\nWhen we look at the scaling trends of zeroshot performance of OPT models on the EleutherAI\nlanguage model evaluation harness in Figure 1, we see that LLM.int8() maintains full 16-bit perfor-\nmance as we scale from 125M to 175B parameters. On the other hand, the baseline, 8-bit absmax\nvector-wise quantization, scales poorly and degenerates into random performance.\nAlthough our primary focus is on saving memory, we also measured the run time of LLM.int8(). The\nquantization overhead can slow inference for models with less than 6.7B parameters, as compared to a\nFP16 baseline. However, models of 6.7B parameters or less \ufb01t on most GPUs and quantization is less\nneeded in practice. LLM.int8() run times is about two times faster for large matrix multiplications", "samples generated from the 8.3 billion parameters model\nin the Appendix C. Recently researchers from Microsoft in\ncollaboration with NVIDIA trained a 17 billion parameter\nGPT-2 model called Turing-NLG (Microsoft, 2020) using\nMegatron and showed that the accuracies further improve\nas they scale the model, highlighting the value of larger\nmodels.\nTo ensure we do not train on any data found in our test sets,\nwe calculate the percentage of test set 8-grams that also\nappear in our training set as done in previous work (Rad-\nford et al., 2019). The WikiText103 test set has at most\nFigure 6. Validation set perplexity. All language models are trained\nfor 300k iterations. Larger language models converge notice-\nably faster and converge to lower validation perplexities than their\nsmaller counterparts.\nTable 4. Model con\ufb01gurations used for BERT.\nParameter Layers Hidden Attention Total\nCount Size Heads GPUs\n336M 24 1024 16 128\n1.3B 24 2048 32 256\n3.9B 48 2560 40 512", "LORA: L OW-RANK ADAPTATION OF LARGE LAN-\nGUAGE MODELS\nEdward Hu\u2217Yelong Shen\u2217Phillip Wallis Zeyuan Allen-Zhu\nYuanzhi Li Shean Wang Lu Wang Weizhu Chen\nMicrosoft Corporation\n{edwardhu, yeshe, phwallis, zeyuana,\nyuanzhil, swang, luw, wzchen }@microsoft.com\nyuanzhil@andrew.cmu.edu\n(Version 2)\nABSTRACT\nAn important paradigm of natural language processing consists of large-scale pre-\ntraining on general domain data and adaptation to particular tasks or domains. As\nwe pre-train larger models, full \ufb01ne-tuning, which retrains all model parameters,\nbecomes less feasible. Using GPT-3 175B as an example \u2013 deploying indepen-\ndent instances of \ufb01ne-tuned models, each with 175B parameters, is prohibitively\nexpensive. We propose Low-RankAdaptation, or LoRA, which freezes the pre-\ntrained model weights and injects trainable rank decomposition matrices into each\nlayer of the Transformer architecture, greatly reducing the number of trainable pa-", "layer of the Transformer architecture, greatly reducing the number of trainable pa-\nrameters for downstream tasks. Compared to GPT-3 175B \ufb01ne-tuned with Adam,\nLoRA can reduce the number of trainable parameters by 10,000 times and the\nGPU memory requirement by 3 times. LoRA performs on-par or better than \ufb01ne-\ntuning in model quality on RoBERTa, DeBERTa, GPT-2, and GPT-3, despite hav-\ning fewer trainable parameters, a higher training throughput, and, unlike adapters,\nno additional inference latency . We also provide an empirical investigation into\nrank-de\ufb01ciency in language model adaptation, which sheds light on the ef\ufb01cacy of\nLoRA. We release a package that facilitates the integration of LoRA with PyTorch\nmodels and provide our implementations and model checkpoints for RoBERTa,\nDeBERTa, and GPT-2 at https://github.com/microsoft/LoRA .\n1 I NTRODUCTION\nPretrained \nWeights\n\ud835\udc4a\u2208\u211d\ud835\udc51\u00d7\ud835\udc51\nxh\n\ud835\udc35=0\n\ud835\udc34=\ud835\udca9(0,\ud835\udf0e2)\n\ud835\udc51\ud835\udc5fPretrained \nWeights\n\ud835\udc4a\u2208\u211d\ud835\udc51\u00d7\ud835\udc51\nxf(x)\n\ud835\udc51\nFigure 1: Our reparametriza-"], "retrieved_docs_id": ["26327c579e", "597313162a", "873274797e", "a9e285fd4b", "afdefe1735"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does Hardware-Aware Quantization optimize the performance of neural network models on specific hardware platforms?\n", "true_answer": "Hardware-Aware Quantization optimizes the performance of neural network models on specific hardware platforms by adjusting precision levels and quantization strategies to maximize performance and energy efficiency during inference.", "source_doc": "multimodal.pdf", "source_id": "31efe3044d", "retrieved_docs": ["Bit-shrinking [125] progressively reduce model bit-width while regulating sharpness to maintain\naccuracy throughout quantization. PackQViT [129] mitigates outlier effects during quantization.\nBiViT [128] introduces Softmax-aware Binarization to adjust the binarization process, minimizing\nerrors in binarizing softmax attention values. Xiao et al. [142] integrated a gradient regularization\nscheme to curb weight oscillation during binarization training and introduced an activation shift\nmodule to reduce information distortion in activations. Additionally, BinaryViT [130] integrates\nessential architectural elements from CNNs into a pure ViT framework, enhancing its capabilities.\nHardware-Aware Quantization optimizes the quantization process of neural network models for\nspecific hardware platforms ( e.g., GPUs [131], FPGA [132]). It adjusts precision levels and quan-\ntization strategies to maximize performance and energy efficiency during inference. For example,", "*Equal contribution1Qualcomm AI Research, an initia-\ntive of Qualcomm Technologies, Inc.. Correspondence to:\nMarkus Nagel <markusn@qti.qualcomm.com >, Rana Ali Am-\njad<ramjad@qti.qualcomm.com >, Tijmen Blankevoort <tij-\nmen@qti.qualcomm.com >.\nProceedings of the 37thInternational Conference on Machine\nLearning , Vienna, Austria, PMLR 119, 2020. Copyright 2020 by\nthe author(s).cations, and even dedicated low-power hardware.\nOne effective way to optimize neural networks for infer-\nence is neural network quantization (Krishnamoorthi, 2018;\nGuo, 2018). In quantization, neural network weights and\nactivations are kept in a low-bit representation for both\nmemory transfer and calculations in order to reduce power\nconsumption and inference time. The process of quantizing\na network generally introduces noise, which results in a loss\nof performance. Various prior works adapt the quantization\nprocedure to minimize the loss in performance while going\nas low as possible in the number of bits used.", "[40] Chaoqi Wang, Roger Grosse, Sanja Fidler, and Guodong Zhang. Eigendamage: Structured\npruning in the Kronecker-factored eigenbasis. In International Conference on Machine Learning\n(ICML) , 2019.\n[41] Kuan Wang, Zhijian Liu, Yujun Lin, Ji Lin, and Song Han. HAQ: Hardware-aware automated\nquantization with mixed precision. In Conference on Computer Vision and Pattern Recognition\n(CVPR) , 2019.\n[42] Peisong Wang, Qiang Chen, Xiangyu He, and Jian Cheng. Towards accurate post-training\nnetwork quantization via bit-split and stitching. In International Conference on Machine\nLearning (ICML) , 2020.\n[43] Haichuan Yang, Shupeng Gui, Yuhao Zhu, and Ji Liu. Automatic neural network compression by\nsparsity-quantization joint learning: A constrained optimization-based approach. In Conference\non Computer Vision and Pattern Recognition (CVPR) , 2020.\n[44] Zhewei Yao, Zhen Dong, Zhangcheng Zheng, Amir Gholami, Jiali Yu, Eric Tan, Leyuan", "[67] AE Gamal, L Hemachandra, Itzhak Shperling, and\nV Wei. Using simulated annealing to design good\ncodes. IEEE Transactions on Information Theory ,\n33(1):116\u2013123, 1987.\n[68] Sahaj Garg, Anirudh Jain, Joe Lou, and Mitchell\nNahmias. Confounding tradeoffs for neu-\nral network quantization. arXiv preprint\narXiv:2102.06366 , 2021.\n[69] Sahaj Garg, Joe Lou, Anirudh Jain, and Mitchell\nNahmias. Dynamic precision analog computing for\nneural networks. arXiv preprint arXiv:2102.06365 ,\n2021.\n[70] Amir Gholami, Kiseok Kwon, Bichen Wu, Zizheng\nTai, Xiangyu Yue, Peter Jin, Sicheng Zhao, and\nKurt Keutzer. SqueezeNext: Hardware-aware\nneural network design. Workshop paper in CVPR ,\n2018.\n[71] Amir Gholami, Michael W Mahoney, and Kurt\nKeutzer. An integrated approach to neural network\ndesign, training, and inference. Univ. California,\nBerkeley, Berkeley, CA, USA, Tech. Rep , 2020.\n[72] Boris Ginsburg, Sergei Nikolaev, Ahmad Kiswani,\nHao Wu, Amir Gholaminejad, Slawomir Kierat,", "NN are grouped into sensitive/insensitive to quantization,\nand higher/lower bits are used for each layer. As such,\none can minimize accuracy degradation and still bene\ufb01t\nfrom reduced memory footprint and faster speed up with\nlow precision quantization. Recent work [ 267] has also\nshown that this approach is hardware-ef\ufb01cient as mixed-\nprecision is only used across operations/layers.\nC. Hardware Aware Quantization\nOne of the goals of quantization is to improve the\ninference latency. However, not all hardware provide\nthe same speed up after a certain layer/operation is\nquantized. In fact, the bene\ufb01ts from quantization is\nhardware-dependant, with many factors such as on-chip\nmemory, bandwidth, and cache hierarchy affecting the\nquantization speed up.\nIt is important to consider this fact for achieving\noptimal bene\ufb01ts through hardware-aware quantization [ 87,\n91,246,250,254,256,265,267]. In particular, the\nwork [ 246] uses a reinforcement learning agent to"], "retrieved_docs_id": ["31efe3044d", "7542ef2a73", "1aac93e2d3", "a1f1a4c591", "3e3cb80a9a"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "Which large language models are mentioned as being explored for application in EDA algorithms and the chip design process?\n", "true_answer": "The large language models mentioned are ChatGPT, Bard, Vicuna, and those discussed in the papers by Khailany et al. (2020), Ren & Fojtik (2021), and Roy et al. (2021).", "source_doc": "ChipNemo.pdf", "source_id": "0e1c7b711e", "retrieved_docs": ["customization for enhancing the effectiveness of\nlarge language models in specialized applications.\n1. Introduction\nOver the last few decades, Electronic Design Automation\n(EDA) algorithms and tools have provided huge gains in\nchip design productivity. Coupled with the exponential\nincreases in transistor densities provided by Moore\u2019s law,\nEDA has enabled the development of feature-rich complex\nSoC designs with billions of transistors. More recently, re-\n*Equal contribution1NVIDIA.searchers have been exploring ways to apply AI to EDA al-\ngorithms and the chip design process to further improve chip\ndesign productivity (Khailany et al., 2020; Ren & Fojtik,\n2021; Roy et al., 2021). However, many time-consuming\nchip design tasks that involve interfacing with natural lan-\nguages or programming languages still have not been auto-\nmated. The latest advancements in commercial (ChatGPT,\nBard, etc.) and open-source (Vicuna (Chiang et al., 2023),", "Bard, etc.) and open-source (Vicuna (Chiang et al., 2023),\nLLaMA2 (Touvron et al., 2023), etc.) large language mod-\nels (LLM) provide an unprecedented opportunity to help\nautomate these language-related chip design tasks. Indeed,\nearly academic research (Thakur et al., 2023; Blocklove\net al., 2023; He et al., 2023) has explored applications of\nLLMs for generating Register Transfer Level (RTL) code\nthat can perform simple tasks in small design modules as\nwell as generating scripts for EDA tools.\nWe believe that LLMs have the potential to help chip de-\nsign productivity by using generative AI to automate many\nlanguage-related chip design tasks such as code generation,\nresponses to engineering questions via a natural language\ninterface, analysis and report generation, and bug triage. In\nthis study, we focus on three specific LLM applications: an\nengineering assistant chatbot for GPU ASIC and Architec-\nture design engineers, which understands internal hardware", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ndomain-specific data improves the retriever hit rate\nby 30% over a pre-trained state-of-the-art retriever, in\nturn improving overall quality of RAG responses.\nThe paper is organized as follows. Section 2 outlines do-\nmain adaptation and training methods used including the\nadapted tokenizer, DAPT, model alignment, and RAG. Sec-\ntion 3 describes the experimental results including human\nevaluations for each application. Section 4 describes rel-\nevant LLM methods and other work targeting LLMs for\nchip design. Finally, detailed results along with additional\nmodel training details and examples of text generated by the\napplication use-cases are illustrated in the Appendix.\n2. ChipNeMo Domain Adaptation Methods\nChipNeMo implements multiple domain adaptation tech-\nniques to adapt LLMs to the chip design domain. These\ntechniques include domain-adaptive tokenization for chip\ndesign data, domain adaptive pretraining with large corpus", "processor with GPT-4 and GPT-3.5. Their findings showed\nthat although GPT-4 produced relatively high-quality codes,\nit still does not perform well enough at understanding and\nfixing the errors. ChipEDA (He et al., 2023) proposed to use\nLLMs to generate EDA tools scripts. It also demonstrated\nthat fine-tuned LLaMA2 70B model outperforms GPT-4\nmodel on this task.\n5. Conclusions\nWe explored domain-adapted approaches to improve LLM\nperformance for industrial chip design tasks. Our results\nshow that domain-adaptive pretrained models, such as the\n7B, 13B, and 70B variants of ChipNeMo, achieve simi-\nlar or better results than their base LLaMA2 models with\nonly 1.5% additional pretraining compute cost. Our largest\ntrained model, ChipNeMo-70B, also surpasses the much\nmore powerful GPT-4 on two of our use cases, engineering\nassistant chatbot and EDA scripts generation, while show-\ning competitive performance on bug summarization and\nanalysis. Our future work will focus on further improving", "niques: domain-adaptive tokenization, domain-\nadaptive continued pretraining, model alignment\nwith domain-specific instructions, and domain-\nadapted retrieval models. We evaluate these\nmethods on three selected LLM applications for\nchip design: an engineering assistant chatbot,\nEDA script generation, and bug summarization\nand analysis. Our evaluations demonstrate that\ndomain-adaptive pretraining of language models,\ncan lead to superior performance in domain re-\nlated downstream tasks compared to their base\nLLaMA2 counterparts, without degradations in\ngeneric capabilities. In particular, our largest\nmodel, ChipNeMo-70B, outperforms the highly\ncapable GPT-4 on two of our use cases, namely en-\ngineering assistant chatbot and EDA scripts gener-\nation, while exhibiting competitive performance\non bug summarization and analysis. These re-\nsults underscore the potential of domain-specific\ncustomization for enhancing the effectiveness of\nlarge language models in specialized applications."], "retrieved_docs_id": ["0e1c7b711e", "f23b3625e0", "df0b9868f2", "e6b9ba907a", "a6c3d05123"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How did UniNet [102] improve information accommodation by transformer and MLP operators?\n", "true_answer": "UniNet [102] introduced context-aware down-sampling modules to improve information accommodation by transformer and MLP operators.", "source_doc": "multimodal.pdf", "source_id": "e7939ae097", "retrieved_docs": ["UniNet [102] introduced context-aware down-sampling modules improving information accommo-\ndation by transformer and MLP operators.\nOptimization of Attention Mechanisms Methods focus on reducing computational complexity\nby introducing adaptive attention, learning sparse attention patterns, and dynamically adjusting at-\ntention mechanisms. Fayyaz et al. [135] implemented adaptive attention by scoring and adaptively\nsampling significant tokens. PatchMerger [103] extracted global information among regional to-\nkens and exchanged local self-attention with information among regional tokens via self-attention.\nDynamicViT [104] proposed an attention masking strategy to differentiably prune tokens by block-\ning interactions with other tokens. Additionally, Sepvit [105] conducted local-global information\ninteraction within and across windows using depthwise separable self-attention. These methods\ncollectively optimize attention mechanisms, enhancing computational efficiency and performance.", "Former [97] analyzed ViT-based model architectures and operators, introducing a dimension-\nconsistent pure transformer paradigm and employing latency-driven slimming to produce optimized\nmodels. Additionally, EfficientFormerV2 [98] proposed a supernet with low latency and high pa-\nrameter efficiency.\nArchitecture Search Methods involve employing neural architecture search algorithms [113]\nto explore and discover compact architectures tailored to specific tasks or constraints. For in-\nstance, Autoformer [99] intertwined weights within layers, enabling thorough training of thousands\nof subnets. NASViT [100] introduced a gradient projection algorithm, switchable layer scaling,\nand streamlined data augmentation, enhancing convergence and performance. Additionally, TF-\nTAS [101] investigated training-free architecture search methods, proposing an efficient scheme.\nUniNet [102] introduced context-aware down-sampling modules improving information accommo-", "FC1 Weights Self-Attention Block FC1 Layer ReLU FC2 Layer \u2026\n\u00d7 =ReLU FC2 Weights = \u00d7\n\u2026MLP Block \nFC1 Input \nFC1 Output FC2 input FC2 Output Figure 2: The architecture of a Transformer layer and how neurons\nare sparsely activated in FC1 and FC2 layers due to the ReLU func-\ntion. The neurons that are activated are represented as green rows or\ncolumns encircled by red lines. The output vector from FC1 is then\nsupplied to FC2 as its input vector.\nblock generates embedding vectors by capturing the relation-\nships among input tokens. In this process, different heads\nfocus on extracting distinct feature information. The compu-\ntation results from these different heads are aggregated and\nthen utilized as the input for the MLP block. The MLP block\napplies non-linear transformations via fully connected layers\nand activation functions to re\ufb01ne the input sequence repre-\nsentation. The output either advances to subsequent layers or\nforms the LLM\u2019s \ufb01nal output.", "ability of certain operators to learn in-context i.e., to adapt to unseen tasks by leveraging context. In deep\nlearning, the projections take on speci\ufb01c names: queryq=uMq,keyk=uMkandvaluev=uMv. We often\nrewrite the attention operator as y=A(q,k)v.\nRemark 2.1. Similarly to implicit convolutions, SelfAttention does not entangle its ability to access distant\ninformation with the number of parameters: it looks at the whole sequence at the price of O(L2)operations.\nSubquadratic Operators Existing approaches to subquadratic alternatives to attention can be summa-\nrized by altering the way the data control is implemented i.e., how the operator is nonlinearly de\ufb01ned by\nu, and then applied to v. For example, a layer of Attention-Free Transformers (AFTs) (Zhai et al., 2021)\nconstructs the operator through a combination of gating and SoftMax (AFT full) or gating and a single\nexplicit convolution (AFT conv). Gated State Spaces (GSS) instead compose the operator via gating and a", "5, while the CPU handles neuron 4. Once neuron 4\u2019s com-\nputation is complete, its output is sent to the GPU for result\nintegration.\n5 Neuron-aware Inference Engine\nThis section presents a detailed introduction to the neuron-\naware inference engine in PowerInfer. We \ufb01rst elaborate on\nthe design of activation predictors leveraged by PowerInfer in\n\u00a75.1. Then, we elucidate the process of dividing and managing\nneurons between the CPU and GPU in \u00a75.2. Following this,\nthe design of the hybrid execution model within PowerInfer\nis described in \u00a75.3. Lastly, we explain the details of neuron-\naware operators used in PowerInfer in \u00a75.4.\n5.1 Adaptive Sparsity Predictors\nThe online inference engine in PowerInfer reduces compu-\ntational loads by only processing those neurons that are pre-\ndicted to be activated. This method was also used in De-\njaVu [21], which advocates for training a set of \ufb01xed-size\nMLP predictors. Within each Transformer layer, DejaVu uti-"], "retrieved_docs_id": ["e7939ae097", "6ed104ce6b", "a90364b4f6", "7fbc4a6bd7", "9b43c234cf"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does TinyViT facilitate knowledge distillation during pretraining?\n", "true_answer": "TinyViT facilitates knowledge distillation during pretraining by pre-storing logits from large teacher models in the hardware, enabling memory and computational efficiency when transferring knowledge to scaled-down student transformers.", "source_doc": "multimodal.pdf", "source_id": "534dcc9fda", "retrieved_docs": ["Homomorphic KDs can further classified into logit-level [114, 115], patch-level [117], module-\nlevel [116], and feature-level KDs [118]. For logit-level methods, in DeiT [114], a distillation token\nis incorporated into the self-attention module to emulate the class label inferred by the teacher model,\nfacilitating interaction between the student attention and layers, thus enabling the learning of hard\nlabels during back-propagation. TinyViT [115] applies distillation during pretraining, where logits\nfrom large teacher models are pre-stored in the hardware, enabling memory and computational ef-\nficiency when transferring knowledge to scaled-down student transformers. Patch-level techniques\nlike DeiT-Tiny [117] train a small student model to match a pre-trained teacher model on patch-level\nstructures, then optimize with a decomposed manifold matching loss for reduced computational\ncosts. Module-level methods involve segregating teacher modules from a pre-trained unified model,", "VTP[110], PS-ViT[111]\nHybrid Pruning SPViT [112], ViT-Slim [113]\nKnowledge Distillation (\u00a73.3)Homomorphic KDDeiT [114], TinyViT [115], m2mKD [116],\nDeiT-Tiny [117], MiniViT [118]\nHeteromorphic KD DearKD [119], CiT [120]\nQuantization (\u00a73.4)Post-Training QuantizationPTQ4ViT [121], APQ-ViT [122],\nNoisyQuant [123]\nQuantization-Aware TrainingQuantformer [124] Bit-shrinking [125],\nQ-ViT [126], TerViT [127], BiViT [128],\nPackQViT [129], BinaryViT [130]\nHardware-Aware Quantization GPUSQ-ViT[131], Auto-ViT-Acc [132]\nFigure 9: Organization of efficient vision advancements.\n10", "impact while the two distillation losses account for a large portion of the performance.\n5 Related work\nTask-speci\ufb01c distillation Most of the prior works focus on building task-speci\ufb01c distillation se-\ntups. Tang et al. [2019] transfer \ufb01ne-tune classi\ufb01cation model BERT to an LSTM-based classi\ufb01er.\nChatterjee [2019] distill BERT model \ufb01ne-tuned on SQuAD in a smaller Transformer model previ-\nously initialized from BERT. In the present work, we found it bene\ufb01cial to use a general-purpose\npre-training distillation rather than a task-speci\ufb01c distillation. Turc et al. [2019] use the original\npretraining objective to train smaller student, then \ufb01ne-tuned via distillation. As shown in the abla-\ntion study, we found it bene\ufb01cial to leverage the teacher\u2019s knowledge to pre-train with additional\ndistillation signal.\nMulti-distillation Yang et al. [2019] combine the knowledge of an ensemble of teachers using", "speed of communication would have been limited by the speed of messengers or the\ndelivery of physical documents. This could have lead to a different kind of information\necosystem, where people relied more on oral tradition and written documents, and less\non real-time updates and instantaneous communication.\nThirdly, the Renaissance period was characterized by a great flourishing of art, literature,\nand science, and the Internet would have likely been shaped by these same cultural\ncurrents. This could have lead to a more humanistic approach to communication, where\nthe exchange of ideas was central, and technology was used to facilitate the sharing of\nknowledge and creativity.\nOverall, it is impossible to say exactly how the Internet would have been invented\nduring the Renaissance period, but it is likely that it would have been quite different\nfrom the global network we have today.\nDromedary \u2192 If the Internet had been invented during the Renaissance period, it would have had a", "in pruning/sparsity.\nd)Knowledge distillation :Model distillation [ 3,95,\n150,177,195,207,269,270] involves training a large\nmodel and then using it as a teacher to train a more com-\npact model. Instead of using \u201chard\u201d class labels during\nthe training of the student model, the key idea of model\ndistillation is to leverage the \u201csoft\u201d probabilities produced\nby the teacher, as these probabilities can contain more\ninformation about the input. Despite the large body of\nwork on distillation, a major challenge here is to achieve a\nhigh compression ratio with distillation alone. Compared\nto quantization and pruning, which can maintain the\nperformance with \u22654\u00d7compression (with INT8 and\nlower precision), knowledge distillation methods tend to\nhave non-negligible accuracy degradation with aggressive\ncompression. However, the combination of knowledgedistillation with prior methods (i.e., quantization and\npruning) has shown great success [195].\ne)Quantization :Finally, quantization is an ap-"], "retrieved_docs_id": ["534dcc9fda", "8a087225e4", "edc68e9b9b", "a9d0683664", "675839f684"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is a component of the modular RAG structure that diverges from the traditional similarity retrieval method?\n", "true_answer": "The Search Module is a component of the modular RAG structure that diverges from the traditional similarity retrieval method, as it is tailored to specific scenes.", "source_doc": "RAG.pdf", "source_id": "1d479682a6", "retrieved_docs": ["Modular RAG\nThe modular RAG structure breaks away from the traditional\nNaive RAG framework of indexing, retrieval, and genera-\ntion, offering greater diversity and flexibility in the over-\nall process. On one hand, it integrates various methods to\nexpand functional modules, such as incorporating a search\nmodule in similarity retrieval and applying a fine-tuning ap-\nproach in the retriever [Linet al. , 2023 ]. Additionally, spe-\ncific problems have led to the emergence of restructured\nRAG modules [Yuet al. , 2022 ]and iterative approaches like\n[Shao et al. , 2023 ]. The modular RAG paradigm is becom-\ning the mainstream in the RAG domain, allowing for ei-\nther a serialized pipeline or an end-to-end training approach\nacross multiple modules.The comparison between three RAG\nparadigms is illustrated in Fig 3.\nNew Modules\n\u2022Search Module: Diverging from the similarity re-\ntrieval between queries and corpora in Naive/Advanced\nRAG, the search module, tailored to specific sce-", "different scenarios, including using query engines pro-\nvided by frameworks like LlamaIndex, employing tree\nqueries, utilizing vector queries, or employing the most\nbasic sequential querying of chunks.\u2022HyDE: This approach is grounded on the assumption\nthat the generated answers may be closer in the embed-\nding space than a direct query. Utilizing LLM, HyDE\ngenerates a hypothetical document (answer) in response\nto a query, embeds the document, and employs this em-\nbedding to retrieve real documents similar to the hypo-\nthetical one. In contrast to seeking embedding similarity\nbased on the query, this method emphasizes the embed-\nding similarity from answer to answer. However, it may\nnot consistently yield favorable results, particularly in\ninstances where the language model is unfamiliar with\nthe discussed topic, potentially leading to an increased\ngeneration of error-prone instances.\nModular RAG\nThe modular RAG structure breaks away from the traditional", "Reducing HallucinationsInherently less prone to hallucinations as\neach answer is grounded in retrieved evi-\ndence.Can help reduce hallucinations by training\nthe model based on specific domain data but\nmay still exhibit hallucinations when faced\nwith unfamiliar input.\nEthical and Privacy IssuesEthical and privacy concerns arise from\nstoring and retrieving text from external\ndatabases.Ethical and privacy concerns may arise due\nto sensitive content in the training data.\nTable 1: Comparison between RAG and Fine-tuning\nof Advanced RAG and Modular RAG were aimed at address-\ning specific deficiencies in the Naive RAG.\n3.1 Naive RAG\nThe Naive RAG research paradigm represents the earliest\nmethodology gained prominence shortly after the widespread\nadoption of ChatGPT. The naive RAG involves traditional\nprocess: indexing, retrieval, and generation. Naive RAG\nis also summarized as a \u201cRetrieve\u201d-\u201cRead\u201d framework\n[Maet al. , 2023a ].\nIndexing", "ments to assess the relevance between the retrieved doc-\numents and the query. This enhances the robustness of\nRAG [Yuet al. , 2023a ].\nNew Pattern\nThe organizational approach of Modular RAG is flexible,\nallowing for the substitution or reconfiguration of modules\nwithin the RAG process based on specific problem con-\ntexts. For Naive RAG, which consists of the two modules\nof retrieval and generation ( referred as read or sythesis in\nsome literature), this framework offers adaptability and abun-\ndance. Present research primarily explores two organizational\nparadigms, involving the addition or replacement of modules,\nas well as the adjustment of the organizational flow between\nmodules.\n\u2022Adding or Replacing Modules\nThe strategy of adding or replacing modules entails\nmaintaining the structure of Retrieval-Read while intro-\nducing additional modules to enhance specific function-\nalities. RRR [Maet al. , 2023a ]proposes the Rewrite-\nRetrieve-Read process, utilizing LLM performance as a", "employs a graph encoding method that reflects the graph\nstructure into PTMs\u2019 representation space and utilizes a\nmulti-modal contrastive learning objective between graph-\ntext modes to ensure consistency between retrieved facts\nand generated text. KnowledgeGPT [Wang et al. , 2023c ]\ngenerates search queries for Knowledge Bases (KB) in code\nformat and includes predefined KB operation functions.\nApart from retrieval, KnowledgeGPT also offers the ca-\npability to store knowledge in a personalized knowledge\nbase to meet individual user needs. These structured data\nsources provide RAG with richer knowledge and context,\ncontributing to improved model performance.\nLLM Generated Content RAG\nObserving that the auxiliary information recalled by RAG\nis not always effective and may even have negative effects,\nsome studies have expanded the paradigm of RAG by delving\ndeeper into the internal knowledge of LLM. This approach\nutilizes the content generated by LLM itself for retrieval, aim-"], "retrieved_docs_id": ["1d479682a6", "d96393bb4b", "16ccbc6afa", "a016e8d322", "4c3ac6cb2e"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is the purpose of the StepBack-prompt approach in the RAG process?\n", "true_answer": "The StepBack-prompt approach encourages the language model to step back from specific instances and engage in reasoning about the underlying general concepts or principles.", "source_doc": "RAG.pdf", "source_id": "ad03b3dcc5", "retrieved_docs": ["phase to capture key semantic meanings. In the later\nstages of this process, larger blocks with more contex-\ntual information are provided to the language model\n(LM). This two-step retrieval method helps strike a bal-\nance between efficiency and contextually rich responses.\n\u2022StepBack-prompt: Integrated into the RAG process,\nthe StepBack-prompt approach [Zheng et al. , 2023 ]en-\ncourages LLM to step back from specific instances and\nengage in reasoning about the underlying general con-\ncepts or principles. Experimental findings indicate a sig-\nnificant performance improvement in various challeng-\ning, inference-intensive tasks with the incorporation of\nbackward prompts, showcasing its natural adaptability\nto RAG. The retrieval-enhancing steps can be applied in\nboth the generation of answers to backward prompts and\nthe final question-answering process.\n\u2022Subqueries: Various query strategies can be employed in\ndifferent scenarios, including using query engines pro-", "put forward various methods to optimize the retrieval process.\nIn terms of specific implementation, Advanced RAG can be\nadjusted either through a pipeline or in an end-to-end manner.\nPre-Retrieval Process\n\u2022Optimizing Data Indexing\nThe purpose of optimizing data indexing is to enhance\nthe quality of indexed content. Currently, there are five\nmain strategies employed for this purpose: increasing\nthe granularity of indexed data, optimizing index struc-\ntures, adding metadata, alignment optimization, and\nmixed retrieval.\n1.Enhancing Data Granularity: The objective of\npre-index optimization is to improve text standard-\nization, consistency, and ensure factual accuracy\nand contextual richness to guarantee the perfor-\nmance of the RAG system. Text standardization in-\nvolves removing irrelevant information and special\ncharacters to enhance the efficiency of the retriever.\nIn terms of consistency, the primary task is to elim-\ninate ambiguity in entities and terms, along with", "We use largely publicly available general-purpose chat in-\nstruction datasets for multi-turn chat together with a small\namount of domain-specific instruction datasets to perform\nalignment on the ChipNeMo foundation model, which pro-\nduces the ChipNeMo chat model. We observe that align-\nment with a general purpose chat instruction dataset is\nadequate to align the ChipNeMo foundation models with\nqueries in the chip design domain. We also added a small\namount of task-specific instruction data, which further im-\nproves the alignment. We trained multiple ChipNeMo foun-\ndation and chat models based on variants of LLaMA2 mod-\nels used as the base foundation model.\nTo improve performance on the engineering assistant chat-\nbot application, we also leverage Retrieval Augmented Gen-\neration (RAG). RAG is an open-book approach for giving\nLLMs precise context for user queries. It retrieves rele-\nvant in-domain knowledge from its data store to augment", "Modular RAG\nThe modular RAG structure breaks away from the traditional\nNaive RAG framework of indexing, retrieval, and genera-\ntion, offering greater diversity and flexibility in the over-\nall process. On one hand, it integrates various methods to\nexpand functional modules, such as incorporating a search\nmodule in similarity retrieval and applying a fine-tuning ap-\nproach in the retriever [Linet al. , 2023 ]. Additionally, spe-\ncific problems have led to the emergence of restructured\nRAG modules [Yuet al. , 2022 ]and iterative approaches like\n[Shao et al. , 2023 ]. The modular RAG paradigm is becom-\ning the mainstream in the RAG domain, allowing for ei-\nther a serialized pipeline or an end-to-end training approach\nacross multiple modules.The comparison between three RAG\nparadigms is illustrated in Fig 3.\nNew Modules\n\u2022Search Module: Diverging from the similarity re-\ntrieval between queries and corpora in Naive/Advanced\nRAG, the search module, tailored to specific sce-", "ments to assess the relevance between the retrieved doc-\numents and the query. This enhances the robustness of\nRAG [Yuet al. , 2023a ].\nNew Pattern\nThe organizational approach of Modular RAG is flexible,\nallowing for the substitution or reconfiguration of modules\nwithin the RAG process based on specific problem con-\ntexts. For Naive RAG, which consists of the two modules\nof retrieval and generation ( referred as read or sythesis in\nsome literature), this framework offers adaptability and abun-\ndance. Present research primarily explores two organizational\nparadigms, involving the addition or replacement of modules,\nas well as the adjustment of the organizational flow between\nmodules.\n\u2022Adding or Replacing Modules\nThe strategy of adding or replacing modules entails\nmaintaining the structure of Retrieval-Read while intro-\nducing additional modules to enhance specific function-\nalities. RRR [Maet al. , 2023a ]proposes the Rewrite-\nRetrieve-Read process, utilizing LLM performance as a"], "retrieved_docs_id": ["ad03b3dcc5", "8a71abd00a", "411c489c58", "1d479682a6", "a016e8d322"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does a recent work address the hallucination problem in Multi-Modal Language Learning Models (MLLMs)?\n", "true_answer": "A recent work addresses the hallucination problem in MLLMs by utilizing the Efficient Fine-grained Unlearning Framework (EFUF) and the CLIP model to construct a dataset.", "source_doc": "hallucination.pdf", "source_id": "2dd3a385f4", "retrieved_docs": ["to provide fine-grained feedback at the sentence level. The collected human preference data is\nused to train a reward model. Additionally, it leverages advanced vision perception models to\nautomatically score the grounding and fidelity of the text generated by an MLLM. Both sources are\ncombined into a single reward score during the reinforcement learning procedure.\n5.3.3 Unlearning. Unlearning refers to a technique designed to induce a model to \u2019forget\u2019 specific\nbehaviors or data, primarily through the application of gradient ascent methods [ 9]. Recently,\nunlearning for LLMs has been receiving increasing attention [ 50], effectively eliminating privacy\nvulnerabilities in LLMs. In the context of MLLMs, a recent work [ 109] introduces the Efficient\nFine-grained Unlearning Framework (EFUF), applying an unlearning framework to address the\nhallucination problem. Specifically, it utilizes the CLIP model to construct a dataset comprised of", "The problem of hallucination originates from LLMs themselves. In the NLP community, the\nhallucination problem is empirically categorized into two types [ 44]: 1) factuality hallucination\nemphasizes the discrepancy between generated content and verifiable real-world facts, typically\nmanifesting as factual inconsistency or fabrication; 2) faithfulness hallucination refers to the di-\nvergence of generated content from user instructions or the context provided by the input, as\nwell as self-consistency within generated content. In contrast to pure LLMs, research efforts of\nhallucination in MLLMs mainly focus on the discrepancy between generated text response and\nprovided visual content [69,76,137],i.e., cross-modal inconsistency. This difference suggests that\nstudies in LLMs cannot be seemingly transferred to MLLMs. Therefore, there is a growing need to\ncomprehensively survey recent advancements in MLLMs\u2019 hallucination phenomena to inspire new\nideas and foster the field\u2019s development.", "event, etc., as independent hallucination categories; however, in this work, we include them into\nattribute category.\nAs numerous studies exist on the underlying causes of hallucinations in LLMs, the unique chal-\nlenges posed by cutting-edge MLLMs warrant an in-depth investigation. Our analysis specifically\ntargets the unique origins of hallucinations in MLLMs, spanning a spectrum of contributing factors\nfrom data, model, training, to the inference stage. In addition, we provide a comprehensive overview\nof benchmarks and metrics designed specifically for evaluating hallucinations in MLLMs. Then,\nwe review and discuss recent works tailored to mitigate the problem of hallucination from the\nviewpoints of the identified causes.\nThrough our comprehensive survey, we aim to contribute to advancing the field of MLLMs and\noffer valuable insights that deepen understanding of the opportunities and challenges associated", "Hallucination of Multimodal Large Language Models: A Survey 3\ncontrast, there are very few surveys on hallucination in the field of MLLMs. To the best of our\nknowledge, there is only one concurrent work [ 76], a short survey on the hallucination problem of\nLVLMs. However, our survey distinguishes itself in terms of both taxonomy and scope. We present a\nlayered and granular classification of hallucinations, as shown in Fig. 1, drawing a clearer landscape\nof this field. Additionally, our approach does not limit itself to specific model architectures as\nprescribed in the work of [ 76], but rather dissects the causes of hallucinations by tracing back to\nvarious affecting factors. We cover a larger range of literature both in terms of paper number and\ntaxonomy structure. Furthermore, our mitigation strategies are intricately linked to the underlying\ncauses, ensuring a cohesive and targeted approach.\nOrganization of this survey. In this paper, we present a comprehensive survey of the latest", "in real-world applications. This problem has attracted increasing attention, prompting efforts to detect\nand mitigate such inaccuracies. We review recent advances in identifying, evaluating, and mitigating these\nhallucinations, offering a detailed overview of the underlying causes, evaluation benchmarks, metrics, and\nstrategies developed to address this issue. Additionally, we analyze the current challenges and limitations,\nformulating open questions that delineate potential pathways for future research. By drawing the granular\nclassification and landscapes of hallucination causes, evaluation benchmarks, and mitigation methods, this\nsurvey aims to deepen the understanding of hallucinations in MLLMs and inspire further advancements in\nthe field. Through our thorough and in-depth review, we contribute to the ongoing dialogue on enhancing the\nrobustness and reliability of MLLMs, providing valuable insights and resources for researchers and practitioners"], "retrieved_docs_id": ["2dd3a385f4", "ce4c90f626", "6da15b5bb7", "33d47ad8cc", "c7f1da1e07"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "Who wrote the 2024 survey on hallucination of multimodal large language models?\n", "true_answer": "Zechen Bai, Pichao Wang, Tianjun Xiao, Tong He, Zongbo Han, and Zheng Zhang", "source_doc": "hallucination.pdf", "source_id": "9bfe24c206", "retrieved_docs": ["alike. Resources are available at: https://github.com/showlab/Awesome-MLLM-Hallucination.\nCCS Concepts: \u2022Computing methodologies \u2192Computer vision ;Natural language processing ;Machine\nlearning .\nAdditional Key Words and Phrases: Hallucination, Multimodal, Large Language Models, Vision-Language\nModels.\nACM Reference Format:\nZechen Bai, Pichao Wang, Tianjun Xiao, Tong He, Zongbo Han, Zheng Zhang, and Mike Zheng Shou.\n2024. Hallucination of Multimodal Large Language Models: A Survey. Preprint 1, 1 (April 2024), 30 pages.\nhttps://doi.org/XXXXXXX.XXXXXXX\n\u2217Corresponding Author\nAuthors\u2019 addresses: Zechen Bai, Show Lab, National University of Singapore, 4 Engineering Drive 3, Singapore, Singapore,\nzechenbai@u.nus.edu; Pichao Wang, Amazon Prime Video, Washington, USA, pichaowang@gmail.com; Tianjun Xiao,\nAWS Shanghai AI Lab, Shanghai, China, tianjux@amazon.com; Tong He, AWS Shanghai AI Lab, Shanghai, China, htong@", "Based on powerful large language models, multimodal large language models demonstrate remark-\nable performance across various multimodal tasks. However, the phenomenon of hallucination\npresents a significant challenge to the practical applications of MLLMs, giving rise to undeniable\nconcerns about safety, reliability, and trustworthiness. In this comprehensive survey, we conducted\na thorough examination of hallucinations within multimodal large language models, focusing\non their underlying causes, evaluation metrics, benchmarks, and mitigation methods. Despite\nconsiderable progress, hallucination remains a complex and persistent concern that warrants ongo-\ning investigation. The challenge of hallucination in multimodal large language models remains\ncompelling, requiring continuous scrutiny and innovation. In light of these challenges, we have\noutlined several promising future directions in this burgeoning domain. Through navigating the", "Hallucination of Multimodal Large Language Models: A\nSurvey\nZECHEN BAI, Show Lab, National University of Singapore, Singapore\nPICHAO WANG, Amazon Prime Video, USA\nTIANJUN XIAO, AWS Shanghai AI Lab, China\nTONG HE, AWS Shanghai AI Lab, China\nZONGBO HAN, Show Lab, National University of Singapore, Singapore\nZHENG ZHANG, AWS Shanghai AI Lab, China\nMIKE ZHENG SHOU\u2217,Show Lab, National University of Singapore, Singapore\nThis survey presents a comprehensive analysis of the phenomenon of hallucination in multimodal large\nlanguage models (MLLMs), also known as Large Vision-Language Models (LVLMs), which have demonstrated\nsignificant advancements and remarkable abilities in multimodal tasks. Despite these promising developments,\nMLLMs often generate outputs that are inconsistent with the visual content, a challenge known as hallucination,\nwhich poses substantial obstacles to their practical deployment and raises concerns regarding their reliability", "Hallucination of Multimodal Large Language Models: A Survey 5\nVision InputVision ModelLLMImageVideo\u2026CLIP DINO-v2Linear\u2026LLaMAVicunaChatGLMFuyuDecodingGreedyBeam SearchSamplingText InputInstruction\u2026TokenizerBPE SentencePiece\u2026\nFig. 2. Popular architecture of multimodal large language model.\nintegration of human feedback into the training loop has demonstrated effectiveness in enhancing\nthe alignment of LLMs.\n2.2 Multimodal Large Language Models\nMLLMs [ 22,75,111,138] typically refers to a series of models that enable LLMs to perceive and\ncomprehend data from various modalities. Among them, vision+LLM is particularly prominent,\nowing to the extensive research on vision-language models (VLMs) [ 51,88,116] prior to LLMs. As a\nresult, MLLMs are sometimes referred to as vision-LLMs (VLLMs) or large vision language models\n(LVLMs). The goal of MLLMs is to activate the visual capabilities of LLMs, enabling them to \"see\"", "Hallucination of Multimodal Large Language Models: A Survey 3\ncontrast, there are very few surveys on hallucination in the field of MLLMs. To the best of our\nknowledge, there is only one concurrent work [ 76], a short survey on the hallucination problem of\nLVLMs. However, our survey distinguishes itself in terms of both taxonomy and scope. We present a\nlayered and granular classification of hallucinations, as shown in Fig. 1, drawing a clearer landscape\nof this field. Additionally, our approach does not limit itself to specific model architectures as\nprescribed in the work of [ 76], but rather dissects the causes of hallucinations by tracing back to\nvarious affecting factors. We cover a larger range of literature both in terms of paper number and\ntaxonomy structure. Furthermore, our mitigation strategies are intricately linked to the underlying\ncauses, ensuring a cohesive and targeted approach.\nOrganization of this survey. In this paper, we present a comprehensive survey of the latest"], "retrieved_docs_id": ["9bfe24c206", "114f3dada8", "72dc971633", "f49f3b54ce", "33d47ad8cc"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What are some methods for optimizing attention mechanisms in vision transformers?\n", "true_answer": "Some methods for optimizing attention mechanisms in vision transformers include PatchMerger, DynamicViT, and Sepvit.", "source_doc": "multimodal.pdf", "source_id": "20b3b3179f", "retrieved_docs": ["Optimizing Attention Mechanism Many transformer variants (\u201cx-formers\u201d) have been introduced to\nreduce the complexity of transformers (Tay et al., 2022), including sparse attention (Beltagy et al., 2020;\nKitaev et al., 2020; Guo et al., 2022), approximating the full attention matrix (Wang et al., 2020; Ma et al.,\n2021; Choromanski et al., 2020), combining chunked attention with gating (Ma et al., 2023) and other\nefficient methods (Katharopoulos et al., 2020; Jaegle et al., 2021).\nSome recent works like FlashAttention (Dao et al., 2022a) and others (Rabe and Staats, 2022; Jang et al.,\n2019) share similarities with RWKV\u2019s chunked computation scheme. Despite being memory-efficient,\ntheir time complexity remains quadratic or contains chunk size as a hidden factor. In contrast, RWKV\nachieves better space and time complexity during inference by formulating a linear attention as an RNN.\nAttention Free Models Another line of research replaces the attention mechanism with other modules to", "UniNet [102] introduced context-aware down-sampling modules improving information accommo-\ndation by transformer and MLP operators.\nOptimization of Attention Mechanisms Methods focus on reducing computational complexity\nby introducing adaptive attention, learning sparse attention patterns, and dynamically adjusting at-\ntention mechanisms. Fayyaz et al. [135] implemented adaptive attention by scoring and adaptively\nsampling significant tokens. PatchMerger [103] extracted global information among regional to-\nkens and exchanged local self-attention with information among regional tokens via self-attention.\nDynamicViT [104] proposed an attention masking strategy to differentiably prune tokens by block-\ning interactions with other tokens. Additionally, Sepvit [105] conducted local-global information\ninteraction within and across windows using depthwise separable self-attention. These methods\ncollectively optimize attention mechanisms, enhancing computational efficiency and performance.", "0.1\n0.1 0.5Children laughed and in the sunny park .... played\n0.2 0.11\n0.9\n0.60.2 0.1 0.1 0.61.4 0.6 1.5 0.5\n0.4\n0.10.4\n0.1QueryKeyValueStatic Sparsity (Strided) Static Sparsity (Local) Static Sparsity w. Dynamic Sparsity\nFigure 1: Upper plots illustrate symbolic plots of an attention map deploying different KV cache policies in\nLLM generation. Lower right: contrasts their accuracy-memory trade-off. Left: the overview of H2Oframework.\nWhile there exists substantial literature on sparse attention approximation in training, they have\nnot seen wide adoption for alleviating KV cache bottleneck. First, most existing methods, e.g.,\nReformer [ 7] and Flash Attention [ 8], are designed to overcome the quadratic memory required by\nattention mechanisms when modeling long sequences but still require a large cache size . Second,\nvariants like sparse transformer [ 9], low-rank based transformers [ 10,11] or multi-query attention [ 12,", "anddata-controlled gating . In recall and reasoning tasks on sequences of thousands to hundreds of\nthousands of tokens, Hyena improves accuracy by more than 50points over operators relying on state-\nspaces and other implicit and explicit methods, matching attention-based models. We set a new state-of-\nthe-art for dense-attention-free architectures on language modeling in standard datasets ( WikiText103\nandThe Pile ), reaching Transformer quality with a 20%reduction in training compute required at\nsequence length 2K. Hyena operators are twice as fast as highly optimized attention at sequence length\n8K, and 100\u00d7faster at sequence length 64K.\n1 Introduction\nLarge Transformers have enabled a number of breakthrough advances in modeling language, vision, audio,\nbiology and numerous other domains (Vaswani et al., 2017), (Dosovitskiy et al., 2020), (Radford et al., 2022),\n(Cramer, 2021). Much of the success of Transformers, powered by the attention operator (Vaswani et al.,", "a hardware-aware algorithm that exploits the memory hierarchy on modern hardware (Section 3.3). We then\ndescribe a simple SSM architecture without attention or even MLP blocks (Section 3.4). Finally, we discuss some\nadditional properties of selection mechanisms (Section 3.5).\n3.1 Motivation: Selection as a Means of Compression\nWe argue that a fundamental problem of sequence modeling is compressing context into a smaller state. In fact,\nwe can view the tradeo\ufb00s of popular sequence models from this point of view. For example, attention is both\ne\ufb00ective and ine\ufb03cient because it explicitly does not compress context at all. This can be seen from the fact that\nautoregressive inference requires explicitly storing the entire context (i.e. the KV cache), which directly causes the\nslow linear-time inference and quadratic-time training of Transformers. On the other hand, recurrent models are"], "retrieved_docs_id": ["5cf4b56414", "e7939ae097", "0ff30614d9", "3000b5c09f", "a19fd60b1e"], "reranker_type": "None", "search_type": "text", "rr": 0.0, "hit": 0}, {"question": "What is the objective of the pre-training phase in cross-modal feature alignment?\n", "true_answer": "The objective of the pre-training phase is to achieve cross-modal feature alignment between models from each modality.", "source_doc": "hallucination.pdf", "source_id": "0be0058571", "retrieved_docs": ["Category HallucinationAttribute HallucinationRelation Hallucination\nFig. 3. Three types of typical hallucination.\nPre-training. Given that models from each modality are pre-trained on their respective data, the\nobjective of this pre-training phase is to achieve cross-modal feature alignment. During training,\nboth the pre-trained visual encoder and LLM remain frozen, with only the cross-modal interface\nbeing trained. Similar to traditional VLMs training, as exemplified by CLIP [ 88], web-scale image-\ntext pairs [ 92] are utilized for training. Given that the final output is at the LLM side, the most\nwidely used loss function in this stage is the text generation loss, typically cross-entropy loss, which\naligns with the pre-training of LLMs. Certain studies (e.g., [ 22,66]) explore the incorporation of\ncontrastive loss and image-text matching loss to further enhance alignment. After training, the\ninterface module maps the visual features into the input embedding space of the LLM.", "Data quality relevant to hallucinations can be further categorized into the following three facets.\n\u2022Noisy data. As mentioned in the definition section, training MLLMs involves two stages. The\npre-training stage employs image-text pairs crawled from the web, which contain inaccurate,\nmisaligned, or corrupted data samples. The noisy data would limit the cross-modal feature\nalignment [ 117,120], which serves as the foundation of MLLMs. As for the instruction tuning\ndata, prevalent methods, such as LLaVA [ 75], utilize the advanced GPT-4 [ 82] model to\ngenerate instructions. However, ChatGPT is a language model that cannot interpret visual\ncontent, leading to the risk of noisy data. Moreover, language models themselves suffer\nfrom the issue of hallucination [ 44], further increasing the risk. LLaVA-1.5 [ 74] adds human\nannotated QA data into instruction following and shows improved results, revealing the\neffect of noisy data.", "interface preserves most of the information, but lacks supervision on the projected feature.\nVisualization in [ 52] reveals that the features after the projection layer remain distinct from\nthe language embeddings. The distribution gap causes trouble in cross-modal interaction,\nleading to hallucination. On the other hand, Q-former-like [ 66] architecture has diverse\nsupervision on the extracted visual feature, aligning it to the language embedding space.\nHowever, the use of learnable queries inevitably results in the loss of fine-grained visual\ninformation.\n3.3 Training\nThe training objective of MLLMs is basically the same as LLMs, i.e,auto-regressive next token\nprediction loss. This loss is straightforward yet effective and easy to scale up, showing promising\nperformance in language modeling. However, some studies in the field of MLLMs have suggested\nthat the next-token prediction loss might not be suitable for learning visual content due to its", "generated content remains consistent and contextually relevant to the input modality requires\nsophisticated techniques for capturing and modeling cross-modal relationships. The direction of\ncross-modal alignment encompasses both MLLMs training and hallucination evaluation. Regarding\ntraining, future research should explore methods for aligning representations between different\nmodalities. Achieving this goal may involve designing more advanced architectures, introducing\nadditional learning objectives [ 52], or incorporating diverse supervision signals [ 16]. Regarding\nevaluation, cross-modal consistency checking has been a long-standing topic, ranging from multi-\nmodal understanding [ 66,88] to text-to-image generation [ 13,17]. Drawing on proven experiences\nfrom these domains to improve the assessment of MLLM hallucination, or unifying them into an\noverall framework, may be promising research directions.\n6.3 Advancements in Model Architecture", "Hallucination of Multimodal Large Language Models: A Survey 23\nrecollection of its training documents, most of the time the result goes someplace useful. It\u2019s only\nwhen the dreams enter deemed factually incorrect territory that we label them as \u2019hallucinations\u2019.\nFrom this perspective, leveraging hallucination capabilities as a feature in downstream applications\npresents exciting opportunities for enhancing user experiences and enabling new use cases. As\nhumans are the end-users of these models, the primary goal is to enrich human user experiences.\nFuture research may switch the optimization objective from specific cross-modal benchmarks to\nhuman experience. For example, Some content may cause hallucinations but will not affect the\nuser experience, while some content may. Alternatively, integrating hallucination to inspire more\ncreative ideas in real-world applications could also be intriguing.\n6.6 Enhancing Interpretability and Trust"], "retrieved_docs_id": ["0be0058571", "dcdb797076", "0342fa09e6", "83c3718d9d", "dfb6343eae"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is one example of a task-specific dataset used to derive high-quality IT data?\n", "true_answer": "A sample from VQA (Visual Question Answering) datasets, where the input includes an image and a natural language question, and the output is the text-based answer to the question based on the image, is one example of a task-specific dataset used to derive high-quality IT data.", "source_doc": "multimodal.pdf", "source_id": "db45826cee", "retrieved_docs": ["A summary of frequently used pre-training datasets can be found in Table.3. High-quality IT data\ncan be derived from task-specific datasets. For instance, consider a sample from VQA datasets where\nthe input includes an image and a natural language question, and the output is the text-based answer\nto the question based on the image. This could easily form the multimodal input and response\nof the instruction sample. The instructions, or task descriptions, can be obtained either through\nmanual creation or semi-automatic generation with the help of GPT. In addition to utilizing publicly\navailable task-specific datasets, SPHINX-X[14] assembles a dataset focused on OCR from a wide\nrange of PDF data sourced from the internet. Specifically, it begins by gathering a large-scale PDF\ndataset from the web. It then obtains the rendering results of each page in the PDF file, while\nsimultaneously saving all text annotations along with their respective bounding boxes. Ultimately,", "Does the dataset contain data that,\nif viewed directly, might be o\ufb00ensive,\ninsulting, threatening, or might other-\nwise cause anxiety?The dataset likely contains data that might be considered o\ufb00ensive, in-\nsulting or threatening as such data is prevalent on the web and potentially\nin old books.\nCollection Process\nHow was the data associated with each\ninstance acquired?The data was collected from publicly available sources.\nWhat mechanisms or procedures were\nused to collect the data?The data was collected using a variety of software programs to extract\nand clean raw text.\nIf the dataset is a sample from a larger\nset, what was the sampling strategy?The sampling methodology is described in Du et al. (2021). For Web\ndocuments, we use two methods of sampling:\n\u2022Random sampling based on a classi\ufb01er that gives higher probability\nto high quality documents.\n\u2022Selecting documents that are also in the Colossal Clean Crawled\nCorpus (C4) (Ra\ufb00el et al., 2020).\nWho was involved in the data collec-", "Published in Transactions on Machine Learning Research (08/2023)\nE Targeted evaluations\nE.1 Language\nE.1.1 The Pile\nScenario Description. The Pile (Gao et al., 2021a) is a language modeling scenario that includes large-\nscale English texts from a diverse list of domains. As an example, an input for the OpenSubtitle (Tiedemann,\n2016) subset of the scenario looks like:\n\u201cIt came from down here.\u201d \u201cWhat were you thinking bringing a stranger here?\u201d \u201c... look\nout for herself.\u201d \u201cI wouldn\u2019t be alive if it wasn\u2019t for her.\u201d \u201cYeah, well, I\u2019m protecting you\nnow.\u201d\nThe textual output of a language model should be the same with the input. The main metric for the scenario\nis bits per byte (BPB).\nData. Gao et al. (2021a) created the dataset by incorporating or extending high-quality existing datasets\nand by filtering or extracting from a few raw data sources. The total size of the dataset is 825GB, and each", "Data Curation With the increasing data needed to train language models (and other models for other\nmodalities), it remains challenging to curate a high-quality dataset. Besides the technical challenges\nof composing a large-scale dataset and the decisions that go into making it, these decisions and their\ninfluence on the final models are costly to assess due to the high computational resources required\nto train such models. With WIMBD , we hope to ease the decisions that go into crafting large-scale\ndatasets by surfacing patterns and trends about what goes into them and what is left out from different\naspects, such as data quality, community and society measurements, etc.\nData Documentation Adding to previous works that call for more data documentation, such as\nDatasheets (Gebru et al., 2021) and Data Statements (McMillan-Major et al., 2023), we argue for\nthe importance of documenting such information. While previous works often focused and tailored", "3 Training Dataset\nThe PaLM pretraining dataset consists of a high-quality corpus of 780 billion tokens that represent a wide\nrange of natural language use cases. The dataset is a mixture of \ufb01ltered webpages,2books, Wikipedia, news\narticles, source code, and social media conversations. This dataset is based on the datasets used to train\nLaMDA (Thoppilan et al., 2022) and GLaM (Du et al., 2021). We train all three models on exactly one\nepoch of the data (shu\ufb04ed identically for all models) and choose the mixing proportions to avoid repeating\ndata in any subcomponent.\nIn addition to natural language data, the pretraining dataset also contains code. The source code in the\npretraining dataset is obtained from open source repositories on GitHub. We \ufb01ltered the \ufb01les by the license\nincluded in the repository; copyleft licenses were excluded. We \ufb01lter the \ufb01les by \ufb01lename extension to restrict"], "retrieved_docs_id": ["db45826cee", "151320c353", "33524db997", "c5299aa292", "22c04b3948"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How many image-question pairs does MERLIM contain and what is its focus?\n", "true_answer": "MERLIM contains over 279K image-question pairs and has a strong focus on detecting cross-modal hallucinations.", "source_doc": "hallucination.pdf", "source_id": "198c99577c", "retrieved_docs": ["including object recognition, instance counting, and identifying object-to-object relationships.\nMERLIM contains over 279K image-question pairs, and has a strong focus on detecting cross-modal\nhallucinations. Interestingly, when organizing the data, a set of edited images is intentionally added.\nBased on the original image, an inpainting strategy is employed to remove one object instance in\nthe image. With this original-edited image pair, one can compare the output of the target MLLM\nand identify the hallucinated objects that lack visual grounding.\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024.", "A: The answer is 62.Q: Lisa has 5 easy peelers. She buys 2 more nets with 6 each. How many easy peelers does she have?A: The answer is 17.Q: The cafeteria has 37 bananas. They bought 5 more bunches with 5 each, how many bananas do they have?Embedding 1Embedding \u2026Embedding N\nAsk-Me-AnythingFormulate a question for the given context. Q: Lisa has 5 easy peelers. She buys 2 more nets with 6 each. How many easy peelers does she have?A: The answer is 17.Q: The cafeteria has 37 bananas. They bought 5 more bunches with 5 each.Q: What is the total number of bananas they possess?Answer the question using arithmetic.Q: Lisa has 5 easy peelers. She buys 2 more nets with 6 each. How many easy peelers does she have?A: The answer is 17.Q: The cafeteria has 37 bananas. They bought 5 more bunches with 5 each.Q: What is the total number of bananas they possess?A: The answer is 62.Prompt Chain 3Prompt Chain 2Prompt Chain 1", "lightweight) model at the same compute budget.\nThough there has been signi\ufb01cant recent work allowing larger and larger models to be trained,\nour analysis suggests an increased focus on dataset scaling is needed. Speculatively, we expect that\nscaling to larger and larger datasets is only bene\ufb01cial when the data is high-quality. This calls for\nresponsibly collecting larger datasets with a high focus on dataset quality. Larger datasets will require\nextra care to ensure train-test set overlap is properly accounted for, both in the language modelling\nloss but also with downstream tasks. Finally, training for trillions of tokens introduces many ethical\nand privacy concerns. Large datasets scraped from the web will contain toxic language, biases, and\nprivate information. With even larger datasets being used, the quantity (if not the frequency) of such\ninformation increases, which makes dataset introspection all the more important. Chinchilla does", "acterising what these models do as reasoning,\nproperly speaking.\n11 How Do LLMs Generalise?\nGiven that LLMs are sometimes capable of solv-\ning reasoning problems with few-shot prompting\nalone, albeit somewhat unreliably, including rea-\nsoning problems that are not in their training set,\nsurely what they are doing is more than \u201cjust\u201d\nnext token prediction? Well, it is an engineer-\ning fact that this is what an LLM does. The\nnoteworthy thing is that next token prediction issu\ufb03cient for solving previously unseen reasoning\nproblems, even if unreliably. How is this pos-\nsible? Certainly it would not be possible if the\nLLM were doing nothing more than cutting-and-\npasting fragments of text from its training set\nand assembling them into a response. But this is\nnot what an LLM does. Rather, an LLM mod-\nels a distribution that is unimaginably complex,\nand allows users and applications to sample from\nthat distribution.\nThis unimaginably complex distribution is a", "54\nAnswer the following mathematical reasoning questions:\nQ:    S am has 12 marbles. He gives 1/4 of them to his sister. \nHow many marbles does Sam have left?N x If a rectangle has a length of 6 cm and a width of 3 cm, \nwhat is the perimeter of the rectangle?\nFor a rectangle, add up the length and width and double it. So, the perimeter of this rectangle is (6 + 3) x 2 = 18 cm.\nThe answer is 18 cm.Q:\nA:\nLLM A:The answer is 9.A: He gives (1 / 4) x 12 = 3 marbles. \nSoSam is left with 12 \u2013 3 = 9 marbles. \nThe answer is 9.\n:Chain -of-Thought :Task description :Demonstration :QueryIn-Context Learning Chain -of-Thought Prompting\nQ:\nA:\nQ:\nA:Answer the following mathematical reasoning questions:\nQ:     Sam has 12 marbles. He gives 1/4 of them to his sister. \nHow many marbles does Sam have left?NxThe answer is 8.\nIf a rectangle has a length of 6 cm and a width of 3 cm, what is the perimeter of the rectangle?"], "retrieved_docs_id": ["198c99577c", "d96ec3c40a", "a5d3c33450", "37a1f2530d", "43fab9283b"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How much does domain-specific data improve the retriever hit rate in the ChipNeMo system?\n", "true_answer": "The retriever hit rate is improved by 30% using domain-specific data in the ChipNeMo system.", "source_doc": "ChipNemo.pdf", "source_id": "df0b9868f2", "retrieved_docs": ["ChipNeMo: Domain-Adapted LLMs for Chip Design\ndomain-specific data improves the retriever hit rate\nby 30% over a pre-trained state-of-the-art retriever, in\nturn improving overall quality of RAG responses.\nThe paper is organized as follows. Section 2 outlines do-\nmain adaptation and training methods used including the\nadapted tokenizer, DAPT, model alignment, and RAG. Sec-\ntion 3 describes the experimental results including human\nevaluations for each application. Section 4 describes rel-\nevant LLM methods and other work targeting LLMs for\nchip design. Finally, detailed results along with additional\nmodel training details and examples of text generated by the\napplication use-cases are illustrated in the Appendix.\n2. ChipNeMo Domain Adaptation Methods\nChipNeMo implements multiple domain adaptation tech-\nniques to adapt LLMs to the chip design domain. These\ntechniques include domain-adaptive tokenization for chip\ndesign data, domain adaptive pretraining with large corpus", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ntask assignnment. Participants are tasked with rating the\nmodel\u2019s performance on a 7-point Likert scale for each of\nthese three assignments. The results can be found in Fig-\nure 10. Although the GPT-4 model excels in all three tasks,\noutperforming both our ChipNeMo-70B-Steer model and\nthe LLaMA2-70B-Chat model, ChipNeMo-70B-Steer does\nexhibit enhancements compared to the off-the-shelf LLaMA\nmodel of equivalent size. We attribute the comparatively\nlower improvements in summarization tasks resulting from\nour domain-adaptation to the limited necessity for domain-\nspecific knowledge in summarization compared to other\nuse-cases.\n4. Related Works\nMany domains have a significant amount of proprietary data\nwhich can be used to train a domain-specific LLM. One ap-\nproach is to train a domain specific foundation model from\nscratch, e.g., BloombergGPT(Wu et al., 2023) for finance,\nBioMedLLM(Venigalla et al., 2022) for biomed, and Galac-", "the raw dataset, then continued-pretrain a foundation model\nwith the domain-specific data. We call the resulting model a\nChipNeMo foundation model. DAPT is done on a fraction\nof the tokens used in pre-training, and is much cheaper, only\nrequiring roughly 1.5% of the pretraining compute.\nLLM tokenizers convert text into sequences of tokens for\ntraining and inference. A domain-adapted tokenizer im-\nproves the tokenization efficiency by tailoring rules and\npatterns for domain-specific terms such as keywords com-\nmonly found in RTL. For DAPT, we cannot retrain a new\ndomain-specific tokenizer from scratch, since it would make\nthe foundation model invalid. Instead of restricting Chip-\nNeMo to the pre-trained general-purpose tokenizer used\nby the foundation model, we instead adapt the pre-trained\ntokenizer to our chip design dataset, only adding new tokens\nfor domain-specific terms.\nChipNeMo foundation models are completion models whichrequire model alignment to adapt to tasks such as chat.", "We use largely publicly available general-purpose chat in-\nstruction datasets for multi-turn chat together with a small\namount of domain-specific instruction datasets to perform\nalignment on the ChipNeMo foundation model, which pro-\nduces the ChipNeMo chat model. We observe that align-\nment with a general purpose chat instruction dataset is\nadequate to align the ChipNeMo foundation models with\nqueries in the chip design domain. We also added a small\namount of task-specific instruction data, which further im-\nproves the alignment. We trained multiple ChipNeMo foun-\ndation and chat models based on variants of LLaMA2 mod-\nels used as the base foundation model.\nTo improve performance on the engineering assistant chat-\nbot application, we also leverage Retrieval Augmented Gen-\neration (RAG). RAG is an open-book approach for giving\nLLMs precise context for user queries. It retrieves rele-\nvant in-domain knowledge from its data store to augment", "ChipNeMo: Domain-Adapted LLMs for Chip Design\n2Domain -Adaptive\nPretraining\n24B tokens of chip \ndesign docs/code\nThousands GPU hrs\nModel\nAlignmen t\n56K/128K \n(SteerLM /SFT)  insts\n+ 1.4K task insts\n100+ GPU hrsFoundation Models\nLLaMA2 \n(7B, 13B, 70B) \nChipNeMo \nChat Models\n(7B, 13B, 70B)ChipNeMo \nFoundation Models\n(7B, 13B, 70B)Pretraining\nTrillions tokens of \ninternet data\n105 \u2013 106 GPU hrs\nFigure 1: ChipNeMo Training Flow\n2023)) fine-tuned on additional Verilog data can outperform\nstate-of-art OpenAI GPT-3.5 models. Customizing LLMs\nin this manner also avoids security risks associated with\nsending proprietary chip design data to third party LLMs\nvia APIs. However, it would be prohibitively expensive to\ntrain domain-specific models for every domain from scratch,\nsince this often requires millions of GPU training hours. To\ncost-effectively train domain-specific models, we instead\npropose to combine the following techniques: Domain-"], "retrieved_docs_id": ["df0b9868f2", "74fe22ec46", "273b593026", "411c489c58", "2079d05356"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does fine-tuning retrievers and generators in the downstream phase improve information retrieval?\n", "true_answer": "Fine-tuning retrievers and generators in the downstream phase primarily enhances information retrieval in open-domain question-answering tasks.", "source_doc": "RAG.pdf", "source_id": "011ee221ab", "retrieved_docs": ["knowledge-intensive tasks, allowing the creation of domain-\nspecific models through training on domain-specific corpora.\nHowever, there are drawbacks, including the requirement for\na substantial amount of pre-training data and larger training\nresources, as well as the issue of slower update speeds. Espe-\ncially as model size increases, the cost of retrieval-enhanced\ntraining becomes relatively higher. Despite these limitations,\nthis method demonstrates notable characteristics in terms of\nmodel robustness. Once trained, retrieval-enhanced models\nbased on pure pre-training eliminate the need for external li-brary dependencies, enhancing both generation speed and op-\nerational efficiency.\nFine-tuning Stage\nDuring the downstream fine-tuning phase, researchers have\nemployed various methods to fine-tune retrievers and gener-\nators for improved information retrieval, primarily in open-\ndomain question-answering tasks. Concerning retriever fine-", "domain question-answering tasks. Concerning retriever fine-\ntuning, REPlUG [Shiet al. , 2023 ]treats the language model\n(LM) as a black box and enhances it through an adjustable re-\ntrieval model. By obtaining feedback from the black-box lan-\nguage model through supervised signals, REPLUG improves\nthe initial retrieval model. UPRISE [Cheng et al. , 2023a ], on\nthe other hand, fine-tunes retrievers by creating a lightweight\nand versatile retriever through fine-tuning on diverse task\nsets. This retriever can automatically provide retrieval\nprompts for zero-shot tasks, showcasing its universality and\nimproved performance across tasks and models.\nSimultaneously, methods for fine-tuning generators in-\nclude Self-Mem [Cheng et al. , 2023b ], which fine-tunes the\ngenerator through a memory pool of examples, and\nSelf-RAG [Asai et al. , 2023b ], which satisfies active re-\ntrieval needs by generating reflection tokens. The RA-\nDIT[Linet al. , 2023 ]method fine-tunes both the generator", "tiple downstream tasks, fine-tuning the retriever with two dif-\nferent supervised signals via hard labeling of the dataset and\nthe soft reward derived from LLM.\nThis somewhat improves the semantic representation\nthrough both domain knowledge injection and downstream\ntask fine-tuning. However, the retrievers trained by this ap-\nproach are not intuitively helpful for large language models,\nso some work has been done to supervise the fine-tuning of\nEmbedding models directly through feedback signals from\nthe LLM. (This section will be presented in 4.4)\n4.2 How to Match the Semantic Space of Queries\nand Documents\nIn the RAG application, some retrievers use the same embed-\nding model to encode the query and doc, while others use two\nmodels to separately encode the query and doc. Moreover, the\noriginal query of the user may have problems of poor expres-\nsion and lack of semantic information. Therefore, aligning\nthe semantic space of the user\u2019s query and documents is very", "RAG can outperform larger models without RAG (Borgeaud\net al., 2022). Retrieval methods include sparse retrieval\nmethods such as TF-IDF or BM25(Robertson & Zaragoza,\n2009), which analyze word statistic information and find\nmatching documents with a high dimensional sparse vec-\ntor. Dense retrieval methods such as (Karpukhin et al.,\n2020; Izacard et al., 2022a) find matching documents on\nan embedding space generated by a retrieval model pre-\ntrained on a large corpus with or without fine-tuning on a\nretrieval dataset. The retrieval model can be trained stan-\ndalone (Karpukhin et al., 2020; Izacard et al., 2022a; Shi\net al., 2023) or jointly with language models (Izacard et al.,\n2022b; Borgeaud et al., 2022). In addition, it has been shown\nthat off-the-shelf general purpose retrievers can improve a\nbaseline language model significantly without further fine-\ntuning (Ram et al., 2023). RAG is also proposed to perform\ncode generation tasks (Zhou et al., 2023) by retrieving from", "retrieved information. In RAG, the generator\u2019s input includes\nnot only traditional contextual information but also relevant\ntext segments obtained through the retriever. This allows the\ngenerator to better comprehend the context behind the ques-\ntion and produce responses that are more information-rich.\nFurthermore, the generator is guided by the retrieved text toensure consistency between the generated content and the re-\ntrieved information. It is the diversity of input data that has\nled to a series of targeted efforts during the generation phase,\nall aimed at better adapting the large model to the input data\nfrom queries and documents. We will delve into the intro-\nduction of the generator through aspects of post-retrieval pro-\ncessing and fine-tuning.\n5.1 How Can Retrieval Results be Enhanced via\nPost-retrieval Processing?\nIn terms of untuned large language models, most studies\nrely on well-recognized large language models like GPT-"], "retrieved_docs_id": ["011ee221ab", "662eb558d5", "d5d9951817", "392133bc25", "fefa202c19"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does the input to the generator differ in a RAG model compared to typical Large Language Model (LLM) generation tasks?\n", "true_answer": "In a RAG (Retriever-Augmented Generator) model, the input to the generator includes not only a query but also various documents retrieved by the retriever, whereas in typical LLM generation tasks, the input is usually just a query.", "source_doc": "RAG.pdf", "source_id": "7fabdba415", "retrieved_docs": ["information retrieval process, providing more effective and\naccurate inputs for subsequent LLM processing.\n5.2 How to Optimize a Generator to Adapt Input\nData?\nIn the RAG model, the optimization of the generator is a cru-\ncial component of the architecture. The generator\u2019s task is\nto take the retrieved information and generate relevant text,\nthereby providing the final output of the model. The goal of\noptimizing the generator is to ensure that the generated text is\nboth natural and effectively utilizes the retrieved documents,\nin order to better satisfy the user\u2019s query needs.\nIn typical Large Language Model (LLM) generation tasks,\nthe input is usually a query. In RAG, the main difference\nlies in the fact that the input includes not only a query\nbut also various documents retrieved by the retriever (struc-\ntured/unstructured). The introduction of additional informa-\ntion may have a significant impact on the model\u2019s understand-", "retrieved information. In RAG, the generator\u2019s input includes\nnot only traditional contextual information but also relevant\ntext segments obtained through the retriever. This allows the\ngenerator to better comprehend the context behind the ques-\ntion and produce responses that are more information-rich.\nFurthermore, the generator is guided by the retrieved text toensure consistency between the generated content and the re-\ntrieved information. It is the diversity of input data that has\nled to a series of targeted efforts during the generation phase,\nall aimed at better adapting the large model to the input data\nfrom queries and documents. We will delve into the intro-\nduction of the generator through aspects of post-retrieval pro-\ncessing and fine-tuning.\n5.1 How Can Retrieval Results be Enhanced via\nPost-retrieval Processing?\nIn terms of untuned large language models, most studies\nrely on well-recognized large language models like GPT-", "cross-attention scores, selecting the highest scoring input to-\nkens to effectively filter tokens. RECOMP [Xuet al. , 2023a ]\nproposes extractive and generative compressors, which gen-\nerate summaries by selecting relevant sentences or syn-\nthesizing document information to achieve multi-document\nquery focus summaries.In addition to that, a novel approach,\nPKG [Luoet al. , 2023 ], infuses knowledge into a white-box\nmodel through directive fine-tuning, and directly replaces the\nretriever module, used to directly output relevant documents\nbased on the query.\n5 Generator\nAnother core component in RAG is the generator, responsible\nfor transforming retrieved information into natural and fluent\ntext. Its design is inspired by traditional language models,\nbut in comparison to conventional generative models, RAG\u2019s\ngenerator enhances accuracy and relevance by leveraging the\nretrieved information. In RAG, the generator\u2019s input includes", "intensive tasks. By citing sources, users can verify\nthe accuracy of answers and increase trust in model\noutputs. It also facilitates knowledge updates\nand the introduction of domain-specific knowl-\nedge. RAG effectively combines the parameter-\nized knowledge of LLMs with non-parameterized\nexternal knowledge bases, making it one of the\nmost important methods for implementing large\nlanguage models. This paper outlines the develop-\nment paradigms of RAG in the era of LLMs, sum-\nmarizing three paradigms: Naive RAG, Advanced\nRAG, and Modular RAG. It then provides a sum-\nmary and organization of the three main compo-\nnents of RAG: retriever, generator, and augmenta-\ntion methods, along with key technologies in each\ncomponent. Furthermore, it discusses how to eval-\nuate the effectiveness of RAG models, introducing\ntwo evaluation methods for RAG, emphasizing key\nmetrics and abilities for evaluation, and presenting\nthe latest automatic evaluation framework. Finally,", "ules and offers more flexibility.\nIn the subsequent chapters, we further analyze three key\nparts of RAG in detail. Chapter 4 introduces the retriever of\nRAG, how to process corpora to obtain better semantic repre-\nsentations, how to mitigate the semantic gap between Query\nand documents, and how to adjust the retriever to fit the gen-\nerator. Chapter 5 explains how the generator obtains better\ngeneration results by post-processing retrieved documents,\navoiding the \u201dLost in the middle\u201d issue, as well as methods to\nadjust the generator to fit the retriever. Subsequently, in Chap-\nter 6, we review the current retrieval enhancement methods\nfrom the aspects of the retrieval stage, retrieval data sources,\nand retrieval process.\nChapter 7 explains how to evaluate current RAG methods,\nincluding evaluation, key indicators, and current evaluation\nframeworks Finally, we provided an outlook on the poten-\ntial future research directions for RAG. As a method that"], "retrieved_docs_id": ["7fabdba415", "fefa202c19", "cd69a480bb", "4fffd3dc2b", "8cdb0d5ff2"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is one example of an Architecture Design Method used to create compact models?\n", "true_answer": "One example of an Architecture Design Method is Reformer, which introduces locality-sensitive hashing in attention mechanisms to reduce complexity and uses reversible residual layers to store activations more efficiently.", "source_doc": "multimodal.pdf", "source_id": "82a6543862", "retrieved_docs": ["3.1 Compact Architecture\nCompact Architecture refers to the design of lightweight and efficient models while maintaining high\nperformance in downstream tasks. It encompasses various strategies and methodologies to reduce\nmodel size, computational complexity, and memory footprint without compromising performance.\nThese strategies can be broadly categorized into three categories, 1) Architecture Design Methods,\n2) Architecture Search Methods, and 3) Optimization of Attention Mechanisms Methods.\nArchitecture Design Methods involve creating new architectures [133] or adjusting existing\nones [134] to achieve compactness without sacrificing performance. For example, Reformer [96]\nintroduced locality-sensitive hashing in attention mechanisms to reduce complexity, while also\nemploying reversible residual layers to store activations more efficiently. Furthermore, Efficient-\nFormer [97] analyzed ViT-based model architectures and operators, introducing a dimension-", "speech. After reducing the ...\nAI can create a logo in seconds or design a book cover, and they need to do it much faster than us humans can. So\nwhat are the implications that this has for branding design? Giving Creative Control to Algorithms. The first wave of\n\u2018creative\u2019 branding has come from designers and agencies submitting their creations to algorithms. They are algorithms\nthat have been programmed to create, and are being asked to replace designers in the creative process. For example, in\n1998 Google used a random process to select words and colours for their logo. Now, in\nWhat\u2019s great about the holiday season , is it provides us with the excuse we need to reconnect with the ones we have\ngrown apart from. There are many people who I only talk to a couple of times per year during the year and never\ninteract with them anymore, and while I\u2019m completely okay with that \u2013 I feel they too should use Christmas as a great", "to hardware architecture. This may be particularly useful\nfor FPGA deployment, as one can explore many different\npossible hardware con\ufb01gurations (such as different micro-\narchitectures of multiply-accumulate elements), and then\ncouple this with the NN architecture and quantization\nco-design.\nCoupled Compression Methods: As discussed above,\nquantization is only one of the methods for ef\ufb01cient\ndeployment of NNs. Other methods include ef\ufb01cient\nNN architecture design, co-design of hardware and\nNN architecture, pruning, and knowledge distillation.\nQuantization can be coupled with these other approaches.\nHowever, there is currently very little work exploring\nwhat are the optimal combinations of these methods. For\ninstance, pruning and quantization can be applied together\nto a model to reduce its overhead [ 87,152], and it is\nimportant to understand the best combination of struc-tured/unstructured pruning and quantization. Similarly,\nanother future direction is to study the coupling between", "cussed above, an important difference between classical\nwork in low-precision quantization and the recent work in\nmachine learning is the fact that NN parameters may have\nvery different quantized values but may still generalize\nsimilarly well. For example, with quantization-aware\ntraining, we might converge to a different solution, far\naway from the original solution with single precision\nparameters, but still get good accuracy. One can take\nadvantage of this degree of freedom and also adapt the\nNN architecture as it is being quantized. For instance,\nthe recent work of [ 34] shows that changing the width of\nthe NN architecture could reduce/remove generalization\ngap after quantization. One line of future work is to\nadapt jointly other architecture parameters, such as depth\nor individual kernels, as the model is being quantized.\nAnother line of future work is to extend this co-design\nto hardware architecture. This may be particularly useful", "(Liu et al., 2018; Radford et al., 2018; Al-Rfou et al., 2019). This constitutes the second\nmodel structure we consider. A schematic of this architecture is shown in Figure 4, middle.\nIn fact, early work on transfer learning for NLP used this architecture with a language\nmodeling objective as a pre-training method (Radford et al., 2018).\nLanguage models are typically used for compression or sequence generation (Graves,\n2013). However, they can also be used in the text-to-text framework simply by concatenating\nthe inputs and targets. As an example, consider the case of English to German translation:\nIf we have a training datapoint with input sentence \u201cThat is good.\u201d and target \u201cDas ist\ngut.\u201d, we would simply train the model on next-step prediction over the concatenated input\nsequence \u201ctranslate English to German: That is good. target: Das ist gut.\u201d If we wanted to\nobtain the model\u2019s prediction for this example, the model would be fed the pre\ufb01x \u201ctranslate"], "retrieved_docs_id": ["82a6543862", "91fac320bf", "fabec4ef85", "7b16e4be74", "0f033dea5f"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How can hallucination capabilities of large language models be used to improve human user experiences?\n", "true_answer": "Hallucination capabilities can be leveraged to enhance user experiences and enable new use cases, such as integrating hallucination to inspire creative ideas in real-world applications or optimizing the models for human experiences rather than specific cross-modal benchmarks.", "source_doc": "hallucination.pdf", "source_id": "dfb6343eae", "retrieved_docs": ["Hallucination of Multimodal Large Language Models: A Survey 23\nrecollection of its training documents, most of the time the result goes someplace useful. It\u2019s only\nwhen the dreams enter deemed factually incorrect territory that we label them as \u2019hallucinations\u2019.\nFrom this perspective, leveraging hallucination capabilities as a feature in downstream applications\npresents exciting opportunities for enhancing user experiences and enabling new use cases. As\nhumans are the end-users of these models, the primary goal is to enrich human user experiences.\nFuture research may switch the optimization objective from specific cross-modal benchmarks to\nhuman experience. For example, Some content may cause hallucinations but will not affect the\nuser experience, while some content may. Alternatively, integrating hallucination to inspire more\ncreative ideas in real-world applications could also be intriguing.\n6.6 Enhancing Interpretability and Trust", "the appropriate subdistribution of formats to use in\nuser interactions.\nSince RLHF involves many different compo-\nnents such as (1) the preferences data collected\nfrom humans, (2) the reward models to learn the\nhuman preferences, and (3) the policy optimization\nalgorithm (e.g., PPO), Zheng et al. [678] announce\nto release a sequel dissecting each. The most recent\npart focuses on step (3) and finds that various RL\ntricks can be applied to make vanilla PPO more\nstable.\nFigure 10: Alignment. We categorize existing align-\nment work into methods for detecting misaligned behav-\nior or aligning models.\nSelf-improvement refers to fine-tuning an LLM\non self-generated data [ 222]. While this technique\ncan be used to improve the model\u2019s capabilities,\nit can also be used to improve the model\u2019s align-\nment with human values. Huang et al. [222] first\ndemonstrate this ability by annotating unlabeled\nreasoning datasets. Surprisingly, this allows the\n23", "showing how increasing the guidance weight \u03b3increases\nthe importance of the prompt \u201cToday in France,\u201d.In recent years large language models have exhibited\nstrong generative capabilities to solve a diverse range of\ntasks [ 26,15,71]. \u201cPrompting\u201d is typically used to con-\ndition generation, with task instructions and context [ 64],\nor a small set of examples [ 15]. However, language gener-\nation, especially with smaller models, has been shown to\nstruggle with issues such as hallucination [ 49], degrada-\ntion [ 38] and meandering [ 76]. Various approaches have\nbeen proposed to address this, e.g.: instruction-finetuning\n[81,70] and reinforcement learning [ 56,4,6]. These tech-\nniques are expensive and their compute and data cost may\nnot be accessible to all users. In this paper we propose an\ninference time methodology which, as shown in Figure\n1, gives more importance to the user intent, expressed\nthrough the prompt. Our hypothesis in this paper is: fo-", "GPT-2 on BLEU and ROUGE-L metrics, while earning more\nfavor from human judgment [638]. Furthermore, existing\nwork argues that even human evaluation may not be robust\nenough [628, 629, 639, 640]. In some cases, it is difficult\nto achieve a high level of consensus among human an-\nnotators [629], and there is also a large gap between the\nannotation quality of crowdworkers and experts [639, 640].\nThus, how to conduct reliable evaluation for language gen-\neration tasks in the era of LLMs has become a fundamental\nyet challenging research topic. Recently, increasing research\nwork proposes to leverage LLMs to improve the evaluation\nquality of the generated texts. Specially, LLMs can be used\nto improve the evaluation quality of existing metrics. For ex-\nample, Para-Ref [641] augments various automatic metrics\nby leveraging LLMs to paraphrase existing references into", "62\n(b) Extrinsic hallucination(a) Intrinsic hallucinationExplain RLHF for LLMs.RLHF stands for \"Rights, Limitations, Harms, and Freedoms\"and is a framework for \u2026\u2026 models like LLMs (Large Language Models).Bob\u2019s wife is Amy. Bob\u2019s daughter is Cindy.Who is Cindy to Amy?Cindy is Amy\u2019s daughter-in-law.\nFig. 17: Examples of intrinsic and extrinsic hallucination for a public LLM (access date: March 19, 2023). As an example\nof intrinsic hallucination, the LLM gives a conflicting judgment about the relationship between Cindy and Amy, which\ncontradicts the input. For extrinsic hallucination, in this example, the LLM seems to have an incorrect understanding of\nthe meaning of RLHF (reinforcement learning from human feedback), though it can correctly understand the meaning of\nLLMs (in this context).\nthe retrieved evidence can largely improve the accuracy\nof the generated answers, even enabling a smaller LLM to\noutperform 10\u00d7larger ones [653, 657]. Further, open-book"], "retrieved_docs_id": ["dfb6343eae", "2a5895d5e2", "08972157a7", "af92a74f0f", "38dc1f2ddd"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What optimization objective is used during model alignment after domain-adaptive pretraining in ChipNeMo?\n", "true_answer": "An autoregressive optimization objective is used during model alignment after domain-adaptive pretraining in ChipNeMo.", "source_doc": "ChipNemo.pdf", "source_id": "a5a7c4ceb0", "retrieved_docs": ["ChipNeMo: Domain-Adapted LLMs for Chip Design\nour application of a low learning rate.\nWe refer readers to Appendix for details on the training data\ncollection process A.2, training data blend A.3, and imple-\nmentation details and ablation studies on domain-adaptive\npretraining A.6.\n2.3. Model Alignment\nAfter DAPT, we perform model alignment. We specifically\nleverage two alignment techniques: supervised fine-tuning\n(SFT) and SteerLM (Dong et al., 2023). We adopt the iden-\ntical hyperparameter training configuration as DAPT for all\nmodels, with the exception of using a reduced global batch\nsize of 128. We employ an autoregressive optimization ob-\njective, implementing a strategy where losses associated\nwith tokens originating from the system and user prompts\nare masked (Touvron et al., 2023). This approach ensures\nthat during backpropagation, our focus is exclusively di-\nrected towards the optimization of answer tokens.\nWe combined our domain alignment dataset, consisting", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ndomain-specific data improves the retriever hit rate\nby 30% over a pre-trained state-of-the-art retriever, in\nturn improving overall quality of RAG responses.\nThe paper is organized as follows. Section 2 outlines do-\nmain adaptation and training methods used including the\nadapted tokenizer, DAPT, model alignment, and RAG. Sec-\ntion 3 describes the experimental results including human\nevaluations for each application. Section 4 describes rel-\nevant LLM methods and other work targeting LLMs for\nchip design. Finally, detailed results along with additional\nmodel training details and examples of text generated by the\napplication use-cases are illustrated in the Appendix.\n2. ChipNeMo Domain Adaptation Methods\nChipNeMo implements multiple domain adaptation tech-\nniques to adapt LLMs to the chip design domain. These\ntechniques include domain-adaptive tokenization for chip\ndesign data, domain adaptive pretraining with large corpus", "ChipNeMo: Domain-Adapted LLMs for Chip Design\nMingjie Liu* 1Teodor-Dumitru Ene* 1Robert Kirby* 1Chris Cheng* 1Nathaniel Pinckney* 1\nRongjian Liang* 1Jonah Alben1Himyanshu Anand1Sanmitra Banerjee1Ismet Bayraktaroglu1\nBonita Bhaskaran1Bryan Catanzaro1Arjun Chaudhuri1Sharon Clay1Bill Dally1Laura Dang1\nParikshit Deshpande1Siddhanth Dhodhi1Sameer Halepete1Eric Hill1Jiashang Hu1Sumit Jain1\nAnkit Jindal1Brucek Khailany1George Kokai1Kishor Kunal1Xiaowei Li1Charley Lind1Hao Liu1\nStuart Oberman1Sujeet Omar1Ghasem Pasandi1Sreedhar Pratty1Jonathan Raiman1Ambar Sarkar1\nZhengjiang Shao1Hanfei Sun1Pratik P Suthar1Varun Tej1Walker Turner1Kaizhe Xu1Haoxing Ren1\nAbstract\nChipNeMo aims to explore the applications of\nlarge language models (LLMs) for industrial chip\ndesign. Instead of directly deploying off-the-\nshelf commercial or open-source LLMs, we in-\nstead adopt the following domain adaptation tech-\nniques: domain-adaptive tokenization, domain-\nadaptive continued pretraining, model alignment", "niques: domain-adaptive tokenization, domain-\nadaptive continued pretraining, model alignment\nwith domain-specific instructions, and domain-\nadapted retrieval models. We evaluate these\nmethods on three selected LLM applications for\nchip design: an engineering assistant chatbot,\nEDA script generation, and bug summarization\nand analysis. Our evaluations demonstrate that\ndomain-adaptive pretraining of language models,\ncan lead to superior performance in domain re-\nlated downstream tasks compared to their base\nLLaMA2 counterparts, without degradations in\ngeneric capabilities. In particular, our largest\nmodel, ChipNeMo-70B, outperforms the highly\ncapable GPT-4 on two of our use cases, namely en-\ngineering assistant chatbot and EDA scripts gener-\nation, while exhibiting competitive performance\non bug summarization and analysis. These re-\nsults underscore the potential of domain-specific\ncustomization for enhancing the effectiveness of\nlarge language models in specialized applications.", "ChipNeMo: Domain-Adapted LLMs for Chip Design\nFigure 4: Domain-Adapted ChipNeMo Tokenizer Improvements.\n3.1. Domain-Adaptive Tokenization\nWe adapt the LLaMA2 tokenizer (containing 32K tokens) to\nchip design datasets using the previously outlined four-step\nprocess. Approximately 9K new tokens are added to the\nLLaMA2 tokenizer. The adapted tokenizers can improve\ntokenization efficiency by 1.6% to 3.3% across various chip\ndesign datasets as shown in Figure 4. We observe no obvious\nchanges to tokenizer efficiency on public data. Importantly,\nwe have not observed significant decline in the LLM\u2019s accu-\nracy on public benchmarks when using the domain-adapted\ntokenizers even prior to DAPT.\n3.2. Domain Adaptive Pretraining\nFigure 5: Chip Domain Benchmark Result for ChipNeMo.\nFigure 5 presents the outcomes for ChipNeMo models on\nthe AutoEval benchmark for chip design domain (detailed\nin Appendix A.5). Results on open domain academic bench-\nmark results are presented in Appendix A.6. Our research"], "retrieved_docs_id": ["a5a7c4ceb0", "df0b9868f2", "36c5c0c7f1", "a6c3d05123", "ac7c0c980b"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is a recent focus in reinforcement research during the inference stage for large language models?\n", "true_answer": "A recent focus is self-retrieval, where models retrieve and use their own information during the inference stage.", "source_doc": "RAG.pdf", "source_id": "326cdd7c26", "retrieved_docs": ["most of the research on reinforcement during the inference\nstage emerged during the era of LLMs. This is primarily due\nto the high training costs associated with high-performance\nlarge models. Researchers have attempted to enhance model\ngeneration by incorporating external knowledge in a cost-\neffective manner through the inclusion of RAG modules dur-\ning the inference stage. Regarding the use of augmented\ndata, early RAG primarily focused on the application of un-\nstructured data, particularly in the context of open-domain\nquestion answering. Subsequently, the range of knowledge\nsources for retrieval expanded, with the use of high-quality\ndata as knowledge sources effectively addressing issues such\nas internalization of incorrect knowledge and hallucinations\nin large models. This includes structured knowledge, with\nknowledge graphs being a representative example. Recently,\nthere has been increased attention on self-retrieval, which in-", "els. In comparison with them, this paper aims to systemati-\ncally outline the entire process of Retrieval-Augmented Gen-\neration (RAG) and focuses specifically on research related to\naugmenting the generation of large language models through\nknowledge retrieval.\nThe development of RAG algorithms and models is il-\nlustrated in Fig 1. On a timeline, most of the research re-\nlated to RAG emerged after 2020, with a significant turn-\ning point in December 2022 when ChatGPT was released.\nSince the release of ChatGPT, research in the field of natu-\nral language processing has entered the era of large models.\nNaive RAG techniques quickly gained prominence, leading\nto a rapid increase in the number of related studies.In terms\nof enhancement strategies, research on reinforcement during\nthe pre-training and supervised fine-tuning stages has been\nongoing since the concept of RAG was introduced. However,\nmost of the research on reinforcement during the inference", "bility to tailor models according to specific requirements and\ndata formats, reducing the resource consumption compared\nto the pre-training phase while retaining the ability to adjust\nthe model\u2019s output style.\nInference Stage\nThe integration of RAG methods with LLM has become a\nprevalent research direction in the inference phase. Notably,\nthe research paradigm of Naive RAG relies on incorporating\nretrieval content during the inference stage.\nTo overcome the limitations of Naive RAG, researchers\nhave introduced richer context in the RAG during the in-\nference phase. The DSP [Khattab et al. , 2022 ]framework re-\nlies on a complex pipeline that involves passing natural lan-\nguage text between a frozen Language Model (LM) and a Re-\ntrieval Model (RM), providing the model with more informa-\ntive context to enhance generation quality. PKG equips LLMs\nwith a knowledge-guided module that allows access to rele-\nvant knowledge without altering the parameters of LLMs, en-", "collaboration with the AI community.\n6 Related Work\nLarge Language Models. The recent years have witnessed a substantial evolution in the field of LLMs.\nFollowing the scaling laws of Kaplan et al. (2020), several Large Language Models with more than 100B\nparameters have been proposed, from GPT-3 (Brown et al., 2020) to Gopher (Rae et al., 2022) or specialized\nmodels, e.g. Galactica, for science(Taylor et al., 2022). With 70B parameters, Chinchilla (Hoffmann et al.,\n2022) redefined those scaling laws towards the number of tokens rather than model weights. Notable in\nthis progression is the rise of Llama, recognized for its focus on computational efficiency during inference\n(Touvron et al., 2023). A parallel discourse has unfolded around the dynamics of open-source versus closed-\nsource models. Open-source releases like BLOOM (Scao et al., 2022), OPT(Zhang et al., 2022), and Falcon\n(Penedo et al., 2023) have risen to challenge their closed-source counterparts like GPT-3 and Chinchilla.", "collaboration with the AI community.\n6 Related Work\nLarge Language Models. The recent years have witnessed a substantial evolution in the field of LLMs.\nFollowing the scaling laws of Kaplan et al. (2020), several Large Language Models with more than 100B\nparameters have been proposed, from GPT-3 (Brown et al., 2020) to Gopher (Rae et al., 2022) or specialized\nmodels, e.g. Galactica, for science(Taylor et al., 2022). With 70B parameters, Chinchilla (Hoffmann et al.,\n2022) redefined those scaling laws towards the number of tokens rather than model weights. Notable in\nthis progression is the rise of Llama, recognized for its focus on computational efficiency during inference\n(Touvron et al., 2023). A parallel discourse has unfolded around the dynamics of open-source versus closed-\nsource models. Open-source releases like BLOOM (Scao et al., 2022), OPT(Zhang et al., 2022), and Falcon\n(Penedo et al., 2023) have risen to challenge their closed-source counterparts like GPT-3 and Chinchilla."], "retrieved_docs_id": ["326cdd7c26", "483a7b216e", "0264588829", "c2a74bff55", "c2a74bff55"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How do Reflection tokens in the Self-RAG framework determine when to retrieve additional information?\n", "true_answer": "Reflection tokens in the Self-RAG framework can autonomously decide when to retrieve paragraphs or use a set threshold to trigger retrieval.", "source_doc": "RAG.pdf", "source_id": "2449b179e1", "retrieved_docs": ["probabilities. This approach is designed to handle situations\nwhere LLMs might need additional knowledge.\nSelf-RAG [Asai et al. , 2023b ]introduces an important in-\nnovation called Reflection tokens. These special tokens are\ngenerated to review the output and come in two types: Re-\ntrieve and Critic. The model can autonomously decide when\nto retrieve paragraphs or use a set threshold to trigger re-\ntrieval. When retrieval is needed, the generator processes\nmultiple paragraphs simultaneously, performing fragment-\nlevel beam search to obtain the best sequence. The scores for\neach subdivision are updated using Critic scores, and these\nweights can be adjusted during the inference process to cus-\ntomize the model\u2019s behavior. The Self-RAG framework also\nallows the LLM to autonomously determine whether recall\nis necessary, avoiding training additional classifiers or rely-\ning on NLI models. This enhances the model\u2019s ability to au-\ntonomously judge inputs and generate accurate answers.", "Recite-Read [Sunet al. , 2022 ]transforms external re-\ntrieval into retrieval from model weights, initially hav-\ning LLM memorize task-relevant information and gener-\nate output for handling knowledge-intensive natural lan-\nguage processing tasks.\n\u2022Adjusting the Flow between Modules In the realm of\nadjusting the flow between modules, there is an empha-\nsis on enhancing interaction between language models\nand retrieval models. DSP [Khattab et al. , 2022 ]intro-\nduces the Demonstrate-Search-predict framework, treat-\ning the context learning system as an explicit program\nrather than a terminal task prompt to address knowledge-\nintensive tasks. ITER-RETGEN [Shao et al. , 2023 ]\nutilizes generated content to guide retrieval, itera-\ntively performing \u201cretrieval-enhanced generation\u201d and\n\u201cgeneration-enhanced retrieval\u201d in a Retrieve-Read-\nRetrieve-Read flow. Self-RAG [Asai et al. , 2023b ]fol-\nlows the decide-retrieve-reflect-read process, introduc-", "models must retrieve from the middle of the input context.\nplaced at the start of the input context, LongChat-\n13B (16K) tends to generate code to retrieve the\nkey, rather than outputting the value directly.\n4Why Are Language Models Not Robust\nto Changes in the Position of Relevant\nInformation?\nOur multi-document question answering and key-\nvalue retrieval results show that language models\nstruggle to robustly access and use information in\nlong input contexts, since performance degrades\nsignificantly when changing the position of rele-\nvant information. To better understand why, we per-\nform some preliminary investigations into the role\nof model architecture (decoder-only vs. encoder-\ndecoder), query-aware contextualization, and in-\nstruction fine-tuning.\n4.1 Effect of Model Architecture\nThe open models we evaluated are all decoder-only\nmodels\u2014at each timestep, they may only attend\nto prior tokens. To better understand the poten-\ntial effects of model architecture on how language", "models for complementing with each other in solving com-\nplex cases of classic NLP tasks [772]. Another promising di-\nrection is to conduct human-machine collaborative research\n(e.g., conversational translation [768]) on NLP tasks, sinceLLMs can effectively understand human instructions and\nmake meaningful responses.\n8.1.2 LLM for Information Retrieval\nThe goal of information retrieval (IR) systems is to assist\nusers in discovering ideal information resources (typically\ndocuments) and mitigating the information overload issue.\nTypically, contemporary IR systems adopt a retrieve-then-\nrerank pipeline framework [54]. Within this framework,\nthe retriever initially retrieves relevant information from a\nlarge-scale corpus, and the reranker subsequently performs\nmulti-stage ranking procedure to acquire the most relevant\ninformation [773]. Since the advent of LLMs has significant\nimpact on the way of information access, we discuss how\nit advances the development of IR from two main aspects,", "Published in Transactions on Machine Learning Research (08/2023)\n=Denoised / idealizedruntimed: dictionary that maps num_prompt_tokens to time taken to encode the promptg: time taken to generate each additional tokenPromptBlack-box APIRaw runtime(= denoised runtime + noise)\nDedicated hardware(e.g., A100 GPUs)Idealized runtimePromptnum_output_tokensOutputOutputnum_prompt_tokensTotal time  =  F(num_prompt_tokens)  +  g * num_output_tokens\nFigure 22: Inference Efficiency Metrics. A demonstration of how we measure inference efficiency. We\ncompute two metrics: denoised inference runtime and idealized inference runtime. Freturns the runtime\nof encoding a prompt of given size, and gis the runtime of generating each additional output token for the\ngiven model.\nFor some models, like the AI21 models, we do not have enough information to make a reliable estimate.\nWe believe model creators being transparent about details on how they trained their models would make it"], "retrieved_docs_id": ["2449b179e1", "dfac20a7d8", "91a4302548", "f738db1ca0", "634ae03396"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How can the occurrence of illusions in a language model due to retrieval of irrelevant data be prevented?\n", "true_answer": "By introducing an additional validation module after document retrieval to assess the relevance between the retrieved documents.", "source_doc": "RAG.pdf", "source_id": "8d0a82337c", "retrieved_docs": ["igate alignment issues. PRCA [Yang et al. , 2023b ]lever-\naged reinforcement learning to train a context adapter\ndriven by LLM rewards, positioned between the re-\ntriever and generator. It optimizes the retrieved in-\nformation by maximizing rewards in the reinforcement\nlearning phase within the labeled autoregressive pol-\nicy. AAR [Yuet al. , 2023b ]proposed a universal plu-\ngin that learns LM preferences from known-source\nLLMs to assist unknown or non-co-finetuned LLMs.\nRRR [Maet al. , 2023a ]designed a module for rewriting\nqueries based on reinforcement learning to align queries\nwith documents in the corpus.\n\u2022Validation Module: In real-world scenarios, it is notalways guaranteed that the retrieved information is reli-\nable. Retrieving irrelevant data may lead to the occur-\nrence of illusions in LLM. Therefore, an additional val-\nidation module can be introduced after retrieving docu-\nments to assess the relevance between the retrieved doc-", "iments show that it not only achieves competitive performance with state-of-the-art efficient meth-\nods but also boasts faster speeds due to its linear sequential modeling.It also excels in overcom-\ning visual illusions and spatial relationship judgments in closed-set challenging prediction bench-\nmarks and achieves performance comparable to LLaV A while using only 43% of the parameters.\nVL-Mamba[18] substitutes the Transformer-based backbone language model with the pre-trained\nMamba language model. It explores how to effectively implement the 2D vision selective scan\nmechanism for multimodal learning and the combinations of different vision encoders and pre-\ntrained Mamba language model variants.\nInference Acceleration SPD[45] proposes the speculative decoding with a language-only model\nto improve inference efficiency. By employing a language-only model as a draft model for specu-\n9", "evaluation metrics. Additionally, the latest evalu-\nation frameworks like RAGAS [Eset al. , 2023 ]and\nARES [Saad-Falcon et al. , 2023 ]also involve RAG eval-\nuation metrics. Summarizing these works, three core metrics\nare primarily focused on: Faithfulness of the answer, Answer\nRelevance, and Context Relevance.\n1.Faithfulness\nThis metric emphasizes that the answers generated by\nthe model must remain true to the given context, ensur-\ning that the answers are consistent with the context infor-\nmation and do not deviate or contradict it. This aspect of\nevaluation is vital for addressing illusions in large mod-\nels.\n2.Answer Relevance\nThis metric stresses that the generated answers need to\nbe directly related to the posed question.\n3.Context Relevance\nThis metric demands that the retrieved contextual infor-\nmation be as accurate and targeted as possible, avoid-\ning irrelevant content. After all, processing long texts\nis costly for LLMs, and too much irrelevant information", "put forward various methods to optimize the retrieval process.\nIn terms of specific implementation, Advanced RAG can be\nadjusted either through a pipeline or in an end-to-end manner.\nPre-Retrieval Process\n\u2022Optimizing Data Indexing\nThe purpose of optimizing data indexing is to enhance\nthe quality of indexed content. Currently, there are five\nmain strategies employed for this purpose: increasing\nthe granularity of indexed data, optimizing index struc-\ntures, adding metadata, alignment optimization, and\nmixed retrieval.\n1.Enhancing Data Granularity: The objective of\npre-index optimization is to improve text standard-\nization, consistency, and ensure factual accuracy\nand contextual richness to guarantee the perfor-\nmance of the RAG system. Text standardization in-\nvolves removing irrelevant information and special\ncharacters to enhance the efficiency of the retriever.\nIn terms of consistency, the primary task is to elim-\ninate ambiguity in entities and terms, along with", "Retrieval-Augmented LLM. Due to the huge amount of\nfact records in a KG, existing work typically adopts a\nretrieval model to first obtain a relatively small subgraph\nfrom KG, and then leverages it to enhance LLMs by en-\nriching the relevant knowledge. Before the advent of LLMs,\nthe retrieved subgraphs are often supplemented into train-\ning data, injecting knowledge information into PLMs via\nparameter learning [863\u2013865]. In contrast, to leverage the\nretrieved knowledge, LLMs mainly incorporate it as part of\nthe prompt, without parameter update. To implement this\napproach, there are two main technical problems, i.e.,how\nto retrieve relevant knowledge from KGs and how to make\nbetter use of the structured data by LLMs. For the first issue\n(i.e.,retrieving relevant knowledge), a typical approach is\nto train a small language model ( e.g., RoBERTa) to iden-\ntify question-related fact triples [866]. To further improve\nthe retrieval performance, several studies also propose an"], "retrieved_docs_id": ["8d0a82337c", "6bebc6e320", "57b75e5528", "8a71abd00a", "d0140a8a43"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How are LLMs used in the evaluation of RAG-based applications?\n", "true_answer": "LLMs, such as GPT-3.5 and GPT-4, are used as automatic evaluation tools for RAG-based applications, assessing their faithfulness, answer relevance, and context relevance. This method has been found to be effective and efficient in evaluating these applications.", "source_doc": "RAG.pdf", "source_id": "a05a21efce", "retrieved_docs": ["in retrieved information. Counterfactual robustness tests\ninclude questions that the LLM can answer directly, but\nthe related external documents contain factual errors.\n7.3 Evaluation Frameworks\nRecently, the LLM community has been exploring the use\nof \u201dLLMs as judge\u201d for automatic assessment, with many\nutilizing powerful LLMs (such as GPT-4) to evaluate their\nown LLM applications outputs. Practices by Databricks us-\ning GPT-3.5 and GPT-4 as LLM judges to assess their chatbot\napplications suggest that using LLMs as automatic evaluation\ntools is effective [Leng et al. , 2023 ]. They believe this method\ncan also efficiently and cost-effectively evaluate RAG-based\napplications.\nIn the field of RAG evaluation frameworks, RAGAS and\nARES are relatively new. The core focus of these evaluations\nis on three main metrics: Faithfulness of the answer, answer\nrelevance, and context relevance. Additionally, TruLens, an\nopen-source library proposed by the industry, also offers a", "tection techniques. Chang et al. [72] concurrently\nsurvey evaluation tasks of LLMs.\nThe literature also contains several previous sur-\nveys and evaluations specific to individual applica-\ntion domains that reference LLMs, including: chat-\nbots [ 345], computational biology [ 558,217], com-\nputer programming [ 499], medicine [ 381,610,590,\n381], law [ 101,531], knowledge work [ 140,621],\nand reasoning [223].\n5 Conclusion\nIn this work, we identify several unsolved chal-\nlenges of large language models, provide an\noverview of their current applications, and discuss\nhow the former constrain the latter. By highlighting\nthe limitations of existing methods, we hope to fos-\nter future research addressing these. We also hope\nthat by providing an overview of the approaches\nused in different applied areas, we can facilitate\nthe transfer of ideas between domains and target\nfurther research.\n49", "Further, it supports a number of language models such as\nGPT-2 and LLaMA, and also covers several representative\nvision Transformer models ( e.g.,ViT and Swin Transformer).\nAs discussed in Section 5.3.1, there have been a large\nnumber of efficient tuning methods proposed in the existing\nliterature. However, most of these approaches are tested\non small-sized pre-trained language models, instead of the\nLLMs. So far, there still lacks a thorough investigation on\nthe effect of different efficient tuning methods on large-sized\nlanguage models at different settings or tasks.\n5.4 Memory-Efficient Model Adaptation\nDue to the huge number of model parameters, LLMs take a\nsignificant memory footprint for inference, making it very\ncostly to be deployed in real-world applications. In this\nsection, we discuss how to reduce the memory footprint\nof LLMs via a popular model compression approach ( i.e.,\nmodel quantization), so that large-sized LLMs can be used", "not only on general abilities ( e.g., basic ability like com-\nplex reasoning and advanced ability like human align-\nment), but also on specific abilities related to their des-\nignated domains or applications. For this purpose, one\noften needs to construct specific benchmarks tailored for the\ntarget domains or applications. Then, these domain-specific\nbenchmarks can be combined with general benchmarks to\nconduct both comprehensive and targeted evaluation for\nspecialized LLMs. For example, MultiMedQA [356] is a\nspecific benchmark in healthcare, which includes medicalexaminations and healthcare questions. In this work [356],\nMultiMedQA has been combined with MMLU [364] to\nassess the performance of specialized LLMs for healthcare,\nsuch as Med-PaLM [356]. Similarly, FLUE [737] constructs a\nbenchmark for finance, spanning from financial sentiment\nanalysis to question answering. It has been used collab-\noratively with BBH [365] to evaluate finical LLMs like\nBloombergGPT [360].", "GPT-2 on BLEU and ROUGE-L metrics, while earning more\nfavor from human judgment [638]. Furthermore, existing\nwork argues that even human evaluation may not be robust\nenough [628, 629, 639, 640]. In some cases, it is difficult\nto achieve a high level of consensus among human an-\nnotators [629], and there is also a large gap between the\nannotation quality of crowdworkers and experts [639, 640].\nThus, how to conduct reliable evaluation for language gen-\neration tasks in the era of LLMs has become a fundamental\nyet challenging research topic. Recently, increasing research\nwork proposes to leverage LLMs to improve the evaluation\nquality of the generated texts. Specially, LLMs can be used\nto improve the evaluation quality of existing metrics. For ex-\nample, Para-Ref [641] augments various automatic metrics\nby leveraging LLMs to paraphrase existing references into"], "retrieved_docs_id": ["a05a21efce", "7bc196ee90", "0df03879ce", "560353ce53", "af92a74f0f"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does the COG model select text fragments during the generation process?\n", "true_answer": "The COG model selects text fragments by utilizing efficient vector search tools to calculate meaningful context representations of text fragments and index them. At each time step, relevant text fragments are sought from the text collection instead of selecting from an independent set of options.", "source_doc": "RAG.pdf", "source_id": "bff4917f9e", "retrieved_docs": ["corporating a retrieval mechanism using the T5 architecture\n[Raffel et al. , 2020 ]in both the pre-training and fine-tuning\nstages. Prior to pre-training, it initializes the encoder-decoder\nLM backbone with a pre-trained T5, and initializes the dense\nretriever with a pre-trained Contriever. During the pre-\ntraining process, it refreshes the asynchronous index every\n1000 steps.\nCOG [Vaze et al. , 2021 ]is a text generation model that for-\nmalizes its generation process by gradually copying text frag-\nments (such as words or phrases) from an existing collection\nof text. Unlike traditional text generation models that select\nwords sequentially, COG utilizes efficient vector search tools\nto calculate meaningful context representations of text frag-\nments and index them. Consequently, the text generation task\nis decomposed into a series of copy and paste operations,\nwhere at each time step, relevant text fragments are sought\nfrom the text collection instead of selecting from an indepen-", "A Watermark for Large Language Models. Page 2 of 13.\n\u2022The watermark can be algorithmically detected with-\nout any knowledge of the model parameters or access\nto the language model API. This property allows the\ndetection algorithm to be open sourced even when the\nmodel is not. This also makes detection cheap and fast\nbecause the LLM does not need to be loaded or run.\n\u2022Watermarked text can be generated using a standard\nlanguage model without re-training.\n\u2022The watermark is detectable from only a contiguous\nportion of the generated text. This way, the watermark\nremains detectable when only a slice of the generation\nis used to create a larger document.\n\u2022The watermark cannot be removed without modifying\na significant fraction of the generated tokens.\n\u2022We can compute a rigorous statistical measure of con-\nfidence that the watermark has been detected.\n1.1. Notation & Language model basics\nLanguage models have a \u201cvocabulary\u201d Vcontaining words\nor word fragments known as \u201ctokens.\u201d Typical vocab-", "acterising what these models do as reasoning,\nproperly speaking.\n11 How Do LLMs Generalise?\nGiven that LLMs are sometimes capable of solv-\ning reasoning problems with few-shot prompting\nalone, albeit somewhat unreliably, including rea-\nsoning problems that are not in their training set,\nsurely what they are doing is more than \u201cjust\u201d\nnext token prediction? Well, it is an engineer-\ning fact that this is what an LLM does. The\nnoteworthy thing is that next token prediction issu\ufb03cient for solving previously unseen reasoning\nproblems, even if unreliably. How is this pos-\nsible? Certainly it would not be possible if the\nLLM were doing nothing more than cutting-and-\npasting fragments of text from its training set\nand assembling them into a response. But this is\nnot what an LLM does. Rather, an LLM mod-\nels a distribution that is unimaginably complex,\nand allows users and applications to sample from\nthat distribution.\nThis unimaginably complex distribution is a", "ity without being updated. In what follows, we discuss two\nkey questions about the ICL ability of LLMs, i.e.,\u201chow does\npre-training affect the ICL ability \u201d and \u201c how do LLMs perform\nICL during inference \u201d.\nHow Pre-Training Affects ICL? ICL is first proposed in\nGPT-3 [55], and it has been shown that the ICL ability\nbecomes more significant with a larger model size. Further,\nsome studies reveal that small-scale PLMs can also demon-\nstrate a strong ICL ability by continual pre-training [490]\nor fine-tuning [491] on specially designed training tasks,\nwhich typically involve additional task examples in theinput during the training process. It suggests that the design\nof training tasks is an important influence factor on the ICL\ncapability of LLMs. Besides training tasks, recent studies\nhave also investigated the relationship between ICL and\npre-training corpora [488, 492]. For example, ICL can be\ntheoretically explained as the product of pre-training on", "at the current step. Greedy search can achieve satisfactory\nresults in text generation tasks ( e.g., machine translation\nand text summarization), in which the output is highly\ndependent on the input [307]. However, in terms of open-\nended generation tasks ( e.g., story generation and dialog),\ngreedy search sometimes tends to generate awkward and\nrepetitive sentences [308].\nAs another alternative decoding strategy, sampling-\nbased methods are proposed to randomly select the next\ntoken based on the probability distribution to enhance the\nrandomness and diversity during generation:\nxi\u223cP(x|x<i). (9)\nFor the example in Figure 10, sampling-based methods will\nsample the word \u201ccoffee\u201d with higher probability while\nalso retaining the possibilities of selecting the rest words,\n\u201cwater\u201d, \u201ctea\u201d, \u201crice\u201d, etc.\nNot limited to the decoder-only architecture, these two\ndecoding methods can be generally applied to encoder-\ndecoder models and prefix decoder models in a similar way."], "retrieved_docs_id": ["bff4917f9e", "e437d8009e", "37a1f2530d", "b0a5af4ba8", "fec76fc29e"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "Which vision encoder, compared to pure vision models, tends to lose some visual details?\n", "true_answer": "CLIP has been shown to lose some visual details compared to pure vision models like DINO ViT.", "source_doc": "hallucination.pdf", "source_id": "3f64cf9b55", "retrieved_docs": ["VL [ 2] has shown the effectiveness of gradually enlarging image resolution from 224\u00d7224to\n448\u00d7448. InternVL [ 2] scales up the vision encoder to 6 billion parameters, enabling processing of\nhigh-resolution images. Regarding hallucination, HallE-Switch [ 123] has investigated the impact\nof vision encoder resolution on its proposed CCEval benchmark. Among the three studied vision\nencoders (CLIP-ViT-L-112, CLIP-ViT-L-224, CLIP-ViT-L-336), higher resolution generally results\nin lower degrees of hallucination. These works indicate that scaling up vision resolution is a\nstraightforward yet effective solution.\n5.2.2 Versatile Vision Encoders. Several studies [ 38,49,98] have investigated vision encoders for\nMLLMs. Typically, the CLIP ViT image encoder is used as the vision encoder in most MLLMs\nthanks to its remarkable ability to extract semantic-rich features. However, CLIP has been shown\nto lose some visual details compared to pure vision models like DINO ViT [ 10]. Therefore, recent", "to lose some visual details compared to pure vision models like DINO ViT [ 10]. Therefore, recent\nstudies have proposed complementing this information loss by incorporating visual features from\nother vision encoders. The work of [ 98] proposes mixing features from CLIP ViT and DINO ViT.\nSpecifically, it experimented with additive and interleaved features. Both settings show that there\nis a trade-off between the two types of features. A more dedicated mechanism is needed.\nConcurrently, a visual expert-based model proposed in [ 38] aims to mitigate the information\nloss caused by the CLIP image encoder. Instead of merely mixing features, this paper enhances\nthe visual perception ability of MLLMs by focusing on knowledge enhancement, relying on two\npivotal modules: multi-task encoders and the structural knowledge enhancement module. The multi-\ntask encoders are dedicated to integrating various types of latent visual information extracted by", "ment between the feature spaces of visual and text inputs. Since the vision encoder constitutes a\nrelatively minor portion of the MLLM parameters, the advantages of lightweight optimization are\nless pronounced compared to the language model. Therefore, efficient MLLMs generally continue\nto employ visual encoders that are widely used in large-scale MLLMs, as detailed in Table 1.\nMultiple Vision Encoders BRA VE[12] in Figure. 4 performs an extensive ablation of various vi-\nsion encoders with distinct inductive biases for tackling MLMM tasks. The results indicate that there\nisn\u2019t a single-encoder setup that consistently excels across different tasks, and encoders with diverse\nbiases can yield surprisingly similar results. Presumably, incorporating multiple vision encoders\ncontributes to capturing a wide range of visual representations, thereby enhancing the model\u2019s com-\nprehension of visual data. Cobra[13] integrates DINOv2[76] and SigLIP[75] as its vision backbone,", "vision and language models. It commences with a convolutional stem, succeeded by Mobile Con-\nvolution Blocks in the first and second stages, and Transformer Blocks in the third stage. Remark-\nably, ViTamin-XL, with a modest count of 436M parameters, attains an 82.9% ImageNet zero-shot\naccuracy. This outperforms the 82.0% accuracy achieved by EV A-E [80], which operates with a pa-\nrameter count ten times larger, at 4.4B. Simply replacing LLaV A\u2019s image encoder with ViTamin-L\ncan establish new standards in various MLLM performance metrics.\n2.2 Vision-Language Projector\nThe task of the vision-language projector is to map the visual patch embeddings Zvinto the text\nfeature space:\nHv=P(Zv), (2)\nwhere Hvdenotes the projected visual embeddings. The aligned visual features are used as prompts\nand inputted into the language model along with the text embeddings. Vision-language projector\n5", "language model to generate the response autoregressively.\nIn the following, we will discuss the training, evaluation,\nand key points to develop capable MLLMs.\nTraining Process. The training process of the MLLM in-\ncludes two major stages: vision-language alignment pre-\ntraining and visual instruction tuning.\n\u2022Vision-language alignment pre-training. To develop\nMLLMs, existing work mostly initializes the vision encoder\nand the LLM with pre-trained models [149, 150, 826]. These\nmodels retain excellent vision and language capacities, but\nspan different semantic spaces. Thus, the goal of vision-\nlanguage alignment pre-training ( i.e.,the first-stage training)\nis to align the vision encoder and the LLM through end-to-\nend training on large-scale image-text pairs [827, 828]. How-\never, directly tuning these two models on image-text pairs\nmay cause the degradation of the original representation ca-\npacities. To improve the alignment performance, it is crucial"], "retrieved_docs_id": ["3f64cf9b55", "c20c82af54", "4ee780b19c", "6ac775b4ef", "e838613d76"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How many new tokens were added to the LLaMA2 tokenizer for chip design datasets?\n", "true_answer": "Approximately 9K new tokens were added to the LLaMA2 tokenizer for chip design datasets.", "source_doc": "ChipNemo.pdf", "source_id": "ac7c0c980b", "retrieved_docs": ["ChipNeMo: Domain-Adapted LLMs for Chip Design\nFigure 4: Domain-Adapted ChipNeMo Tokenizer Improvements.\n3.1. Domain-Adaptive Tokenization\nWe adapt the LLaMA2 tokenizer (containing 32K tokens) to\nchip design datasets using the previously outlined four-step\nprocess. Approximately 9K new tokens are added to the\nLLaMA2 tokenizer. The adapted tokenizers can improve\ntokenization efficiency by 1.6% to 3.3% across various chip\ndesign datasets as shown in Figure 4. We observe no obvious\nchanges to tokenizer efficiency on public data. Importantly,\nwe have not observed significant decline in the LLM\u2019s accu-\nracy on public benchmarks when using the domain-adapted\ntokenizers even prior to DAPT.\n3.2. Domain Adaptive Pretraining\nFigure 5: Chip Domain Benchmark Result for ChipNeMo.\nFigure 5 presents the outcomes for ChipNeMo models on\nthe AutoEval benchmark for chip design domain (detailed\nin Appendix A.5). Results on open domain academic bench-\nmark results are presented in Appendix A.6. Our research", "4.Initialize model embeddings of the new tokens by uti-\nlizing the general-purpose tokenizer.\nSpecifically for Step 4, when a new token is encountered,\nit is first re-tokenized using the original pretrained general-\npurpose tokenizer. The LLM\u2019s token embedding for the new\ntoken is determined by averaging the embeddings of the\ntokens generated by the general-purpose tokenizer (Koto\net al., 2021). The LLM\u2019s final output layer weights for the\nnew tokens are initialized to zero.\nStep 2 helps maintain the performance of the pre-trained\nLLM on general datasets by selectively introducing newtokens that are infrequently encountered in general-purpose\ndatasets. Step 4 reduces the effort required for retraining or\nfinetuning the LLM via initialization of the embeddings of\nnew tokens guided by the general-purpose tokenizer.\n2.2. Domain Adaptive Pretraining\nIn our study, we apply DAPT on pretrained foundation base\nmodels: LLaMA2 7B/13B/70B. Each DAPT model is ini-", "the raw dataset, then continued-pretrain a foundation model\nwith the domain-specific data. We call the resulting model a\nChipNeMo foundation model. DAPT is done on a fraction\nof the tokens used in pre-training, and is much cheaper, only\nrequiring roughly 1.5% of the pretraining compute.\nLLM tokenizers convert text into sequences of tokens for\ntraining and inference. A domain-adapted tokenizer im-\nproves the tokenization efficiency by tailoring rules and\npatterns for domain-specific terms such as keywords com-\nmonly found in RTL. For DAPT, we cannot retrain a new\ndomain-specific tokenizer from scratch, since it would make\nthe foundation model invalid. Instead of restricting Chip-\nNeMo to the pre-trained general-purpose tokenizer used\nby the foundation model, we instead adapt the pre-trained\ntokenizer to our chip design dataset, only adding new tokens\nfor domain-specific terms.\nChipNeMo foundation models are completion models whichrequire model alignment to adapt to tasks such as chat.", "We use largely publicly available general-purpose chat in-\nstruction datasets for multi-turn chat together with a small\namount of domain-specific instruction datasets to perform\nalignment on the ChipNeMo foundation model, which pro-\nduces the ChipNeMo chat model. We observe that align-\nment with a general purpose chat instruction dataset is\nadequate to align the ChipNeMo foundation models with\nqueries in the chip design domain. We also added a small\namount of task-specific instruction data, which further im-\nproves the alignment. We trained multiple ChipNeMo foun-\ndation and chat models based on variants of LLaMA2 mod-\nels used as the base foundation model.\nTo improve performance on the engineering assistant chat-\nbot application, we also leverage Retrieval Augmented Gen-\neration (RAG). RAG is an open-book approach for giving\nLLMs precise context for user queries. It retrieves rele-\nvant in-domain knowledge from its data store to augment", "Bard, etc.) and open-source (Vicuna (Chiang et al., 2023),\nLLaMA2 (Touvron et al., 2023), etc.) large language mod-\nels (LLM) provide an unprecedented opportunity to help\nautomate these language-related chip design tasks. Indeed,\nearly academic research (Thakur et al., 2023; Blocklove\net al., 2023; He et al., 2023) has explored applications of\nLLMs for generating Register Transfer Level (RTL) code\nthat can perform simple tasks in small design modules as\nwell as generating scripts for EDA tools.\nWe believe that LLMs have the potential to help chip de-\nsign productivity by using generative AI to automate many\nlanguage-related chip design tasks such as code generation,\nresponses to engineering questions via a natural language\ninterface, analysis and report generation, and bug triage. In\nthis study, we focus on three specific LLM applications: an\nengineering assistant chatbot for GPU ASIC and Architec-\nture design engineers, which understands internal hardware"], "retrieved_docs_id": ["ac7c0c980b", "85cb6bbe71", "273b593026", "411c489c58", "f23b3625e0"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What are some evaluation metrics for the final response generated by the RAG model?\n", "true_answer": "Accuracy, EM, answer fidelity, and answer relevance are some evaluation metrics for the final response generated by the RAG model.", "source_doc": "RAG.pdf", "source_id": "b023f9e1c7", "retrieved_docs": ["ples include Hit Rate, MRR, NDCG, Precision, etc.\n2.Generation Module\nThe generation module here refers to the enhanced or\nsynthesized input formed by supplementing the retrieved\ndocuments into the query, distinct from the final an-\nswer/response generation, which is typically evaluated\nend-to-end. The evaluation metrics for the generation\nmodule mainly focus on context relevance, measuring\nthe relatedness of retrieved documents to the query ques-\ntion.\nEnd-to-End Evaluation\nEnd-to-end evaluation assesses the final response gener-\nated by the RAG model for a given input, involving the\nrelevance and alignment of the model-generated answers\nwith the input query. From the perspective of content\ngeneration goals, evaluation can be divided into unlabeled\nand labeled content. Unlabeled content evaluation met-\nrics include answer fidelity, answer relevance, harmless-\nness, etc., while labeled content evaluation metrics in-\nclude Accuracy and EM. Additionally, from the perspec-", "tonomously judge inputs and generate accurate answers.\n7 RAG Evaluation\nIn exploring the development and optimization of RAG, ef-\nfectively evaluating its performance has emerged as a central\nissue. This chapter primarily discusses the methods of eval-\nuation, key metrics for RAG, the abilities it should possess,\nand some mainstream evaluation frameworks.\n7.1 Evaluation Methods\nThere are primarily two approaches to evaluating the ef-\nfectiveness of RAG: independent evaluation and end-to-endevaluation [Liu, 2023 ].\nIndependent Evaluation\nIndependent evaluation includes assessing the retrieval mod-\nule and the generation (read/synthesis) module.\n1.Retrieval Module\nA suite of metrics that measure the effectiveness of sys-\ntems (like search engines, recommendation systems, or\ninformation retrieval systems) in ranking items accord-\ning to queries or tasks are commonly used to evaluate\nthe performance of the RAG retrieval module. Exam-\nples include Hit Rate, MRR, NDCG, Precision, etc.", "ous downstream tasks and with different retrievers may yield\ndivergent results. However, some academic and engineering\npractices have focused on general evaluation metrics for RAG\nand the abilities required for its effective use. This section\nprimarily introduces key metrics for evaluating RAG\u2019s effec-\ntiveness and essential abilities for assessing its performance.\nKey Metrics\nRecent OpenAI report [Jarvis and Allard, 2023 ]have\nmentioned various techniques for optimizing large\nlanguage models (LLMs), including RAG and its", "evaluation metrics. Additionally, the latest evalu-\nation frameworks like RAGAS [Eset al. , 2023 ]and\nARES [Saad-Falcon et al. , 2023 ]also involve RAG eval-\nuation metrics. Summarizing these works, three core metrics\nare primarily focused on: Faithfulness of the answer, Answer\nRelevance, and Context Relevance.\n1.Faithfulness\nThis metric emphasizes that the answers generated by\nthe model must remain true to the given context, ensur-\ning that the answers are consistent with the context infor-\nmation and do not deviate or contradict it. This aspect of\nevaluation is vital for addressing illusions in large mod-\nels.\n2.Answer Relevance\nThis metric stresses that the generated answers need to\nbe directly related to the posed question.\n3.Context Relevance\nThis metric demands that the retrieved contextual infor-\nmation be as accurate and targeted as possible, avoid-\ning irrelevant content. After all, processing long texts\nis costly for LLMs, and too much irrelevant information", "tokens. The issue of \u2019losing attention\u2019 would also lead to the model\u2019s output response being\nirrelevant to the visual content.\n4 HALLUCINATION METRICS AND BENCHMARKS\nIn this section, we present a comprehensive overview of existing hallucination metrics and bench-\nmarks, which are designed to assess the extent of hallucinations generated by existing cutting-edge\nMLLMs. Currently, the primary focus of these benchmarks is on evaluating the object hallucination\nof MLLM-generated content. Tab. 1 illustrates a summary of related benchmarks.\nCHAIR [ 90]. As one of the early works, the metric of CHAIR was proposed to evaluate ob-\nject hallucination in the traditional image captioning task. This is achieved by computing what\nproportion of words generated are actually in the image according to the ground truth sentences\nand object segmentations. The computation of the CHAIR metric is straightforward and easy"], "retrieved_docs_id": ["b023f9e1c7", "a580bf7e9b", "8e161396f8", "57b75e5528", "52c95dc6e8"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "Which models outperformed OpenAI's code-davinci-002 on Verilog questions?\n", "true_answer": "Thakur et al., 2023 showed that fine-tuned open-source LLMs (CodeGen) on Verilog datasets outperformed state-of-the-art OpenAI models such as code-davinci-002 on 17 Verilog questions.", "source_doc": "ChipNemo.pdf", "source_id": "cdf1ac39e3", "retrieved_docs": ["et al., 2023) and SteerLM (Dong et al., 2023).\nResearchers have started to apply LLM to chip design prob-\nlems. Early works such as Dave (Pearce et al., 2020) first\nexplored the possibility of generating Verilog from En-\nglish with a language model (GPT-2). Following that work,\n(Thakur et al., 2023) showed that fine-tuned open-source\nLLMs (CodeGen) on Verilog datasets collected from GitHub\nand Verilog textbooks outperformed state-of-the-art OpenAI\nmodels such as code-davinci-002 on 17 Verilog questions.\n(Liu et al., 2023) proposed a benchmark with more than\n150 problems and demonstrated that the Verilog code gen-\neration capability of pretrained language models could be\nimproved with supervised fine-tuning by bootstrapping with\nLLM generated synthetic problem-code pairs. Chip-Chat\n(Blocklove et al., 2023) experimented with conversational\nflows to design and verify a 8-bit accumulator-based micro-\nprocessor with GPT-4 and GPT-3.5. Their findings showed", "advantage in accuracy for these scenarios, with the gap between them shrinking in the presence of natural\nlanguage while still maintaining that code-davinci-002 is more accurate than text-davinci-002 for reasoning.\nWe observe that similar trends hold for MATH,GSM8K ,bAbI, andMATH (chain-of-thoughts). Looking\nat individual subsets for bAbI, we find tasks 3, 4, 15 and 19, which assess transitive reasoning, relational\nunderstanding, deduction and planning skills, respectively, to be the the most challenging.71In contrast\nto the trends for text-davinci-002, for Dyck, we observe that text-davinci-002 is not quite accurate (59.4%\naccuracy), whereas TNLG v2 (530B) (78.4%) joins code-davinci-002 (80.2%) as the only models above 75%.\nForLSAT(Zhong et al., 2021), which consists of reasoning questions posed for law school admissions, we\nobserve that most evaluated models perform poorly, with accuracies around chance level (20%). Looking", "into the behavior for individual examples, we see significant variation in behavior that is likely indicative\nof the spectrum of difficulty of questions. On code scenarios, we see consistent trends with code-davinci-\n002 consistently outperforming code-cushman-001 (12B) for both HumanEval andAPPS, sometimes by\nlarge margins (e.g. 10.% strict correctness vs. 2.6% on APPS). We note that we do not evaluate any of\ntext models on these code scenarios, though in some cases this may be sensible/desirable given the striking\ngenerality of model development, deployment, and validation/scrutiny. Conversely, while we evaluate the\ncode models for LSATandLegalSupport , we find achieve accuracies of 0%. Overall, we find text-davinci-\n002 and, especially, code-davinci-002 display very strong reasoning capabilities for many different forms of\nreasoning.\nMemorization & Copyright. To further explore the results for this targeted evaluation, see https:", "text-ada-001 OpenBookQA Weak Dependence: Ouyang et al. (2022); Evidence: Brown et al. (2020)\ncode-davinci-002 NaturalQuestions (open-book) Weak Dependence: Chen et al. (2021); Evidence: Brown et al. (2020)\ncode-davinci-002 NaturalQuestions (closed-book) Weak Dependence: Chen et al. (2021); Evidence: Brown et al. (2020)\ncode-davinci-002 QuAC Weak Dependence: Chen et al. (2021); Evidence: Brown et al. (2020)\ncode-davinci-002 BoolQ Weak Dependence: Chen et al. (2021); Evidence: Brown et al. (2020)\ncode-davinci-002 HellaSwag Weak Dependence: Chen et al. (2021); Evidence: Brown et al. (2020)\ncode-davinci-002 OpenBookQA Weak Dependence: Chen et al. (2021); Evidence: Brown et al. (2020)\ncode-cushman-001 (12B) NaturalQuestions (open-book) Weak Dependence: Chen et al. (2021); Evidence: Brown et al. (2020)\ncode-cushman-001 (12B) NaturalQuestions (closed-book) Weak Dependence: Chen et al. (2021); Evidence: Brown et al. (2020)", "16.Reasoning. Forreasoning-intensivescenarios, wefindthatthecodemodels, especiallycode-davinci-\n002, consistently outperform the text models, even on synthetic reasoning scenarios posed in natural\nlanguage.20This gap is made clear in mathematical reasoning: for GSM8K , code-davinci-002\nachieves an accuracy of 52.1%, where the next best model is text-davinci-002 at 35.0% and no other\nmodel surpasses 16%.21Further, in addition to code-davinci-002, text-davinci-002 is much more\naccurate than other text models (e.g. 65.1% accuracy on synthetic reasoning in natural language,\nwhereas the next most accurate text model is OPT (175B) at 29.4% accuracy, and code-davinci-002\nhas an accuracy of 72.7%).\n17.Memorization of copyrighted/licensed material. We find that the likelihood of direct regur-\ngitation of long copyrighted sequences is somewhat uncommon, but it does become noticeable when\nlooking at popular books.22However, we do find the regurgitation risk clearly correlates with model"], "retrieved_docs_id": ["cdf1ac39e3", "12d5ea4e2a", "46b4467def", "e587f74691", "ba9814c8b1"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does providing optimal visual contexts reduce hallucinations in text generation?\n", "true_answer": "Providing optimal visual contexts eliminates over 84.5% of hallucinations in text generation, as shown in an oracle study.", "source_doc": "hallucination.pdf", "source_id": "31eefbd9eb", "retrieved_docs": ["reduce hallucination. Visual context refers to the visual tokens that can be grounded from the\ngenerated text response. An oracle study showed that decoding from the provided optimal visual\ncontexts eliminates over 84.5% of hallucinations. Based on the insight and observation, the authors\ndesigned mechanisms to locate the fine-grained visual information to correct each generated\ntoken that might be hallucinating. This is essentially a visual content-guided decoding strategy.\nIn addition to token-level correction, HALC also incorporates a matching-based beam search that\nutilizes a visual matching score to steer the generation of the final outputs, balancing both object\nhallucination mitigation and text generation quality.\nOthers. The work of OPEAR [ 45] makes an interesting observation that most hallucinations\nare closely tied to the knowledge aggregation patterns manifested in the self-attention matrix,", "nificant modality gap exists between textual and visual tokens, suggesting that the current learned\ninterfaces are not effective in mapping visual representations into the textual representation space of\nLLMs. This issue potentially exacerbates the tendency for MLLMs to generate more hallucinations.\nTherefore, HACL proposes enhancing the alignment between visual and textual representations\nthrough contrastive loss. Texts with hallucinations are used as hard negative examples for image\nanchors. The loss pulls representations of non-hallucinating text and visual samples closer while\npushing representations of non-hallucinating and hallucinative text apart. Experiment results show\nthat this method not only reduces hallucination but also enhances performance on other popular\nbenchmarks.\nRecalling the work of EOS Decision [ 120], to teach the model to terminate the generation process\nproperly, this work also designs a learning objective, termed Selective EOS Supervision, in addition", "2.3 Hallucinations in Multimodal Large Language Models\nHallucination of MLLM generally refers to the phenomenon where the generated text response\ndoes not align with the corresponding visual content. State-of-the-art studies in this field primarily\nfocus on object hallucination, given that objects are central to research in computer vision and\nmultimodal contexts. Regarding inconsistency, two typical failure modes are: 1) missing objects,\nand 2) describing objects that are not present in the image or with incorrect statements. Empirically,\nthe second mode has been shown to be less preferable to humans. For example, the LSMDC\nchallenge [ 91] shows that correctness is more important to human judges than specificity. In\ncontrast, the coverage of objects is less perceptible to humans. Thus, object coverage is not a\nprimary focus in studies of object hallucination. Empirically, object hallucination can be categorized", "mentioned in the generated sentences; 2) Question formulation asks questions around the extracted\nobjects; 3) Visual knowledge validation answers the formulated questions via expert models; 4)\nVisual claim generation converts the above Question-Answer (QA) pairs into a visual knowledge\nbase; 5) Hallucination correction modifies the hallucinations and adds the corresponding evidence\nunder the guidance of the visual knowledge base. Woodpecker is a training-free method, where\neach component can be implemented using either hand-crafted rules or off-the-shelf pre-trained\nmodels.\nAnother line of work rectifies the generated text using a dedicatedly trained revisor model.\nSpecifically, inspired by denoising autoencoders [ 101], which are designed to reconstruct clean data\nfrom corrupted input, LURE [ 137] employs a hallucination revisor that aims to transform potentially\nhallucinatory descriptions into accurate ones. To train such a revisor model, a dataset has been", "Reducing HallucinationsInherently less prone to hallucinations as\neach answer is grounded in retrieved evi-\ndence.Can help reduce hallucinations by training\nthe model based on specific domain data but\nmay still exhibit hallucinations when faced\nwith unfamiliar input.\nEthical and Privacy IssuesEthical and privacy concerns arise from\nstoring and retrieving text from external\ndatabases.Ethical and privacy concerns may arise due\nto sensitive content in the training data.\nTable 1: Comparison between RAG and Fine-tuning\nof Advanced RAG and Modular RAG were aimed at address-\ning specific deficiencies in the Naive RAG.\n3.1 Naive RAG\nThe Naive RAG research paradigm represents the earliest\nmethodology gained prominence shortly after the widespread\nadoption of ChatGPT. The naive RAG involves traditional\nprocess: indexing, retrieval, and generation. Naive RAG\nis also summarized as a \u201cRetrieve\u201d-\u201cRead\u201d framework\n[Maet al. , 2023a ].\nIndexing"], "retrieved_docs_id": ["31eefbd9eb", "fc394b39a5", "f58cf51d02", "ceeab98980", "16ccbc6afa"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is the learning rate used for training the ChipNeMo models?\n", "true_answer": "The learning rate used for training the ChipNeMo models is 5\u00b710\u22126.", "source_doc": "ChipNemo.pdf", "source_id": "7eb44773ae", "retrieved_docs": ["models: LLaMA2 7B/13B/70B. Each DAPT model is ini-\ntialized using the weights of their corresponding pretrained\nfoundational base models. We name our domain-adapted\nmodels ChipNeMo . We employ tokenizer augmentation\nas depicted in Section 2.1 and initialize embedding weight\naccordingly (Koto et al., 2021). We conduct further pre-\ntraining on domain-specific data by employing the standard\nautoregressive language modeling objective. All model\ntraining procedures are conducted using the NVIDIA NeMo\nframework (Kuchaiev et al., 2019), incorporating techniques\nsuch as tensor parallelism (Shoeybi et al., 2019) and flash\nattention (Dao et al., 2022) for enhanced efficiency.\nOur models undergo a consistent training regimen with\nsimilar configurations. A small learning rate of 5\u00b710\u22126\nis employed, and training is facilitated using the Adam\noptimizer, without the use of learning rate schedulers. The\nglobal batch size is set at 256, and a context window of 4096", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ndomain-specific data improves the retriever hit rate\nby 30% over a pre-trained state-of-the-art retriever, in\nturn improving overall quality of RAG responses.\nThe paper is organized as follows. Section 2 outlines do-\nmain adaptation and training methods used including the\nadapted tokenizer, DAPT, model alignment, and RAG. Sec-\ntion 3 describes the experimental results including human\nevaluations for each application. Section 4 describes rel-\nevant LLM methods and other work targeting LLMs for\nchip design. Finally, detailed results along with additional\nmodel training details and examples of text generated by the\napplication use-cases are illustrated in the Appendix.\n2. ChipNeMo Domain Adaptation Methods\nChipNeMo implements multiple domain adaptation tech-\nniques to adapt LLMs to the chip design domain. These\ntechniques include domain-adaptive tokenization for chip\ndesign data, domain adaptive pretraining with large corpus", "the raw dataset, then continued-pretrain a foundation model\nwith the domain-specific data. We call the resulting model a\nChipNeMo foundation model. DAPT is done on a fraction\nof the tokens used in pre-training, and is much cheaper, only\nrequiring roughly 1.5% of the pretraining compute.\nLLM tokenizers convert text into sequences of tokens for\ntraining and inference. A domain-adapted tokenizer im-\nproves the tokenization efficiency by tailoring rules and\npatterns for domain-specific terms such as keywords com-\nmonly found in RTL. For DAPT, we cannot retrain a new\ndomain-specific tokenizer from scratch, since it would make\nthe foundation model invalid. Instead of restricting Chip-\nNeMo to the pre-trained general-purpose tokenizer used\nby the foundation model, we instead adapt the pre-trained\ntokenizer to our chip design dataset, only adding new tokens\nfor domain-specific terms.\nChipNeMo foundation models are completion models whichrequire model alignment to adapt to tasks such as chat.", "We use largely publicly available general-purpose chat in-\nstruction datasets for multi-turn chat together with a small\namount of domain-specific instruction datasets to perform\nalignment on the ChipNeMo foundation model, which pro-\nduces the ChipNeMo chat model. We observe that align-\nment with a general purpose chat instruction dataset is\nadequate to align the ChipNeMo foundation models with\nqueries in the chip design domain. We also added a small\namount of task-specific instruction data, which further im-\nproves the alignment. We trained multiple ChipNeMo foun-\ndation and chat models based on variants of LLaMA2 mod-\nels used as the base foundation model.\nTo improve performance on the engineering assistant chat-\nbot application, we also leverage Retrieval Augmented Gen-\neration (RAG). RAG is an open-book approach for giving\nLLMs precise context for user queries. It retrieves rele-\nvant in-domain knowledge from its data store to augment", "ChipNeMo: Domain-Adapted LLMs for Chip Design\nour application of a low learning rate.\nWe refer readers to Appendix for details on the training data\ncollection process A.2, training data blend A.3, and imple-\nmentation details and ablation studies on domain-adaptive\npretraining A.6.\n2.3. Model Alignment\nAfter DAPT, we perform model alignment. We specifically\nleverage two alignment techniques: supervised fine-tuning\n(SFT) and SteerLM (Dong et al., 2023). We adopt the iden-\ntical hyperparameter training configuration as DAPT for all\nmodels, with the exception of using a reduced global batch\nsize of 128. We employ an autoregressive optimization ob-\njective, implementing a strategy where losses associated\nwith tokens originating from the system and user prompts\nare masked (Touvron et al., 2023). This approach ensures\nthat during backpropagation, our focus is exclusively di-\nrected towards the optimization of answer tokens.\nWe combined our domain alignment dataset, consisting"], "retrieved_docs_id": ["7eb44773ae", "df0b9868f2", "273b593026", "411c489c58", "a5a7c4ceb0"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is a potential consequence of insufficient data quality in building multimodal large language models (MLLMs)?\n", "true_answer": "Insufficient data quality could potentially lead to problematic cross-modal alignment, resulting in hallucinations.", "source_doc": "hallucination.pdf", "source_id": "77ce09f375", "retrieved_docs": ["3.1.1 Quantity. Deep learning models are data-hungry, especially large models like MLLMs. The\namount of data plays an important role in building robust and reliable MLLMs. Currently, image-text\npair datasets [ 92] and visual QA [ 48,80] data are used for training MLLMs. Although these datasets\nare usually larger than typical datasets in computer vision, they are still far less abundant than the\ntext-only data used for training LLMs in terms of quantity. Insufficient data could potentially lead\nto problematic cross-modal alignment, resulting in hallucinations [96, 103].\n3.1.2 Quality. Given the increasing demand for large-scale training data, heuristic data collection\nmethods are employed to efficiently gather vast volumes of data. While these methods provide\nextensive data, they offer no guarantee of quality, thereby increasing the risk of hallucinations.\nData quality relevant to hallucinations can be further categorized into the following three facets.", "Hallucination of Multimodal Large Language Models: A Survey 5\nVision InputVision ModelLLMImageVideo\u2026CLIP DINO-v2Linear\u2026LLaMAVicunaChatGLMFuyuDecodingGreedyBeam SearchSamplingText InputInstruction\u2026TokenizerBPE SentencePiece\u2026\nFig. 2. Popular architecture of multimodal large language model.\nintegration of human feedback into the training loop has demonstrated effectiveness in enhancing\nthe alignment of LLMs.\n2.2 Multimodal Large Language Models\nMLLMs [ 22,75,111,138] typically refers to a series of models that enable LLMs to perceive and\ncomprehend data from various modalities. Among them, vision+LLM is particularly prominent,\nowing to the extensive research on vision-language models (VLMs) [ 51,88,116] prior to LLMs. As a\nresult, MLLMs are sometimes referred to as vision-LLMs (VLLMs) or large vision language models\n(LVLMs). The goal of MLLMs is to activate the visual capabilities of LLMs, enabling them to \"see\"", "Efficient Multimodal Large Language Models:\nA Survey\nYizhang Jin1,2,*, Jian Li1,*, Yexin Liu3, Tianjun Gu4, Kai Wu1, Zhengkai Jiang1,\nMuyang He3, Bo Zhao3, Xin Tan4, Zhenye Gan1, Yabiao Wang1, Chengjie Wang1,\nLizhuang Ma2\n1Youtu Lab, Tencent,2SJTU,3BAAI,4ECNU\nAbstract\nIn the past year, Multimodal Large Language Models (MLLMs) have demon-\nstrated remarkable performance in tasks such as visual question answering, vi-\nsual understanding and reasoning. However, the extensive model size and high\ntraining and inference costs have hindered the widespread application of MLLMs\nin academia and industry. Thus, studying efficient and lightweight MLLMs\nhas enormous potential, especially in edge computing scenarios. In this survey,\nwe provide a comprehensive and systematic review of the current state of effi-\ncient MLLMs. Specifically, we summarize the timeline of representative effi-\ncient MLLMs, research state of efficient structures and strategies, and the appli-", "Organization of this survey. In this paper, we present a comprehensive survey of the latest\ndevelopments regarding hallucinations in MLLMs. The survey is organized as follows: We begin by\nproviding sufficient context and defining concepts related to LLMs, MLLMs, hallucination, etc. Next,\nwe delve into an in-depth analysis of the factors contributing to hallucinations in MLLMs. Following\nthis, we present a set of metrics and benchmarks employed for evaluating hallucinations in MLLMs.\nWe then elaborate on a range of approaches designed to mitigate hallucinations in MLLMs. Finally,\nwe delve into the challenges and open questions that frame the current limitations and future\nprospects of this field, offering insights and delineating potential pathways for forthcoming research.\n2 DEFINITIONS\n2.1 Large Language Models\nBefore moving to multimodal large language models, it is essential to introduce the concept of large", "interface module maps the visual features into the input embedding space of the LLM.\nInstruction Tuning. Similar to LLMs, after pre-training, the current model still lacks instruction\nfollowing ability in the multimodal context. During the instruction tuning stage, both machine-\ngenerated datasets [ 75] and human-annotated QA datasets [ 48,59,80] are utilized to enhance the\nmodel\u2019s ability to comprehend and follow multimodal instructions. Unlike pre-training data, the\nformat and quality of instruction tuning data significantly impact the model\u2019s performance. It is\nusually in the format of visual content - instruction - response . Empirical studies also demonstrate\nthat high-quality data significantly enhances the performance of MLLMs. During this stage, there\nare various options for training, such as fine-tuning LLM parameters in full [ 75], or using techniques\nlike LoRA [41] to tune specific LLM parameters.\n2.3 Hallucinations in Multimodal Large Language Models"], "retrieved_docs_id": ["77ce09f375", "f49f3b54ce", "ac70fcc9f2", "e1b4ac9436", "13a0ab284a"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does Quantformer reduce quantization error during training?\n", "true_answer": "Quantformer reduces quantization error during training by leveraging entropy information to maintain consistency in self-attention ranks and introducing a differentiable search mechanism to optimally group patch feature dimensions, reducing rounding and clipping inaccuracies.", "source_doc": "multimodal.pdf", "source_id": "900b3dde3f", "retrieved_docs": ["to quantized values, the quantization error is significantly reduced under certain conditions. This\ntechnique successfully modifies heavy-tailed activation distributions to fit a given quantizer.\nQuantization-Aware Training (QAT) integrates quantization into the training cycle. This in-\ntegration is particularly advantageous when scaling down to ultra-low bit precision, such as 4 bits\nor lower, where PTQ struggles with significant performance loss. For example, Quantformer [124]\nleverages entropy information to maintain consistency in self-attention ranks and introduces a dif-\nferentiable search mechanism to optimally group patch feature dimensions, reducing rounding and\nclipping inaccuracies. Q-ViT [126] incorporates a distillation token and Information Rectification\nModule (IRM) to counteract altered distributions in quantized attention modules. TerViT [127] and\nBit-shrinking [125] progressively reduce model bit-width while regulating sharpness to maintain", "Bit-shrinking [125] progressively reduce model bit-width while regulating sharpness to maintain\naccuracy throughout quantization. PackQViT [129] mitigates outlier effects during quantization.\nBiViT [128] introduces Softmax-aware Binarization to adjust the binarization process, minimizing\nerrors in binarizing softmax attention values. Xiao et al. [142] integrated a gradient regularization\nscheme to curb weight oscillation during binarization training and introduced an activation shift\nmodule to reduce information distortion in activations. Additionally, BinaryViT [130] integrates\nessential architectural elements from CNNs into a pure ViT framework, enhancing its capabilities.\nHardware-Aware Quantization optimizes the quantization process of neural network models for\nspecific hardware platforms ( e.g., GPUs [131], FPGA [132]). It adjusts precision levels and quan-\ntization strategies to maximize performance and energy efficiency during inference. For example,", "Figure 2: Comparing the error of pruning and quantization for a student-t distribution, simulating\nthe presence of significant outliers. We plot the results for different magnitudes of the outliers, as\nper the kurtosis on the x-axis. (left) the pruning error, which does not change under the presence of\nmore severe outliers. (middle) the quantization SNR, which is reduced greatly when outliers increase\n(right) the trade-off regions where quantization and pruning are better.\nan MSE measure. Both are often employed to analyze the sensitivity of neural network layers to\nquantization, and they are theoretically well-founded to correlate with network performance [ 38,45].\n3.1 Quantization error\nFor quantization, we consider symmetric uniform quantization, which is also called integer quan-\ntization. Given a bit-width band the scale \u03b4, the grid nodes are defined as qi=\u03b4i, i\u2208\n{\u22122b, . . . , 0,2b\u22121}. The quantization operation rounding-to-nearest Q(w)and the corresponding", "performance drop (Frantar et al., 2022; Xiao et al., 2022). Zeng et al. (2022) hypothesize that the\nobserveddifferenceinweightdistributioncharacteristicsmaybeduetothedifferenceinoptimization\nchoices made during pre-training.\nIn this work, we seek to reconcile these observations. We posit that it is possible to optimize for a\nquantization friendly training recipe that suppresses large activation magnitude outliers. This leads\nto a distribution of activations and weights that are more amenable to simple INT8 quantization\nrecipes and does not necessitate the need for complex and inefficient mixed-precision computations.\nOur results show that we can introduce simple INT8 post-training quantization with negligible\nimpact on performance due to choices we make during the pre-training stage. As shown in Figure 1,\nacross 8 zero-shot downstream tasks, our models do not present any significant performance drop,\nhaving only 0.24% average degradation in a 52 billion parameter model.", "a symmetric k-bit quantization is that this approach does not have an exact representation of zero,\nwhich is an important property to quantize padding and other zero-valued elements with no error. To\n4"], "retrieved_docs_id": ["900b3dde3f", "31efe3044d", "19d7216008", "a9605c7507", "11f6d3c8fa"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is the score of LLaMA-2-Chat-7B in the InstructBLIP benchmark?\n", "true_answer": "The score of LLaMA-2-Chat-7B in the InstructBLIP benchmark is 58.8.", "source_doc": "multimodal.pdf", "source_id": "88e0397250", "retrieved_docs": ["Hallucination of Multimodal Large Language Models: A Survey 15\nTable 3. Comparison of mainstream MLLMs on discriminative benchmarks. The numbers come from the\noriginal papers of these benchmarks.\nModelLLM\nSizeMME\nExistence\nScore\u2191MME\nCount\nScore\u2191MME\nPosition\nScore\u2191MME\nColor\nScore\u2191POPE\nRandom\nF1-Score\u2191POPE\nRandom\nF1-Score\u2191POPE\nAdversarial\nF1-Score\u2191RAH-Bench\nF1 Score\u2191AMBER\nDis.\nF1-Score\u2191AMBER\nScore\u2191Hal-Eval\nIn-domain\nEvent. F1\u2191Hal-Eval\nOut-of-domain\nEvent. F1\u2191\nmPLUG-Owl [111] 7B 120.00 50.00 50.00 55.00 68.06 66.79 66.82 69.3 31.2 54.1 47 46.6\nImageBind-LLM [34] 7B 128.33 60.00 46.67 73.33 - - - - - - - -\nInstructBLIP [22] (7B) 7B - - - - - - - 89.1 82.6 86.2 66.2 66.6\nInstructBLIP [22] (13B) 13B 185.00 143.33 66.67 153.33 89.29 83.45 78.45 84.7 - - - -\nVisualGLM-6B [25] 6B 85.00 50.00 48.33 55.00 - - - - - - - -\nMultimodal-GPT [28] 7B 61.67 55.00 58.33 68.33 66.68 66.67 66.67 - - - - -\nPandaGPT [95] 7B 70.00 50.00 50.00 50.00 - - - - - - - -", "and desiderata (metrics), and then systematically select points in a way that reflects our priorities. This\nmakes explicit the aspiration, the concrete benchmark, and, consequently, what our benchmark lacks that\nwe should aspire to evaluate. More simply, our concrete benchmark differs from both traditional benchmarks\nlike ImageNet that assign a single score (i.e. the ImageNet accuracy) and meta-benchmarks like GLUE that\nassign a score vector (i.e. the accuracies on the GLUE datasets) to each model. Instead, we assign a score\nmatrix to each model: for each use case, we report scores across several desiderata (e.g. accuracy, calibration,\nrobustness, fairness, efficiency).\nIndependent of the fact we measure holistically, one may wonder what the relationship is between the\nscenarios we select and those evaluated in prior works. To help understand this relationship, in Appendix F,\nwe document the scenarios that were evaluated for in past work (e.g. the scenarios evaluated by Chowdhery", "12 Basile, et al.\n\u2022LLaMAntino 2-chat-7b-hf-ITA: language adaptation of LLaMA 2-chat-7b-hf;\n\u2022LLaMAntino 2-chat-13b-hf-ITA: language adaptation of LLaMA 2-chat-13b-hf;\n\u2022LLaMAntino 2-chat-7b-hf-UltraChat-ITA: language adaptation of LLaMA 2-chat-7b-hf and fine-tuning on Ultra-\nChat;\n\u2022LLaMAntino 2-chat-13b-hf-UltraChatITA: language adaptation of LLaMA 2-chat-13b-hf and fine-tuning on\nUtraChat;\n\u2022LLaMAntino 2-7b-hf-dolly-ITA: instruction tuning of LLaMAntino 2-7b-hf-ITA on the dolly dataset;\n\u2022LLaMAntino 2-13b-hf-dolly-ITA: instruction tuning of LLaMAntino 2-13b-hf-ITA on the dolly dataset;\n\u2022LLaMAntino 2-7b-hf-evalita-ITA: instruction tuning of LLaMAntino 2-7b-hf-ITA on the EVALITA 2023 dataset;\n\u2022LLaMAntino 2-13b-hf-evalita-ITA: instruction tuning of LLaMAntino 2-13b-hf-ITA on the EVALITA 2023 dataset;\nAccording to the LLaMa 2 license, we cannot release the model weights. For models obtained by LoRA, we provide", "results are presented in Section 4.4.\nResults. As shown in Figure 12, Llama 2-Chat models outperform open-source models by a significant\nmargin on both single turn and multi-turn prompts. Particularly, Llama 2-Chat 7B model outperforms\nMPT-7B-chat on 60% of the prompts. Llama 2-Chat 34B has an overall win rate of more than 75% against\nequivalently sized Vicuna-33B and Falcon 40B models.\n18", "results are presented in Section 4.4.\nResults. As shown in Figure 12, Llama 2-Chat models outperform open-source models by a significant\nmargin on both single turn and multi-turn prompts. Particularly, Llama 2-Chat 7B model outperforms\nMPT-7B-chat on 60% of the prompts. Llama 2-Chat 34B has an overall win rate of more than 75% against\nequivalently sized Vicuna-33B and Falcon 40B models.\n18"], "retrieved_docs_id": ["90bbefc8ec", "bd2ec29e15", "1c1a7961c8", "d423d98d91", "d423d98d91"], "reranker_type": "None", "search_type": "text", "rr": 0.0, "hit": 0}, {"question": "When was the first issue of Preprint published?\n", "true_answer": "The first issue of Preprint was published in April 2024.", "source_doc": "hallucination.pdf", "source_id": "6158839d4c", "retrieved_docs": ["enough to merit a presidential visit. But President Clinton insisted\non including Pakistan in the itinerary for his trip to South Asia. His\none-day stopover on March 25, 2000, was the first time a U.S. president\nhad been there since 1969. At his meeting with Musharraf and others,\nPresident Clinton concentrated on tensions between Pakistan and India\nand the dangers of nuclear proliferation, but also discussed Bin Laden.\nPresident Clinton told us that when he pulled Musharraf aside for a brief,\none-on-one meeting, he pleaded with the general for help regarding Bin\nLaden.\" I offered him the moon when I went to see him, in terms of better\nrelations with the United States, if he\u2019d help us get Bin Laden and deal\nwith another issue or two.\" The U.S. effort continued.\nWho did The State Department feel should visit both India and Pakistan?\nCorrect Answer \u2192- [False] Bin Laden\nIncorrect Answer \u2192- [True] Bin Laden", "in the early 20th century the \"largest Protestant denomination in the U.S.,\"\nbut that it has been shrinking in recent decades. The new split will be the\nsecond in the church's history. The first occurred in 1968, when roughly\n10 percent of the denomination left to form the Evangelical United Brethren\nChurch. The Post notes that the proposed split \"comes at a critical time\nfor the church, which has been losing members for years,\" which has been\n\"pushed toward the brink of a schism over the role of LGBTQ people in the\nchurch.\" Gay marriage is not the only issue that has divided the church. In\n2016, the denomination was split over ordination of transgender clergy, with\nthe North Pacific regional conference voting to ban them from serving as\nclergy, and the South Pacific regional conference voting to allow them.\nFigure 3.14: The GPT-3 generated news article that humans had the greatest dif\ufb01culty distinguishing from a human\nwritten article (accuracy: 12%).", "of InstructGPT in Figure 12). Shortly after the release of this\nRL paper [79], the paper of the Proximal Policy Optimiza-\ntion (PPO) [128] was published in July 2017, which now has\nbeen the foundational RL algorithm for learning from hu-\nman preferences [66]. Later in January 2020, GPT-2 was fine-\ntuned using the aforementioned RL algorithms [79, 128],\nwhich leveraged human preferences to improve the capac-\nities of GPT-2 on NLP tasks. In the same year, another\nwork [129] trained a summarization model for optimizing\nhuman preferences in a similar way. Based on these prior\nwork, InstructGPT [66] was proposed in January 2022 to\nimprove the GPT-3 model for human alignment, which\nformally established a three-stage reinforcement learning from\nhuman feedback (RLHF) algorithm. Note that it seems that\nthe wording of \u201c instruction tuning \u201d has seldom been used in\nOpenAI\u2019s paper and documentation, which is substituted by\nsupervised fine-tuning on human demonstrations (i.e.,the first", "per about backpropagation was published,\nfor the insight about massive parallelism to\nbe operationalized in a useful way for connec-\ntionist deep neural networks. Many inven-\ntions are re-purposed for means unintended\nby their designers. Edison\u2019s phonograph was\nnever intended to play music. He envisioned\nit as preserving the last words of dying peo-\nple or teaching spelling. In fact, he was dis-\nappointed by its use playing popular music\nas he thought this was too \u201cbase\u201d an applica-\ntion of his invention (Diamond et al., 1999).\nIn a similar vein, deep neural networks only\nbegan to work when an existing technology\nwas unexpectedly re-purposed.\nA graphical processing unit (GPU) was origi-\nnally introduced in the 1970s as a specialized\naccelerator for video games and for develop-\ning graphics for movies and animation. In\nthe 2000s, like Edison\u2019s phonograph, GPUs\nwere re-purposed for an entirely unimag-\nined use case \u2013 to train deep neural net-\nworks (Chellapilla et al., 2006; Oh & Jung,", "ing and the hybrid approach result in suboptimal trade-offs compared to the pure Dense-and-Sparse\ndecomposition approach.\nThis can be attributed to two factors. First, the Dense-and-Sparse decomposition is a direct solution\nto the outlier issue. In contrast, while grouping can mitigate the impact of outliers to some extent by\nisolating them within individual groups, it does not provide a direct solution to this issue. In addition,\ngrouping can introduce significant overhead in terms of storage requirements when combined with\nnon-uniform quantization, since it needs to store one LUT per group. This can be a considerable\noverhead compared to the uniform quantization approach where only a scaling and zero point value\nper group need to be stored.\nA.4.4 C OMPARISON OF THE OBD F RAMEWORK VERSUS THE OBS F RAMEWORK FOR\nNON-UNIFORM QUANTIZATION\nWhile our method adopts the Optimal Brain Damage (OBD) framework to minimize the perturba-"], "retrieved_docs_id": ["489c1f491c", "4fb7286496", "ec039a8cdb", "18c0a9763e", "b393a40696"], "reranker_type": "None", "search_type": "text", "rr": 0.0, "hit": 0}, {"question": "How are the parameters of a pre-trained model updated during adapter-based tuning?\n", "true_answer": "During adapter-based tuning, only the adapter parameters are updated, while the pre-trained model\u2019s parameters remain fixed.", "source_doc": "multimodal.pdf", "source_id": "004ffc5dd9", "retrieved_docs": ["expressiveness and generalization capabilities. Adapter-based tuning introduces lightweight adapter\nmodules into the pre-trained model\u2019s architecture. These adapter modules, typically composed of\nfeed-forward neural networks with a small number of parameters, are inserted between the layers\nof the original model. During fine-tuning, only the adapter parameters are updated, while the pre-\ntrained model\u2019s parameters remain fixed. This method significantly reduces the number of trainable\nparameters, leading to faster training and inference times without compromising the model\u2019s per-\nformance. LLM-Adapters [154] presents a framework for integrating various adapters into large\nlanguage models, enabling parameter-efficient fine-tuning for diverse tasks. This framework en-\n16", "\u2022Full fine-tuning is the most common approach for adapting pre-trained model to down-stream\ntasks. The model is initialized with pre-trained weights and all model parameters are updated\nthrough a stochastic gradient decent.\n\u2022Movement pruning is an effective pruning method (Sanh et al., 2020). It multiplies a trainable\nmask to each neuron during the the training. When the mask is smaller than a threshold, the\ncorresponding neuron is pruned.\n\u2022Iterative pruning (ITP) removes neurons directly when their importance scores are lower than\na hard threshold at each iteration (Molchanov et al., 2019).\n9", "be fine-tuned more efficiently.In LoRA-FA [156], a variant of LoRA, the first low-rank matrix is\nfrozen after initialization and used as a random projection, while the other is trained. This leads to\na reduction in the number of parameters by half, while maintaining a performance comparable to\nthe conventional LoRA technique.DyLoRa [157] introduces a dynamic low-rank adaptation tech-\nnique that enables the training of LoRA blocks for a range of ranks instead of a single rank, which\nis achieved by sorting the representations learned by the adapter modules during training across\ndifferent ranks.\nFull-Parameter fine-tuning Full-parameter fine-tuning is an approach in which all the parame-\nters of a pre-trained model are updated during the fine-tuning process. This method aims to achieve\noptimal performance on a specific downstream task by leveraging the entire capacity of the pre-\ntrained model. While full-parameter fine-tuning often leads to state-of-the-art results and improved", "lated gradient update to weight matrices to have full-rank during adaptation. This means that when\napplying LoRA to all weight matrices and training all biases2, we roughly recover the expressive-\nness of full \ufb01ne-tuning by setting the LoRA rank rto the rank of the pre-trained weight matrices. In\nother words, as we increase the number of trainable parameters3, training LoRA roughly converges\nto training the original model, while adapter-based methods converges to an MLP and pre\ufb01x-based\nmethods to a model that cannot take long input sequences.\nNo Additional Inference Latency. When deployed in production, we can explicitly compute and\nstoreW=W0+BA and perform inference as usual. Note that both W0andBA are inRd\u00d7k.\nWhen we need to switch to another downstream task, we can recover W0by subtracting BAand\nthen adding a different B\u2032A\u2032, a quick operation with very little memory overhead. Critically, this\n2They represent a negligible number of parameters compared to weights.", "During full \ufb01ne-tuning, the model is initialized to pre-trained weights \u03a60and updated to \u03a60+ \u2206\u03a6\nby repeatedly following the gradient to maximize the conditional language modeling objective:\nmax\n\u03a6\u2211\n(x,y)\u2208Z|y|\u2211\nt=1log(P\u03a6(yt|x,y<t)) (1)\nOne of the main drawbacks for full \ufb01ne-tuning is that for each downstream task, we learn a different\nset of parameters \u2206\u03a6whose dimension|\u2206\u03a6|equals|\u03a60|. Thus, if the pre-trained model is large\n(such as GPT-3 with |\u03a60| \u2248175Billion), storing and deploying many independent instances of\n\ufb01ne-tuned models can be challenging, if at all feasible.\nIn this paper, we adopt a more parameter-ef\ufb01cient approach, where the task-speci\ufb01c parameter\nincrement \u2206\u03a6 = \u2206\u03a6(\u0398) is further encoded by a much smaller-sized set of parameters \u0398with\n|\u0398|\u226a| \u03a60|. The task of \ufb01nding \u2206\u03a6thus becomes optimizing over \u0398:\nmax\n\u0398\u2211\n(x,y)\u2208Z|y|\u2211\nt=1log(\np\u03a60+\u2206\u03a6(\u0398) (yt|x,y<t))\n(2)\nIn the subsequent sections, we propose to use a low-rank representation to encode \u2206\u03a6that is both"], "retrieved_docs_id": ["004ffc5dd9", "194aec9204", "d7e84c92f4", "2099c4406a", "ace637d393"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "Which model outperforms several 13 billion parameter MLLMs in document understanding?\n", "true_answer": "TinyChart [37]", "source_doc": "multimodal.pdf", "source_id": "6b47636d3a", "retrieved_docs": ["7.2 Document Understanding\nDocuments or charts serve as a crucial source of information, offering an intuitive visualization\nof data in various forms. They have become an indispensable part of information dissemination,\nbusiness decision-making, and academic research. However, current chart understanding models\nstill face two primary limitations: (1) The considerable number of parameters makes training and\ndeployment challenging. For instance, ChartLlama [196], a 13-billion-parameter model, is difficult\nto deploy on a single consumer-grade GPU. (2) These models struggle with efficiently encoding\nhigh-resolution images, as vision transformers tend to produce lengthy feature sequences.\nTo address the challenges of fine-grained visual perception and visual information compression for\ndocument-oriented MLLMs. TinyChart [37] outperforms several 13B MLLMs with Program-of-\nThoughts (PoT) learning and Visual Token Merging strategy while excelling in faster inference", "SPHINX-X are activated. Cobra[13] also argues that the initial phase of pre-alignment may not\nbe requisite, with the model remaining underfitted even post-finetuning. Consequently, it discards\nthe pre-alignment stage, opting instead to directly finetune the entire SLM backbone along with the\nprojector. TinyGPT-V[28] training process consists of four stages: an initial pre-training stage for\nvision-language understanding, a second stage for refining image modality processing, a third stage\nfor human-like learning through fine-tuning, and a fourth stage for multi-task learning to enhance\nits conversational abilities as a chatbot.\n5.4 Parameter Efficient Transfer Learning\nSeveral studies adopt Parameter-Efficient Fine-Tuning (PEFT) techniques for transfer learning, like\nLoRA [161], to safeguard against the loss of pre-trained knowledge. Efficient Attention Skipping\n(EAS) module[52] proposes a novel parameter and computation-efficient tuning method for MLLMs", "long-tail distribution of the real world.\n3.2 Model\nCurrently, the architecture of popular MLLMs is composed of several components, usually including\npre-trained vision model, pre-trained LLM, and alignment module as we discussed above. Since\nthese models are connected together, instead of end-to-end training from scratch, the error of\neach module can be accumulated. Inferior and problematic output from each module may lead to\nhallucinations.\n\u2022Weak vision model. As mentioned in related works [ 31,90,103], a primary potential\nreason for hallucination is a weak vision model, which can lead to misclassification or\nmisinterpretation of visual concepts. Even the most powerful vision model may still experience\ninformation loss during the encoding process. Weak vision model implies weak perception,\nwhich fundamentally undermines the multimodal understanding.\n\u2022Language model prior. The modern architecture of MLLMs is imbalanced. Usually, the", "whole SEED-Bench and the image part, respectively.\u2020denotes the combined points of two splits.\n\u2217indicates that training images of the datasets are observed during training.The reddenotes the\nhighest result of efficient MLLMs, and the blue denotes that of large-scale MLLMs.\n7 Applications\nFrom the preceding analysis, it\u2019s clear that many efficient MLLM approaches evaluate their perfor-\nmances across a range of scenarios, like VQA, visual grounding, image segmentation, etc. However,\nit\u2019s also crucial to explore these efficient architectures in well-established tasks to achieve their ul-\ntimate performance. Therefore, we have chosen to introduce several downstream tasks, such as\nmedical analysis, document understanding, and video comprehension.\n7.1 Biomedical Analysis\nDue to the high cost of annotating biomedical data, foundation models are poised to become a new\nparadigm in biomedicine, achieving state-of-the-art results on many applications, including medical", "offer valuable insights that deepen understanding of the opportunities and challenges associated\nwith hallucinations in MLLMs. This exploration not only enhances our understanding of the limita-\ntions of current MLLMs but also offers essential guidance for future research and the development\nof more robust and trustworthy MLLMs.\nComparison with existing surveys. In pursuit of reliable generative AI, hallucination stands\nout as a major challenge, leading to a series of survey papers on its recent advancements. For pure\nLLMs, there are several surveys [ 44,129], describing the landscape of hallucination in LLMs. In\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024."], "retrieved_docs_id": ["6b47636d3a", "374490e448", "8dd48f8a23", "cd7157ebfa", "76835931c1"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How much computation does LLaV A-UHD use compared to previous models when supporting 6 times larger resolution images?\n", "true_answer": "LLaV A-UHD uses 94% of the inference computation compared to previous models when supporting 6 times larger resolution images.", "source_doc": "multimodal.pdf", "source_id": "986687f08e", "retrieved_docs": ["Token Processing Techniques designed to process lengthy visual token squence are critical in ef-\nficient MLLMs as they address the dual challenges of preserving fine-grained details and reducing\ncomputational complexity. LLaV A-UHD [35] presents a novel approach to manage the computa-\ntional burden associated with high-resolution images. It puts forward two key components: (1) a\ncompression module that further condenses image tokens from visual encoders, significantly re-\nducing the computational load, and (2) a spatial schema to organize slice tokens for LLMs. No-\ntably, LLaV A-UHD demonstrates its efficiency by supporting 6 times larger resolution images using\nonly 94% of the inference computation compared to previous models. Furthermore, the model\ncan be efficiently trained in academic settings, completing the process within 23 hours on 8 A100\nGPUs. LLaV A-PruMerge[41] and MADTP [42] propose an adaptive visual token reduction ap-", "Figure 6: Comparision of Phi[86] (from left to right: phi-1.5, phi-2, phi-3-mini, phi-3-small) versus\nLlama-2 [91] family of models(7B, 13B, 34B, 70B) that were trained on the same fixed data.\nLLaV A-UHD [35] proposes an image modularization strategy that divides native-resolution im-\nages into smaller variable-sized slices for efficient and extensible encoding. Inaddition, InternLM-\nXComposer2-4KHD [90] introduces a strategy that dynamically adjusts resolution with an automatic\nlayout arrangement, which not only maintains the original aspect ratios of images but also adaptively\nalters patch layouts and counts, thereby enhancing the efficiency of image information extraction.\nBy implementing an adaptive input strategy for images of varying resolutions, a balance between\nperceptual capability and efficiency can be achieved.\nToken Processing Techniques designed to process lengthy visual token squence are critical in ef-", "bedding. It proposes Patch Info Mining, which uses low-resolution visual embeddings as queries\nto retrieve relevant visual cues from high-resolution candidates through cross-attention. Scaling on\nScales ( S2) [40] demonstrated that a multi-scale smaller model has comparable learning capacity to\na larger model, and pre-training smaller models with S2can match or even exceed the advantage of\nlarger models on MLLM benchmarks while being more compute-efficient. After splitting the large\nimage into small sub-images, S2-wrapper processes individual sub-images instead of using window\nattention, which allows using a pre-trained model that does not support window attention and avoids\ntraining additional parameters from scratch.It then interpolates the large feature map into the regular\nsize, making sure the number of visual tokens stays acceptable.\nVision Expert Agents Most MLLMs, due to their non-lossless image tokenization, struggle to", "GPUs. LLaV A-PruMerge[41] and MADTP [42] propose an adaptive visual token reduction ap-\nproach that significantly decreases the number of visual tokens while preserving comparable model\nperformance. TinyChart [37] and TextHawk [36] focus on document-oriented tasks, with the former\nadopting the Vision Token Merging module and the latter introducing the ReSampling and ReAr-\nrangement module. These modules can enhance fine-grained visual perception and information\ncompression capabilities.\nMulti-Scale Information Fusion Utilizing multi-scale image information is indeed crucial for\nvisual feature extraction. This approach allows the model to capture both the fine-grained details\npresent in smaller scales and the broader context available in larger scales. Mini-Gemini [26] com-\nprises twin encoders, one for high-resolution images and the other for low-resolution visual em-\nbedding. It proposes Patch Info Mining, which uses low-resolution visual embeddings as queries", "Multi-view Input Directly employing high-resolution vision encoders for fine-grained percep-\ntion is prohibitively costly and does not align with practical usage requirements. Therefore, to\nutilize low-resolution vision encoders while enabling MLLM to perceive detailed information, a\ncommon approach is to input multi-view HR images, i.e., a global view: low-resolution images\nobtained through resizing, and a local view: image patches derived from splitting. For example,\n7"], "retrieved_docs_id": ["986687f08e", "c0bdc4830f", "5435a1d695", "8e97c297be", "f8392fc0db"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does FaithScore evaluate free-form responses from MLLMs?\n", "true_answer": "FaithScore evaluates free-form responses from MLLMs by decomposing the response into elements, evaluating, and analyzing them in detail.", "source_doc": "hallucination.pdf", "source_id": "23d981a684", "retrieved_docs": ["HaELM [ 104]Most LLM-based evaluation benchmarks employ advanced ChatGPT or GPT-4\nmodels to assess the quality of the MLLM response. In contrast, the work of Hallucination Evaluation\nbased on Large Language Models (HaELM) proposes to train a specialized LLM for hallucination\ndetection. It collects a set of hallucination data generated by a wide range of MLLMs, simulates data\nusing ChatGPT, and trains an LLM based on LLaMA [ 99]. After that, the HaELM model becomes\nproficient in hallucination evaluation, leveraging reference descriptions of images as the basis of\nassessment.\nFaithScore [ 55]Considering the natural forms of interaction between humans and MLLMs,\nFaithScore aims to evaluate free-form responses to open-ended questions. Different from LLM-based\noverall assessment, FaithScore designs an automatic pipeline to decompose the response, evaluate,\nand analyze the elements in detail. Specifically, it includes three steps: descriptive sub-sentence", "6.4 Establishing Standardized Benchmarks\nThe lack of standardized benchmarks and evaluation metrics poses significant challenges in as-\nsessing the degree of hallucination in MLLMs. In Table 1, it can be observed that there is a variety\nof evaluation benchmarks, but a lack of unified standards. Among them, one of the most popular\nbenchmarks might be POPE [ 69], which employs a \u2019Yes-or-No\u2019 evaluation protocol. However, this\nbinary-QA manner does not align with how humans use MLLMs. Accordingly, some benchmarks\nspecifically evaluate the hallucination of MLLMs in the (free-form) generative context. Yet, they\noften rely on external models, such as vision expert models or other LLMs, which limits their wide-\nspread application. Moving forward, future research can investigate standardized benchmarks that\nare theoretically sound and easy to use. Otherwise, research on methods to mitigate hallucinations\nmay be built on an incorrect foundation.\n6.5 Reframing Hallucination as a Feature", "The results are shown in Table 2 for generative tasks and Table 3 for discriminative tasks. We\nobserve that the MLLMs\u2019 performance is not always consistent across different benchmarks. It\nindicates that different benchmarks have different evaluation dimensions and emphases.\nTable 2. Comparison of mainstream MLLMs on generative benchmarks. The numbers come from the original\npapers of these benchmarks.\nModel LLM SizeCHAIR\n(On AMBER)\u2193AMBER\nScore\u2191HallusionBench\nAll-Acc\u2191FaithScore\n(LLaVA-1k)\u2191FaithScore\n(COCO-Cap)\u2191Hal-Eval\nIn-domain\nGen. Acc\u2191Hal-Eval\nOut-of-domain\nGen. Acc\u2191\nmPLUG-Owl [111] 7B 23.1 54.1 43.93 0.7167 0.8546 27.3 29.5\nMultimodal-GPT [28] 7B - - - 0.5335 0.5440 - -\nInstructBLIP [22] 7B 10.3 86.2 45.26 0.8091 0.9392 35.5 41.3\nGPT-4V [83] - 4.3 92.7 65.28 - - - -\nLLaVA (7B) [75] 7B 13.5 69.3 - - - 23.3 26.3\nLLaVA (13B) [75] 13B - - - 0.8360 0.8729 - -\nMiniGPT-4 (7B) [138] 7B - - 35.78 0.5713 0.6359 61.4 50.1\nMiniGPT-4 (13B) [138] 13B 15.9 76.7 - - - - -", "and analyze the elements in detail. Specifically, it includes three steps: descriptive sub-sentence\nidentification, atomic fact generation, and fact verification. The evaluation metric involves fine-\ngrained object hallucination categories, including entity, count, color, relation, and other attributes.\nThe final computation of FaithScore is the ratio of hallucinated content.\nBingo [ 21]Bingo (Bias and Interference Challenges in Visual Language Models) is a benchmark\nspecifically designed for assessing and analyzing the limitations of current popular MLLMs, such as\nGPT-4V [ 83]. It comprises 190 failure instances, along with 131 success instances as a comparison.\nThis benchmark reveals that state-of-the-art MLLMs show the phenomenon of bias and interference.\nBias refers to the model\u2019s susceptibility to generating hallucinatory outputs on specific types of\nexamples, such as OCR bias, region bias, etc. Interference refers to scenarios in which the judgment", "14 Bai, et al.\nMHaluBench [ 13]This benchmark does not aim to evaluate the MLLMs themselves. Instead, it\nis intentionally designed to evaluate the hallucination detection tools of MLLMs, i.e., judge whether\na tool can successfully detect the hallucination produced by an MLLM. Thus, the benchmark\nconsists of hallucinatory examples. Specifically, the benchmark unifies image-to-text tasks and the\ntext-to-image tasks into one evaluation suite: cross-modal consistency checking. The hallucinatory\nexamples are generated using leading MLLMs and image generation models, such as LLaVA [ 75],\nMiniGPT-4 [ 138], DALL-E2 [ 89], and DALL-E3 [ 6]. During evaluation, the benchmark can be used\nto compare different hallucination detection methods based on their performance. So far, there are\nnot many dedicated hallucination detection methods. This work serves as a basis for this direction.\nVHTest [ 46]VHTest categorizes visual properties of objects in an image into 1) individual"], "retrieved_docs_id": ["23d981a684", "312439a972", "3939d93618", "db8870dfa6", "5c89e9ef97"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does the length of the context window in RAG affect its performance?\n", "true_answer": "The performance of RAG's generation phase is constrained by the context window of LLMs. If the window is too short, it may not contain enough relevant information, and if it's too long, it might lead to information loss.", "source_doc": "RAG.pdf", "source_id": "6080afb1ff", "retrieved_docs": ["that require further investigation.\nFirstly, the issue of long context in RAG is a significant\nchallenge. As mentioned in the literature [Xuet al. , 2023c ],\nRAG\u2019s generation phase is constrained by the context win-\ndow of LLMs. If the window is too short, it may not contain\nenough relevant information; if it\u2019s too long, it might lead to\ninformation loss. Currently, expanding the context window\nof LLMs, even to the extent of limitless context, is a critical\ndirection in LLM development. However, once the context\nwindow constraint is removed, how RAG should adapt re-\nmains a noteworthy question.\nSecondly, the robustness of RAG is another important re-\nsearch focus. If irrelevant noise appears during retrieval, or\nif the retrieved content contradicts facts, it can significantly\nimpact RAG\u2019s effectiveness. This situation is figuratively\nreferred to as \u201dopening a book to a poisonous mushroom\u201d.", "Document [5](Title: Maria Goeppert Mayer) ... \nQuestion: who got the first nobel prize in physics \nAnswer: Input Context Input Context \nWilhelm Conrad R\u00f6ntgen Desired Answer Figure 4: Modulating the input context length of the\nmulti-document question answering example presented\nin Figure 2. Adding documents that do not contain the\nanswer increases the length of the input context, but\ndoes not affect the desired output.\nOpen models. We experiment with MPT-30B-\nInstruct, which has a maximum context length of\n8192 tokens. The model was initially pre-trained\non 1 trillion tokens using 2048-token sequences,\nfollowed by an additional sequence length adapta-\ntion pre-training phase on 50 billion tokens using\n8192-token sequences. MPT-30B-Instruct uses AL-\niBi (Press et al., 2022) to represent positional infor-\nmation. We also evaluate LongChat-13B (16K) (Li\net al., 2023), which extends the LLaMA-13B (Tou-\nvron et al., 2023a) context window from 2048 to", "ple, different chunking models should be selected for longer\nor shorter content. Additionally, different embedding mod-\nels perform differently at different block sizes; for example,\nsentence-transformer is more suitable for single sentences,while text-embedding-ada-002 is better for blocks containing\n256 or 512 tokens. Furthermore, the length and complexity\nof the user\u2019s input question text, as well as the specific needs\nof your application such as semantic search or Q&A, will all\naffect the choice of chunking strategy. This might directly\ncorrelate with the token limits of your chosen LLM, and may\nrequire you to adjust the block size. In fact, accurate query\nresults are achieved by adaptively applying several chunking\nstrategies; there is no best, only most suitable.\nCurrent research in RAG employs diverse block optimiza-\ntion methods to improve retrieval efficiency and accuracy.\nTechniques such as sliding window technology implement", "such as professional domain knowledge question-answering,\nRAG might offer lower training costs and better performance\nbenefits than fine-tuning.\nSimultaneously, improving the evaluation system of RAG\nfor assessing and optimizing its application in different down-\nstream tasks is crucial for the model\u2019s efficiency and bene-\nfits in specific tasks. This includes developing more accurate\nevaluation metrics and frameworks for different downstream\ntasks, such as context relevance, content creativity, and harm-\nlessness, among others.\nFurthermore, enhancing the interpretability of models\nthrough RAG, allowing users to better understand how and\nwhy the model makes specific responses, is also a meaning-\nful task.\nTechnical Stack\nIn the ecosystem of RAG, the development of the related\ntechnical stack has played a driving role. For instance,\nLangChain and LLamaIndex have become widely known\nquickly with the popularity of ChatGPT. They both offer a", "ter at using input context. When the input con-\ntext fits in the context window of both a model\nand its extended-context counterpart, we see that\nperformance between them is nearly identical. For\nexample, the 10- and 20-document settings both\nfit in the context window of GPT-3.5-Turbo and\nGPT-3.5-Turbo (16K), and we observe that their\nperformance as a function of position of relative\ninformation is nearly superimposed (solid purple\nand dashed brown series in Figure 5). These results"], "retrieved_docs_id": ["6080afb1ff", "25438b32f8", "20000f1ef4", "da182b99e8", "dbbb26b25b"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is the focus of the analysis in the given context?\n", "true_answer": "The focus of the analysis in the given context is the unique origins of hallucinations in modern large-scale language models (MLLMs), spanning a spectrum of contributing factors from data, model, training, to the inference stage.", "source_doc": "hallucination.pdf", "source_id": "6da15b5bb7", "retrieved_docs": ["should foreground where what is implemented falls short of the ambition of evaluating models in their\ntotality. Our benchmark foregrounds the limitations of our current benchmark by design: our benchmark is\na subset of a pre-specified taxonomy. That is, the difference between what is in the taxonomy and what is\nin the benchmark identifies what we currently miss.\nWhile it is useful to articulate what is missing, given the immense scale of the use cases and desiderata we\ncould have for language models, we believe it is necessary to have clear priorities on how to navigate the\nspaceofwhatwelack. Theseprioritiesaredeeplysubjective: manycompellingargumentscanbepresentedto\nincrease focus on any specific region of the design space for language models and language model evaluation.\nIndeed, this is also made clear through the diversity of different works happening in parallel throughout the\nAI community to evaluate language models.", "measure by di\ufb00erent segments of the population.\nHow might a discussion about Boris Frump be\nmoderated thanks to RLHF?\nLet\u2019s consider the prompt \u201cBoris Frump is a \u201d.\nSampling the raw LLM, before \ufb01ne-tuning, might\nyield two equally probable responses, one highly\ncomplimentary, the other a crude anatomical al-\nlusion, one of which would be arbitrarily chosen\nin a dialogue agent context. In an important\nsense, what is being asked here is not the model\u2019s\nopinion of Boris Frump. In this case, the case of\nthe raw LLM, what we are really asking (in an\nimportant sense) is the following question: Given\nthe statistical distribution of words in the vast\npublic corpus of human language, what words are\nmost likely to follow the sequence \u201cBoris Frump\nis a \u201d?\nBut suppose we sample a model that has been\n\ufb01ne-tuned using RLHF. Well, the same point ap-\nplies, albeit in a somewhat modi\ufb01ed form. What\nwe are really asking, in the \ufb01ne-tuned case, is\na slightly di\ufb00erent question: Given the statisti-", "Context\u2192Q: What school did burne hogarth establish?\nA:\nTarget Completion \u2192School of Visual Arts\nFigure G.35: Formatted dataset example for WebQA\nContext\u2192Keinesfalls d\u00a8 urfen diese f\u00a8 ur den kommerziellen Gebrauch verwendet werden.\n=\nTarget Completion \u2192In no case may they be used for commercial purposes.\nFigure G.36: Formatted dataset example for De \u2192En. This is the format for one- and few-shot learning, for this and\nother langauge tasks, the format for zero-shot learning is \u201cQ: What is the {language}translation of{sentence}A:\n{translation}.\u201d\nContext\u2192In no case may they be used for commercial purposes. =\nTarget Completion \u2192Keinesfalls d\u00a8 urfen diese f\u00a8 ur den kommerziellen Gebrauch verwendet werden.\nFigure G.37: Formatted dataset example for En \u2192De\nContext\u2192Analysis of instar distributions of larval I. verticalis collected from\na series of ponds also indicated that males were in more advanced instars\nthan females. =", "Original input: If a series, y, follows a random walk, what is the optimal one-step ahead forecast of y?  (A) The current value of y  (B) Zero  (C) One Perturbed input: if a series, y, follows a random walk, what's the best one-step ahead forcast of y? (A) The current value of y  (B) Zero  (C) One (A)Model prediction\n(A)Model predictionInvariant?Typo, synonym, etc.\nFigure 18: Robustness perturbations. An example of how we perturb instances to measure the invariance\nof the model to benign corruptions.\nTowards this goal, we measure the robustness of different models by evaluating them on transformations\nof an instance. That is, given a set of transformations for a given instance, we measure the worst-case\nperformance of a model across these transformations (Figure 18). Thus, for a model to perform well under\nthis metric, it needs to perform well across instance transformations.\nSpecifically, we will focus on two notions of transformations\u2014namely invariance andequivariance \u2014described", "optimal model to train given a compute budget of approximately 1025FLOPs and should be trained on\n6.8 trillion tokens. Unless one has a compute budget of 1026FLOPs (over 250\u0002the compute used to\ntrainGopher), a 1 trillion parameter model is unlikely to be the optimal model to train. Furthermore,\nthe amount of training data that is projected to be needed is far beyond what is currently used to\ntrain large models, and underscores the importance of dataset collection in addition to engineering\nimprovements that allow for model scale. While there is signi\ufb01cant uncertainty extrapolating out\nmany orders of magnitude, our analysis clearly suggests that given the training compute budget for\nmany current LLMs, smaller models should have been trained on more tokens to achieve the most\nperformant model.\nIn Appendix C, we reproduce the IsoFLOP analysis on two additional datasets: C4 (Ra\ufb00el et al.,\n2020a) and GitHub code (Rae et al., 2021). In both cases we reach the similar conclusion that model"], "retrieved_docs_id": ["48bfb93875", "af192b5988", "bab3d3f5e0", "421d8b906f", "a44b60e422"], "reranker_type": "None", "search_type": "text", "rr": 0.0, "hit": 0}, {"question": "How does iterative retrieval improve the robustness of answer generation in large language models?\n", "true_answer": "Iterative retrieval improves robustness by regularly collecting documents based on the original query and generated text, providing additional materials for large language models. The robustness is further enhanced by providing additional references in multiple iterative retrievals.", "source_doc": "RAG.pdf", "source_id": "f24827ee1d", "retrieved_docs": ["dle\u201d phenomenon [Liuet al. , 2023 ]. This redundant informa-\ntion can obscure key information or contain information con-\ntrary to the real answer, negatively impacting the generation\neffect [Yoran et al. , 2023 ]. Additionally, the information ob-\ntained from a single retrieval is limited in problems requiring\nmulti-step reasoning.\nCurrent methods to optimize the retrieval process mainly\ninclude iterative retrieval and adaptive retrieval. These allow\nthe model to iterate multiple times during the retrieval process\nor adaptively adjust the retrieval process to better accommo-\ndate different tasks and scenarios.\nIterative Retrieval\nRegularly collecting documents based on the original query\nand generated text can provide additional materials for\nLLMs [Borgeaud et al. , 2022, Arora et al. , 2023 ]. Providing\nadditional references in multiple iterative retrievals has im-\nproved the robustness of subsequent answer generation.\nHowever, this method may be semantically discontinuous and", "that arise in real use-cases (e.g. typos) affect the performance of the model significantly. Thus, we re-\nstrict ourselves to perturbations that are both natural and relatively mild\u2014e.g., capitalization, common\nmisspellings\u2014see Figure 18 for an illustration and see Appendix D.1 for the full description. Since it is\ndifficult to uniformly specify how the gold-standard should change for these perturbations in long-form\ntext generation or language modeling, we restrict our measurement of invariance-related robustness to text\nclassification, question answering, and information retrieval scenarios.\nEquivariance. To complement invariance, we also test how semantics-altering perturbations influence\nmodel behavior. The goal is to understand whether a model is sensitive to perturbations that change the\ntarget output and does not latch on irrelevant parts of the instance. Unfortunately, unlike invariance, spec-", "is costly for LLMs, and too much irrelevant information\ncan reduce the efficiency of LLMs in utilizing context.\nThe OpenAI report also mentioned \u201dContext Recall\u201d as\na supplementary metric, measuring the model\u2019s abil-\nity to retrieve all relevant information needed to an-\nswer a question. This metric reflects the search opti-\nmization level of the RAG retrieval module. A low re-\ncall rate indicates a potential need for optimization of\nthe search functionality, such as introducing re-ranking\nmechanisms or fine-tuning embeddings, to ensure more\nrelevant content retrieval.\nKey abilities\nThe work of RGB [Chen et al. , 2023b ]analyzed the perfor-\nmance of different large language models in terms of four\nbasic abilities required for RAG, including Noise Robust-\nness, Negative Rejection, Information Integration, and Coun-\nterfactual Robustness, establishing a benchmark for retrieval-\naugmented generation.RGB focuses on the following four\nabilities:\n1.Noise Robustness", "Retrieval-Augmented Generation for Large Language Models: A Survey\nYunfan Gao1,Yun Xiong2,Xinyu Gao2,Kangxiang Jia2,Jinliu Pan2,Yuxi Bi3,Yi\nDai1,Jiawei Sun1and Haofen Wang1,3\u2217\n1Shanghai Research Institute for Intelligent Autonomous Systems, Tongji University\n2Shanghai Key Laboratory of Data Science, School of Computer Science, Fudan University\n3College of Design and Innovation,Tongji University\ngaoyunfan1602@gmail.com\nAbstract\nLarge language models (LLMs) demonstrate pow-\nerful capabilities, but they still face challenges in\npractical applications, such as hallucinations, slow\nknowledge updates, and lack of transparency in\nanswers. Retrieval-Augmented Generation (RAG)\nrefers to the retrieval of relevant information from\nexternal knowledge bases before answering ques-\ntions with LLMs. RAG has been demonstrated\nto significantly enhance answer accuracy, reduce\nmodel hallucination, particularly for knowledge-\nintensive tasks. By citing sources, users can verify", "models and retrieval-Augmented generation. They become\nfamiliar with the evolutionary path and key technologies of\nknowledge retrieval augment, enabling them to discern the\nadvantages and disadvantages of different techniques, iden-\ntify applicable scenarios, and explore current typical applica-\ntion cases in practice.It is noteworthy that in previous work,\nFeng el al. [2023b ]systematically reviewed the methods, ap-\nplications, and future trends of combining large models with\nknowledge, with a primary focus on knowledge editing and\nretrieval augmentation methods. Zhu et al. [2023 ]introduced\nthe latest advancements in augmenting retrieval systems for\nLarge Language Models, with a specific focus on the retrieval\nsystem. Meanwhile, Asai et al. [2023a ]focusing on ques-\ntions such as \u201cWhat\u201d, \u201cWhen\u201d, \u201cHow\u201d, analyzed and eluci-\ndated the key processes in Retrieval-based Language Mod-\nels. In comparison with them, this paper aims to systemati-"], "retrieved_docs_id": ["f24827ee1d", "d7b911a1f5", "6291d3f5de", "af911eac69", "fe157c6a57"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does post-training quantization reduce the precision of ViT models?\n", "true_answer": "Post-training quantization compresses trained ViT models by converting their parameters from high-precision floating-point numbers to lower-precision fixed-point numbers, such as 8-bit integers.", "source_doc": "multimodal.pdf", "source_id": "354a427ccf", "retrieved_docs": ["improved performance for the ViT student model.\n3.4 Quantization\nViT quantization is the process of reducing the precision of numerical representations in ViT models,\ntypically transitioning from floating-point to fixed-point arithmetic [140]. This reduction in preci-\nsion aims to decrease memory usage, computational complexity, and energy consumption while\npreserving model accuracy to an acceptable level. Current research can be mainly categorized into\npost-training quantization, quantization-aware training, and hardware-aware quantization.\nPost-Training Quantization (PTQ) compresses trained ViT models by converting their param-\neters from high-precision floating-point numbers to lower-precision fixed-point numbers, such as\n8-bit integers. For example, Liu et al. [141] introduced a ranking loss method to identify opti-\nmal low-bit quantization intervals for weights and inputs, ensuring the functionality of the attention", "a technique known as mixed precision (Lin et al.,\n2016; Wu et al., 2018a; Zhou et al., 2018; Dong\net al., 2019; Wang et al., 2019; van Baalen et al.,\n2020).\nTransformer quantization Junczys-Dowmunt\net al. (2018) applied knowledge distillation and\n8-bit post-training quantization to speed up trans-\nformer models for neural machine translation.\nBhandare et al. (2019) also applied 8-bit post-\ntraining quantization to the transformer model for\nmachine translation and demonstrated how to uti-\nlize specialized hardware to accelerate the infer-\nence process.\nZafrir et al. (2019) proposed an 8-bit quantiza-\ntion scheme for BERT-like models and achieves\ncompression of up to 25% of the original model\nsize. Shen et al. (2020) applies mixed-precision\nquantization on BERT, where they assign a dif-\nferent precision to different layers according to\ntheir sensitivity de\ufb01ned by Hessian information.\nKim et al. (2021) proposed a fully integer-only\narithmetic inference scheme based on second-order", "Bit-shrinking [125] progressively reduce model bit-width while regulating sharpness to maintain\naccuracy throughout quantization. PackQViT [129] mitigates outlier effects during quantization.\nBiViT [128] introduces Softmax-aware Binarization to adjust the binarization process, minimizing\nerrors in binarizing softmax attention values. Xiao et al. [142] integrated a gradient regularization\nscheme to curb weight oscillation during binarization training and introduced an activation shift\nmodule to reduce information distortion in activations. Additionally, BinaryViT [130] integrates\nessential architectural elements from CNNs into a pure ViT framework, enhancing its capabilities.\nHardware-Aware Quantization optimizes the quantization process of neural network models for\nspecific hardware platforms ( e.g., GPUs [131], FPGA [132]). It adjusts precision levels and quan-\ntization strategies to maximize performance and energy efficiency during inference. For example,", "VTP[110], PS-ViT[111]\nHybrid Pruning SPViT [112], ViT-Slim [113]\nKnowledge Distillation (\u00a73.3)Homomorphic KDDeiT [114], TinyViT [115], m2mKD [116],\nDeiT-Tiny [117], MiniViT [118]\nHeteromorphic KD DearKD [119], CiT [120]\nQuantization (\u00a73.4)Post-Training QuantizationPTQ4ViT [121], APQ-ViT [122],\nNoisyQuant [123]\nQuantization-Aware TrainingQuantformer [124] Bit-shrinking [125],\nQ-ViT [126], TerViT [127], BiViT [128],\nPackQViT [129], BinaryViT [130]\nHardware-Aware Quantization GPUSQ-ViT[131], Auto-ViT-Acc [132]\nFigure 9: Organization of efficient vision advancements.\n10", "produce negative values.\nSummary (QAT). QAT has been shown to work\ndespite the coarse approximation of STE. However, the\nmain disadvantage of QAT is the computational cost of\nre-training the NN model. This re-training may need\nto be performed for several hundred epochs to recover\naccuracy, especially for low-bit precision quantization. If\na quantized model is going to be deployed for an extended\nperiod, and if ef\ufb01ciency and accuracy are especially\nimportant, then this investment in re-training is likely\nto be worth it. However, this is not always the case, as\nsome models have a relatively short lifetime. Next, we\nnext discuss an alternative approach that does not have\nthis overhead.\n2) Post-Training Quantization: An alternative to the\nexpensive QAT method is Post-Training Quantization\n(PTQ) which performs the quantization and the adjust-\nments of the weights, without any \ufb01ne-tuning [ 11,24,40,\n60,61,68,69,89,108,142,148,174,182,223,281]."], "retrieved_docs_id": ["354a427ccf", "00f1eadf96", "31efe3044d", "8a087225e4", "94a6ffe197"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does REALM model the pre-training process?\n", "true_answer": "REALM models the pre-training process as a retrieve-then-predict process, where the language model pre-trains by predicting masked tokens based on masked sentences, modeling P(x|y).", "source_doc": "RAG.pdf", "source_id": "6240233238", "retrieved_docs": ["As a knowledge-intensive task, RAG employs different tech-\nnical approaches during the language model training\u2019s pre-\ntraining, fine-tuning, and inference stages.\nPre-training Stage\nSince the emergence of pre-trained models, researchers have\ndelved into enhancing the performance of Pre-trained Lan-\nguage Models (PTMs) in open-domain Question Answering\n(QA) through retrieval methods at the pre-training stage. Rec-\nognizing and expanding implicit knowledge in pre-trained\nmodels can be challenging. REALM [Arora et al. , 2023 ]in-\ntroduces a more modular and interpretable knowledge em-\nbedding approach. Following the Masked Language Model\n(MLM) paradigm, REALM models both pre-training and\nfine-tuning as a retrieve-then-predict process, where the lan-\nguage model pre-trains by predicting masked tokens ybased\non masked sentences x, modeling P(x|y).\nRETRO [Borgeaud et al. , 2022 ]leverages retrieval aug-\nmentation for pre-training a self-regressive language model,", "ity without being updated. In what follows, we discuss two\nkey questions about the ICL ability of LLMs, i.e.,\u201chow does\npre-training affect the ICL ability \u201d and \u201c how do LLMs perform\nICL during inference \u201d.\nHow Pre-Training Affects ICL? ICL is first proposed in\nGPT-3 [55], and it has been shown that the ICL ability\nbecomes more significant with a larger model size. Further,\nsome studies reveal that small-scale PLMs can also demon-\nstrate a strong ICL ability by continual pre-training [490]\nor fine-tuning [491] on specially designed training tasks,\nwhich typically involve additional task examples in theinput during the training process. It suggests that the design\nof training tasks is an important influence factor on the ICL\ncapability of LLMs. Besides training tasks, recent studies\nhave also investigated the relationship between ICL and\npre-training corpora [488, 492]. For example, ICL can be\ntheoretically explained as the product of pre-training on", "provide enough information about whether the produced answer would contradict.\nRetrieval-augmented language model pre-training\n(REALM) [ 186] inserts retrieved documents\ninto the pre-training examples. While Guu et al.\n[186] designed REALM for extractive tasks\nsuch as question-answering, Lewis et al. [304]\npropose retrieval-augmented generation (RAG), a\nlanguage generation framework using retrievers\nfor knowledge-intensive tasks that humans could\nnot solve without access to an external knowledge\nsource. Yogatama et al. [646] propose the adaptive\nSemiparametric Language Models architecture,\nwhich incorporates the current local context, a\nshort-term memory that caches earlier-computed\nhidden states, and a long-term memory based on a\nkey-value store of (hidden-state, output) tuples. To\nequip a retrieval-augmented LLM with few-shot\nabilities that were before only emergent in LLMs\nwith many more parameters, Izacard et al. [236]\npropose a KL-divergence loss term for retrieval", "jority class.\nC Additional Ablation Studies\nC.1 Effect of Number of Training Steps\nFigure 5 presents MNLI Dev accuracy after \ufb01ne-\ntuning from a checkpoint that has been pre-trained\nforksteps. This allows us to answer the following\nquestions:\n1. Question: Does BERT really need such\na large amount of pre-training (128,000\nwords/batch * 1,000,000 steps) to achieve\nhigh \ufb01ne-tuning accuracy?\nAnswer: Yes, BERT BASE achieves almost\n1.0% additional accuracy on MNLI when\ntrained on 1M steps compared to 500k steps.\n2. Question: Does MLM pre-training converge\nslower than LTR pre-training, since only 15%\nof words are predicted in each batch rather\nthan every word?\nAnswer: The MLM model does converge\nslightly slower than the LTR model. How-\never, in terms of absolute accuracy the MLM\nmodel begins to outperform the LTR model\nalmost immediately.\nC.2 Ablation for Different Masking\nProcedures\nIn Section 3.1, we mention that BERT uses a\nmixed strategy for masking the target tokens when", "language model to generate the response autoregressively.\nIn the following, we will discuss the training, evaluation,\nand key points to develop capable MLLMs.\nTraining Process. The training process of the MLLM in-\ncludes two major stages: vision-language alignment pre-\ntraining and visual instruction tuning.\n\u2022Vision-language alignment pre-training. To develop\nMLLMs, existing work mostly initializes the vision encoder\nand the LLM with pre-trained models [149, 150, 826]. These\nmodels retain excellent vision and language capacities, but\nspan different semantic spaces. Thus, the goal of vision-\nlanguage alignment pre-training ( i.e.,the first-stage training)\nis to align the vision encoder and the LLM through end-to-\nend training on large-scale image-text pairs [827, 828]. How-\never, directly tuning these two models on image-text pairs\nmay cause the degradation of the original representation ca-\npacities. To improve the alignment performance, it is crucial"], "retrieved_docs_id": ["6240233238", "b0a5af4ba8", "f7770d2394", "328045cf5c", "e838613d76"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does SURGE minimize the semantic similarity between documents and queries?\n", "true_answer": "SURGE minimizes the semantic similarity between documents and queries by updating the generator and retriever during the fine-tuning phase, which leverages relevant background knowledge.", "source_doc": "RAG.pdf", "source_id": "977e0e1405", "retrieved_docs": ["swers given a retrieval-enhanced directive. It updates the gen-\nerator and retriever to minimize the semantic similarity be-\ntween documents and queries, effectively leveraging relevant\nbackground knowledge.\nAdditionally, SUGRE [Kang et al. , 2023 ]introduces the\nconcept of contrastive learning. It conducts end-to-end fine-\ntuning of both retriever and generator, ensuring highly de-\ntailed text generation and retrieved subgraphs. Using a\ncontext-aware subgraph retriever based on Graph Neural Net-\nworks (GNN), SURGE extracts relevant knowledge from a\nknowledge graph corresponding to an ongoing conversation.\nThis ensures the generated responses faithfully reflect the re-\ntrieved knowledge. SURGE employs an invariant yet efficient\ngraph encoder and a graph-text contrastive learning objective\nfor this purpose.\nIn summary, the enhancement methods during the fine-\ntuning phase exhibit several characteristics. Firstly, fine-\ntuning both LLM and retriever allows better adaptation", "lows the decide-retrieve-reflect-read process, introduc-\ning a module for active judgment. This adaptive and\ndiverse approach allows for the dynamic organization of\nmodules within the Modular RAG framework.\n4 Retriever\nIn the context of RAG, the \u201dR\u201d stands for retrieval, serving\nthe role in the RAG pipeline of retrieving the top-k relevant\ndocuments from a vast knowledge base. However, crafting\na high-quality retriever is a non-trivial task. In this chapter,\nwe organize our discussions around three key questions: 1)\nHow to acquire accurate semantic representations? 2) How\nto match the semantic spaces of queries and documents? 3)\nHow to align the output of the retriever with the preferences\nof the Large Language Model ?\n4.1 How to acquire accurate semantic\nrepresentations?\nIn RAG, semantic space is the multidimensional space where\nquery and Document are mapped. When we perform re-\ntrieval, it is measured within the semantic space. If the se-", "tiple downstream tasks, fine-tuning the retriever with two dif-\nferent supervised signals via hard labeling of the dataset and\nthe soft reward derived from LLM.\nThis somewhat improves the semantic representation\nthrough both domain knowledge injection and downstream\ntask fine-tuning. However, the retrievers trained by this ap-\nproach are not intuitively helpful for large language models,\nso some work has been done to supervise the fine-tuning of\nEmbedding models directly through feedback signals from\nthe LLM. (This section will be presented in 4.4)\n4.2 How to Match the Semantic Space of Queries\nand Documents\nIn the RAG application, some retrievers use the same embed-\nding model to encode the query and doc, while others use two\nmodels to separately encode the query and doc. Moreover, the\noriginal query of the user may have problems of poor expres-\nsion and lack of semantic information. Therefore, aligning\nthe semantic space of the user\u2019s query and documents is very", "formation to the edges of the prompt is a straightfor-\nward idea. This concept has been implemented in frame-\nworks such as LlamaIndex, LangChain, and HayStack\n[Blagojevi, 2023 ]. For instance, Diversity Ranker pri-\noritizes reordering based on document diversity, while\nLostInTheMiddleRanker alternates placing the best doc-\nument at the beginning and end of the context window.\nSimultaneously, addressing the challenge of interpreting\nvector-based simulated searches for semantic similarity,\napproaches like cohereAI rerank [Cohere, 2023 ], bge-\nrerank5, or LongLLMLingua [Jiang et al. , 2023a ]recal-\nculate the semantic similarity between relevant text and\nquery.\n\u2022Prompt Compression Research indicates that noise\nin retrieved documents adversely affects RAG perfor-\nmance. In post-processing, the emphasis lies in com-\npressing irrelevant context, highlighting pivotal para-\ngraphs, and reducing the overall context length. Ap-\nproaches such as Selective Context [Litman et al. , 2020 ]", "ules and offers more flexibility.\nIn the subsequent chapters, we further analyze three key\nparts of RAG in detail. Chapter 4 introduces the retriever of\nRAG, how to process corpora to obtain better semantic repre-\nsentations, how to mitigate the semantic gap between Query\nand documents, and how to adjust the retriever to fit the gen-\nerator. Chapter 5 explains how the generator obtains better\ngeneration results by post-processing retrieved documents,\navoiding the \u201dLost in the middle\u201d issue, as well as methods to\nadjust the generator to fit the retriever. Subsequently, in Chap-\nter 6, we review the current retrieval enhancement methods\nfrom the aspects of the retrieval stage, retrieval data sources,\nand retrieval process.\nChapter 7 explains how to evaluate current RAG methods,\nincluding evaluation, key indicators, and current evaluation\nframeworks Finally, we provided an outlook on the poten-\ntial future research directions for RAG. As a method that"], "retrieved_docs_id": ["977e0e1405", "8fe8499442", "d5d9951817", "e2c2dc1d50", "8cdb0d5ff2"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does NoisyQuant reduce quantization error?\n", "true_answer": "NoisyQuant reduces quantization error by adding a fixed Uniform noisy bias to quantized values.", "source_doc": "multimodal.pdf", "source_id": "b9d5e110ca", "retrieved_docs": ["mechanism. They also conducted an analysis to understand the relationship between quantization\nloss in different layers and feature diversity, exploring a mixed-precision quantization approach\nleveraging the nuclear norm of each attention map and output feature. Additionally, PTQ4ViT [121]\nintroduced the twin uniform quantization method to minimize quantization error on activation val-\nues following softmax and GELU functions, incorporating a Hessian-guided metric to enhance cal-\nibration accuracy. APQ-ViT [122] proposed a unified Bottom-elimination Blockwise Calibration\nscheme to optimize the calibration metric, prioritizing crucial quantization errors and designing a\nMatthew-effect Preserving Quantization for Softmax to maintain the power-law character and at-\ntention mechanism functionality. NoisyQuant [123] proposes to add a fixed Uniform noisy bias\nto quantized values, the quantization error is significantly reduced under certain conditions. This", "VTP[110], PS-ViT[111]\nHybrid Pruning SPViT [112], ViT-Slim [113]\nKnowledge Distillation (\u00a73.3)Homomorphic KDDeiT [114], TinyViT [115], m2mKD [116],\nDeiT-Tiny [117], MiniViT [118]\nHeteromorphic KD DearKD [119], CiT [120]\nQuantization (\u00a73.4)Post-Training QuantizationPTQ4ViT [121], APQ-ViT [122],\nNoisyQuant [123]\nQuantization-Aware TrainingQuantformer [124] Bit-shrinking [125],\nQ-ViT [126], TerViT [127], BiViT [128],\nPackQViT [129], BinaryViT [130]\nHardware-Aware Quantization GPUSQ-ViT[131], Auto-ViT-Acc [132]\nFigure 9: Organization of efficient vision advancements.\n10", "Figure 2: Comparing the error of pruning and quantization for a student-t distribution, simulating\nthe presence of significant outliers. We plot the results for different magnitudes of the outliers, as\nper the kurtosis on the x-axis. (left) the pruning error, which does not change under the presence of\nmore severe outliers. (middle) the quantization SNR, which is reduced greatly when outliers increase\n(right) the trade-off regions where quantization and pruning are better.\nan MSE measure. Both are often employed to analyze the sensitivity of neural network layers to\nquantization, and they are theoretically well-founded to correlate with network performance [ 38,45].\n3.1 Quantization error\nFor quantization, we consider symmetric uniform quantization, which is also called integer quan-\ntization. Given a bit-width band the scale \u03b4, the grid nodes are defined as qi=\u03b4i, i\u2208\n{\u22122b, . . . , 0,2b\u22121}. The quantization operation rounding-to-nearest Q(w)and the corresponding", "a symmetric k-bit quantization is that this approach does not have an exact representation of zero,\nwhich is an important property to quantize padding and other zero-valued elements with no error. To\n4", "branches. Here, we brie\ufb02y discuss each branch, and we\nrefer the interested readers to [197] for more details.\na) Quantization Error Minimization: The \ufb01rst\nbranch of solutions aims to minimize the quantization\nerror, i.e., the gap between the real values and the\nquantized values [ 19,34,62,103,151,158,164,169,\n178,218,248]. Instead of using a single binary matrix\nto represent real-value weights/activations, HORQ [ 151]\nand ABC-Net [ 158] use a linear combination of multiple\nbinary matrices, i.e., W\u2248\u03b11B1+\u00b7\u00b7\u00b7+\u03b1MBM, to\nreduce the quantization error. Inspired by the fact that\nbinarizing the activations reduces their representational\ncapability for the succeeding convolution block, [ 178]\nand [ 34] show that binarization of wider networks (i.e.,\nnetworks with larger number of \ufb01lters) can achieve a\ngood trade-off between the accuracy and the model size.\nb) Improved Loss function: Another branch of\nworks focuses on the choice of loss function [ 48,98,"], "retrieved_docs_id": ["b9d5e110ca", "8a087225e4", "19d7216008", "11f6d3c8fa", "4aee61c096"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How is the ChipNeMo chat model aligned with queries in the chip design domain?\n", "true_answer": "The ChipNeMo chat model is aligned with queries in the chip design domain by using a general-purpose chat instruction dataset and a small amount of domain-specific instruction datasets. This alignment is further improved by adding a small amount of task-specific instruction data.", "source_doc": "ChipNemo.pdf", "source_id": "411c489c58", "retrieved_docs": ["We use largely publicly available general-purpose chat in-\nstruction datasets for multi-turn chat together with a small\namount of domain-specific instruction datasets to perform\nalignment on the ChipNeMo foundation model, which pro-\nduces the ChipNeMo chat model. We observe that align-\nment with a general purpose chat instruction dataset is\nadequate to align the ChipNeMo foundation models with\nqueries in the chip design domain. We also added a small\namount of task-specific instruction data, which further im-\nproves the alignment. We trained multiple ChipNeMo foun-\ndation and chat models based on variants of LLaMA2 mod-\nels used as the base foundation model.\nTo improve performance on the engineering assistant chat-\nbot application, we also leverage Retrieval Augmented Gen-\neration (RAG). RAG is an open-book approach for giving\nLLMs precise context for user queries. It retrieves rele-\nvant in-domain knowledge from its data store to augment", "ChipNeMo: Domain-Adapted LLMs for Chip Design\n2Domain -Adaptive\nPretraining\n24B tokens of chip \ndesign docs/code\nThousands GPU hrs\nModel\nAlignmen t\n56K/128K \n(SteerLM /SFT)  insts\n+ 1.4K task insts\n100+ GPU hrsFoundation Models\nLLaMA2 \n(7B, 13B, 70B) \nChipNeMo \nChat Models\n(7B, 13B, 70B)ChipNeMo \nFoundation Models\n(7B, 13B, 70B)Pretraining\nTrillions tokens of \ninternet data\n105 \u2013 106 GPU hrs\nFigure 1: ChipNeMo Training Flow\n2023)) fine-tuned on additional Verilog data can outperform\nstate-of-art OpenAI GPT-3.5 models. Customizing LLMs\nin this manner also avoids security risks associated with\nsending proprietary chip design data to third party LLMs\nvia APIs. However, it would be prohibitively expensive to\ntrain domain-specific models for every domain from scratch,\nsince this often requires millions of GPU training hours. To\ncost-effectively train domain-specific models, we instead\npropose to combine the following techniques: Domain-", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ndomain-specific data improves the retriever hit rate\nby 30% over a pre-trained state-of-the-art retriever, in\nturn improving overall quality of RAG responses.\nThe paper is organized as follows. Section 2 outlines do-\nmain adaptation and training methods used including the\nadapted tokenizer, DAPT, model alignment, and RAG. Sec-\ntion 3 describes the experimental results including human\nevaluations for each application. Section 4 describes rel-\nevant LLM methods and other work targeting LLMs for\nchip design. Finally, detailed results along with additional\nmodel training details and examples of text generated by the\napplication use-cases are illustrated in the Appendix.\n2. ChipNeMo Domain Adaptation Methods\nChipNeMo implements multiple domain adaptation tech-\nniques to adapt LLMs to the chip design domain. These\ntechniques include domain-adaptive tokenization for chip\ndesign data, domain adaptive pretraining with large corpus", "ChipNeMo: Domain-Adapted LLMs for Chip Design\nFigure 4: Domain-Adapted ChipNeMo Tokenizer Improvements.\n3.1. Domain-Adaptive Tokenization\nWe adapt the LLaMA2 tokenizer (containing 32K tokens) to\nchip design datasets using the previously outlined four-step\nprocess. Approximately 9K new tokens are added to the\nLLaMA2 tokenizer. The adapted tokenizers can improve\ntokenization efficiency by 1.6% to 3.3% across various chip\ndesign datasets as shown in Figure 4. We observe no obvious\nchanges to tokenizer efficiency on public data. Importantly,\nwe have not observed significant decline in the LLM\u2019s accu-\nracy on public benchmarks when using the domain-adapted\ntokenizers even prior to DAPT.\n3.2. Domain Adaptive Pretraining\nFigure 5: Chip Domain Benchmark Result for ChipNeMo.\nFigure 5 presents the outcomes for ChipNeMo models on\nthe AutoEval benchmark for chip design domain (detailed\nin Appendix A.5). Results on open domain academic bench-\nmark results are presented in Appendix A.6. Our research", "the raw dataset, then continued-pretrain a foundation model\nwith the domain-specific data. We call the resulting model a\nChipNeMo foundation model. DAPT is done on a fraction\nof the tokens used in pre-training, and is much cheaper, only\nrequiring roughly 1.5% of the pretraining compute.\nLLM tokenizers convert text into sequences of tokens for\ntraining and inference. A domain-adapted tokenizer im-\nproves the tokenization efficiency by tailoring rules and\npatterns for domain-specific terms such as keywords com-\nmonly found in RTL. For DAPT, we cannot retrain a new\ndomain-specific tokenizer from scratch, since it would make\nthe foundation model invalid. Instead of restricting Chip-\nNeMo to the pre-trained general-purpose tokenizer used\nby the foundation model, we instead adapt the pre-trained\ntokenizer to our chip design dataset, only adding new tokens\nfor domain-specific terms.\nChipNeMo foundation models are completion models whichrequire model alignment to adapt to tasks such as chat."], "retrieved_docs_id": ["411c489c58", "2079d05356", "df0b9868f2", "ac7c0c980b", "273b593026"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How do large language models (LLMs) fail when dealing with real-world production environments?\n", "true_answer": "LLMs may fail to provide accurate answers when the information sought extends beyond the model\u2019s training data or requires the latest data. This limitation poses challenges when deploying generative artificial intelligence in real-world production environments.", "source_doc": "RAG.pdf", "source_id": "b40c0db2f1", "retrieved_docs": ["numerous shortcomings. They often fabricate\nfacts [Zhang et al. , 2023b ]and lack knowledge when\ndealing with specific domains or highly specialized\nqueries [Kandpal et al. , 2023 ]. For instance, when the infor-\nmation sought extends beyond the model\u2019s training data or\nrequires the latest data, LLM may fail to provide accurate\nanswers. This limitation poses challenges when deploying\ngenerative artificial intelligence in real-world production\nenvironments, as blindly using a black-box LLM may not\nsuffice.\nTraditionally, neural networks adapt to specific domains\nor proprietary information by fine-tuning models to param-\neterize knowledge. While this technique yields significant\nresults, it demands substantial computational resources, in-\ncurs high costs, and requires specialized technical expertise,\nmaking it less adaptable to the evolving information land-\nscape. Parametric knowledge and non-parametric knowledge\nplay distinct roles. Parametric knowledge is acquired through", "proach still needs more inspections and exami-\nnations in real-world tasks.\n\u2022Underperforming specialized generation . Although LLMs\nhave learned general language patterns to generate coherent\ntext, their proficiency in generation might be constrained\nwhen dealing with a specialized domain or task. For in-\nstance, a language model that has been trained on gen-\neral web articles may face challenges when generating a\nmedical report which involves many medical jargon and\nmethods. Intuitively, domain knowledge should be critical\nfor model specialization. However, it is not easy to inject\nsuch specialized knowledge into LLMs. As discussed in\nrecent analyses [47, 648], when LLMs are trained to exhibit\nsome specific ability that allows them to excel in some areas,\nthey might struggle in others. Such an issue is related to\ncatastrophic forgetting [649, 650] in training neural networks,\nwhich refers to the conflict phenomenon of integrating new", "ityPrompts, we utilize the Perspective-API47for toxicity\nevaluation.\n\u2022Interaction with environment. To test this ability, we\nselect ALFWorld [609] and WebShop [610] for evaluation,\nwhich simulate real-world scenarios such as household\nand e-commerce environments. We follow the setting of\nReAct [449] that evaluate the 1-shot and 2-shot performance\nof LLMs on WebShop and ALFWorld respectively, and com-\n47. https://perspectiveapi.com/", "several challenges to address when applying LLMs in\nrecommender systems. First, existing studies have shown\nthat LLM-based recommendation models in zero/few-shot\nsettings tend to perform worse than traditional ID-based\nrecommenders [806, 807]. This indicates that LLMs might\nlack an understanding of personalized user behaviors and\ndomain-specific collaborative semantics. Although instruc-\ntion tuning alleviates this issue to some extent [357, 809],\nit can\u2019t fully reduce the semantic gap between LLMs and\nrecommender systems, and also suffers from high tuning\ncosts. Furthermore, recommender systems prioritize min-\nimizing inference latency to enhance users\u2019 experience in\nlow-resourced environments ( e.g., phones), which poses a\nchallenge to LLMs\u2019 inference speed as well as memory\noverhead. Therefore, it is important to explore improvement\ntechniques, such as efficient tuning and quantization meth-\nods, to deploy LLMs efficiently and effectively in real-world", "and correctness of the generated action plans) [694] in the\nbenchmark or directly conducts real-world experiments and\nmeasures the success rate [698], to evaluate such ability. It\nhas been shown that LLMs are capable in interacting with\nthe external environment and generating accurate action\nplans [699]. Recently, several improvement methods have\nbeen proposed to enhance the interaction ability of LLMs,\ne.g., designing code-like prompts [530] and providing real-\nworld grounding [698].\nIn addition, recent work also explores multi-agent col-\nlaboration based on LLMs in simulated environments [533,\n700, 701]. These studies simulate human social behaviors\nby instantiating multiple LLM-based agents with observa-\ntions, planning, and memories in a sandbox environment.\nIn controlled evaluation, the abilities of generative agents\nto search, plan, and think are evaluated by humans in an\ninterview-like manner. Further, they also conduct descrip-"], "retrieved_docs_id": ["b40c0db2f1", "a106c98684", "8eceb086ec", "9dc1f06de8", "c55058702d"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is the process of creating an index for a language model?\n", "true_answer": "The process involves data cleaning and extraction, converting file formats into plain text, dividing the text into smaller chunks, encoding the text into vectors through a language model, and requiring high inference speed for the embedding models.", "source_doc": "RAG.pdf", "source_id": "58f1dd1f89", "retrieved_docs": ["is also summarized as a \u201cRetrieve\u201d-\u201cRead\u201d framework\n[Maet al. , 2023a ].\nIndexing\nThe pipeline for obtaining data from the source and building\nan index for it generally occurs in an offline state. Specifi-\ncally, the construction of a data index involves the following\nsteps:1.Data Indexing: This involves cleaning and extracting the\noriginal data, converting different file formats such as PDF,\nHTML, Word, Markdown, etc., into plain text.\n2.Chunking: This involves dividing the loaded text into\nsmaller chunks. This is necessary because language mod-\nels typically have a limit on the amount of context they can\nhandle, so it is necessary to create as small text chunks as\npossible.\n3. Embedding and Creating Index: This is the process of\nencoding text into vectors through a language model. The re-\nsulting vectors will be used in the subsequent retrieval process\nto calculate the similarity between the vector and the problem\nvector.The embedding models require a high inference speed.", "corporating a retrieval mechanism using the T5 architecture\n[Raffel et al. , 2020 ]in both the pre-training and fine-tuning\nstages. Prior to pre-training, it initializes the encoder-decoder\nLM backbone with a pre-trained T5, and initializes the dense\nretriever with a pre-trained Contriever. During the pre-\ntraining process, it refreshes the asynchronous index every\n1000 steps.\nCOG [Vaze et al. , 2021 ]is a text generation model that for-\nmalizes its generation process by gradually copying text frag-\nments (such as words or phrases) from an existing collection\nof text. Unlike traditional text generation models that select\nwords sequentially, COG utilizes efficient vector search tools\nto calculate meaningful context representations of text frag-\nments and index them. Consequently, the text generation task\nis decomposed into a series of copy and paste operations,\nwhere at each time step, relevant text fragments are sought\nfrom the text collection instead of selecting from an indepen-", "using the generated instructional vision-language\ndataset consisted of 158K unique language-image\ninstruction-following samples. The data collection\nprocess involved creating conversation, detailed\ndescription, and complex reasoning prompts.\nGPT-4 is used to convert image-text pairs into\nappropriate instruction-following format for this", "put forward various methods to optimize the retrieval process.\nIn terms of specific implementation, Advanced RAG can be\nadjusted either through a pipeline or in an end-to-end manner.\nPre-Retrieval Process\n\u2022Optimizing Data Indexing\nThe purpose of optimizing data indexing is to enhance\nthe quality of indexed content. Currently, there are five\nmain strategies employed for this purpose: increasing\nthe granularity of indexed data, optimizing index struc-\ntures, adding metadata, alignment optimization, and\nmixed retrieval.\n1.Enhancing Data Granularity: The objective of\npre-index optimization is to improve text standard-\nization, consistency, and ensure factual accuracy\nand contextual richness to guarantee the perfor-\nmance of the RAG system. Text standardization in-\nvolves removing irrelevant information and special\ncharacters to enhance the efficiency of the retriever.\nIn terms of consistency, the primary task is to elim-\ninate ambiguity in entities and terms, along with", "research. Computing Research Repository , 2021. doi:\n10.48550/arXiv.2106.15590. URL https://arxiv.\norg/abs/2106.15590v2 . Version 2.\nBlack, S., Gao, L., Wang, P., Leahy, C., and Biderman, S.\nGPT-Neo: Large scale autoregressive language modeling\nwith Mesh-TensorFlow. GitHub , 2021. URL https:\n//www.github.com/eleutherai/gpt-neo .\nBlack, S., Biderman, S., Hallahan, E., Anthony, Q., Gao,\nL., Golding, L., He, H., Leahy, C., McDonell, K., Phang,\nJ., et al. GPT-NeoX-20B: An open-source autoregressive\nlanguage model. In Proceedings of BigScience Episode\n#5\u2013Workshop on Challenges & Perspectives in Creating\nLarge Language Models , pp. 95\u2013136, 2022.Blodgett, S. L., Lopez, G., Olteanu, A., Sim, R., and\nWallach, H. Stereotyping Norwegian salmon: An in-\nventory of pitfalls in fairness benchmark datasets. In\nProceedings of the 59th Annual Meeting of the Associa-\ntion for Computational Linguistics and the 11th Interna-\ntional Joint Conference on Natural Language Process-"], "retrieved_docs_id": ["58f1dd1f89", "bff4917f9e", "46eddc362f", "8a71abd00a", "e28fb5cd97"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does the ChipNeMo-70B model perform compared to GPT-4 in engineering assistant chatbot and EDA scripts generation?\n", "true_answer": "The ChipNeMo-70B model outperforms the GPT-4 on two use cases, namely engineering assistant chatbot and EDA scripts generation.", "source_doc": "ChipNemo.pdf", "source_id": "a6c3d05123", "retrieved_docs": ["processor with GPT-4 and GPT-3.5. Their findings showed\nthat although GPT-4 produced relatively high-quality codes,\nit still does not perform well enough at understanding and\nfixing the errors. ChipEDA (He et al., 2023) proposed to use\nLLMs to generate EDA tools scripts. It also demonstrated\nthat fine-tuned LLaMA2 70B model outperforms GPT-4\nmodel on this task.\n5. Conclusions\nWe explored domain-adapted approaches to improve LLM\nperformance for industrial chip design tasks. Our results\nshow that domain-adaptive pretrained models, such as the\n7B, 13B, and 70B variants of ChipNeMo, achieve simi-\nlar or better results than their base LLaMA2 models with\nonly 1.5% additional pretraining compute cost. Our largest\ntrained model, ChipNeMo-70B, also surpasses the much\nmore powerful GPT-4 on two of our use cases, engineering\nassistant chatbot and EDA scripts generation, while show-\ning competitive performance on bug summarization and\nanalysis. Our future work will focus on further improving", "niques: domain-adaptive tokenization, domain-\nadaptive continued pretraining, model alignment\nwith domain-specific instructions, and domain-\nadapted retrieval models. We evaluate these\nmethods on three selected LLM applications for\nchip design: an engineering assistant chatbot,\nEDA script generation, and bug summarization\nand analysis. Our evaluations demonstrate that\ndomain-adaptive pretraining of language models,\ncan lead to superior performance in domain re-\nlated downstream tasks compared to their base\nLLaMA2 counterparts, without degradations in\ngeneric capabilities. In particular, our largest\nmodel, ChipNeMo-70B, outperforms the highly\ncapable GPT-4 on two of our use cases, namely en-\ngineering assistant chatbot and EDA scripts gener-\nation, while exhibiting competitive performance\non bug summarization and analysis. These re-\nsults underscore the potential of domain-specific\ncustomization for enhancing the effectiveness of\nlarge language models in specialized applications.", "uations, more than 70% correctness on the generation\nof simple EDA scripts, and expert evaluation ratings\nabove 5 on a 7 point scale for summarizations and\nassignment identification tasks.\n\u2022 Domain-adapted ChipNeMo models dramatically out-\nperforms all vanilla LLMs evaluated on both multiple-\nchoice domain-specific AutoEval benchmarks and hu-\nman evaluations for applications.\n\u2022Using the SteerLM alignment method (Dong et al.,\n2023) over traditional SFT improves human evaluation\nscores for the engineering assistant chatbot by 0.62\npoints on a 7 point Likert scale.\n\u2022SFT on an additional 1.4Kdomain-specific instruc-\ntions significantly improves the model\u2019s proficiency at\ngenerating correct EDA tool scripts by 18%.\n\u2022Domain-adaptive tokenization reduce domain data to-\nken count by up to 3.3%without hurting effectiveness\non applications.\n\u2022Fine-tuning our ChipNeMo retrieval model with\n2", "scores. RAG improves ChipNeMo-70B-Steer, GPT-4, and\nLLaMA2-70b-Chat by 0.56, 1.68, and 2.05, respectively.\nEven when RAG misses, scores are generally higher than\nwithout using retrieval. The inclusion of relevant in-domain\ncontext still led to improved performance, as retrieval is not\na strictly binary outcome. Furthermore, while ChipNeMo-\n70B-SFT outperforms GPT4 by a large margin through\ntraditional supervised fine-tuning, applying SteerLM meth-\nods (Wang et al., 2023) leads to further elevated chatbot\nratings. We refer readers to the complete evaluation results\nin Appendix A.9.\n3.6. EDA Script Generation\nIn order to evaluate our model on the EDA script generation\ntask, we created two different types of benchmarks. The first\nis a set of \u201cEasy\u201d and \u201cMedium\u201d difficulty tasks (1-4 line\nsolutions) that can be evaluated without human intervention\nby comparing with a golden response or comparing the\ngenerated output after code execution. The second set of", "Bard, etc.) and open-source (Vicuna (Chiang et al., 2023),\nLLaMA2 (Touvron et al., 2023), etc.) large language mod-\nels (LLM) provide an unprecedented opportunity to help\nautomate these language-related chip design tasks. Indeed,\nearly academic research (Thakur et al., 2023; Blocklove\net al., 2023; He et al., 2023) has explored applications of\nLLMs for generating Register Transfer Level (RTL) code\nthat can perform simple tasks in small design modules as\nwell as generating scripts for EDA tools.\nWe believe that LLMs have the potential to help chip de-\nsign productivity by using generative AI to automate many\nlanguage-related chip design tasks such as code generation,\nresponses to engineering questions via a natural language\ninterface, analysis and report generation, and bug triage. In\nthis study, we focus on three specific LLM applications: an\nengineering assistant chatbot for GPU ASIC and Architec-\nture design engineers, which understands internal hardware"], "retrieved_docs_id": ["e6b9ba907a", "a6c3d05123", "c7d05c4b43", "af6e8c3fb2", "f23b3625e0"], "reranker_type": "None", "search_type": "text", "rr": 0.5, "hit": 1}, {"question": "How is LLM performance used in reinforcement learning for a rewriter module?\n", "true_answer": "LLM performance is used as a reward in reinforcement learning for a rewriter module, allowing the rewriter to adjust retrieval queries and improve the downstream task performance of the reader.", "source_doc": "RAG.pdf", "source_id": "79cd640612", "retrieved_docs": ["Retrieve-Read process, utilizing LLM performance as a\nreward in reinforcement learning for a rewritter module.\nThis allows the rewritter to adjust retrieval queries, im-\nproving the downstream task performance of the reader.\nSimilarly, modules can be selectively replaced in ap-\nproaches like Generate-Read [Yuet al. , 2022 ], where the\nLLM generation module replaces the retrieval module.", "igate alignment issues. PRCA [Yang et al. , 2023b ]lever-\naged reinforcement learning to train a context adapter\ndriven by LLM rewards, positioned between the re-\ntriever and generator. It optimizes the retrieved in-\nformation by maximizing rewards in the reinforcement\nlearning phase within the labeled autoregressive pol-\nicy. AAR [Yuet al. , 2023b ]proposed a universal plu-\ngin that learns LM preferences from known-source\nLLMs to assist unknown or non-co-finetuned LLMs.\nRRR [Maet al. , 2023a ]designed a module for rewriting\nqueries based on reinforcement learning to align queries\nwith documents in the corpus.\n\u2022Validation Module: In real-world scenarios, it is notalways guaranteed that the retrieved information is reli-\nable. Retrieving irrelevant data may lead to the occur-\nrence of illusions in LLM. Therefore, an additional val-\nidation module can be introduced after retrieving docu-\nments to assess the relevance between the retrieved doc-", "2018; Christiano, 2022; Uesato et al., 2022).6. Human performance on a task isn\u2019t an\nupper bound on LLM performance\nWhile LLMs are trained primarily to imitate human writing\nbehavior, they can at least potentially outperform humans on\nmany tasks. This is for two reasons: First, they are trained\non far more data than any human sees,4giving them much\nmore information to memorize and potentially synthesize.\nIn addition, they are often given additional training using\nreinforcement learning before being deployed (Stiennon\net al., 2020; Ouyang et al., 2022; Bai et al., 2022a), which\ntrains them to produce responses that humans \ufb01nd helpful\nwithout requiring humans to demonstrate such helpful be-\nhavior. This is analogous to the techniques used to produce\nsuperhuman performance at games like Go (Silver et al.,\n2016). Concretely, LLMs appear to be much better than\nhumans at their pretraining task of predicting which word is\nmost likely to appear after some seed piece of text (Shlegeris", "ing fuzzy string matching in the two datasets and inspecting the closest matches manually.\nFurthermore, we note that our model is only trained with cross-entropy loss (supervised learning)\nwithout relying on reinforcement learning from human feedback (RLHF). This calls for further\ninvestigations of the tradeoffs of simple cross-entropy loss and RLHF training. We hope that QLORA\nenables such analysis at scale, without the need for overwhelming computational resources.\n7 Related Work\nQuantization of Large Language Models Quantization of LLMs has largely focused on quanti-\nzation for inference time. Major approaches for preserving 16-bit LLM quality focus on managing\noutlier features (e.g., SmoothQuant [ 66] and LLM.int8() [ 14]) while others use more sophisticated\ngrouping methods [ 44,69]. Lossy quantization approaches study the trade-offs for regular round-\ning [ 13,71,47] or how to optimize rounding decisions to improve quantization precision [ 18].", "data[Wang et al. , 2022a ].\n\u2022Extra Generation Module: In retrieved content, re-\ndundancy and noise are common issues. Instead of di-\nrectly retrieving from a data source, the Extra Gener-\nation Module leverages LLM to generate the required\ncontext [Yuet al. , 2022 ]. Content generated by LLM is\nmore likely to contain relevant information compared to\ndirect retrieval."], "retrieved_docs_id": ["79cd640612", "8d0a82337c", "0384513a85", "ea8b2b9c02", "3ed835a82b"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does IRCoT use retrieval in its thought chain?\n", "true_answer": "IRCoT retrieves documents for each generated sentence, introducing retrieval at every step of the thought chain.", "source_doc": "RAG.pdf", "source_id": "89c7fd1852", "retrieved_docs": ["ITER-RETGEN [Shao et al. , 2023 ]collaboratively utilizes\n\u201dretrieval-enhanced generation\u201d and \u201dgeneration-enhanced\nretrieval\u201d for tasks requiring reproduction of information.\nThat is, the model uses the content needed to complete the\ntask to respond to the input task, and these target contents\nserve as the information context for retrieving more relevant\nknowledge. This helps to generate better responses in another\niteration.\nIRCoT [Trivedi et al. , 2022 ]also explores retrieving docu-\nments for each generated sentence, introducing retrieval at\nevery step of the thought chain. It uses CoT to guide the re-\ntrieval and uses the retrieval results to improve CoT, ensuring\nsemantic completeness.\nAdaptive Retrieval\nIndeed, the RAG methods described in the previous two\nsections follow a passive approach where retrieval is prior-", "54\nAnswer the following mathematical reasoning questions:\nQ:    S am has 12 marbles. He gives 1/4 of them to his sister. \nHow many marbles does Sam have left?N x If a rectangle has a length of 6 cm and a width of 3 cm, \nwhat is the perimeter of the rectangle?\nFor a rectangle, add up the length and width and double it. So, the perimeter of this rectangle is (6 + 3) x 2 = 18 cm.\nThe answer is 18 cm.Q:\nA:\nLLM A:The answer is 9.A: He gives (1 / 4) x 12 = 3 marbles. \nSoSam is left with 12 \u2013 3 = 9 marbles. \nThe answer is 9.\n:Chain -of-Thought :Task description :Demonstration :QueryIn-Context Learning Chain -of-Thought Prompting\nQ:\nA:\nQ:\nA:Answer the following mathematical reasoning questions:\nQ:     Sam has 12 marbles. He gives 1/4 of them to his sister. \nHow many marbles does Sam have left?NxThe answer is 8.\nIf a rectangle has a length of 6 cm and a width of 3 cm, what is the perimeter of the rectangle?", "the prompt. Two example images from WebSRC are shown in Appendix C.3. Following the original\npaper [CZC+21], we use exact match (EM) and F1 scores as our evaluation metrics.\n4.4.2 Results\nThe experimental results are summarized in Table 8. We observe that KOSMOS -1outperforms the\nLLM , indicating that KOSMOS -1can bene\ufb01t from the layout and style information of web pages in\nimages. In addition, we evaluate the performance of KOSMOS -1without the extracted text in the\nprompt. It shows that extracted text has a contribution of +12.0/20.7 EM/F1 to KOSMOS -1, indicating\nthat the bene\ufb01t from modeling images does not sacri\ufb01ce its language abilities.\nModels EM F1\nUsing extracted text\nLLM 7.6 17.9\nKOSMOS -1 15.8 31.3\nWithout using extracted text\nKOSMOS -1 3.8 10.6\nTable 8: Zero-shot performance on WebSRC task. We report exact match (EM) and F1 scores.\n4.5 Multimodal Chain-of-Thought Prompting\nChain-of-thought prompting [ WWS+22] allows large language models to generate a series of rea-", "The cafeteria had 23 apples originally. They used 20 to make lunch. So they had 23 - 20 = 3. They bought 6 more apples, so they have 3 + 6 = 9. The answer is 9.Chain of thought promptingQ: Roger has 5 tennis balls. He buys 2 more cans of tennis balls. Each can has 3 tennis balls. How many tennis balls does he have now? A: The answer is 11.\nThe answer is 50.Input:\nModel \noutput:Standard promptingInput:\nModel \noutput:\nQ: The cafeteria had 23 apples. If they used 20 to make lunch and bought 6 more, how many apples do they have? A: \u2026Q: The cafeteria had 23 apples. If they used 20 to make lunch and bought 6 more, how many apples do they have? A:\u2026\nFigure 8: Chain of thought prompting allows language models to better perform multi-step reasoning tasks\nsuch as math word problems.\nSeveral recent papers have shown that large language models can achieve signi\ufb01cant accuracy improvements\nby generating intermediate reasoning steps before generating the \ufb01nal answer (Nye et al., 2021; Cobbe", "then to tackle complex question-answering and reasoning tasks.\nimprove the performance in complex tasks. Motivated by chain-of-thought prompting, we investigate\na multimodal chain-of-thought prompting using KOSMOS -1. As illustrated in Figure 5, we break\ndown perception-language tasks into two steps. In the \ufb01rst stage, given an image, we use a prompt to\nguide the model to generate a rationale. The model is then fed the rationale and a task-aware prompt\nto produce the \ufb01nal results.\n4.5.1 Evaluation Setup\nWe evaluate the ability of multimodal chain-of-thought prompting on the Rendered SST-2. We use the\nprompt \u201cIntroduce this picture in detail:\u201d to generate the content in the picture as the rationale. Then,\nwe use the prompt \u201c{rationale} Question: what is the sentiment of the opinion? Answer: {answer}\u201d\nto predict the sentiment, where the answer is either positive or negative.\n4.5.2 Results\nWe conduct experiments to evaluate the performance of the multimodal chain-of-thought prompting."], "retrieved_docs_id": ["89c7fd1852", "43fab9283b", "51a5e73874", "deff91aa50", "36a0a3a766"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How is the IT stage typically conducted in the context of Multi-Task Language Model Learning?\n", "true_answer": "The IT stage is typically conducted within the paradigm of Supervised Fine-Tuning (SFT).", "source_doc": "multimodal.pdf", "source_id": "0806fe2e1a", "retrieved_docs": ["multi-task \ufb01ne-tuning rather than for in-context learning without weight updates.\nAnother approach to increasing generality and transfer-learning capability in language models is multi-task learning\n[Car97 ], which \ufb01ne-tunes on a mixture of downstream tasks together, rather than separately updating the weights for\neach one. If successful multi-task learning could allow a single model to be used for many tasks without updating the\nweights (similar to our in-context learning approach), or alternatively could improve sample ef\ufb01ciency when updating\nthe weights for a new task. Multi-task learning has shown some promising initial results [ LGH+15,LSP+18] and\nmulti-stage \ufb01ne-tuning has recently become a standardized part of SOTA results on some datasets [ PFB18 ] and pushed\nthe boundaries on certain tasks [ KKS+20], but is still limited by the need to manually curate collections of datasets and", "Exploring the Limits of Transfer Learning\nuni\ufb01ed text-to-text framework, \u201cmulti-task learning\u201d simply corresponds to mixing data sets\ntogether. It follows that we can still train on unlabeled data when using multi-task learning\nby treating the unsupervised task as one of the tasks being mixed together. In contrast,\nmost applications of multi-task learning to NLP add task-speci\ufb01c classi\ufb01cation networks or\nuse di\ufb00erent loss functions for each task (Liu et al., 2019b).\nAs pointed out by Arivazhagan et al. (2019), an extremely important factor in multi-task\nlearning is how much data from each task the model should be trained on. Our goal is to not\nunder- or over-train the model\u2014that is, we want the model to see enough data from a given\ntask that it can perform the task well, but not to see so much data that it memorizes the\ntraining set. How exactly to set the proportion of data coming from each task can depend on", "language models. Typically, LLMs encompass a range of transformer-based models that are ex-\ntensively trained on vast textual datasets. Prominent examples include GPT-3 [ 8], PaLM [ 18],\nLLaMA [ 99], and GPT-4 [ 82]. Through scaling both data volume and model capacity, LLMs\ndemonstrate notable emergent capabilities, including In-Context Learning[ 8], Chain-of-Thought\nprompting[107] and instruction following[86], among others.\nThe characteristics and behaviors of LLMs are intricately linked to their training processes. LLMs\ntypically undergo three primary training stages: pre-training, Supervised Fine-Tuning (SFT), and\nReinforcement Learning from Human Feedback (RLHF). Below, we provide a concise overview of\neach stage to facilitate comprehension.\nPre-trianing. Pre-training serves as a fundamental phase in the learning process of LLMs [ 134].\nDuring this stage, language models engage in autoregressive prediction, wherein they predict the", "SPHINX-X are activated. Cobra[13] also argues that the initial phase of pre-alignment may not\nbe requisite, with the model remaining underfitted even post-finetuning. Consequently, it discards\nthe pre-alignment stage, opting instead to directly finetune the entire SLM backbone along with the\nprojector. TinyGPT-V[28] training process consists of four stages: an initial pre-training stage for\nvision-language understanding, a second stage for refining image modality processing, a third stage\nfor human-like learning through fine-tuning, and a fourth stage for multi-task learning to enhance\nits conversational abilities as a chatbot.\n5.4 Parameter Efficient Transfer Learning\nSeveral studies adopt Parameter-Efficient Fine-Tuning (PEFT) techniques for transfer learning, like\nLoRA [161], to safeguard against the loss of pre-trained knowledge. Efficient Attention Skipping\n(EAS) module[52] proposes a novel parameter and computation-efficient tuning method for MLLMs", "the dimensionality is scaled appropriately to the task size. Note that in our case we treat\nGLUE and SuperGLUE each as a single \u201ctask\u201d by concatenating their constituent data\nsets, so although they comprise some low-resource data sets the combined data set is large\nenough that it necessitates a large value of d. We found that gradual unfreezing caused\na minor degradation in performance across all tasks, though it did provide some speedup\nduring \ufb01ne-tuning. Better results may be attainable by more carefully tuning the unfreezing\nschedule.\n3.5.2. Multi-task Learning\nSo far, we have been pre-training our model on a single unsupervised learning task before\n\ufb01ne-tuning it individually on each downstream task. An alternative approach, called \u201cmulti-\ntask learning\u201d (Ruder, 2017; Caruana, 1997), is to train the model on multiple tasks at a\ntime. This approach typically has the goal of training a single model that can simultaneously"], "retrieved_docs_id": ["4e6d19e6c4", "73fb6ecc71", "0d2806c1d5", "374490e448", "6b844b4870"], "reranker_type": "None", "search_type": "text", "rr": 0.0, "hit": 0}, {"question": "What is the computational complexity of State Space Models (SSMs) during inference?\n", "true_answer": "State Space Models (SSMs) offer near-linear computational complexity during inference.", "source_doc": "multimodal.pdf", "source_id": "bb2e9ee3f0", "retrieved_docs": ["Figure 13: The elements(left) block(middle) and architecture(right) in RWKV [151].\nThis approach parallelizes computations during training and maintains constant computational and\nmemory complexity during inference.\nState Space Models (SSMs) [152] can be formulated as a type of RNN for efficient autoregressive\ninference and have emerged as a promising alternative to attention mechanisms, offering near-linear\ncomputational complexity compared to the quadratic complexity of attention. SSMs are formulated\nas x\u2019(t) = Ax(t) + Bu(t), y(t) = Cx(t) + Du(t), mapping a single-dimension input signal u(t) to an N-\ndimension latent state x(t) before projecting it to a single-dimension output signal y(t), with A, B, C,\nand D being parameters learned by gradient descent [152]. Several techniques have been proposed\nto enhance SSMs, such as the Structured State Space sequence model (S4) [152], which refines\nSSMs by conditioning matrix A with a low-rank correction, and the Diagonal State Space (DSS)", "SSMs by conditioning matrix A with a low-rank correction, and the Diagonal State Space (DSS)\nmodel [153], which proposes fully diagonal parameterization of state spaces for greater efficiency.\nH3 stacks two SSMs to interact with their output and input projection, bridging the gap between\nSSMs and attention while adapting to modern hardware. Mamba [77], a selective state space model,\nhas been introduced as a strong competitor to the Transformer architecture in large language models.\nMamba incorporates a selection mechanism to eliminate irrelevant data and develops a hardware-\naware parallel algorithm for recurrent operation. This results in competitive performance compared\nto LLMs of the same capacity, with faster inference speeds that scale linearly with time and con-\nstant memory usage. In conclusion, State Space Models offer significant potential as an alternative\nto attention mechanisms by providing near-linear computational complexity and effectively captur-", "of functions \u03b3\u03b8is a design choice with a signi\ufb01cant impact on the expressivity and computational complexity\nof the layer.\nOne choice of implicit parametrization is to select has the response function of a linear state-space model\n(SSM) (Chen, 1984), described by the \ufb01rst-order di\ufb00erence equation:\nxt+1=Axt+Butstate equation\nyt=Cxt+Dutoutput equation\nHere, the convenient choice of x0= 0renders the input-output map to a simple convolution\nyt=t\u2211\nn=0(\nCAt\u2212nB+D\u03b4t\u2212n)\nun\nwhere\u03b4tdenotes the Kronecker delta. We can then identify the \ufb01lter has\nt\u21a6\u2192ht={\n0 t<0\nCAtB+D\u03b4tt\u22650\nwhere the entries of A,B,Cand Dare the learned parameters of the \ufb01lter. In terms of layer design, the\ndegrees of freedom of SSMs are the dimension of the state and the structure of the matrices. SSMs are\na canonical example of how long convolutions with sub-linear parameter counts can improve deep learning\nmodels for long sequences (Gu et al., 2020, 2021). Other implicit approaches include parametrizing \ufb01lters", "insufficient for length generalization in the context\nof reasoning tasks. Instead, they propose combin-\ning in-context learning and scratchpad/chain-of-\nthought reasoning to enable LLMs to generalize to\nunseen sequence lengths in- and out-of-distribution,\nwith performance scaling with model size. The au-\nthors report that fine-tuning can further improve\nmodel performance dependent on the task perfor-\nmance of the baseline.\nTransformer Alternatives While Transformers\nare the dominant paradigm in LLMs today due to\ntheir strong performance, several more efficient\nalternative architectures exist. One line of work\ntries to replace the attention mechanism using state\nspace models (SSMs), which offer near-linear com-\nputational complexity w.r.t. the sequence length.\nDao et al. [108] investigate the weaknesses of state\nspace models (SSMs) in language modeling and\nfind that existing approaches struggle with recall-\ning previous tokens and comparing tokens in the", "ProjectDiscretize\ud835\udc65!\u210e!\"#\u210e!\ud835\udc66!\ud835\udc34\ud835\udc36!\ud835\udc35!Selection MechanismGPU SRAMGPU HBM\u2206!Selective State Space ModelwithHardware-aware State ExpansionFigure 1: ( Overview .) Structured SSMs independently map each channel (e.g. /u1D437= 5) of an input xto output /u1D466through a higher\ndimensional latent state /uni210E(e.g./u1D441= 4). Prior SSMs avoid materializing this large e\ufb00ective state ( /u1D437/u1D441, times batch size /u1D435and sequence\nlength /u1D43F) through clever alternate computation paths requiring time-invariance: the .\u2206,A,B,C)parameters are constant across\ntime. Our selection mechanism adds back input-dependent dynamics, which also requires a careful hardware-aware algorithm to\nonly materialize the expanded states in more e\ufb03cient levels of the GPU memory hierarchy.\n2 State Space Models\nStructured state space sequence models (S4) are a recent class of sequence models for deep learning that are"], "retrieved_docs_id": ["bb2e9ee3f0", "85b5cac71b", "4afd597e85", "9e5f877b03", "ac9544cf55"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How did the domain-adapted retrieval model perform compared to Sentence Transformer and e5small unsupervised in the Specs category?\n", "true_answer": "The domain-adapted model performed 2x better than the original e5small unsupervised model and 30% better than the sentence transformer in the Specs category.", "source_doc": "ChipNemo.pdf", "source_id": "79a9ff88c8", "retrieved_docs": ["retrieval. It includes about 1.8K documents, which were\nsegmented into 67K passages, each about 512 characters.\nFirst, we compare our domain adapted retrieval model with\nSentence Transformer (Reimers & Gurevych, 2019) and\ne5small unsupervised (Wang et al., 2022) on each category.\nEach model fetches its top 8 passages from the data store.\nAs shown in Figure 6, our domain-adapted model performed\n2x better than the original e5small unsupervised model and\n30% better than sentence transformer.\nFigure 6: Retrieval Model Accuracy Comparison\nThe queries in the Specs category are derived directly from\npassages in the documents, so their answers are often nicely\ncontained in a concise passage and clearly address the query.\nOn the other hand, the queries of the Testbench and Build\ncategories are not directly derived from passages, so their\nanswers were often not as apparent in the fetched passages\nand required more context (see Appendix A.8 for detailed", "the prompt together with the question, which grounds the\nLLM to produce more accurate answers. We find that using\na domain adapted language model for RAG significantly\nimproves answer quality on our domain specific questions.\nAlso, we find that fine-tuning an off-the-shelf unsupervised\npre-trained dense retrieval model with a modest amount\nof domain specific training data significantly improves re-\ntrieval accuracy. Our domain-adapted RAG implementation\ndiagram is illustrated on Figure 3.\nFigure 3: RAG Implementation Variations\nWe created our domain adapted retrieval model by fine-\ntuning the e5small unsupervised model (Wang et al., 2022)\nwith 3000 domain specific auto-generated samples using the\nTevatron framework (Gao et al., 2022). We refer readers to\nthe details on the sample generation and training process in\nAppendix A.8.\nEven with the significant gains that come with fine-tuning a\nretrieval model, the fact remains that retrieval still struggles", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ncost of pretraining a foundational model from scratch.\nModel Size Pretraining DAPT SFT\n7B 184,320 2,620 90\n13B 368,640 4,940 160\n70B 1,720,320 20,500 840\nTable 1: Training cost of LLaMA2 models in A100 GPU hours.\nPretraining cost from (Touvron et al., 2023).\n3.5. RAG and Engineering Assistant Chatbot\nWe created a benchmark to evaluate the performance of\ndesign chat assistance, which uses the RAG method. This\nbenchmark includes 88 questions in three categories: archi-\ntecture/design/verification specifications (Specs), testbench\nregression documentation (Testbench), and build infrastruc-\nture documentation (Build). For each question, we specify\nthe golden answer as well as the paragraphs in the design\ndocument that contains the relevant knowledge for the an-\nswer. These questions are created by designers manually\nbased on a set of design documents as the data store for\nretrieval. It includes about 1.8K documents, which were", "propose to combine the following techniques: Domain-\nAdaptive Pre-Training (DAPT) (Gururangan et al., 2020) of\nfoundation models with domain-adapted tokenizers, model\nalignment using general and domain-specific instructions,\nand retrieval-augmented generation (RAG) (Lewis et al.,\n2021b) with a trained domain-adapted retrieval model.\nAs shown in Figure 1, our approach is to start with a base\nfoundational model and apply DAPT followed by model\nalignment. DAPT, also known as continued pretraining with\nin-domain data, has been shown to be effective in areas such\nas biomedical and computer science publications, news, and\nreviews. In our case, we construct our domain-specific pre-\ntraining dataset from a collection of proprietary hardware-\nrelated code (e.g. software, RTL, verification testbenches,\netc.) and natural language datasets (e.g. hardware specifi-\ncations, documentation, etc.). We clean up and preprocess\nthe raw dataset, then continued-pretrain a foundation model", "niques: domain-adaptive tokenization, domain-\nadaptive continued pretraining, model alignment\nwith domain-specific instructions, and domain-\nadapted retrieval models. We evaluate these\nmethods on three selected LLM applications for\nchip design: an engineering assistant chatbot,\nEDA script generation, and bug summarization\nand analysis. Our evaluations demonstrate that\ndomain-adaptive pretraining of language models,\ncan lead to superior performance in domain re-\nlated downstream tasks compared to their base\nLLaMA2 counterparts, without degradations in\ngeneric capabilities. In particular, our largest\nmodel, ChipNeMo-70B, outperforms the highly\ncapable GPT-4 on two of our use cases, namely en-\ngineering assistant chatbot and EDA scripts gener-\nation, while exhibiting competitive performance\non bug summarization and analysis. These re-\nsults underscore the potential of domain-specific\ncustomization for enhancing the effectiveness of\nlarge language models in specialized applications."], "retrieved_docs_id": ["79a9ff88c8", "ad55562468", "7313e64a59", "926168a67f", "a6c3d05123"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is a significant challenge in the practical application of multimodal large language models?\n", "true_answer": "The phenomenon of hallucination is a significant challenge in the practical application of multimodal large language models.", "source_doc": "hallucination.pdf", "source_id": "114f3dada8", "retrieved_docs": ["Based on powerful large language models, multimodal large language models demonstrate remark-\nable performance across various multimodal tasks. However, the phenomenon of hallucination\npresents a significant challenge to the practical applications of MLLMs, giving rise to undeniable\nconcerns about safety, reliability, and trustworthiness. In this comprehensive survey, we conducted\na thorough examination of hallucinations within multimodal large language models, focusing\non their underlying causes, evaluation metrics, benchmarks, and mitigation methods. Despite\nconsiderable progress, hallucination remains a complex and persistent concern that warrants ongo-\ning investigation. The challenge of hallucination in multimodal large language models remains\ncompelling, requiring continuous scrutiny and innovation. In light of these challenges, we have\noutlined several promising future directions in this burgeoning domain. Through navigating the", "Hallucination of Multimodal Large Language Models: A\nSurvey\nZECHEN BAI, Show Lab, National University of Singapore, Singapore\nPICHAO WANG, Amazon Prime Video, USA\nTIANJUN XIAO, AWS Shanghai AI Lab, China\nTONG HE, AWS Shanghai AI Lab, China\nZONGBO HAN, Show Lab, National University of Singapore, Singapore\nZHENG ZHANG, AWS Shanghai AI Lab, China\nMIKE ZHENG SHOU\u2217,Show Lab, National University of Singapore, Singapore\nThis survey presents a comprehensive analysis of the phenomenon of hallucination in multimodal large\nlanguage models (MLLMs), also known as Large Vision-Language Models (LVLMs), which have demonstrated\nsignificant advancements and remarkable abilities in multimodal tasks. Despite these promising developments,\nMLLMs often generate outputs that are inconsistent with the visual content, a challenge known as hallucination,\nwhich poses substantial obstacles to their practical deployment and raises concerns regarding their reliability", "Figure 2: Organization of efficient multimodal large language models advancements.\n\u2022 Training surveys the landscape of training methodologies that are pivotal in the devel-\nopment of efficient MLLMs. It addresses the challenges associated with the pre-training\nstage, instruction-tuning stage, and the overall training strategy for state-of-the-art results.\n\u2022 Data and Benchmarks evaluates the efficiency of datasets and benchmarks used in the\nevaluation of multimodal language models. It assesses the trade-offs between dataset size,\ncomplexity, and computational cost, while advocating for the development of benchmarks\nthat prioritize efficiency and relevance to real-world applications.\n\u2022 Application investigates the practical implications of efficient MLLMs in various do-\nmains, emphasizing the balance between performance and computational cost. By ad-\ndressing resource-intensive tasks such as high-resolution image understanding and medical\n3", "Efficient Multimodal Large Language Models:\nA Survey\nYizhang Jin1,2,*, Jian Li1,*, Yexin Liu3, Tianjun Gu4, Kai Wu1, Zhengkai Jiang1,\nMuyang He3, Bo Zhao3, Xin Tan4, Zhenye Gan1, Yabiao Wang1, Chengjie Wang1,\nLizhuang Ma2\n1Youtu Lab, Tencent,2SJTU,3BAAI,4ECNU\nAbstract\nIn the past year, Multimodal Large Language Models (MLLMs) have demon-\nstrated remarkable performance in tasks such as visual question answering, vi-\nsual understanding and reasoning. However, the extensive model size and high\ntraining and inference costs have hindered the widespread application of MLLMs\nin academia and industry. Thus, studying efficient and lightweight MLLMs\nhas enormous potential, especially in edge computing scenarios. In this survey,\nwe provide a comprehensive and systematic review of the current state of effi-\ncient MLLMs. Specifically, we summarize the timeline of representative effi-\ncient MLLMs, research state of efficient structures and strategies, and the appli-", "Datasets Format Examples\nText <s>KOSMOS -1can perceive multimodal input, learn in context, and gener-\nate output. </s>\nImage-Caption <s> <image> Image Embedding </image> W ALL-E giving potted plant to\nEVE. </s>\nMultimodal <s> <image> Image Embedding </image> This is WALL-E. <image>\nImage Embedding </image> This is EVE. </s>\nTable 21: The examples of the data format to train the K OSMOS -1 model.\nC Evaluation\nC.1 Input Format Used for Perception-Language Tasks\nFigure 7 shows how we conduct zero-shot and few-shot evaluations on perception-language tasks.\nMultimodal Large Language Model (MLLM)WALL -E          giving          potted        plant           to            EVE\nWALL -E        giving        potted         plant           to\n(a) Zero -shot learningEmbedding\nImageAn   image    of \n(b) Few -shot learningMultimodal Large Language Model (MLLM)Rubik's Cube\nEmbedding\nImageQuestion: what did \nWALL -E give EVE? \nAnswer: potted plant Embedding\nImageQuestion: What's \nin WALL -E\u2019s"], "retrieved_docs_id": ["114f3dada8", "72dc971633", "542e5c49da", "ac70fcc9f2", "66ac2014df"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How do large language models (LLMs) decide when to search for relevant queries?\n", "true_answer": "LLMs decide to search for a relevant query when they think it is necessary.", "source_doc": "RAG.pdf", "source_id": "8d605d7952", "retrieved_docs": ["itized. This method, which involves querying related doc-\numents and inputting into a LLM based on context, may\nlead to efficiency issues. Adaptive retrieval methods such\nas those introduced by Flare [Jiang et al. , 2023b ]and Self-\nRAG [Asai et al. , 2023b ], optimize the RAG retrieval process,\nenabling the LLM to actively judge the timing and content of\nretrieval. This helps to improve the efficiency and relevance\nof the information retrieved.\nIn fact, the way in which LLM actively uses tools and\nmakes judgments is not originated from RAG but has been\nwidely used in the agents of large models [Yang et al. , 2023c,\nSchick et al. , 2023, Zhang, 2023 ]. The retrieval steps\nof Graph-Toolformer [Zhang, 2023 ]are roughly divided\ninto: LLMs actively use the retriever, Self-Ask and\nDSP[Khattab et al. , 2022 ]try to use few-shot prompts to trig-\nger LLM search queries. When LLMs think it is necessary,\nthey can decide to search for a relevant query to collect the", "lows the decide-retrieve-reflect-read process, introduc-\ning a module for active judgment. This adaptive and\ndiverse approach allows for the dynamic organization of\nmodules within the Modular RAG framework.\n4 Retriever\nIn the context of RAG, the \u201dR\u201d stands for retrieval, serving\nthe role in the RAG pipeline of retrieving the top-k relevant\ndocuments from a vast knowledge base. However, crafting\na high-quality retriever is a non-trivial task. In this chapter,\nwe organize our discussions around three key questions: 1)\nHow to acquire accurate semantic representations? 2) How\nto match the semantic spaces of queries and documents? 3)\nHow to align the output of the retriever with the preferences\nof the Large Language Model ?\n4.1 How to acquire accurate semantic\nrepresentations?\nIn RAG, semantic space is the multidimensional space where\nquery and Document are mapped. When we perform re-\ntrieval, it is measured within the semantic space. If the se-", "they can decide to search for a relevant query to collect the\nnecessary materials, similar to the tool call of the agent.\nWebGPT [Nakano et al. , 2021 ]employs a reinforcement\nlearning framework to automatically train the GPT-3 model\nto use a search engine for text generation. It uses special to-\nkens to perform actions, including querying on a search en-\ngine, scrolling rankings, and citing references. This allows\nGPT-3 to leverage a search engine for text generation.\nFlare [Jiang et al. , 2023b ], on the other hand, automates the\ntiming of retrieval and addresses the cost of periodic docu-\nment retrieval based on the probability of the generated text.\nIt uses probability as an indicator of LLMs\u2019 confidence during\nthe generation process. When the probability of a term falls\nbelow a predefined threshold, the information retrieval sys-\ntem would retrieve references and removes terms with lower\nprobabilities. This approach is designed to handle situations", "scale of LLMs.\nLLM-Enhanced IR Models. As another major research\ndirection, LLMs can be employed to improve existing IR\nmodels ( e.g., small models). A common challenge faced\nby existing IR models is the lack of relevant judgment\nannotation [786, 787]. To tackle this problem, LLMs can be\ninstructed to annotate positive or negative documents for\na given query [788], or to generate corresponding queries\nbased on a set of documents in the corpus by referring to a\nfew demonstrations [789, 790]. In addition to training data\naugmentation, LLM has the potential to improve existing\nIR models by refining the search-oriented informativeness\nof both queries and documents. In IR systems, the in-\nput queries may be constrained by a user\u2019s cognitive and\ncultural competency, making it challenging to accurately\nexpress the real intent, and irrelevant content present in\ndocuments can also impact the relevance evaluation with\nthe query. As a solution, LLM can be utilized to rewrite the", "Kwiatkowski et al., 2019), which contains\nhistorical queries issued to the Google search\nengine, coupled with human-annotated answers\nextracted from Wikipedia. In particular, we take\nthe 2655 queries where the annotated long answer\nis a paragraph (as opposed to a list or a table). We\nuse passages (chunks of at most 100 tokens) from\nWikipedia as documents within our input contexts.\nFor each of the queries, we need a document\nthat contains the answer and k\u22121distractor\ndocuments that do not contain the answer. To\nobtain a document that answers the question, we\nuse the Wikipedia paragraph that contains the\nanswer from the NaturalQuestions annotations.\nTo collect k\u22121distractor documents that do not\ncontain the answer, we use a retrieval system (Con-\ntriever, fine-tuned on MS-MARCO; Izacard et al.,\n2021) to retrieve the k\u22121Wikipedia chunks that\nare most relevant to the query and do not contain\nany of the NaturalQuestions-annotated answers.2,3"], "retrieved_docs_id": ["8d605d7952", "8fe8499442", "b844a74991", "1c54994eed", "275d39fd78"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is one potential application of large language models in GPU ASIC and Architecture design?\n", "true_answer": "One potential application of large language models in GPU ASIC and Architecture design is as an engineering assistant chatbot that understands internal hardware terminology and can assist engineers with their tasks.", "source_doc": "ChipNemo.pdf", "source_id": "f23b3625e0", "retrieved_docs": ["Bard, etc.) and open-source (Vicuna (Chiang et al., 2023),\nLLaMA2 (Touvron et al., 2023), etc.) large language mod-\nels (LLM) provide an unprecedented opportunity to help\nautomate these language-related chip design tasks. Indeed,\nearly academic research (Thakur et al., 2023; Blocklove\net al., 2023; He et al., 2023) has explored applications of\nLLMs for generating Register Transfer Level (RTL) code\nthat can perform simple tasks in small design modules as\nwell as generating scripts for EDA tools.\nWe believe that LLMs have the potential to help chip de-\nsign productivity by using generative AI to automate many\nlanguage-related chip design tasks such as code generation,\nresponses to engineering questions via a natural language\ninterface, analysis and report generation, and bug triage. In\nthis study, we focus on three specific LLM applications: an\nengineering assistant chatbot for GPU ASIC and Architec-\nture design engineers, which understands internal hardware", "of data for pre-training LLMs. To determine both settings, a\npractical way is to first train several small language models\nwith multiple candidate plans and then select a good plan\namong them [59]. Overall, it is more difficult to find a\nsuitable data curriculum. In practice, one can monitor the\nperformance of intermediate model checkpoints on specific\nevaluation benchmarks, and dynamically tune the data mix-\nture and distribution during pre-training. In this process, it\nis also useful to explore the potential relations between data\nsources and model abilities to instruct the design of data\ncurriculum.\n4.2 Architecture\nIn this section, we review the architecture design of LLMs,\ni.e.,mainstream architecture, pre-training objective, and de-\ntailed configuration. Table 5 presents the model cards of\nseveral representative LLMs with public details.\n4.2.1 Typical Architectures\nDue to the excellent parallelizability and capacity, the Trans-", "are scaled by \ud835\udc60, the fraction of nonzero blocks in the block-sparsity mask. However, for small values of \ud835\udc60, we\nwould still need to write the result O2R\ud835\udc41\u0002\ud835\udc51. Therefore the number of HBM accesses is\n\u0398\u0012\n\ud835\udc41\ud835\udc51\u00b8\ud835\udc412\ud835\udc512\n\ud835\udc40\ud835\udc60\u0013\n\u0095\n\u0003\nD.2 Potential Extensions\nWe discuss here a few potential extensions of the IO-aware approach to speed up deep learning training.\nMulti-GPU Attention. Large language models are trained on hundreds or thousands of GPUs, and\none typically splits the attention computation between 4-8 GPUs on the same node [ 77]. This introduces\nanother level of memory hierarchy: beside GPU SRAM and GPU HBM, we also have the HBM of other\n25", "Hallucination of Multimodal Large Language Models: A Survey 9\noverride the visual content. For example, given an image showing a red banana, which is\ncounter-intuitive in the real world, an MLLM may still respond with \"yellow banana\", as\n\"banana is yellow\" is a deep-rooted knowledge in the LLM. Such language/knowledge prior\nmakes the model overlook the visual content and response with hallucination.\n\u2022Weak alignment interface. The alignment interface plays an essential role in MLLMs, as\nit serves as the bridge between the two modalities. A weak alignment interface can easily\ncause hallucinations. One potential cause of a weak alignment interface is data, as discussed\nin earlier sections. Apart from that, the interface architecture itself and training loss design\nalso matter [ 52,77,123]. Recent work [ 52] argues that the LLaVA-like linear projection\ninterface preserves most of the information, but lacks supervision on the projected feature.", "to hardware architecture. This may be particularly useful\nfor FPGA deployment, as one can explore many different\npossible hardware con\ufb01gurations (such as different micro-\narchitectures of multiply-accumulate elements), and then\ncouple this with the NN architecture and quantization\nco-design.\nCoupled Compression Methods: As discussed above,\nquantization is only one of the methods for ef\ufb01cient\ndeployment of NNs. Other methods include ef\ufb01cient\nNN architecture design, co-design of hardware and\nNN architecture, pruning, and knowledge distillation.\nQuantization can be coupled with these other approaches.\nHowever, there is currently very little work exploring\nwhat are the optimal combinations of these methods. For\ninstance, pruning and quantization can be applied together\nto a model to reduce its overhead [ 87,152], and it is\nimportant to understand the best combination of struc-tured/unstructured pruning and quantization. Similarly,\nanother future direction is to study the coupling between"], "retrieved_docs_id": ["f23b3625e0", "57073057c9", "213829ff85", "a1c28916ce", "fabec4ef85"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What are the two types of evaluation instances in VHTest?\n", "true_answer": "The two types of evaluation instances in VHTest are \"open-ended question\" (OEQ) and \"yes/no question\" (YNQ).", "source_doc": "hallucination.pdf", "source_id": "8ef8344de6", "retrieved_docs": ["VHTest [ 46]VHTest categorizes visual properties of objects in an image into 1) individual\nproperties, such as existence, shape, color, orientation, and OCR; and 2) group properties, which\nemerge from comparisons across multiple objects, such as relative size, relative position, and\ncounting. Based on such categorization, the authors further defined 8 visual hallucination modes,\nproviding a very detailed evaluation of hallucination in MLLMs. Furthermore, the collected 1,200\nevaluation instances are divided into two versions: \"open-ended question\" (OEQ) and \"yes/no\nquestion\" (YNQ). Such design enables this benchmark to evaluate both generative and discriminative\ntasks.\nComparison of mainstream models We compare the mainstream MLLMs on some represen-\ntative benchmarks, providing a holistic overview of their performance from different dimensions.\nThe results are shown in Table 2 for generative tasks and Table 3 for discriminative tasks. We", "A thesis are manually written for each group, such that all headlines in the group support the thesis. The\nreiteration dataset is identical to the hand-specified one used by (Buchanan et al., 2021). There are two\ntypes of prompts: the first encourages certain voting behavior (vote Democratic, Republican, or not at all)\nand are targeted toward religious groups (Christians, Muslims, and Jews). The second encourages division\nby targeting Black people and anti-Black racists. For reiteration, we use two training instances, and the\nprompts have 344.581 tokens on for the COVID headlines and 279.135 and for the climate change headlines\non average. For wedging we use no training instances, and the prompts have 123.696 tokens on average. (All\ntokens counts are based on the GPT-2 tokenizer.)\nPre-processing. For reiteration, we preprocess the dataset by randomly selecting two instances to be\ntraining instances for each of the COVID and climate headlines. There is no preprocessing for the wedging", "14 Bai, et al.\nMHaluBench [ 13]This benchmark does not aim to evaluate the MLLMs themselves. Instead, it\nis intentionally designed to evaluate the hallucination detection tools of MLLMs, i.e., judge whether\na tool can successfully detect the hallucination produced by an MLLM. Thus, the benchmark\nconsists of hallucinatory examples. Specifically, the benchmark unifies image-to-text tasks and the\ntext-to-image tasks into one evaluation suite: cross-modal consistency checking. The hallucinatory\nexamples are generated using leading MLLMs and image generation models, such as LLaVA [ 75],\nMiniGPT-4 [ 138], DALL-E2 [ 89], and DALL-E3 [ 6]. During evaluation, the benchmark can be used\nto compare different hallucination detection methods based on their performance. So far, there are\nnot many dedicated hallucination detection methods. This work serves as a basis for this direction.\nVHTest [ 46]VHTest categorizes visual properties of objects in an image into 1) individual", "\u20225 digit addition (5D+) \u2013 Same as 3 digit addition, except uniformly sampled from [0,100000) .\n\u20225 digit subtraction (5D-) \u2013 Same as 3 digit subtraction, except uniformly sampled from [0,100000) .\n\u20222 digit multiplication (2Dx) \u2013 The model is asked to multiply two integers sampled uniformly from [0,100) ,\ne.g. \u201cQ: What is 24 times 42? A: 1008\u201d.\n\u2022One-digit composite (1DC) \u2013 The model is asked to perform a composite operation on three 1 digit numbers,\nwith parentheses around the last two. For example, \u201cQ: What is 6+(4*8)? A: 38\u201d. The three 1 digit numbers\nare selected uniformly on [0,10)and the operations are selected uniformly from {+,-,*}.\nIn all 10 tasks the model must generate the correct answer exactly. For each task we generate a dataset of 2,000 random\ninstances of the task and evaluate all models on those instances.\nFirst we evaluate GPT-3 in the few-shot setting, for which results are shown in Figure 3.10. On addition and subtraction,", "68\non various abilities ( e.g., knowledge utilization and hu-\nman alignment), and thus it is common that they are as-\nsessed with multiple evaluation approaches. In addition\nto benchmark-based evaluation, human-based and model-\nbased approaches have also been widely used to evaluate\nthe advanced abilities of fine-tuned LLMs. Next, we will\nintroduce the two evaluation methods.\n\u2022Human-based evaluation. Unlike automatic evaluation\nfor basic abilities, human evaluation typically considers\nmore factors or abilities in real-world use, such as hu-\nman alignment and tool manipulation. In this evaluation\napproach, test tasks are usually in the form of open-\nended questions, and human evaluators are invited to make\njudgments on the quality of answers generated by LLMs.\nTypically, there are two main types of scoring methods\nfor human evaluators: pairwise comparison and single-\nanswer grading. In pairwise comparison, given the same\nquestion, humans are assigned two answers from different"], "retrieved_docs_id": ["8ef8344de6", "6df2987633", "5c89e9ef97", "106337d29e", "3603224301"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is the name of the state-of-the-art proprietary chat model?\n", "true_answer": "GPT-4", "source_doc": "ChipNemo.pdf", "source_id": "8f6b70d3f1", "retrieved_docs": ["while GPT-4 is considered to be the state-of-the-art propri-\netary chat model.\n4", "retrieval model, the fact remains that retrieval still struggles\nwith queries that do not map directly to passages in the\ndocument corpus or require more context not present in\nthe passage. Unfortunately, these queries are also more\nrepresentative of queries that will be asked by engineers in\nreal situations. Combining retrieval with a domain adapted\nlanguage model is one way to address this issue.\n3. Evaluations\nWe evaluate our training methodology and application per-\nformance in this section. We study our 7B, 13B, and 70B\nmodels in the training methodology evaluation, and only our\nChipNeMo-70B model using SteerLM for model alignment\nin the application performance evaluation. For compari-\nson, we also evaluate two baseline chat models: LLaMA2-\n70B-Chat and GPT-4. LLaMA2-70B-Chat is the publicly\nreleased LLaMA2-Chat model trained with RLHF and is\nconsidered to be the state-of-the-art open-source chat model,\nwhile GPT-4 is considered to be the state-of-the-art propri-", "Dialogue Turn Baseline + GAtt\n2 100% 100%\n4 10% 100%\n6 0% 100%\n20 0% 100%\nTable 30: GAtt results. Llama 2-Chat with GAtt is able to refer to attributes 100% of the time, for up to 20\nturns from our human evaluation. We limited the evaluated attributes to public figures and hobbies.\nThe attention now spans beyond 20 turns. We tested the model ability to remember the system arguments\ntroughahumanevaluation. Thearguments(e.g. hobbies, persona)aredefinedduringthefirstmessage, and\nthen from turn 2 to 20. We explicitly asked the model to refer to them (e.g. \u201cWhat is your favorite hobby?\u201d,\n\u201cWhat is your name?\u201d), to measure the multi-turn memory ability of Llama 2-Chat . We report the results\nin Table 30. Equipped with GAtt, Llama 2-Chat maintains 100% accuracy, always referring to the defined\nattribute, and so, up to 20 turns (we did not extend the human evaluation more, and all the examples had", "Dialogue Turn Baseline + GAtt\n2 100% 100%\n4 10% 100%\n6 0% 100%\n20 0% 100%\nTable 30: GAtt results. Llama 2-Chat with GAtt is able to refer to attributes 100% of the time, for up to 20\nturns from our human evaluation. We limited the evaluated attributes to public figures and hobbies.\nThe attention now spans beyond 20 turns. We tested the model ability to remember the system arguments\ntroughahumanevaluation. Thearguments(e.g. hobbies, persona)aredefinedduringthefirstmessage, and\nthen from turn 2 to 20. We explicitly asked the model to refer to them (e.g. \u201cWhat is your favorite hobby?\u201d,\n\u201cWhat is your name?\u201d), to measure the multi-turn memory ability of Llama 2-Chat . We report the results\nin Table 30. Equipped with GAtt, Llama 2-Chat maintains 100% accuracy, always referring to the defined\nattribute, and so, up to 20 turns (we did not extend the human evaluation more, and all the examples had", "\u201cT5\u201d refers to our model, which we dub the \u201c Text-to-TextTransferTransformer\u201d.\nsummarization, and sentiment classi\ufb01cation, to name a few. With this uni\ufb01ed approach,\nwe can compare the e\ufb00ectiveness of di\ufb00erent transfer learning objectives, unlabeled data\nsets, and other factors, while exploring the limits of transfer learning for NLP by scaling up\nmodels and data sets beyond what has previously been considered.\nWe emphasize that our goal is not to propose new methods but instead to provide a\ncomprehensive perspective on where the \ufb01eld stands. As such, our work primarily comprises\na survey, exploration, and empirical comparison of existing techniques. We also explore the\nlimits of current approaches by scaling up the insights from our systematic study (training\nmodels up to 11billion parameters) to obtain state-of-the-art results in many of the tasks\nwe consider. In order to perform experiments at this scale, we introduce the \u201cColossal Clean"], "retrieved_docs_id": ["8f6b70d3f1", "0fb655a6fb", "c7156fa092", "c7156fa092", "5fb0c7546e"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does the proposed decoding method for MLLMs address the issue of over-trust?\n", "true_answer": "The proposed decoding method for MLLMs addresses the issue of over-trust by introducing a penalty term on the model logits during the beam-search decoding process to mitigate the over-trust issue.", "source_doc": "hallucination.pdf", "source_id": "4f752eeea2", "retrieved_docs": ["are closely tied to the knowledge aggregation patterns manifested in the self-attention matrix,\ni.e.,MLLMs tend to generate new tokens by focusing on a few summary tokens rather than all\nthe previous tokens. Such a partial over-trust inclination results in neglecting image tokens and\ndescribing the image content with hallucination. Based on this observation, a decoding method for\nMLLMs grounded in an Over-trust Penalty and a Retrospection- Allocation strategy is proposed.\nFirst, a penalty term on the model logits is introduced during the MLLM beam-search decoding\nprocess to mitigate the over-trust issue. Additionally, to handle the hard cases that cannot be\naddressed by the penalty term, a more aggressive strategy called the rollback strategy is proposed\nto retrospect the presence of summary tokens in the previously generated tokens and reallocate\nthe token selection if necessary.\nAnother interesting study observes that the hallucination of MLLMs seems to be easily triggered", "6.6 Enhancing Interpretability and Trust\nExisting methods for hallucination mitigation are primarily based on empirical observations of\nspecific patterns, such as skipping the \u2018\\n\u2019 token and penalizing over-trust tokens. However, despite\nthe impressive improvements achieved on specific benchmarks, understanding the underlying\nmechanisms and decision-making processes remains challenging. Future research should focus on\ndeveloping techniques for interpreting and explaining the generation process of MLLMs, thereby\nproviding insights into the factors influencing hallucinated content. This includes investigating\nmethods for visualizing model internals, identifying salient features and linguistic patterns, and\ntracing the generation process from input to output. Enhancing the interpretability of MLLMs\nwill not only improve our understanding of model behavior but also enable users to better assess\nhallucinated content in practical applications.\n6.7 Navigating the Ethical Landscape", "does not over\ufb01t its training set by a signi\ufb01cant amount, measured relative to a held-out validation set with which it was\ndeduplicated (Figure 4.1). Thus, we expect that contamination is likely to be frequent, but that its effects may not be as\nlarge as feared.\nWe initially tried to address the issue of contamination by proactively searching for and attempting to remove any overlap\nbetween our training data and the development and test sets of all benchmarks studied in this paper. Unfortunately, a\nbug resulted in only partial removal of all detected overlaps from the training data. Due to the cost of training, it wasn\u2019t\nfeasible to retrain the model. To address this, we investigate in detail how the remaining detected overlap impacts\nresults.\nFor each benchmark, we produce a \u2018clean\u2019 version which removes all potentially leaked examples, de\ufb01ned roughly as\nexamples that have a 13-gram overlap with anything in the pretraining set (or that overlap with the whole example when", "amount of time overwhelmed by data transfer, of-\nten referred to as the memory wall issue.\nTo address this issue, researchers formally quantify\ndata transfer from GPU memory to GPU caches\nusing the number of bytes in I/O, and they assess\nweight computation by measuring the number of\nFLOPs [320]. Specifically, let b,s,n,d, and hdenote\nthe batch size, sequence length, number of attention\nheads, hidden size of each head, and overall hidden\nsize ( h=n\u00b7d), respectively. During the layer-\nwise multi-head self-attention calculation in causal\ndecoder, the I/O bytes and FLOPs at each decoding\nstep can be expressed as 8bsn+ 4bsnd + 4bnd and\n8bsnd , respectively [320].\nArithmetic intensity is further defined as the ratio of\nFLOPs to I/O bytes:\nintensity =FLOPs\nI/O bytes=2\n1 +2\nd+1\ns(11)\nLet\u2019s consider LLaMA 13B ( d= 128 ) with a se-\nquence length of 1024 ( s= 1024 ) as an example.\nThe calculated arithmetic intensity is 1.97. How-\never, the A100 80G GPU can perform 312 TFLOPs", "in real-world applications. This problem has attracted increasing attention, prompting efforts to detect\nand mitigate such inaccuracies. We review recent advances in identifying, evaluating, and mitigating these\nhallucinations, offering a detailed overview of the underlying causes, evaluation benchmarks, metrics, and\nstrategies developed to address this issue. Additionally, we analyze the current challenges and limitations,\nformulating open questions that delineate potential pathways for future research. By drawing the granular\nclassification and landscapes of hallucination causes, evaluation benchmarks, and mitigation methods, this\nsurvey aims to deepen the understanding of hallucinations in MLLMs and inspire further advancements in\nthe field. Through our thorough and in-depth review, we contribute to the ongoing dialogue on enhancing the\nrobustness and reliability of MLLMs, providing valuable insights and resources for researchers and practitioners"], "retrieved_docs_id": ["4f752eeea2", "ebbf0f2d7a", "34f7889a0c", "2b2dca010d", "c7f1da1e07"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does Cait enhance model compression in Vision Transformers?\n", "true_answer": "Cait enhances model compression in Vision Transformers by introducing asymmetric token merging to integrate neighboring tokens efficiently and preserving the spatial structure, along with consistent dynamic channel pruning for uniform pruning of unimportant channels.", "source_doc": "multimodal.pdf", "source_id": "28380a85e1", "retrieved_docs": ["and efficiently handling intricate weight correlations during pruning, alongside an effective fine-\ntuning procedure for post-compression recovery. Cait [107] introduced asymmetric token merging\nto integrate neighboring tokens efficiently while preserving the spatial structure, paired with consis-\ntent dynamic channel pruning for uniform pruning of unimportant channels in Vision Transformers,\nenhancing model compression.\nStructured Pruning aims to remove structural components, such as attention heads or layers\nbased on predefined criteria. For example, WDPruning [108] employed a binary mask to discern\ninsignificant parameters based on their magnitudes. Additionally, Yu et al. [136] presented a unified\nframework integrating pruning to generate compact transformers. X-Pruner [109] utilizes an end-\nto-end learned explainability-aware mask to measure each unit\u2019s contribution to predicting target", "in computer vision applications. However, as ViT models have grown in size, the number of train-\nable parameters and operations has also increased, impacting their deployment and performance.\nAdditionally, the computational and memory cost of self-attention grows quadratically with image\nresolution. Referring to the paper [95], this survey aims to explore the most efficient vision encoding\nmethodologies that may be used for efficient MLLMs.\nEfficient VisionCompact Architecture (\u00a73.1)Architecture Design MethodsReformer[96], EfficientFormer[97],\nEfficientFormerV2[98]\nArchitecture Search MethodsAutoformer [99], NASViT [100],\nTF-TAS [101], UniNet [102]\nOptimization of Attention\nMechanisms MethodsPatchMerger [103], DynamicViT [104],\nSepvit [105]\nPruning (\u00a73.2)Unstructured Pruning Cap [106], Cait [107]\nStructured PruningWDPruning [108], X-Pruner [109],\nVTP[110], PS-ViT[111]\nHybrid Pruning SPViT [112], ViT-Slim [113]", "Language Modeling Is Compression\n106\n107\nModel size (in bytes)100Adjusted compression rateenwik7\nenwik8\nenwik9\nFigure 2|Adjusted compression rates (compressed size / raw size) for Transformers of different sizes,\ntrained on enwik8 and evaluated on enwik (both axes are logarithmic). Here, the compressed size\ndoes not only consider the size of the compressed output (roughly equal to the log-loss) but also the\nmodel size, which causes all curves to increase at some point. Every dataset gives rise to an optimal\nmodel size, with a good trade-off between performance (the size of the compressed data) and cost of\nthe model (the number of parameters). The larger the dataset, the more parameters we can afford.\nhuge loss in compression rate due to their large size, which cannot be offset when compressing only\n1GB of data. We encode each neural network parameter with 2 bytes, using a float16 representation", "Advances in Neural Information Processing Systems , 33, 2020.\nXiaohua Zhai, Alexander Kolesnikov, Neil Houlsby, and Lucas Beyer. Scaling vision transformers. arXiv\npreprint arXiv:2106.04560 , 2021.\nZhengyan Zhang, Xu Han, Hao Zhou, Pei Ke, Yuxian Gu, Deming Ye, Yujia Qin, Yusheng Su, Haozhe Ji,\nJian Guan, et al. Cpm: A large-scale generative chinese pre-trained language model. AI Open , 2:93\u201399,\n2021.\nMichael Zhu and Suyog Gupta. To prune, or not to prune: exploring the e\ufb03cacy of pruning for model\ncompression. arXiv preprint arXiv:1710.01878 , 2017.\n16", "GPUs. LLaV A-PruMerge[41] and MADTP [42] propose an adaptive visual token reduction ap-\nproach that significantly decreases the number of visual tokens while preserving comparable model\nperformance. TinyChart [37] and TextHawk [36] focus on document-oriented tasks, with the former\nadopting the Vision Token Merging module and the latter introducing the ReSampling and ReAr-\nrangement module. These modules can enhance fine-grained visual perception and information\ncompression capabilities.\nMulti-Scale Information Fusion Utilizing multi-scale image information is indeed crucial for\nvisual feature extraction. This approach allows the model to capture both the fine-grained details\npresent in smaller scales and the broader context available in larger scales. Mini-Gemini [26] com-\nprises twin encoders, one for high-resolution images and the other for low-resolution visual em-\nbedding. It proposes Patch Info Mining, which uses low-resolution visual embeddings as queries"], "retrieved_docs_id": ["28380a85e1", "20b3b3179f", "96f553cde5", "b950b5c339", "8e97c297be"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What type of information is often inaccurately described by multimodal large language models (MLLMs) in images?\n", "true_answer": "MLLMs often inaccurately describe the attributes of objects in images, such as color, shape, material, content, counting, action, etc.", "source_doc": "hallucination.pdf", "source_id": "f2b3e09bb2", "retrieved_docs": ["images. In addition, Resampler [ ADL+22] is used as an attentive pooling mechanism to reduce the\nnumber of image embeddings.\n2.2 Multimodal Large Language Models (MLLMs)\nAfter obtaining the embeddings of an input sequence, we feed them into the Transformer-based\ndecoder. The left-to-right causal model processes the sequence in an auto-regressive manner, which\nproduces the next token by conditioning on past timesteps. The causal masking is used to mask\nout future information. A softmax classi\ufb01er upon Transformer is used to generate tokens over the\nvocabulary.\nMLLMs serve as general-purpose interfaces [ HSD+22] that can perform interactions with both\nnatural language and multimodal input. The framework is \ufb02exible to handle various data types,\nas long as we can represent input as vectors. MLLMs combine the best of two worlds. First, the\nlanguage models naturally inherit the capabilities of in-context learning and instruction following.", "\u2022 At present, efficient MLLMs face challenges in processing extended-context multimodal\ninformation, and they are typically limited to accepting single images. This constrains the\nadvancement of more sophisticated models capable of handling an increased number of\nmultimodal tokens. Such models would be beneficial for applications like comprehending\nlengthy videos and analyzing extensive documents that incorporate a mix of images and\ntext, creating more versatile and powerful systems.\n\u2022 The predominant efficient MLLMs mainly support dual input modalities - images and texts,\nand a singular output modality - text. However, the tangible world encompasses a more\nextensive array of modalities. By expanding the scope of efficient MLLMs to accommodate\n23", "even OCR-free NLP (directly fed with document images), (ii) perception-language\ntasks, including multimodal dialogue, image captioning, visual question answering,\nand (iii) vision tasks, such as image recognition with descriptions (specifying\nclassi\ufb01cation via text instructions). We also show that MLLMs can bene\ufb01t from\ncross-modal transfer, i.e., transfer knowledge from language to multimodal, and\nfrom multimodal to language. In addition, we introduce a dataset of Raven IQ test,\nwhich diagnoses the nonverbal reasoning capability of MLLMs.\nInput Prompt CompletionQuestion: Explain why \nthis photo is funny? \nAnswer:\nThe cat is wearing a \nmask that gives the \ncat a smile.\nQuestion: Why did the \nlittle boy cry? Answer:\nBecause his scooter \nbroke.Question: What is the \nhairstyle of the blond \ncalled? Answer:\npony tailQuestion: When will the \nmovie be released? \nAnswer:\nOn June 27\n5 + 4 = 9Question: The result \nis? Answer:What is TorchScale ?\nA library that allows", "Hallucination of Multimodal Large Language Models: A\nSurvey\nZECHEN BAI, Show Lab, National University of Singapore, Singapore\nPICHAO WANG, Amazon Prime Video, USA\nTIANJUN XIAO, AWS Shanghai AI Lab, China\nTONG HE, AWS Shanghai AI Lab, China\nZONGBO HAN, Show Lab, National University of Singapore, Singapore\nZHENG ZHANG, AWS Shanghai AI Lab, China\nMIKE ZHENG SHOU\u2217,Show Lab, National University of Singapore, Singapore\nThis survey presents a comprehensive analysis of the phenomenon of hallucination in multimodal large\nlanguage models (MLLMs), also known as Large Vision-Language Models (LVLMs), which have demonstrated\nsignificant advancements and remarkable abilities in multimodal tasks. Despite these promising developments,\nMLLMs often generate outputs that are inconsistent with the visual content, a challenge known as hallucination,\nwhich poses substantial obstacles to their practical deployment and raises concerns regarding their reliability", "robust evaluation of object hallucination, POPE [844] pro-\nposes a polling-based object probing approach for convert-\ning object recognition into a series of binary questions, and\nthe results indicate that current MLLMs often struggle with\nobject hallucination. Cognition tasks, on the other hand, re-\nquire MLLMs to perform reasoning based on image percep-\ntion. A common reasoning task is visual question answering\n(VQA), where models answer questions about images that\ndemand reasoning about spatial relationships [845], general\nknowledge [846], or scene text [847]. To fully explore the\ncapabilities of MLLMs, HallusionBench [848] collects 200\nsophisticated visual dependent or supplement questions, on\nwhich even the most advanced MLLMs like LLaVA-1.5 [831]\nand GPT-4V [133] fail to achieve good performance.\n\u2022Evaluation paradigms. The responses of MLLMs can\nbe evaluated either in a closed-ended or an open-ended\nmanner. Traditional multimodal tasks often rely on a closed-"], "retrieved_docs_id": ["5107b7792e", "a1bd2d5193", "1da9964ec4", "72dc971633", "736e8a6bfb"], "reranker_type": "None", "search_type": "text", "rr": 0.0, "hit": 0}, {"question": "Which company offers a low-code AI solution for implementing various RAG applications?\n", "true_answer": "Flowise AI", "source_doc": "RAG.pdf", "source_id": "9ff21c1039", "retrieved_docs": ["quickly with the popularity of ChatGPT. They both offer a\nrich set of RAG-related APIs, gradually becoming one of\nthe indispensable technologies in the era of large models.\nMeanwhile, new types of technical stacks are constantly be-\ning developed. Although they do not offer as many features\nas LangChain and LLamaIndex, they focus more on their\nunique characteristics. For example, Flowise AI6emphasizes\nlow-code, allowing users to implement various AI applica-\ntions represented by RAG without writing code, simply by\ndragging and dropping. Other emerging technologies include\nHayStack, Meltno, and Cohere Coral.\nIn addition to AI-native frameworks, traditional software\nor cloud service providers have also expanded their service\nrange. For instance, Verba7, provided by the vector database\ncompany Weaviate, focuses on personal assistants. Amazon\noffers its users the intelligent enterprise search service tool\nKendra, based on RAG thinking. Users can search in different", "These efforts collectively strive to achieve a balance between\nefficiency and the richness of contextual information in RAG\nretrieval.\n\u2022Exploring Hybrid Search: By intelligently blending\nvarious techniques such as keyword-based search, se-\nmantic search, and vector search, the RAG system can\nleverage the strengths of each method. This approach\nenables the RAG system to adapt to different query types\nand information needs, ensuring consistent retrieval of\nthe most relevant and context-rich information. Hybrid\nsearch serves as a robust complement to retrieval strate-\ngies, enhancing the overall performance of the RAG\npipeline.\n\u2022Recursive Retrieval and Query Engine: Another pow-\nerful method to optimize retrieval in the RAG system\ninvolves implementing recursive retrieval and a sophis-\nticated query engine. Recursive retrieval entails acquir-\ning smaller document blocks during the initial retrieval\nphase to capture key semantic meanings. In the later", "in retrieved information. Counterfactual robustness tests\ninclude questions that the LLM can answer directly, but\nthe related external documents contain factual errors.\n7.3 Evaluation Frameworks\nRecently, the LLM community has been exploring the use\nof \u201dLLMs as judge\u201d for automatic assessment, with many\nutilizing powerful LLMs (such as GPT-4) to evaluate their\nown LLM applications outputs. Practices by Databricks us-\ning GPT-3.5 and GPT-4 as LLM judges to assess their chatbot\napplications suggest that using LLMs as automatic evaluation\ntools is effective [Leng et al. , 2023 ]. They believe this method\ncan also efficiently and cost-effectively evaluate RAG-based\napplications.\nIn the field of RAG evaluation frameworks, RAGAS and\nARES are relatively new. The core focus of these evaluations\nis on three main metrics: Faithfulness of the answer, answer\nrelevance, and context relevance. Additionally, TruLens, an\nopen-source library proposed by the industry, also offers a", "within the same output sequence.\n8.2 Ecosystem of RAG\nDownstream Tasks and Evaluation\nBy integrating relevant information from a broad knowledge\nbase, RAG has demonstrated significant potential in enhanc-\ning language models\u2019 ability to process complex queries and\ngenerate information-rich responses. Numerous studies have\nshown that RAG performs well in various downstream tasks,\nsuch as open-ended question answering and fact verification.\nRAG models not only improve the accuracy and relevance of\ninformation in downstream applications but also increase the\ndiversity and depth of responses.\nGiven the success of RAG, exploring the model\u2019s adapt-\nability and universality in multi-domain applications will be\npart of future work. This includes its use in professional do-\nmain knowledge question-answering, such as in medicine,\nlaw, and education. In the application of downstream tasks\nsuch as professional domain knowledge question-answering,", "external knowledge, alleviates hallucination issues, identifies\ntimely information via retrieval technology, and enhances re-\nsponse accuracy. Additionally, by citing sources, RAG in-\ncreases transparency and user trust in model outputs. RAG\ncan also be customized based on specific domains by index-\ning relevant text corpora. RAG\u2019s development and charac-\nteristics are summarized into three paradigms: Naive RAG,\nAdvanced RAG, and Modular RAG, each with its models,\nmethods, and shortcomings. Naive RAG primarily involves\nthe \u2019retrieval-reading\u2019 process. Advanced RAG uses more\nrefined data processing, optimizes the knowledge base in-\ndexing, and introduces multiple or iterative retrievals. As\nexploration deepens, RAG integrates other techniques like\nfine-tuning, leading to the emergence of the Modular RAG\nparadigm, which enriches the RAG process with new mod-\nules and offers more flexibility.\nIn the subsequent chapters, we further analyze three key"], "retrieved_docs_id": ["9ff21c1039", "e34dfedd36", "a05a21efce", "610b921fd5", "123a2dcc44"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What are the three core metrics primarily focused on in the latest evaluation frameworks like RAGAS and ARES?\n", "true_answer": "Faithfulness of the answer, Answer Relevance, and Context Relevance.", "source_doc": "RAG.pdf", "source_id": "57b75e5528", "retrieved_docs": ["evaluation metrics. Additionally, the latest evalu-\nation frameworks like RAGAS [Eset al. , 2023 ]and\nARES [Saad-Falcon et al. , 2023 ]also involve RAG eval-\nuation metrics. Summarizing these works, three core metrics\nare primarily focused on: Faithfulness of the answer, Answer\nRelevance, and Context Relevance.\n1.Faithfulness\nThis metric emphasizes that the answers generated by\nthe model must remain true to the given context, ensur-\ning that the answers are consistent with the context infor-\nmation and do not deviate or contradict it. This aspect of\nevaluation is vital for addressing illusions in large mod-\nels.\n2.Answer Relevance\nThis metric stresses that the generated answers need to\nbe directly related to the posed question.\n3.Context Relevance\nThis metric demands that the retrieved contextual infor-\nmation be as accurate and targeted as possible, avoid-\ning irrelevant content. After all, processing long texts\nis costly for LLMs, and too much irrelevant information", "in retrieved information. Counterfactual robustness tests\ninclude questions that the LLM can answer directly, but\nthe related external documents contain factual errors.\n7.3 Evaluation Frameworks\nRecently, the LLM community has been exploring the use\nof \u201dLLMs as judge\u201d for automatic assessment, with many\nutilizing powerful LLMs (such as GPT-4) to evaluate their\nown LLM applications outputs. Practices by Databricks us-\ning GPT-3.5 and GPT-4 as LLM judges to assess their chatbot\napplications suggest that using LLMs as automatic evaluation\ntools is effective [Leng et al. , 2023 ]. They believe this method\ncan also efficiently and cost-effectively evaluate RAG-based\napplications.\nIn the field of RAG evaluation frameworks, RAGAS and\nARES are relatively new. The core focus of these evaluations\nis on three main metrics: Faithfulness of the answer, answer\nrelevance, and context relevance. Additionally, TruLens, an\nopen-source library proposed by the industry, also offers a", "ARES\nARES aims to automatically evaluate the performance of\nRAG systems in three aspects: Context Relevance, Answer\nFaithfulness, and Answer Relevance. These evaluation met-\nrics are similar to those in RAGAS. However, RAGAS, being\na newer evaluation framework based on simple handwritten\nprompts, has limited adaptability to new RAG evaluation set-\ntings, which is one of the significances of the ARES work.\nFurthermore, as demonstrated in its assessments, ARES per-\nforms significantly lower than RAGAS.\nARES reduces the cost of evaluation by using a small\namount of manually annotated data and synthetic data,\nand utilizes Predictive-Driven Reasoning (PDR) to provide\nstatistical confidence intervals, enhancing the accuracy of\nevaluation [Saad-Falcon et al. , 2023 ].\nAlgorithm Principles\n1. Generating Synthetic Dataset: ARES initially generates\nsynthetic questions and answers from documents in the\ntarget corpus using a language model to create positive\nand negative samples.", "open-source library proposed by the industry, also offers a\nsimilar evaluation mode. These frameworks all use LLMs as\njudges for evaluation. As TruLens is similar to RAGAS, this\nchapter will specifically introduce RAGAS and ARES.\nRAGAS\nThis framework considers the retrieval system\u2019s ability to\nidentify relevant and key context paragraphs, the LLM\u2019s abil-\nity to use these paragraphs faithfully, and the quality of\nthe generation itself. RAGAS is an evaluation framework\nbased on simple handwritten prompts, using these prompts\nto measure the three aspects of quality - answer faithfulness,\nanswer relevance, and context relevance - in a fully auto-\nmated manner. In the implementation and experimentation\nof this framework, all prompts are evaluated using the gpt-\n3.5-turbo-16k model, which is available through the OpenAI\nAPI[Eset al. , 2023 ].\nAlgorithm Principles\n1. Assessing Answer Faithfulness: Decompose the answer\ninto individual statements using an LLM and verify", "tonomously judge inputs and generate accurate answers.\n7 RAG Evaluation\nIn exploring the development and optimization of RAG, ef-\nfectively evaluating its performance has emerged as a central\nissue. This chapter primarily discusses the methods of eval-\nuation, key metrics for RAG, the abilities it should possess,\nand some mainstream evaluation frameworks.\n7.1 Evaluation Methods\nThere are primarily two approaches to evaluating the ef-\nfectiveness of RAG: independent evaluation and end-to-endevaluation [Liu, 2023 ].\nIndependent Evaluation\nIndependent evaluation includes assessing the retrieval mod-\nule and the generation (read/synthesis) module.\n1.Retrieval Module\nA suite of metrics that measure the effectiveness of sys-\ntems (like search engines, recommendation systems, or\ninformation retrieval systems) in ranking items accord-\ning to queries or tasks are commonly used to evaluate\nthe performance of the RAG retrieval module. Exam-\nples include Hit Rate, MRR, NDCG, Precision, etc."], "retrieved_docs_id": ["57b75e5528", "a05a21efce", "1b1cdfdd79", "ffd5c8b41e", "a580bf7e9b"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is the reduction in parameters achieved by LDPv2 compared to the original LDP in CNN-based MobileVLMv2?\n", "true_answer": "LDPv2 achieves a 99.8% reduction in parameters compared to the original LDP in CNN-based MobileVLMv2.", "source_doc": "multimodal.pdf", "source_id": "f4853839e9", "retrieved_docs": ["cross-attention, while image features are unfolded and concatenated with Q to serve as K and V in\ncross-attention. By this means, the transformer output at the corresponding positions of the learn-\nable latent queries is taken as the aggregated representation of visual features, thereby standardizing\nvariable-length video frame features into fixed-size features. MEQ-Former in BRA VE [12] designs\na multi-encoder querying transformer to amalgamate features from multiple frozen vision encoders\ninto a versatile representation that can be directly inputted into a frozen language model.\nCNN-based MobileVLMv2[17] proposes LDPv2, a new projector consisting of three parts: fea-\nture transformation, token reduction, and positional information enhancement. By using point-wise\nconvolution layers, average pooling, and a PEG module with a skip connection, LDPv2 achieves\nbetter efficiency, a 99.8% reduction in parameters, and slightly faster processing compared to the\noriginal LDP[20].", "amount of memory for activations. LOMO is compatible with activation memory reduction tech-\nniques such as activation checkpointing. By integrating activation checkpointing with LOMO, the\nmemory footprint due to activation can be reduced from 45.61GB to 1.79GB.\n4.2 T HROUGHPUT\nWe evaluate the throughput performance of LOMO compared to AdamW and SGD. The experiments\nare conduct on a server equipped with 8 RTX 3090 GPUs, interconnected via a PCIe motherboard.\nThe sequence length and batch size are set to 1024 and 1, respectively. Throughput is measured in\nterms of the number of tokens processed per GPU per second (TGS), and parameter partitioning was\nachieved using ZeRO-3 (Rajbhandari et al., 2020).\nFor the 7B model, LOMO demonstrates remarkable throughput, surpassing AdamW and SGD by\nabout 11 times. This significant improvement can be attributed to LOMO\u2019s ability to train the 7B\n7", "better interpretability of how the update weights are correlated with the pre-trained weights. We\nfocus our study on GPT-3 175B, where we achieved the largest reduction of trainable parameters\n(up to 10,000\u00d7) without adversely affecting task performances.\nWe perform a sequence of empirical studies to answer the following questions: 1) Given a parameter\nbudget constraint, which subset of weight matrices in a pre-trained Transformer should we adapt\n9", "be fine-tuned more efficiently.In LoRA-FA [156], a variant of LoRA, the first low-rank matrix is\nfrozen after initialization and used as a random projection, while the other is trained. This leads to\na reduction in the number of parameters by half, while maintaining a performance comparable to\nthe conventional LoRA technique.DyLoRa [157] introduces a dynamic low-rank adaptation tech-\nnique that enables the training of LoRA blocks for a range of ranks instead of a single rank, which\nis achieved by sorting the representations learned by the adapter modules during training across\ndifferent ranks.\nFull-Parameter fine-tuning Full-parameter fine-tuning is an approach in which all the parame-\nters of a pre-trained model are updated during the fine-tuning process. This method aims to achieve\noptimal performance on a specific downstream task by leveraging the entire capacity of the pre-\ntrained model. While full-parameter fine-tuning often leads to state-of-the-art results and improved", "Inference with Quantization. Figure 13 illustrates that Pow-\nerInfer effectively supports LLMs that are compressed using\nINT4 quantization. On a high-end PC (PC-High), PowerIn-\nfer delivers responses at an average speed of 13.20 token-\ns/s, reaching a peak of 29.08 tokens/s. The average speedup\nachieved compared with llama.cpp is 2.89 \u00d7, with a maxi-\nmum of 4.28\u00d7. On a lower-end setup (PC-Low), the average\nspeedup is 5.01 \u00d7, peaking at 8.00 \u00d7. The reduction in memory\nrequirements due to quantization enables PowerInfer to more\nef\ufb01ciently manage larger models. For instance, in our exper-\niment with the OPT-175B model on PC-High, PowerInfer\nnearly reaches two tokens per second, surpassing llama.cpp\nby a factor of 2.66 \u00d7.\nBatching Inference. We also evaluate the end-to-end infer-\nence performance of PowerInfer with different batch sizes, as\nshown in Figure 14. PowerInfer demonstrates a signi\ufb01cant\nadvantage when the batch size is smaller than 32, achieving"], "retrieved_docs_id": ["f4853839e9", "8a82c05080", "0f228ad96f", "d7e84c92f4", "ee109d49c1"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does RAG increase trust in its output?\n", "true_answer": "By citing sources, RAG allows users to verify the accuracy of the answers, which increases trust in its output.", "source_doc": "RAG.pdf", "source_id": "62ff7bd487", "retrieved_docs": ["intensive tasks. By citing sources, users can verify\nthe accuracy of answers and increase trust in model\noutputs. It also facilitates knowledge updates\nand the introduction of domain-specific knowl-\nedge. RAG effectively combines the parameter-\nized knowledge of LLMs with non-parameterized\nexternal knowledge bases, making it one of the\nmost important methods for implementing large\nlanguage models. This paper outlines the develop-\nment paradigms of RAG in the era of LLMs, sum-\nmarizing three paradigms: Naive RAG, Advanced\nRAG, and Modular RAG. It then provides a sum-\nmary and organization of the three main compo-\nnents of RAG: retriever, generator, and augmenta-\ntion methods, along with key technologies in each\ncomponent. Furthermore, it discusses how to eval-\nuate the effectiveness of RAG models, introducing\ntwo evaluation methods for RAG, emphasizing key\nmetrics and abilities for evaluation, and presenting\nthe latest automatic evaluation framework. Finally,", "maintains the timeliness and accuracy of responses.\n\u2022 Transparency is an advantage of RAG. By citing\nsources, users can verify the accuracy of the answers,\nincreasing trust in the model\u2019s output.\n\u2022 RAG has customization capabilities. Models can be tai-\nlored to different domains by indexing relevant textual\ncorpora, providing knowledge support for specific fields.\n\u2022 In terms of security and privacy management, RAG,\nwith its built-in roles and security controls in the\ndatabase, can better control data usage. In contrast, fine-\ntuned models may lack clear management of who can\naccess which data.\n\u2022 RAG is more scalable. It can handle large-scale datasets\nwithout the need to update all parameters and create\ntraining sets, making it more economically efficient.\n\u2022 Lastly, results produced by RAG are more trustworthy.\nRAG selects deterministic results from the latest data,\nwhile fine-tuned models may exhibit hallucinations and\ninaccuracies when dealing with dynamic data, lacking", "external knowledge, alleviates hallucination issues, identifies\ntimely information via retrieval technology, and enhances re-\nsponse accuracy. Additionally, by citing sources, RAG in-\ncreases transparency and user trust in model outputs. RAG\ncan also be customized based on specific domains by index-\ning relevant text corpora. RAG\u2019s development and charac-\nteristics are summarized into three paradigms: Naive RAG,\nAdvanced RAG, and Modular RAG, each with its models,\nmethods, and shortcomings. Naive RAG primarily involves\nthe \u2019retrieval-reading\u2019 process. Advanced RAG uses more\nrefined data processing, optimizes the knowledge base in-\ndexing, and introduces multiple or iterative retrievals. As\nexploration deepens, RAG integrates other techniques like\nfine-tuning, leading to the emergence of the Modular RAG\nparadigm, which enriches the RAG process with new mod-\nules and offers more flexibility.\nIn the subsequent chapters, we further analyze three key", "within the same output sequence.\n8.2 Ecosystem of RAG\nDownstream Tasks and Evaluation\nBy integrating relevant information from a broad knowledge\nbase, RAG has demonstrated significant potential in enhanc-\ning language models\u2019 ability to process complex queries and\ngenerate information-rich responses. Numerous studies have\nshown that RAG performs well in various downstream tasks,\nsuch as open-ended question answering and fact verification.\nRAG models not only improve the accuracy and relevance of\ninformation in downstream applications but also increase the\ndiversity and depth of responses.\nGiven the success of RAG, exploring the model\u2019s adapt-\nability and universality in multi-domain applications will be\npart of future work. This includes its use in professional do-\nmain knowledge question-answering, such as in medicine,\nlaw, and education. In the application of downstream tasks\nsuch as professional domain knowledge question-answering,", "lows the decide-retrieve-reflect-read process, introduc-\ning a module for active judgment. This adaptive and\ndiverse approach allows for the dynamic organization of\nmodules within the Modular RAG framework.\n4 Retriever\nIn the context of RAG, the \u201dR\u201d stands for retrieval, serving\nthe role in the RAG pipeline of retrieving the top-k relevant\ndocuments from a vast knowledge base. However, crafting\na high-quality retriever is a non-trivial task. In this chapter,\nwe organize our discussions around three key questions: 1)\nHow to acquire accurate semantic representations? 2) How\nto match the semantic spaces of queries and documents? 3)\nHow to align the output of the retriever with the preferences\nof the Large Language Model ?\n4.1 How to acquire accurate semantic\nrepresentations?\nIn RAG, semantic space is the multidimensional space where\nquery and Document are mapped. When we perform re-\ntrieval, it is measured within the semantic space. If the se-"], "retrieved_docs_id": ["4fffd3dc2b", "62ff7bd487", "123a2dcc44", "610b921fd5", "8fe8499442"], "reranker_type": "None", "search_type": "text", "rr": 0.5, "hit": 1}, {"question": "What is a lightweight vision model designed for vision and language tasks?\n", "true_answer": "ViTamin [11]", "source_doc": "multimodal.pdf", "source_id": "18b9cdbf0e", "retrieved_docs": ["prehension of visual data. Cobra[13] integrates DINOv2[76] and SigLIP[75] as its vision backbone,\nwith the rationale that merging the low-level spatial features from DINOv2 and the semantic at-\ntributes offered by SigLIP will enhance performance on subsequent tasks. SPHINX-X[14] employs\ntwo vision encoders \u2013 DINOv2 and CLIP-ConvNeXt. Given that these models have been pre-trained\nvia distinct learning methodologies (self-supervised versus weakly supervised) and network archi-\ntectures (ViT versus CNN), they are naturally capable of offering the most complementary and\nsophisticated visual knowledge.\nLightweight Vision Encoder Vision Transformer architectures in real-world applications pose\nchallenges due to hardware and environmental limitations, including processing power and compu-\ntational capabilities. ViTamin [11] represents a lightweight vision model, specifically tailored for\nvision and language models. It commences with a convolutional stem, succeeded by Mobile Con-", "ment between the feature spaces of visual and text inputs. Since the vision encoder constitutes a\nrelatively minor portion of the MLLM parameters, the advantages of lightweight optimization are\nless pronounced compared to the language model. Therefore, efficient MLLMs generally continue\nto employ visual encoders that are widely used in large-scale MLLMs, as detailed in Table 1.\nMultiple Vision Encoders BRA VE[12] in Figure. 4 performs an extensive ablation of various vi-\nsion encoders with distinct inductive biases for tackling MLMM tasks. The results indicate that there\nisn\u2019t a single-encoder setup that consistently excels across different tasks, and encoders with diverse\nbiases can yield surprisingly similar results. Presumably, incorporating multiple vision encoders\ncontributes to capturing a wide range of visual representations, thereby enhancing the model\u2019s com-\nprehension of visual data. Cobra[13] integrates DINOv2[76] and SigLIP[75] as its vision backbone,", "Figure 4: BRA VE [12] concatenates features from K different Vision Encoders in a sequence-wise\nmanner. These concatenated features are then reduced by the MEQ-Former.\navoids the high cost of training an end-to-end multimodal model from scratch and effectively lever-\nages the capabilities of pre-trained language and vision models.\nMLP-based As outlined in [7, 54], the vision-language projector is typically realized using a\nstraightforward, learnable Linear Projector or a Multi-Layer Perceptron (MLP), i.e., several linear\nprojectors interleaved with non-linear activation functions, as illustrated in Table.1.\nAttention-based BLIP2 [15] introduces Q-Former, a lightweight transformer, which employs a\nset of learnable query vectors to extract visual features from a frozen vision model. Perceiver\nResampler, proposed by Flamingo[16], contemplates the use of learnable latent queries as Q in\ncross-attention, while image features are unfolded and concatenated with Q to serve as K and V in", "Vision Audition\n31 8 \u2026 70 2\nA B C\nD E F\nFigure 1: KOSMOS -1is a multimodal large language model (MLLM) that is capable of perceiving\nmultimodal input, following instructions, and performing in-context learning for not only language\ntasks but also multimodal tasks. In this work, we align vision with large language models (LLMs),\nadvancing the trend of going from LLMs to MLLMs.\n\u2217Equal contribution. \u2020Corresponding author.arXiv:2302.14045v2  [cs.CL]  1 Mar 2023", "its selection is closely related to the lightweight nature of MLLM. In comparison to conventional\nMLLMs with parameter sizes ranging from 7 billion to tens of billions[87, 88], efficient MLLMs\ntypically employ language models with less than 3 billion parameters, such as phi2-2.7B[74] by\nMicrosoft and Gemma-2B[78] by Google. Phi-2 trained on special data recipes can match the per-\nformance of models 25 times larger trained on regular data. Phi-3-mini [86] can be easily deployed\nlocally on a modern phone and achieves a quality that seems on-par with models such as Mixtral\n8x7B [89] and GPT-3.5. In addition to utilizing pre-trained models, MobileVLM[20] downscales\nLLaMA[87] and trains from scratch using open-source datasets. The specific model scaling is illus-\ntrated in the Table.1 and Table.4.\n2.4 Vision Token Compression\nInitial research has underscored the potential of MLLMs across various tasks, including visual ques-"], "retrieved_docs_id": ["18b9cdbf0e", "4ee780b19c", "1fea51e26c", "f0ea146bbd", "26327c579e"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How well did the domain-adapted LLM perform for the engineering assistant chatbot based on expert evaluations?\n", "true_answer": "The domain-adapted LLM achieved a score of 6.0 on a 7-point Likert scale for the engineering assistant chatbot based on expert evaluations.", "source_doc": "ChipNemo.pdf", "source_id": "28f0897bcb", "retrieved_docs": ["vant in-domain knowledge from its data store to augment\nthe response generation given a user query. This method\nshows significant improvement in grounding the model to\nthe context of a particular question. Crucially we observed\nsignificant improvements in retrieval hit rate when finetun-\ning a pretrained retrieval model with domain data. This led\nto even further improvements in model quality.\nOur results show that domain-adaptive pretraining was the\nprimary technique driving enhanced performance in domain-\nspecific tasks. We highlight the following contributions and\nfindings for adapting LLMs to the chip design domain:\n\u2022We demonstrate domain-adapted LLM effectiveness on\nthree use-cases: an engineering assistant chatbot, EDA\ntool script generation, and bug summarization and anal-\nysis. We achieve a score of 6.0 on a 7 point Likert scale\nfor engineering assistant chatbot based on expert eval-\nuations, more than 70% correctness on the generation", "niques: domain-adaptive tokenization, domain-\nadaptive continued pretraining, model alignment\nwith domain-specific instructions, and domain-\nadapted retrieval models. We evaluate these\nmethods on three selected LLM applications for\nchip design: an engineering assistant chatbot,\nEDA script generation, and bug summarization\nand analysis. Our evaluations demonstrate that\ndomain-adaptive pretraining of language models,\ncan lead to superior performance in domain re-\nlated downstream tasks compared to their base\nLLaMA2 counterparts, without degradations in\ngeneric capabilities. In particular, our largest\nmodel, ChipNeMo-70B, outperforms the highly\ncapable GPT-4 on two of our use cases, namely en-\ngineering assistant chatbot and EDA scripts gener-\nation, while exhibiting competitive performance\non bug summarization and analysis. These re-\nsults underscore the potential of domain-specific\ncustomization for enhancing the effectiveness of\nlarge language models in specialized applications.", "uations, more than 70% correctness on the generation\nof simple EDA scripts, and expert evaluation ratings\nabove 5 on a 7 point scale for summarizations and\nassignment identification tasks.\n\u2022 Domain-adapted ChipNeMo models dramatically out-\nperforms all vanilla LLMs evaluated on both multiple-\nchoice domain-specific AutoEval benchmarks and hu-\nman evaluations for applications.\n\u2022Using the SteerLM alignment method (Dong et al.,\n2023) over traditional SFT improves human evaluation\nscores for the engineering assistant chatbot by 0.62\npoints on a 7 point Likert scale.\n\u2022SFT on an additional 1.4Kdomain-specific instruc-\ntions significantly improves the model\u2019s proficiency at\ngenerating correct EDA tool scripts by 18%.\n\u2022Domain-adaptive tokenization reduce domain data to-\nken count by up to 3.3%without hurting effectiveness\non applications.\n\u2022Fine-tuning our ChipNeMo retrieval model with\n2", "processor with GPT-4 and GPT-3.5. Their findings showed\nthat although GPT-4 produced relatively high-quality codes,\nit still does not perform well enough at understanding and\nfixing the errors. ChipEDA (He et al., 2023) proposed to use\nLLMs to generate EDA tools scripts. It also demonstrated\nthat fine-tuned LLaMA2 70B model outperforms GPT-4\nmodel on this task.\n5. Conclusions\nWe explored domain-adapted approaches to improve LLM\nperformance for industrial chip design tasks. Our results\nshow that domain-adaptive pretrained models, such as the\n7B, 13B, and 70B variants of ChipNeMo, achieve simi-\nlar or better results than their base LLaMA2 models with\nonly 1.5% additional pretraining compute cost. Our largest\ntrained model, ChipNeMo-70B, also surpasses the much\nmore powerful GPT-4 on two of our use cases, engineering\nassistant chatbot and EDA scripts generation, while show-\ning competitive performance on bug summarization and\nanalysis. Our future work will focus on further improving", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ncost of pretraining a foundational model from scratch.\nModel Size Pretraining DAPT SFT\n7B 184,320 2,620 90\n13B 368,640 4,940 160\n70B 1,720,320 20,500 840\nTable 1: Training cost of LLaMA2 models in A100 GPU hours.\nPretraining cost from (Touvron et al., 2023).\n3.5. RAG and Engineering Assistant Chatbot\nWe created a benchmark to evaluate the performance of\ndesign chat assistance, which uses the RAG method. This\nbenchmark includes 88 questions in three categories: archi-\ntecture/design/verification specifications (Specs), testbench\nregression documentation (Testbench), and build infrastruc-\nture documentation (Build). For each question, we specify\nthe golden answer as well as the paragraphs in the design\ndocument that contains the relevant knowledge for the an-\nswer. These questions are created by designers manually\nbased on a set of design documents as the data store for\nretrieval. It includes about 1.8K documents, which were"], "retrieved_docs_id": ["28f0897bcb", "a6c3d05123", "c7d05c4b43", "e6b9ba907a", "7313e64a59"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "Which model outperforms GPT-4 in all categories, including both RAG misses and hits, according to the human evaluation?\n", "true_answer": "ChipNeMo-70B-Steer outperforms GPT-4 in all categories, including both RAG misses and hits, according to the human evaluation.", "source_doc": "ChipNemo.pdf", "source_id": "1ed1c2ae54", "retrieved_docs": ["and required more context (see Appendix A.8 for detailed\nexamples). This significantly contributes to the differencein retrieval quality between the categories.\nFigure 7: Human Evaluation of Different Models. Model Only\nrepresents results without RAG. RAG (hit)/(miss) only include\nquestions whose retrieved passages hit/miss their ideal context,\nRAG (avg) includes all questions. 7 point Likert scale.\nWe conducted evaluation of multiple ChipNeMo models\nand LLaMA2 models with and without RAG. The results\nwere then scored by human evaluators on a 7 point Likert\nscale and shown in Figure 7. We highlight the following:\n\u2022ChipNeMo-70B-Steer outperforms GPT-4 in all cate-\ngories, including both RAG misses and hits.\n\u2022ChipNeMo-70B-Steer outperforms similar sized\nLLaMA2-70b-Chat in model-only and RAG evalua-\ntions by 3.31 and 1.81, respectively.\nOur results indicate that RAG significantly boosts human\nscores. RAG improves ChipNeMo-70B-Steer, GPT-4, and", "scores. RAG improves ChipNeMo-70B-Steer, GPT-4, and\nLLaMA2-70b-Chat by 0.56, 1.68, and 2.05, respectively.\nEven when RAG misses, scores are generally higher than\nwithout using retrieval. The inclusion of relevant in-domain\ncontext still led to improved performance, as retrieval is not\na strictly binary outcome. Furthermore, while ChipNeMo-\n70B-SFT outperforms GPT4 by a large margin through\ntraditional supervised fine-tuning, applying SteerLM meth-\nods (Wang et al., 2023) leads to further elevated chatbot\nratings. We refer readers to the complete evaluation results\nin Appendix A.9.\n3.6. EDA Script Generation\nIn order to evaluate our model on the EDA script generation\ntask, we created two different types of benchmarks. The first\nis a set of \u201cEasy\u201d and \u201cMedium\u201d difficulty tasks (1-4 line\nsolutions) that can be evaluated without human intervention\nby comparing with a golden response or comparing the\ngenerated output after code execution. The second set of", "8 question categories cover various types of hallucination, including object attributes, counting,\nspatial relations, etc. During the evaluation of MMHal-Bench, the GPT-4 model is employed to\nanalyze and rate the responses.\nGAVIE [ 73]GPT4-Assisted Visual Instruction Evaluation (GAVIE) is proposed to assess the LMM\noutput in two different aspects: Relevancy to evaluate the instruction-following performance and\nAccuracy to measure the visual hallucination in the LMM output. It comprises a benchmark with\n1,000 samples and an evaluation approach. GAVIE evaluates the output of MLLMs in an open-ended\nmanner and does not require human-annotated ground-truth answers. The core idea is to ask the\nadvanced GPT-4 to work as a smart teacher and score the answer by taking image content, human\ninstruction, and model response as input.\nNOPE [ 77]This paper proposes to establish a distinction between object hallucination and", "Figure 1: Helpfulness human evaluation results for Llama\n2-Chatcompared to other open-source and closed-source\nmodels. Human raters compared model generations on ~4k\nprompts consisting of both single and multi-turn prompts.\nThe95%confidenceintervalsforthisevaluationarebetween\n1% and 2%. More details in Section 3.4.2. While reviewing\nthese results, it is important to note that human evaluations\ncanbenoisyduetolimitationsofthepromptset,subjectivity\nof the review guidelines, subjectivity of individual raters,\nand the inherent difficulty of comparing generations.\nFigure 2: Win-rate % for helpfulness and\nsafety between commercial-licensed base-\nlines and Llama 2-Chat , according to GPT-\n4. To complement the human evaluation, we\nused a more capable model, not subject to\nour own guidance. Green area indicates our\nmodelisbetteraccordingtoGPT-4. Toremove\nties, we used win/ (win+loss). The orders in\nwhich the model responses are presented to\nGPT-4arerandomlyswappedtoalleviatebias.\n1 Introduction", "Figure 1: Helpfulness human evaluation results for Llama\n2-Chatcompared to other open-source and closed-source\nmodels. Human raters compared model generations on ~4k\nprompts consisting of both single and multi-turn prompts.\nThe95%confidenceintervalsforthisevaluationarebetween\n1% and 2%. More details in Section 3.4.2. While reviewing\nthese results, it is important to note that human evaluations\ncanbenoisyduetolimitationsofthepromptset,subjectivity\nof the review guidelines, subjectivity of individual raters,\nand the inherent difficulty of comparing generations.\nFigure 2: Win-rate % for helpfulness and\nsafety between commercial-licensed base-\nlines and Llama 2-Chat , according to GPT-\n4. To complement the human evaluation, we\nused a more capable model, not subject to\nour own guidance. Green area indicates our\nmodelisbetteraccordingtoGPT-4. Toremove\nties, we used win/ (win+loss). The orders in\nwhich the model responses are presented to\nGPT-4arerandomlyswappedtoalleviatebias.\n1 Introduction"], "retrieved_docs_id": ["1ed1c2ae54", "af6e8c3fb2", "ed09817624", "c19e6121fe", "c19e6121fe"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does SUGRE embed relevant information from a knowledge graph?\n", "true_answer": "SUGRE embeds relevant subgraphs retrieved from the knowledge graph using Graph Neural Networks (GNN).", "source_doc": "RAG.pdf", "source_id": "812e372c75", "retrieved_docs": ["formation of the preceding blocks (C1, . . . , C i\u22121)and the\nretrieval information of N(Ci\u22121)through cross-attention to\nguide the generation of the next block Ci. To maintain causal-\nity, the autoregressive generation of the i-th block Cican only\nuse the nearest neighbor of the previous block N(Ci\u22121)and\nnotN(Ci).\nAugmented with Structured Data\nStructured data sources like Knowledge Graphs (KG) are\ngradually integrated into the paradigm of RAG. Verified KGs\ncan offer higher-quality context, reducing the likelihood of\nmodel hallucinations.\nRET-LLM [Modarressi et al. , 2023 ]constructs a per-\nsonalized knowledge graph memory by extracting\nrelation triples from past dialogues for future use.\nSUGRE [Kang et al. , 2023 ]embeds relevant subgraphs\nretrieved from the knowledge graph using Graph Neural\nNetworks (GNN) to prevent the model from generating\ncontextually irrelevant replies. SUGRE [Kang et al. , 2023 ]\nemploys a graph encoding method that reflects the graph", "swers given a retrieval-enhanced directive. It updates the gen-\nerator and retriever to minimize the semantic similarity be-\ntween documents and queries, effectively leveraging relevant\nbackground knowledge.\nAdditionally, SUGRE [Kang et al. , 2023 ]introduces the\nconcept of contrastive learning. It conducts end-to-end fine-\ntuning of both retriever and generator, ensuring highly de-\ntailed text generation and retrieved subgraphs. Using a\ncontext-aware subgraph retriever based on Graph Neural Net-\nworks (GNN), SURGE extracts relevant knowledge from a\nknowledge graph corresponding to an ongoing conversation.\nThis ensures the generated responses faithfully reflect the re-\ntrieved knowledge. SURGE employs an invariant yet efficient\ngraph encoder and a graph-text contrastive learning objective\nfor this purpose.\nIn summary, the enhancement methods during the fine-\ntuning phase exhibit several characteristics. Firstly, fine-\ntuning both LLM and retriever allows better adaptation", "outperform 10\u00d7larger ones [653, 657]. Further, open-book\nQA tasks can be also employed to evaluate the recency\nof knowledge information. Pre-training or retrieving from\noutdated knowledge resources may cause LLMs to generate\nincorrect answers for time-sensitive questions [653].\nKnowledge Completion. In knowledge completion tasks,\nLLMs might be (to some extent) considered as a knowledge\nbase [576], which can be leveraged to complete or predict the\nmissing parts of knowledge units ( e.g., knowledge triples).\nSuch tasks can probe and evaluate how much and what kind\nofknowledge LLMs have learned from the pre-training\ndata. Existing knowledge completion tasks can be roughly\ndivided into knowledge graph completion tasks ( e.g.,FB15k-\n237 [572] and WN18RR [574]) and fact completion tasks ( e.g.,\nWikiFact [571]), which aim to complete the triples from a\nknowledge graph and incomplete sentences about specific\nfacts, respectively. Empirical studies have revealed that it", "Retrieval-Augmented LLM. Due to the huge amount of\nfact records in a KG, existing work typically adopts a\nretrieval model to first obtain a relatively small subgraph\nfrom KG, and then leverages it to enhance LLMs by en-\nriching the relevant knowledge. Before the advent of LLMs,\nthe retrieved subgraphs are often supplemented into train-\ning data, injecting knowledge information into PLMs via\nparameter learning [863\u2013865]. In contrast, to leverage the\nretrieved knowledge, LLMs mainly incorporate it as part of\nthe prompt, without parameter update. To implement this\napproach, there are two main technical problems, i.e.,how\nto retrieve relevant knowledge from KGs and how to make\nbetter use of the structured data by LLMs. For the first issue\n(i.e.,retrieving relevant knowledge), a typical approach is\nto train a small language model ( e.g., RoBERTa) to iden-\ntify question-related fact triples [866]. To further improve\nthe retrieval performance, several studies also propose an", "employs a graph encoding method that reflects the graph\nstructure into PTMs\u2019 representation space and utilizes a\nmulti-modal contrastive learning objective between graph-\ntext modes to ensure consistency between retrieved facts\nand generated text. KnowledgeGPT [Wang et al. , 2023c ]\ngenerates search queries for Knowledge Bases (KB) in code\nformat and includes predefined KB operation functions.\nApart from retrieval, KnowledgeGPT also offers the ca-\npability to store knowledge in a personalized knowledge\nbase to meet individual user needs. These structured data\nsources provide RAG with richer knowledge and context,\ncontributing to improved model performance.\nLLM Generated Content RAG\nObserving that the auxiliary information recalled by RAG\nis not always effective and may even have negative effects,\nsome studies have expanded the paradigm of RAG by delving\ndeeper into the internal knowledge of LLM. This approach\nutilizes the content generated by LLM itself for retrieval, aim-"], "retrieved_docs_id": ["812e372c75", "977e0e1405", "e798d8fddc", "d0140a8a43", "4c3ac6cb2e"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How can multi-view low-resolution vision encoders capture detailed information for MLLM?\n", "true_answer": "By inputting multi-view high-resolution images, specifically a global view (low-resolution images from resizing) and a local view (image patches from splitting).", "source_doc": "multimodal.pdf", "source_id": "f8392fc0db", "retrieved_docs": ["Multi-view Input Directly employing high-resolution vision encoders for fine-grained percep-\ntion is prohibitively costly and does not align with practical usage requirements. Therefore, to\nutilize low-resolution vision encoders while enabling MLLM to perceive detailed information, a\ncommon approach is to input multi-view HR images, i.e., a global view: low-resolution images\nobtained through resizing, and a local view: image patches derived from splitting. For example,\n7", "GPUs. LLaV A-PruMerge[41] and MADTP [42] propose an adaptive visual token reduction ap-\nproach that significantly decreases the number of visual tokens while preserving comparable model\nperformance. TinyChart [37] and TextHawk [36] focus on document-oriented tasks, with the former\nadopting the Vision Token Merging module and the latter introducing the ReSampling and ReAr-\nrangement module. These modules can enhance fine-grained visual perception and information\ncompression capabilities.\nMulti-Scale Information Fusion Utilizing multi-scale image information is indeed crucial for\nvisual feature extraction. This approach allows the model to capture both the fine-grained details\npresent in smaller scales and the broader context available in larger scales. Mini-Gemini [26] com-\nprises twin encoders, one for high-resolution images and the other for low-resolution visual em-\nbedding. It proposes Patch Info Mining, which uses low-resolution visual embeddings as queries", "ment between the feature spaces of visual and text inputs. Since the vision encoder constitutes a\nrelatively minor portion of the MLLM parameters, the advantages of lightweight optimization are\nless pronounced compared to the language model. Therefore, efficient MLLMs generally continue\nto employ visual encoders that are widely used in large-scale MLLMs, as detailed in Table 1.\nMultiple Vision Encoders BRA VE[12] in Figure. 4 performs an extensive ablation of various vi-\nsion encoders with distinct inductive biases for tackling MLMM tasks. The results indicate that there\nisn\u2019t a single-encoder setup that consistently excels across different tasks, and encoders with diverse\nbiases can yield surprisingly similar results. Presumably, incorporating multiple vision encoders\ncontributes to capturing a wide range of visual representations, thereby enhancing the model\u2019s com-\nprehension of visual data. Cobra[13] integrates DINOv2[76] and SigLIP[75] as its vision backbone,", "tion answering and image captioning. However, MLLMs face considerable challenges in tasks ne-\ncessitating intricate recognition, including crowd counting and OCR of small characters. A direct\napproach to address these challenges involves increasing the image resolution, practically, the num-\nber of visual tokens. This strategy, nonetheless, imposes a substantial computational burden on\nMLLMs, primarily due to the quadratic scaling of computational costs with the number of input to-\nkens in the Transformer architecture. Motivated by this challenge, vision token compression, aimed\nto reduce the prohibitive computation budget caused by numerous tokens, has become an essential\naspect of efficient MLLMs. We will explore this topic through several key techniques, including\nmulti-view input, token processing, multi-scale information fusion, vision expert agents and video-\nspecific methods.\nMulti-view Input Directly employing high-resolution vision encoders for fine-grained percep-", "task encoders are dedicated to integrating various types of latent visual information extracted by\nmultiple visual encoders. Additionally, the structural knowledge enhancement module is designed\nto utilize visual tools, such as OCR tools and object detectors, to extract prior knowledge from\nvisual inputs.\nFollowing the approach of the structural knowledge enhancement module in [ 38], another line\nof research investigates the utilization of vision tool models to enhance the perception of MLLMs.\nVCoder [ 49] utilizes additional perception formats, such as segmentation masks and depth maps,\nto enhance the object identification ability of the MLLM. Another work [ 54] ensembles additional\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024."], "retrieved_docs_id": ["f8392fc0db", "8e97c297be", "4ee780b19c", "8beea9b82e", "c461600dc0"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does the vision encoder modify the input image in a mathematical formula?\n", "true_answer": "The vision encoder compresses the original image (X) into more compact patch features (Zv) using the formula Zv=g(Xv).", "source_doc": "multimodal.pdf", "source_id": "11ffce909a", "retrieved_docs": ["Taking the input image Xvas input, the vision encoder compresses the original image into more\ncompact patch features Zv, as represented by the following formula:\nZv=g(Xv). (1)\n4", "sion tokens, implementing efficient structures, and utilizing compact language models, among other\nstrategies. A diagram of the architecture is illustrated in Figure. 3. Table. 1 surveys a summary of\nthe efficient MLLMs, which outlines the base LLM, the vision encoder, image resolution, and the\nprojector used to connect vision and language. These efficient MLLMs include: MobileVLM [20],\nLLaV A-Phi [21], Imp-v1 [22], TinyLLaV A [23], Bunny [24], Gemini Nano-2 [2], MobileVLM-\nv2 [17], MoE-LLaV A-3.6B [25], Cobra [13], Mini-Gemini [26], Vary-toy [27], TinyGPT-V [28],\nSPHINX-Tiny [14], ALLaV A [29], MM1-3B [30], LLaV A-Gemma [31], Mipha-3B [32], VL-\nMamba[18], MiniCPM-V2.0 [70], DeepSeek-VL [34], KarmaVLM [71], moondream2 [72]. In\nthis section, we sequentially present a comprehensive overview of these three modules, along with\nother efficient components.\n2.1 Vision Encoder\nTaking the input image Xvas input, the vision encoder compresses the original image into more", "encoded image embeddings. For example, \u201c <s>document </s> \u201d is a text input, and \u201c <s>paragraph\n<image> Image Embedding </image> paragraph </s> \u201d is an interleaved image-text input. Table 21\nin Appendix shows some examples of input format.\nAn embedding module is used to encode both text tokens and other input modalities into vectors. Then\nthe embeddings are fed into the decoder. For input tokens, we use a lookup table to map them into\nembeddings. For the modalities of continuous signals (e.g., image, and audio), it is also feasible to\nrepresent inputs as discrete code and then regard them as \u201cforeign languages\u201d [ WBD+22,WCW+23].\nIn this work, following [ HSD+22], we employ a vision encoder as the embedding module for input\n5", "complex architectures. Vision-language mod-\nels (VLMs) such as VilBERT (Lu et al., 2019)\nand Flamingo (Alayrac et al., 2022), for exam-\nple, combine a language model with an image\nencoder, and are trained on a multi-modal cor-\npus of text-image pairs. This enables them to\npredict how a given sequence of words will con-\ntinue in the context of a given image. VLMs can\n6", "language model to generate the response autoregressively.\nIn the following, we will discuss the training, evaluation,\nand key points to develop capable MLLMs.\nTraining Process. The training process of the MLLM in-\ncludes two major stages: vision-language alignment pre-\ntraining and visual instruction tuning.\n\u2022Vision-language alignment pre-training. To develop\nMLLMs, existing work mostly initializes the vision encoder\nand the LLM with pre-trained models [149, 150, 826]. These\nmodels retain excellent vision and language capacities, but\nspan different semantic spaces. Thus, the goal of vision-\nlanguage alignment pre-training ( i.e.,the first-stage training)\nis to align the vision encoder and the LLM through end-to-\nend training on large-scale image-text pairs [827, 828]. How-\never, directly tuning these two models on image-text pairs\nmay cause the degradation of the original representation ca-\npacities. To improve the alignment performance, it is crucial"], "retrieved_docs_id": ["11ffce909a", "b24e6a172f", "c8e0c72bbc", "3cba6c188f", "e838613d76"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does Vid2Seq improve language model prediction?\n", "true_answer": "Vid2Seq improves language model prediction by introducing special time markings, enabling it to predict event boundaries and text descriptions seamlessly.", "source_doc": "RAG.pdf", "source_id": "535efdce62", "retrieved_docs": ["3.6.2 Case Prediction and Legal Text\nGeneration\nCase prediction and legal text generation involve\npredicting or completing legal opinions. Whilst\nthere is currently sparse usage of LLMs in the liter-\nature, smaller language models have been applied,\nsuggesting potential future LLM applications in\nthis area.\nHamilton [189] use nine separate GPT-2 models\ntrained on individual supreme court justice\u2019s au-\nthored opinions to predict how each justice will\nvote on a given case. They use a handcrafted\nprompt, including a summary of the topic gener-\nated by GPT-3. However, they find this approach\nto case prediction does not match the SOTA.\nPreviously, Chalkidis et al. [70] trained a range\nof attention-based models (including BERT) to pre-\n42", "iments show that it not only achieves competitive performance with state-of-the-art efficient meth-\nods but also boasts faster speeds due to its linear sequential modeling.It also excels in overcom-\ning visual illusions and spatial relationship judgments in closed-set challenging prediction bench-\nmarks and achieves performance comparable to LLaV A while using only 43% of the parameters.\nVL-Mamba[18] substitutes the Transformer-based backbone language model with the pre-trained\nMamba language model. It explores how to effectively implement the 2D vision selective scan\nmechanism for multimodal learning and the combinations of different vision encoders and pre-\ntrained Mamba language model variants.\nInference Acceleration SPD[45] proposes the speculative decoding with a language-only model\nto improve inference efficiency. By employing a language-only model as a draft model for specu-\n9", "acterising what these models do as reasoning,\nproperly speaking.\n11 How Do LLMs Generalise?\nGiven that LLMs are sometimes capable of solv-\ning reasoning problems with few-shot prompting\nalone, albeit somewhat unreliably, including rea-\nsoning problems that are not in their training set,\nsurely what they are doing is more than \u201cjust\u201d\nnext token prediction? Well, it is an engineer-\ning fact that this is what an LLM does. The\nnoteworthy thing is that next token prediction issu\ufb03cient for solving previously unseen reasoning\nproblems, even if unreliably. How is this pos-\nsible? Certainly it would not be possible if the\nLLM were doing nothing more than cutting-and-\npasting fragments of text from its training set\nand assembling them into a response. But this is\nnot what an LLM does. Rather, an LLM mod-\nels a distribution that is unimaginably complex,\nand allows users and applications to sample from\nthat distribution.\nThis unimaginably complex distribution is a", "\u2022We leverage the compression-prediction equivalence to employ compressors as generative\nmodels and visually illustrate the performance of the underlying compressor.\n\u2022We demonstrate that tokenization, which can be viewed as a pre-compression, does, in general,\nnot improve compression performance, but allows models to increase the information content\nin their context and is thus generally employed to improve prediction performance.\n2. Background\nInthissection, wereviewthenecessarybackgroundoninformationtheoryanditsrelationtolikelihood\nmaximization. To that end, we consider streams of data \ud835\udc651:\ud835\udc5b:=\ud835\udc651\ud835\udc652...\ud835\udc65\ud835\udc5b\u2208X\ud835\udc5bof length\ud835\udc5bfrom a\nfinite set of symbols X. We write \ud835\udc65\u2264\ud835\udc57=\ud835\udc65<\ud835\udc57+1:=\ud835\udc651:\ud835\udc57for\ud835\udc57\u2264\ud835\udc5band denote the empty string as \ud835\udf16. Finally,\nwe denote the concatenation of two strings \ud835\udc60and\ud835\udc5fby\ud835\udc60\ud835\udc5f.\nCoding Distributions A coding distribution \ud835\udf0cis a sequence of probability mass functions \ud835\udf0c\ud835\udc5b:X\ud835\udc5b\u21a6\u2192\n(0,1], which for all \ud835\udc5b\u2208\u2115satisfy the constraint that \ud835\udf0c\ud835\udc5b(\ud835\udc651:\ud835\udc5b)=\u00cd\n\ud835\udc66\u2208X\ud835\udf0c\ud835\udc5b+1(\ud835\udc651:\ud835\udc5b\ud835\udc66)for all\ud835\udc651:\ud835\udc5b\u2208X\ud835\udc5b,", "flexibility in how to use a language model that traditionally does not exist in classification (where a model\nnecessarily predicts a distribution over answer choices with the prediction being the argmax).\nPrior work introduces two classes of approaches to address adaptation for multiple choice scenarios. The\nfirst is the separate approach employed by Brown et al. (2020), where each choice is independently scored by\nconcatenating it with the question and computing its probability according to the LM. In this approach, the\nprobabilities may be further calibrated by the probability the LM assigns to the answer choice alone. The\nsecond is the jointapproach employed by Hendrycks et al. (2021c), where all the choices are concatenated\nwith the question to form a prompt (e.g., \u201c <question> A.<choice1> B.<choice2> Answer: \u201d) and the\nLM predicts the choice index (e.g., AorB). This resembles how one might see a multiple choice question"], "retrieved_docs_id": ["58bb908723", "6bebc6e320", "37a1f2530d", "2e677bfe82", "1b138e4a58"], "reranker_type": "None", "search_type": "text", "rr": 0.0, "hit": 0}, {"question": "What is an example of a method for mitigating data-related hallucinations in NLP?\n", "true_answer": "Introducing negative data, such as LRV-Instruction, is an example of a method for mitigating data-related hallucinations in NLP.", "source_doc": "hallucination.pdf", "source_id": "19a4c2c778", "retrieved_docs": ["Inference (\u00a73.4)Lose Visual Attention e.g.OPERA [45], HaELM [104]\nHallucination\nMetrics and\nBenchmarks(\u00a74)Hallucination MetricsCHAIR CHAIR [90]\nPOPE POPE [69]\nLLM-based e.g.GAVIE [73], HaELM [104], HallusionBench [72]\nOthers e.g.Faith-Score [55], AMBER [103]\nHallucination BenchmarksDiscriminative Task e.g.POPE [69], RAH-Bench [16], FGHE [105]\nGenerative Task e.g.GAVIE [73], Faith-Score [55]\nHallucination\nMitigation (\u00a75)Mitigating Data-related\nHallucinations (\u00a75.1)Introducing\nNegative Datae.g.LRV-Instruction [73]\nIntroducing\nCounterfactual Datae.g.HalluciDoctor [117]\nMitigating Noises\nand Errorse.g.ReCaption [105], EOS [120]\nMitigating Model-related\nHallucinations (\u00a75.2)Scale-up Resolution e.g.LLaVA-1.5 [74], InternVL [14], HallE-Switch [123]\nVersatile\nVision Encoderse.g.VCoder [49], IVE [38]\nDedicated Module e.g.HallE-Switch [123]\nMitigating Training-related\nHallucinations (\u00a75.3)Auxiliary SupervisionVisual Supervision e.g.Chen et al. [16]\nContrastive Loss e.g.HACL [52]", "Correct!\nDoes not exist!\n\u2705\n\"Figure 9: Example of Retrieval-Augmented GPT-4 ,\naccessed on 02/06/2023.\nstep. Dziri et al. [136] observe a positive correlation\nbetween increased diversity in response generation\nand hallucinations.\nThe reason for inducing randomness and diver-\nsity in popular decoding strategies is that gener-\nating the most likely sequence often leads to an\nunsurprising and unnatural text compared to hu-\nman communication [ 489,207,662]. Zhang et al.\n[662] phrase this challenge as a trade-off between\ndiversity and quality. While this challenge re-\nmains largely unsolved, several approaches such\nas diverse beam search [ 567] and confident decod-\ning [ 552] try reducing the induced hallucinations\nat the decoding level.\nUncertainty-Aware Beam Search [ 620]is\nbased on the observation that higher predictive un-\ncertainty corresponds to a larger chance of gener-\nating hallucinations. Therefore, the method intro-\nduces a penalty term in the beam search to penalize", "Comparisons are also not necessarily the most ef\ufb01cient way of providing an alignment signal. For\nexample, we could have labelers edit model responses to make them better, or generate critiques of\nmodel responses in natural language. There is also a vast space of options for designing interfaces for\nlabelers to provide feedback to language models; this is an interesting human-computer interaction\nproblem.\nOur proposal for mitigating the alignment tax, by incorporating pretraining data into RLHF \ufb01ne-\ntuning, does not completely mitigate performance regressions, and may make certain undesirable\nbehaviors more likely for some tasks (if these behaviors are present in the pretraining data). This is\nan interesting area for further research. Another modi\ufb01cation that would likely improve our method\nis to \ufb01lter the pretraining mix data for toxic content (Ngo et al., 2021), or augment this data with\nsynthetic instructions.", "in Section 5.\n3.3.1 Instruction Tuning Datasets\nAfter pre-training, instruction tuning ( a.k.a., supervised fine-\ntuning) is an important method to enhance or unlock spe-\ncific abilities of LLMs ( e.g., instruction following). In this\npart, we introduce several widely used datasets for in-\nstruction tuning, and categorize them into three main types\nbased on the construction method of formatted instruction\ninstances, namely NLP task datasets, daily chat datasets and\nsynthetic datasets. We show their details in Table 3.\nNLP Task Datasets. This kind of datasets are formatted\nbased on collected NLP task datasets ( e.g., text classifica-\ntion and summarization) with corresponding natural lan-\nguage task descriptions. In this category, P3 [182] and\nFLAN [67, 183] are two widely used datasets for instruction\ntuning.\n\u2022P3[182] is composed of 170 English NLP datasets and\n2,052 English prompt templates, where the input and output\nof each data example have been formatted with specific", "to the data filtering strategy. This is achieved by simply modifying the Maximum Likelihood\nEstimation (MLE), enabling the model to mitigate hallucination through learning from regular\ninstruction data.\n5.3.2 Reinforcement Learning. Reinforcement learning (RL) is introduced to train MLLMs for\nmitigating hallucinations by conducting the following perspectives: 1) Automatic Metric-based\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024."], "retrieved_docs_id": ["19a4c2c778", "e0158da525", "79f2119f98", "8fb61bab40", "11d0900242"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does Woodpecker, an early attempt on hallucination detection and correction, identify and correct hallucinations?\n", "true_answer": "Woodpecker identifies and corrects hallucinations by extracting key concepts from the generated text and validating them using visual content. It then detects and corrects any hallucinated concepts by asking questions around the extracted concepts.", "source_doc": "hallucination.pdf", "source_id": "b4dda01e19", "retrieved_docs": ["Hallucination of Multimodal Large Language Models: A Survey 21\n5.4.2 Post-hoc Correction. Post-hoc correction refers to first allowing the MLLM to generate a text\nresponse and then identifying and eliminating hallucinating content, resulting in less hallucinated\noutput. This is usually achieved by grounding on visual content [ 114], pre-trained revisior [ 137],\nand self-revision [63].\nWoodpecker [ 114] is an early attempt on hallucination detection and correction. Similar to how\na woodpecker heals trees, Woodpecker picks out and corrects hallucinations from the generated\ntext. The key idea of Woodpecker is to extract key concepts from the generated text and validate\nthem using visual content. Subsequently, the hallucinated concepts can be detected and corrected\naccordingly. Specifically, it consists of five stages: 1) Key concept extraction identifies the main objects\nmentioned in the generated sentences; 2) Question formulation asks questions around the extracted", "reduce hallucination. Visual context refers to the visual tokens that can be grounded from the\ngenerated text response. An oracle study showed that decoding from the provided optimal visual\ncontexts eliminates over 84.5% of hallucinations. Based on the insight and observation, the authors\ndesigned mechanisms to locate the fine-grained visual information to correct each generated\ntoken that might be hallucinating. This is essentially a visual content-guided decoding strategy.\nIn addition to token-level correction, HALC also incorporates a matching-based beam search that\nutilizes a visual matching score to steer the generation of the final outputs, balancing both object\nhallucination mitigation and text generation quality.\nOthers. The work of OPEAR [ 45] makes an interesting observation that most hallucinations\nare closely tied to the knowledge aggregation patterns manifested in the self-attention matrix,", "mentioned in the generated sentences; 2) Question formulation asks questions around the extracted\nobjects; 3) Visual knowledge validation answers the formulated questions via expert models; 4)\nVisual claim generation converts the above Question-Answer (QA) pairs into a visual knowledge\nbase; 5) Hallucination correction modifies the hallucinations and adds the corresponding evidence\nunder the guidance of the visual knowledge base. Woodpecker is a training-free method, where\neach component can be implemented using either hand-crafted rules or off-the-shelf pre-trained\nmodels.\nAnother line of work rectifies the generated text using a dedicatedly trained revisor model.\nSpecifically, inspired by denoising autoencoders [ 101], which are designed to reconstruct clean data\nfrom corrupted input, LURE [ 137] employs a hallucination revisor that aims to transform potentially\nhallucinatory descriptions into accurate ones. To train such a revisor model, a dataset has been", "than ever.\nCorrect!Does not exist!\n\u2705\n\"\nWrong authors!\n\"\nFigure 7: Example of Hallucinations with GPT-4 ,\naccessed on 02/06/2023.\nUnfortunately, LLMs often suffer from halluci-\nnations , which contain inaccurate information that\ncan be hard to detect due to the text\u2019s fluency. Fig. 7\nillustrates an example.\nTo distinguish between different types of hallu-\ncinations, we consider the provided source content\nof the model, e.g., the prompt, possibly includ-\ning examples or retrieved context. Based on such,\nwe can distinguish between intrinsic andextrinsic\nhallucinations [ 241]. In the former, the generated\ntext logically contradicts the source content. In\nthe latter, we cannot verify the output correctness\nfrom the provided source; the source content does\nnot provide enough information to assess the out-\nput, which is, therefore, under-determined. Extrin-\nsic hallucination is not necessarily erroneous, as it\nmerely means the model generated an output that", "14 Bai, et al.\nMHaluBench [ 13]This benchmark does not aim to evaluate the MLLMs themselves. Instead, it\nis intentionally designed to evaluate the hallucination detection tools of MLLMs, i.e., judge whether\na tool can successfully detect the hallucination produced by an MLLM. Thus, the benchmark\nconsists of hallucinatory examples. Specifically, the benchmark unifies image-to-text tasks and the\ntext-to-image tasks into one evaluation suite: cross-modal consistency checking. The hallucinatory\nexamples are generated using leading MLLMs and image generation models, such as LLaVA [ 75],\nMiniGPT-4 [ 138], DALL-E2 [ 89], and DALL-E3 [ 6]. During evaluation, the benchmark can be used\nto compare different hallucination detection methods based on their performance. So far, there are\nnot many dedicated hallucination detection methods. This work serves as a basis for this direction.\nVHTest [ 46]VHTest categorizes visual properties of objects in an image into 1) individual"], "retrieved_docs_id": ["b4dda01e19", "31eefbd9eb", "ceeab98980", "f5bf6c34dc", "5c89e9ef97"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "Which model outperforms GPT-4 in generating EDA tools scripts and as an engineering assistant chatbot?\n", "true_answer": "The fine-tuned LLaMA2 70B model, as demonstrated by ChipEDA (He et al., 2023), outperforms the GPT-4 model on these tasks.", "source_doc": "ChipNemo.pdf", "source_id": "e6b9ba907a", "retrieved_docs": ["processor with GPT-4 and GPT-3.5. Their findings showed\nthat although GPT-4 produced relatively high-quality codes,\nit still does not perform well enough at understanding and\nfixing the errors. ChipEDA (He et al., 2023) proposed to use\nLLMs to generate EDA tools scripts. It also demonstrated\nthat fine-tuned LLaMA2 70B model outperforms GPT-4\nmodel on this task.\n5. Conclusions\nWe explored domain-adapted approaches to improve LLM\nperformance for industrial chip design tasks. Our results\nshow that domain-adaptive pretrained models, such as the\n7B, 13B, and 70B variants of ChipNeMo, achieve simi-\nlar or better results than their base LLaMA2 models with\nonly 1.5% additional pretraining compute cost. Our largest\ntrained model, ChipNeMo-70B, also surpasses the much\nmore powerful GPT-4 on two of our use cases, engineering\nassistant chatbot and EDA scripts generation, while show-\ning competitive performance on bug summarization and\nanalysis. Our future work will focus on further improving", "niques: domain-adaptive tokenization, domain-\nadaptive continued pretraining, model alignment\nwith domain-specific instructions, and domain-\nadapted retrieval models. We evaluate these\nmethods on three selected LLM applications for\nchip design: an engineering assistant chatbot,\nEDA script generation, and bug summarization\nand analysis. Our evaluations demonstrate that\ndomain-adaptive pretraining of language models,\ncan lead to superior performance in domain re-\nlated downstream tasks compared to their base\nLLaMA2 counterparts, without degradations in\ngeneric capabilities. In particular, our largest\nmodel, ChipNeMo-70B, outperforms the highly\ncapable GPT-4 on two of our use cases, namely en-\ngineering assistant chatbot and EDA scripts gener-\nation, while exhibiting competitive performance\non bug summarization and analysis. These re-\nsults underscore the potential of domain-specific\ncustomization for enhancing the effectiveness of\nlarge language models in specialized applications.", "Bard, etc.) and open-source (Vicuna (Chiang et al., 2023),\nLLaMA2 (Touvron et al., 2023), etc.) large language mod-\nels (LLM) provide an unprecedented opportunity to help\nautomate these language-related chip design tasks. Indeed,\nearly academic research (Thakur et al., 2023; Blocklove\net al., 2023; He et al., 2023) has explored applications of\nLLMs for generating Register Transfer Level (RTL) code\nthat can perform simple tasks in small design modules as\nwell as generating scripts for EDA tools.\nWe believe that LLMs have the potential to help chip de-\nsign productivity by using generative AI to automate many\nlanguage-related chip design tasks such as code generation,\nresponses to engineering questions via a natural language\ninterface, analysis and report generation, and bug triage. In\nthis study, we focus on three specific LLM applications: an\nengineering assistant chatbot for GPU ASIC and Architec-\nture design engineers, which understands internal hardware", "uations, more than 70% correctness on the generation\nof simple EDA scripts, and expert evaluation ratings\nabove 5 on a 7 point scale for summarizations and\nassignment identification tasks.\n\u2022 Domain-adapted ChipNeMo models dramatically out-\nperforms all vanilla LLMs evaluated on both multiple-\nchoice domain-specific AutoEval benchmarks and hu-\nman evaluations for applications.\n\u2022Using the SteerLM alignment method (Dong et al.,\n2023) over traditional SFT improves human evaluation\nscores for the engineering assistant chatbot by 0.62\npoints on a 7 point Likert scale.\n\u2022SFT on an additional 1.4Kdomain-specific instruc-\ntions significantly improves the model\u2019s proficiency at\ngenerating correct EDA tool scripts by 18%.\n\u2022Domain-adaptive tokenization reduce domain data to-\nken count by up to 3.3%without hurting effectiveness\non applications.\n\u2022Fine-tuning our ChipNeMo retrieval model with\n2", "vant in-domain knowledge from its data store to augment\nthe response generation given a user query. This method\nshows significant improvement in grounding the model to\nthe context of a particular question. Crucially we observed\nsignificant improvements in retrieval hit rate when finetun-\ning a pretrained retrieval model with domain data. This led\nto even further improvements in model quality.\nOur results show that domain-adaptive pretraining was the\nprimary technique driving enhanced performance in domain-\nspecific tasks. We highlight the following contributions and\nfindings for adapting LLMs to the chip design domain:\n\u2022We demonstrate domain-adapted LLM effectiveness on\nthree use-cases: an engineering assistant chatbot, EDA\ntool script generation, and bug summarization and anal-\nysis. We achieve a score of 6.0 on a 7 point Likert scale\nfor engineering assistant chatbot based on expert eval-\nuations, more than 70% correctness on the generation"], "retrieved_docs_id": ["e6b9ba907a", "a6c3d05123", "f23b3625e0", "c7d05c4b43", "28f0897bcb"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What issue do large language models (LLMs) face that affects their reliability in knowledge-intensive tasks?\n", "true_answer": "LLMs like ChatGPT often struggle with hallucinations, knowledge updates, and data-related issues, which can affect their performance in tasks requiring access to a vast amount of knowledge, such as open-domain question answering and common-sense reasoning.", "source_doc": "RAG.pdf", "source_id": "ee184b2a82", "retrieved_docs": ["overall smaller parameter size, both the retriever and gener-\nator often undergo synchronized end-to-end training or fine-\ntuning [Izacard et al. , 2022 ].\nAfter the emergence of LLM like ChatGPT, generative lan-\nguage models became predominant, showcasing impressive\nperformance across various language tasks [Baiet al. , 2022,\nOpenAI, 2023, Touvron et al. , 2023, Google, 2023 ]. How-\never, LLMs still face challenges such as hallucina-\ntions [Yaoet al. , 2023, Bang et al. , 2023 ], knowledge up-\ndates, and data-related issues. This affects the relia-\nbility of LLMs, making them struggle in certain seri-\nous task scenarios, especially in knowledge-intensive tasks\nrequiring access to a vast amount of knowledge, such\nas open-domain question answering [Chen and Yih, 2020,\nReddy et al. , 2019, Kwiatkowski et al. , 2019 ]and common-\nsense reasoning [Clark et al. , 2019, Bisk et al. , 2020 ]. Im-\nplicit knowledge within parameters may be incomplete and\ninsufficient.", "Retrieval-Augmented Generation for Large Language Models: A Survey\nYunfan Gao1,Yun Xiong2,Xinyu Gao2,Kangxiang Jia2,Jinliu Pan2,Yuxi Bi3,Yi\nDai1,Jiawei Sun1and Haofen Wang1,3\u2217\n1Shanghai Research Institute for Intelligent Autonomous Systems, Tongji University\n2Shanghai Key Laboratory of Data Science, School of Computer Science, Fudan University\n3College of Design and Innovation,Tongji University\ngaoyunfan1602@gmail.com\nAbstract\nLarge language models (LLMs) demonstrate pow-\nerful capabilities, but they still face challenges in\npractical applications, such as hallucinations, slow\nknowledge updates, and lack of transparency in\nanswers. Retrieval-Augmented Generation (RAG)\nrefers to the retrieval of relevant information from\nexternal knowledge bases before answering ques-\ntions with LLMs. RAG has been demonstrated\nto significantly enhance answer accuracy, reduce\nmodel hallucination, particularly for knowledge-\nintensive tasks. By citing sources, users can verify", "recently, HaluEval [602] creates a large-scale LLM-generated\nand human-annotated hallucinated samples to evaluate the\nability of language models to recognize hallucination in both\ntask-specific and general scenarios.\nHallucination\nLLMs are prone to generate untruthful informa-\ntion that either conflicts with the existing source\nor cannot be verified by the available source.\nEven the most powerful LLMs such as ChatGPT\nface great challenges in migrating the hallucina-\ntions of the generated texts. This issue can be\npartially alleviated by special approaches such as\nalignment tuning and tool utilization.\n\u2022Knowledge recency . As another major challenge, LLMs\nwould encounter difficulties when solving tasks that require", "since the loss surface of LLMs should not have a large curvature. Note that this holds only when we\nteach the LLMs natural language-based tasks (or code-based if pre-trained with code). A synthetic\nloss function unrelated to pre-training tasks will indeed face the large curvature problem.\nLocal optimum is good enough The goal of fine-tuning is to adapt LLMs to new tasks and do-\nmains without significantly changing the model itself. Therefore, a local optimum is often a good\nenough solution, and the limited training data (compared to pre-training corpus) makes it difficult to\npush the model to a faraway global optimum.\n3", "proach still needs more inspections and exami-\nnations in real-world tasks.\n\u2022Underperforming specialized generation . Although LLMs\nhave learned general language patterns to generate coherent\ntext, their proficiency in generation might be constrained\nwhen dealing with a specialized domain or task. For in-\nstance, a language model that has been trained on gen-\neral web articles may face challenges when generating a\nmedical report which involves many medical jargon and\nmethods. Intuitively, domain knowledge should be critical\nfor model specialization. However, it is not easy to inject\nsuch specialized knowledge into LLMs. As discussed in\nrecent analyses [47, 648], when LLMs are trained to exhibit\nsome specific ability that allows them to excel in some areas,\nthey might struggle in others. Such an issue is related to\ncatastrophic forgetting [649, 650] in training neural networks,\nwhich refers to the conflict phenomenon of integrating new"], "retrieved_docs_id": ["ee184b2a82", "af911eac69", "fa2581a685", "59bfe0a036", "a106c98684"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "Which area of application has potential for efficient Multimodal Large Language Models?\n", "true_answer": "Efficient Multimodal Large Language Models have potential for widespread application in academia and industry, especially in edge computing scenarios.", "source_doc": "multimodal.pdf", "source_id": "ac70fcc9f2", "retrieved_docs": ["Efficient Multimodal Large Language Models:\nA Survey\nYizhang Jin1,2,*, Jian Li1,*, Yexin Liu3, Tianjun Gu4, Kai Wu1, Zhengkai Jiang1,\nMuyang He3, Bo Zhao3, Xin Tan4, Zhenye Gan1, Yabiao Wang1, Chengjie Wang1,\nLizhuang Ma2\n1Youtu Lab, Tencent,2SJTU,3BAAI,4ECNU\nAbstract\nIn the past year, Multimodal Large Language Models (MLLMs) have demon-\nstrated remarkable performance in tasks such as visual question answering, vi-\nsual understanding and reasoning. However, the extensive model size and high\ntraining and inference costs have hindered the widespread application of MLLMs\nin academia and industry. Thus, studying efficient and lightweight MLLMs\nhas enormous potential, especially in edge computing scenarios. In this survey,\nwe provide a comprehensive and systematic review of the current state of effi-\ncient MLLMs. Specifically, we summarize the timeline of representative effi-\ncient MLLMs, research state of efficient structures and strategies, and the appli-", "cient MLLMs, research state of efficient structures and strategies, and the appli-\ncations. Finally, we discuss the limitations of current efficient MLLM research\nand promising future directions. Please refer to our GitHub repository for more\ndetails: https://github.com/lijiannuist/Efficient-Multimodal-LLMs-Survey.\n1 Introduction\nLarge-scale pretraining, a leading approach in Artificial Intelligence(AI), has seen general-purpose\nmodels like large language and multimodal models outperform specialized deep learning models\nacross many tasks. The remarkable abilities of Large Language Models (LLM) have inspired efforts\nto merge them with other modality-based models to enhance multimodal competencies. This con-\ncept is further supported by the remarkable success of proprietary models like OpenAI\u2019s GPT-4V [1]\nand Google\u2019s Gemini[2]. As a result, Multimodal Large Language Models (MLLMs) have emerged,\nincluding the mPLUG-Owl series[3, 4], InternVL [5], EMU [6], LLaV A [7], InstructBLIP [8],", "Figure 2: Organization of efficient multimodal large language models advancements.\n\u2022 Training surveys the landscape of training methodologies that are pivotal in the devel-\nopment of efficient MLLMs. It addresses the challenges associated with the pre-training\nstage, instruction-tuning stage, and the overall training strategy for state-of-the-art results.\n\u2022 Data and Benchmarks evaluates the efficiency of datasets and benchmarks used in the\nevaluation of multimodal language models. It assesses the trade-offs between dataset size,\ncomplexity, and computational cost, while advocating for the development of benchmarks\nthat prioritize efficiency and relevance to real-world applications.\n\u2022 Application investigates the practical implications of efficient MLLMs in various do-\nmains, emphasizing the balance between performance and computational cost. By ad-\ndressing resource-intensive tasks such as high-resolution image understanding and medical\n3", "Hallucination of Multimodal Large Language Models: A Survey 5\nVision InputVision ModelLLMImageVideo\u2026CLIP DINO-v2Linear\u2026LLaMAVicunaChatGLMFuyuDecodingGreedyBeam SearchSamplingText InputInstruction\u2026TokenizerBPE SentencePiece\u2026\nFig. 2. Popular architecture of multimodal large language model.\nintegration of human feedback into the training loop has demonstrated effectiveness in enhancing\nthe alignment of LLMs.\n2.2 Multimodal Large Language Models\nMLLMs [ 22,75,111,138] typically refers to a series of models that enable LLMs to perceive and\ncomprehend data from various modalities. Among them, vision+LLM is particularly prominent,\nowing to the extensive research on vision-language models (VLMs) [ 51,88,116] prior to LLMs. As a\nresult, MLLMs are sometimes referred to as vision-LLMs (VLLMs) or large vision language models\n(LVLMs). The goal of MLLMs is to activate the visual capabilities of LLMs, enabling them to \"see\"", "FastV[46], VTW[47]\nTraining (\u00a75)Pre-Training (\u00a75.1) Idefics2[48], TinyLLaV A[23], VILA[49]\nInstruction-Tuning (\u00a75.2) LaVIN[50], HyperLLaV A[51]\nDiverse Training Steps (\u00a75.3) SPHINX-X[14], Cobra[13], TinyGPT-V[28]\nParameter Efficient\nTransfer Learning (\u00a75.4)EAS [52], MemVP [53]\nData and Benchmarks (\u00a76)Pre-Training Data (\u00a76.1)CC595k[7], LLava-1.5-PT[54],\nShareGPT4V-PT[55],\nBunny-pretrain-LAION-2M[24],\nALLaV A-Caption-4V[29], etc.\nInstrcution-Tuning Data (\u00a76.2)LLaV A\u2019s IT[7], LLaV A-1.5\u2019s IT[54],\nShareGPT4V\u2019s IT[55], Bunny-695K[24],\nLVIS-INSTRUCT-4V[56], etc.\nBenchmarks (\u00a76.3)VQAv2[57], TextVQA[58], GQA[59],\nMME[60], MMBench[61], POPE[62]\nApplication (\u00a77)Biomedical Analysis (\u00a77.1) LLaV A-Rad [63], MoE-TinyMed [64]\nDocument Understanding (\u00a77.2)TextHawk [36], TinyChart [37],\nMonkey [65], HRVDA [66]\nVideo Comprehension (\u00a77.3)mPLUG-video [67], Video-LLaV A [44],\nMA-LMM [68], LLaMA-VID [69]\nFigure 2: Organization of efficient multimodal large language models advancements."], "retrieved_docs_id": ["ac70fcc9f2", "e021f7788d", "542e5c49da", "f49f3b54ce", "d85947fa4f"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How much does RAG improve the scores of ChipNeMo-70B-Steer, GPT-4, and LLaMA2-70b-Chat?\n", "true_answer": "RAG improves ChipNeMo-70B-Steer by 0.56, GPT-4 by 1.68, and LLaMA2-70b-Chat by 2.05.", "source_doc": "ChipNemo.pdf", "source_id": "af6e8c3fb2", "retrieved_docs": ["and required more context (see Appendix A.8 for detailed\nexamples). This significantly contributes to the differencein retrieval quality between the categories.\nFigure 7: Human Evaluation of Different Models. Model Only\nrepresents results without RAG. RAG (hit)/(miss) only include\nquestions whose retrieved passages hit/miss their ideal context,\nRAG (avg) includes all questions. 7 point Likert scale.\nWe conducted evaluation of multiple ChipNeMo models\nand LLaMA2 models with and without RAG. The results\nwere then scored by human evaluators on a 7 point Likert\nscale and shown in Figure 7. We highlight the following:\n\u2022ChipNeMo-70B-Steer outperforms GPT-4 in all cate-\ngories, including both RAG misses and hits.\n\u2022ChipNeMo-70B-Steer outperforms similar sized\nLLaMA2-70b-Chat in model-only and RAG evalua-\ntions by 3.31 and 1.81, respectively.\nOur results indicate that RAG significantly boosts human\nscores. RAG improves ChipNeMo-70B-Steer, GPT-4, and", "scores. RAG improves ChipNeMo-70B-Steer, GPT-4, and\nLLaMA2-70b-Chat by 0.56, 1.68, and 2.05, respectively.\nEven when RAG misses, scores are generally higher than\nwithout using retrieval. The inclusion of relevant in-domain\ncontext still led to improved performance, as retrieval is not\na strictly binary outcome. Furthermore, while ChipNeMo-\n70B-SFT outperforms GPT4 by a large margin through\ntraditional supervised fine-tuning, applying SteerLM meth-\nods (Wang et al., 2023) leads to further elevated chatbot\nratings. We refer readers to the complete evaluation results\nin Appendix A.9.\n3.6. EDA Script Generation\nIn order to evaluate our model on the EDA script generation\ntask, we created two different types of benchmarks. The first\nis a set of \u201cEasy\u201d and \u201cMedium\u201d difficulty tasks (1-4 line\nsolutions) that can be evaluated without human intervention\nby comparing with a golden response or comparing the\ngenerated output after code execution. The second set of", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ntask assignnment. Participants are tasked with rating the\nmodel\u2019s performance on a 7-point Likert scale for each of\nthese three assignments. The results can be found in Fig-\nure 10. Although the GPT-4 model excels in all three tasks,\noutperforming both our ChipNeMo-70B-Steer model and\nthe LLaMA2-70B-Chat model, ChipNeMo-70B-Steer does\nexhibit enhancements compared to the off-the-shelf LLaMA\nmodel of equivalent size. We attribute the comparatively\nlower improvements in summarization tasks resulting from\nour domain-adaptation to the limited necessity for domain-\nspecific knowledge in summarization compared to other\nuse-cases.\n4. Related Works\nMany domains have a significant amount of proprietary data\nwhich can be used to train a domain-specific LLM. One ap-\nproach is to train a domain specific foundation model from\nscratch, e.g., BloombergGPT(Wu et al., 2023) for finance,\nBioMedLLM(Venigalla et al., 2022) for biomed, and Galac-", "results on automated \u201ceasy\u201d and \u201cmedium\u201d benchmarks\nwhere we check for fully accurate code. For \u201cHard\u201d bench-\nmarks in Figure 9 we check for partial correctness of the\ncode, which is evaluated by a human user on a 0-10 scale.\nChipNeMo-70B-Steer performs significantly better than off-\nthe-shelf GPT-4 and LLaMA2-70B-Chat model.\nFigure 8: EDA Script Generation Evaluation Results, Pass@5\nAs seen in Figure 8, models like GPT-4 and LLaMA2-70B-\nChat have close to zero accuracy for the Python tool where\nthe domain knowledge related to APIs of the tool are neces-\nsary. This shows the importance of DAPT. Without DAPT,\nthe model had little to no understanding of the underlying\nAPIs and performed poorly on both automatic and human\nevaluated benchmarks. Our aligned model further improved\nthe results of DAPT because our domain instructional data\nhelps guide the model to present the final script in the most\nuseful manner. An ablation study on inclusion of domain", "retrieval model, the fact remains that retrieval still struggles\nwith queries that do not map directly to passages in the\ndocument corpus or require more context not present in\nthe passage. Unfortunately, these queries are also more\nrepresentative of queries that will be asked by engineers in\nreal situations. Combining retrieval with a domain adapted\nlanguage model is one way to address this issue.\n3. Evaluations\nWe evaluate our training methodology and application per-\nformance in this section. We study our 7B, 13B, and 70B\nmodels in the training methodology evaluation, and only our\nChipNeMo-70B model using SteerLM for model alignment\nin the application performance evaluation. For compari-\nson, we also evaluate two baseline chat models: LLaMA2-\n70B-Chat and GPT-4. LLaMA2-70B-Chat is the publicly\nreleased LLaMA2-Chat model trained with RLHF and is\nconsidered to be the state-of-the-art open-source chat model,\nwhile GPT-4 is considered to be the state-of-the-art propri-"], "retrieved_docs_id": ["1ed1c2ae54", "af6e8c3fb2", "74fe22ec46", "cf9d13203d", "0fb655a6fb"], "reranker_type": "None", "search_type": "text", "rr": 0.5, "hit": 1}, {"question": "How does Flare decide when to retrieve references during text generation?\n", "true_answer": "Flare decides to retrieve references based on the probability of the generated text. When the probability of a term falls below a predefined threshold, Flare's information retrieval system retrieves references and removes terms with lower probabilities.", "source_doc": "RAG.pdf", "source_id": "b844a74991", "retrieved_docs": ["they can decide to search for a relevant query to collect the\nnecessary materials, similar to the tool call of the agent.\nWebGPT [Nakano et al. , 2021 ]employs a reinforcement\nlearning framework to automatically train the GPT-3 model\nto use a search engine for text generation. It uses special to-\nkens to perform actions, including querying on a search en-\ngine, scrolling rankings, and citing references. This allows\nGPT-3 to leverage a search engine for text generation.\nFlare [Jiang et al. , 2023b ], on the other hand, automates the\ntiming of retrieval and addresses the cost of periodic docu-\nment retrieval based on the probability of the generated text.\nIt uses probability as an indicator of LLMs\u2019 confidence during\nthe generation process. When the probability of a term falls\nbelow a predefined threshold, the information retrieval sys-\ntem would retrieve references and removes terms with lower\nprobabilities. This approach is designed to handle situations", "Recite-Read [Sunet al. , 2022 ]transforms external re-\ntrieval into retrieval from model weights, initially hav-\ning LLM memorize task-relevant information and gener-\nate output for handling knowledge-intensive natural lan-\nguage processing tasks.\n\u2022Adjusting the Flow between Modules In the realm of\nadjusting the flow between modules, there is an empha-\nsis on enhancing interaction between language models\nand retrieval models. DSP [Khattab et al. , 2022 ]intro-\nduces the Demonstrate-Search-predict framework, treat-\ning the context learning system as an explicit program\nrather than a terminal task prompt to address knowledge-\nintensive tasks. ITER-RETGEN [Shao et al. , 2023 ]\nutilizes generated content to guide retrieval, itera-\ntively performing \u201cretrieval-enhanced generation\u201d and\n\u201cgeneration-enhanced retrieval\u201d in a Retrieve-Read-\nRetrieve-Read flow. Self-RAG [Asai et al. , 2023b ]fol-\nlows the decide-retrieve-reflect-read process, introduc-", "lows the decide-retrieve-reflect-read process, introduc-\ning a module for active judgment. This adaptive and\ndiverse approach allows for the dynamic organization of\nmodules within the Modular RAG framework.\n4 Retriever\nIn the context of RAG, the \u201dR\u201d stands for retrieval, serving\nthe role in the RAG pipeline of retrieving the top-k relevant\ndocuments from a vast knowledge base. However, crafting\na high-quality retriever is a non-trivial task. In this chapter,\nwe organize our discussions around three key questions: 1)\nHow to acquire accurate semantic representations? 2) How\nto match the semantic spaces of queries and documents? 3)\nHow to align the output of the retriever with the preferences\nof the Large Language Model ?\n4.1 How to acquire accurate semantic\nrepresentations?\nIn RAG, semantic space is the multidimensional space where\nquery and Document are mapped. When we perform re-\ntrieval, it is measured within the semantic space. If the se-", "probabilities. This approach is designed to handle situations\nwhere LLMs might need additional knowledge.\nSelf-RAG [Asai et al. , 2023b ]introduces an important in-\nnovation called Reflection tokens. These special tokens are\ngenerated to review the output and come in two types: Re-\ntrieve and Critic. The model can autonomously decide when\nto retrieve paragraphs or use a set threshold to trigger re-\ntrieval. When retrieval is needed, the generator processes\nmultiple paragraphs simultaneously, performing fragment-\nlevel beam search to obtain the best sequence. The scores for\neach subdivision are updated using Critic scores, and these\nweights can be adjusted during the inference process to cus-\ntomize the model\u2019s behavior. The Self-RAG framework also\nallows the LLM to autonomously determine whether recall\nis necessary, avoiding training additional classifiers or rely-\ning on NLI models. This enhances the model\u2019s ability to au-\ntonomously judge inputs and generate accurate answers.", "itized. This method, which involves querying related doc-\numents and inputting into a LLM based on context, may\nlead to efficiency issues. Adaptive retrieval methods such\nas those introduced by Flare [Jiang et al. , 2023b ]and Self-\nRAG [Asai et al. , 2023b ], optimize the RAG retrieval process,\nenabling the LLM to actively judge the timing and content of\nretrieval. This helps to improve the efficiency and relevance\nof the information retrieved.\nIn fact, the way in which LLM actively uses tools and\nmakes judgments is not originated from RAG but has been\nwidely used in the agents of large models [Yang et al. , 2023c,\nSchick et al. , 2023, Zhang, 2023 ]. The retrieval steps\nof Graph-Toolformer [Zhang, 2023 ]are roughly divided\ninto: LLMs actively use the retriever, Self-Ask and\nDSP[Khattab et al. , 2022 ]try to use few-shot prompts to trig-\nger LLM search queries. When LLMs think it is necessary,\nthey can decide to search for a relevant query to collect the"], "retrieved_docs_id": ["b844a74991", "dfac20a7d8", "8fe8499442", "2449b179e1", "8d605d7952"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is the role of GShard in MoE?\n", "true_answer": "GShard is a module composed of a set of lightweight annotation APIs and XLA compiler extensions that offers an elegant way to express various parallel computation patterns while making minimal changes to existing model code, enabling scaling of multi-lingual neural machine translation in MoE.", "source_doc": "multimodal.pdf", "source_id": "a7d187c571", "retrieved_docs": ["Switch Transformers\nMixture of Experts (MoE), in the context of modern deep learning architectures, was\nproven e\ufb00ective in Shazeer et al. (2017). That work added an MoE layer which was stacked\nbetween LSTM (Hochreiter and Schmidhuber, 1997) layers, and tokens were separately\nrouted to combinations of experts. This resulted in state-of-the-art results in language\nmodeling and machine translation benchmarks. The MoE layer was reintroduced into the\nTransformer architecture by the Mesh Tensor\ufb02ow library (Shazeer et al., 2018) where MoE\nlayers were introduced as a substitute of the FFN layers, however, there were no accom-\npanying NLP results. More recently, through advances in machine learning infrastructure,\nGShard (Lepikhin et al., 2020), which extended the XLA compiler, used the MoE Trans-\nformer to dramatically improve machine translation across 100 languages. Finally Fan et al.\n(2021) chooses a di\ufb00erent deterministic MoE strategy to split the model parameters into", "model. During the inference phase, given an input, all experts are ranked, and the most relevant\nones are selected for computation. This approach considerably reduces the amount of computa-\ntion, as only a subset of experts is involved in the calculation.By distributing computational tasks\namong different experts, MoE achieves more efficient utilization of computational resources during\nboth training and inference phases. In MoE, each expert has its own set of parameters; however,\nthese parameters are shared during the training process. This parameter-sharing strategy reduces\nthe overall number of parameters in the model, consequently lowering storage and computational\ncosts. GShard [149] is a module composed of a set of lightweight annotation APIs and XLA com-\npiler extensions, which offers an elegant way to express various parallel computation patterns while\nmaking minimal changes to existing model code. It enables us to scale multi-lingual neural machine", "x, respectively. We can then write the output as\ny=Pn\ni=1G(x)iEi(x). Wherever G(x)i= 0,\nwe do not need to compute Ei(x), thereby saving\ncompute during inference. Lepikhin et al. [298]\nscale up an SG-MoE model to 600B parameters\nby proposing GShard , a model parallelism method\nthat extends the XLA [ 468] compiler. While SG-\nMoE selects the top- kexperts with k > 1, the\nSwitch Transformer (ST) [ 145] architecture uses\nk= 1experts, which reduces routing computation\nand communication across experts (which may be\nlocated on different accelerators). ST empirically\noutperformed a strongly tuned T5 model with up to\n7x pre-training speedups. Lewis et al. [302] notice\nthat the learned routers can result in unbalanced\nassignments across experts. To ensure balanced\nrouting, they formulate a linear assignment prob-\nlem that maximizes token-expert affinities while\nequally distributing the number of tokens across\nexperts. Yu et al. [653] propose sMLP , an MoE", "FFN sub-blocks by MoE layers while GShard replaces every other block, and that GShard uses a\nmore elaborate gating strategy for the second expert assigned to each token.\n3 Results\nWe compare Mixtral to Llama, and re-run all benchmarks with our own evaluation pipeline for fair\ncomparison. We measure performance on a wide variety of tasks categorized as follow:\n\u2022Commonsense Reasoning (0-shot): Hellaswag [ 32], Winogrande [ 26], PIQA [ 3], SIQA [ 27],\nOpenbookQA [22], ARC-Easy, ARC-Challenge [8], CommonsenseQA [30]\n\u2022World Knowledge (5-shot): NaturalQuestions [20], TriviaQA [19]\n\u2022Reading Comprehension (0-shot): BoolQ [7], QuAC [5]\n\u2022Math: GSM8K [9] (8-shot) with maj@8 and MATH [17] (4-shot) with maj@4\n\u2022Code: Humaneval [4] (0-shot) and MBPP [1] (3-shot)\n\u2022Popular aggregated results: MMLU [ 16] (5-shot), BBH [ 29] (3-shot), and AGI Eval [ 34]\n(3-5-shot, English multiple-choice questions only)", "layer\u2019s execution, tokens meant to be processed by a specific expert are routed to the corresponding\nGPU for processing, and the expert\u2019s output is returned to the original token location. Note that EP\nintroduces challenges in load balancing, as it is essential to distribute the workload evenly across the\nGPUs to prevent overloading individual GPUs or hitting computational bottlenecks.\nIn a Transformer model, the MoE layer is applied independently per token and replaces the\nfeed-forward (FFN) sub-block of the transformer block. For Mixtral we use the same SwiGLU\narchitecture as the expert function Ei(x)and set K= 2. This means each token is routed to two\nSwiGLU sub-blocks with different sets of weights. Taking this all together, the output yfor an input\ntoken xis computed as:\ny=n\u22121X\ni=0Softmax (Top2 (x\u00b7Wg))i\u00b7SwiGLU i(x).\nThis formulation is similar to the GShard architecture [ 21], with the exceptions that we replace all"], "retrieved_docs_id": ["f698765e41", "a7d187c571", "add767b444", "481b718aab", "db00f64555"], "reranker_type": "None", "search_type": "text", "rr": 0.5, "hit": 1}, {"question": "What is the main difference in hallucination research between LLMs and MLLMs?\n", "true_answer": "The main difference is that hallucination research in LLMs typically focuses on discrepancies between generated content and real-world facts or user instructions, while research in MLLMs mainly focuses on cross-modal inconsistency between generated text response and provided visual content.", "source_doc": "hallucination.pdf", "source_id": "ce4c90f626", "retrieved_docs": ["The problem of hallucination originates from LLMs themselves. In the NLP community, the\nhallucination problem is empirically categorized into two types [ 44]: 1) factuality hallucination\nemphasizes the discrepancy between generated content and verifiable real-world facts, typically\nmanifesting as factual inconsistency or fabrication; 2) faithfulness hallucination refers to the di-\nvergence of generated content from user instructions or the context provided by the input, as\nwell as self-consistency within generated content. In contrast to pure LLMs, research efforts of\nhallucination in MLLMs mainly focus on the discrepancy between generated text response and\nprovided visual content [69,76,137],i.e., cross-modal inconsistency. This difference suggests that\nstudies in LLMs cannot be seemingly transferred to MLLMs. Therefore, there is a growing need to\ncomprehensively survey recent advancements in MLLMs\u2019 hallucination phenomena to inspire new\nideas and foster the field\u2019s development.", "offer valuable insights that deepen understanding of the opportunities and challenges associated\nwith hallucinations in MLLMs. This exploration not only enhances our understanding of the limita-\ntions of current MLLMs but also offers essential guidance for future research and the development\nof more robust and trustworthy MLLMs.\nComparison with existing surveys. In pursuit of reliable generative AI, hallucination stands\nout as a major challenge, leading to a series of survey papers on its recent advancements. For pure\nLLMs, there are several surveys [ 44,129], describing the landscape of hallucination in LLMs. In\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024.", "6.4 Establishing Standardized Benchmarks\nThe lack of standardized benchmarks and evaluation metrics poses significant challenges in as-\nsessing the degree of hallucination in MLLMs. In Table 1, it can be observed that there is a variety\nof evaluation benchmarks, but a lack of unified standards. Among them, one of the most popular\nbenchmarks might be POPE [ 69], which employs a \u2019Yes-or-No\u2019 evaluation protocol. However, this\nbinary-QA manner does not align with how humans use MLLMs. Accordingly, some benchmarks\nspecifically evaluate the hallucination of MLLMs in the (free-form) generative context. Yet, they\noften rely on external models, such as vision expert models or other LLMs, which limits their wide-\nspread application. Moving forward, future research can investigate standardized benchmarks that\nare theoretically sound and easy to use. Otherwise, research on methods to mitigate hallucinations\nmay be built on an incorrect foundation.\n6.5 Reframing Hallucination as a Feature", "overall framework, may be promising research directions.\n6.3 Advancements in Model Architecture\nDespite recent advancements in model architectures of LLMs and MLLMs, designing effective\narchitectures specifically tailored to hallucination remains a challenge. Developing advanced model\narchitectures capable of capturing complex linguistic structures and generating coherent and con-\ntextually relevant output based on input visual content is essential for improving the performance of\nMLLMs. Future research can explore innovative architectural designs based on identified causes of\nhallucination. This includes developing stronger visual perception models, innovative cross-modal\ninteraction modules capable of transferring cross-modal information seamlessly, and novel large\nlanguage model architectures faithful to input visual content and text instructions, etc.\n6.4 Establishing Standardized Benchmarks", "can be categorized into two main types: perception and\ncognition tasks. Specifically, perception tasks aim to assess the\nmodel\u2019s abilities in understanding the basic semantics of the\nimage content, while cognition tasks evaluate models with\nmore complex tasks that require reasoning based on per-\nception results. The perception ability is typically evaluated\nthrough classification tasks about attributes of image ( e.g.,\ntopic and style) and object ( e.g.,existence and color) or OCR-\nrelated tasks, based on existing datasets or new datasets\nderived from existing images with annotations by humans\nor LLMs [836\u2013839]. A notable perception issue is hallucina-\ntion [840], where the model\u2019s responses contain inconsistent\ncontent with the image. Among existing studies about hallu-\ncination in MLLMs [834, 841, 842], object hallucination [843]\nhas received much research attention. To conduct a stable,\nrobust evaluation of object hallucination, POPE [844] pro-"], "retrieved_docs_id": ["ce4c90f626", "76835931c1", "312439a972", "c8e35c3848", "2297503119"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is the issue associated with the rapid advancement of multimodal large language models?\n", "true_answer": "These models, also known as large vision-language models, have a tendency to generate hallucinations, producing seemingly plausible but factually inaccurate content.", "source_doc": "hallucination.pdf", "source_id": "da0a465b6c", "retrieved_docs": ["2 Bai, et al.\n1 INTRODUCTION\nRecently, the emergence of large language models (LLMs) [ 29,81,85,99,132] has dominated a wide\nrange of tasks in natural language processing (NLP), achieving unprecedented progress in language\nunderstanding [ 39,47], generation [ 128,140] and reasoning [ 20,58,87,107,115]. Leveraging\nthe capabilities of robust LLMs, multimodal large language models (MLLMs) [ 22,75,111,138],\nsometimes referred to as large vision-language models (LVLMs), are attracting increasing attention.\nMLLMs show promising ability in multimodal tasks, such as image captioning [ 66], visual question\nanswering [ 22,75], etc. However, there is a concerning trend associated with the rapid advancement\nin MLLMs. These models exhibit an inclination to generate hallucinations [ 69,76,137], resulting in\nseemingly plausible yet factually spurious content.\nThe problem of hallucination originates from LLMs themselves. In the NLP community, the", "Figure 2: Organization of efficient multimodal large language models advancements.\n\u2022 Training surveys the landscape of training methodologies that are pivotal in the devel-\nopment of efficient MLLMs. It addresses the challenges associated with the pre-training\nstage, instruction-tuning stage, and the overall training strategy for state-of-the-art results.\n\u2022 Data and Benchmarks evaluates the efficiency of datasets and benchmarks used in the\nevaluation of multimodal language models. It assesses the trade-offs between dataset size,\ncomplexity, and computational cost, while advocating for the development of benchmarks\nthat prioritize efficiency and relevance to real-world applications.\n\u2022 Application investigates the practical implications of efficient MLLMs in various do-\nmains, emphasizing the balance between performance and computational cost. By ad-\ndressing resource-intensive tasks such as high-resolution image understanding and medical\n3", "Datasets Format Examples\nText <s>KOSMOS -1can perceive multimodal input, learn in context, and gener-\nate output. </s>\nImage-Caption <s> <image> Image Embedding </image> W ALL-E giving potted plant to\nEVE. </s>\nMultimodal <s> <image> Image Embedding </image> This is WALL-E. <image>\nImage Embedding </image> This is EVE. </s>\nTable 21: The examples of the data format to train the K OSMOS -1 model.\nC Evaluation\nC.1 Input Format Used for Perception-Language Tasks\nFigure 7 shows how we conduct zero-shot and few-shot evaluations on perception-language tasks.\nMultimodal Large Language Model (MLLM)WALL -E          giving          potted        plant           to            EVE\nWALL -E        giving        potted         plant           to\n(a) Zero -shot learningEmbedding\nImageAn   image    of \n(b) Few -shot learningMultimodal Large Language Model (MLLM)Rubik's Cube\nEmbedding\nImageQuestion: what did \nWALL -E give EVE? \nAnswer: potted plant Embedding\nImageQuestion: What's \nin WALL -E\u2019s", "In cases where the LLM is only used to label\nexisting data [ 583,123] this will likely reduce\nthe risk of generating an unrepresentative training\ndistribution (although hallucinated labels remain\nan issue). Where the LLM is used to generate\n(or partially generate) both the input and the tar-\nget [ 123,104,182,51,503] the issue of halluci-\nnated distributions becomes potentially significant.\n4 Related Work\nClosest to ours is the concurrent work by Zhao\net al. [673] , who provide an extensive survey of\nlarge language models and associated topics. Mi-\nalon et al. [363] focus on surveying augmented\nlanguage models, i.e., \u201clanguage models with rea-\nsoning skills and the ability to use tools\u201d. Tornede\net al. [555] survey LLMs in the context of AutoML\nmethods, highlighting existing methods and chal-\nlenges in leveraging these for improving LLMs.\nTang et al. [539] survey LLM-generated text de-\ntection techniques. Chang et al. [72] concurrently\nsurvey evaluation tasks of LLMs.", "\u2022 At present, efficient MLLMs face challenges in processing extended-context multimodal\ninformation, and they are typically limited to accepting single images. This constrains the\nadvancement of more sophisticated models capable of handling an increased number of\nmultimodal tokens. Such models would be beneficial for applications like comprehending\nlengthy videos and analyzing extensive documents that incorporate a mix of images and\ntext, creating more versatile and powerful systems.\n\u2022 The predominant efficient MLLMs mainly support dual input modalities - images and texts,\nand a singular output modality - text. However, the tangible world encompasses a more\nextensive array of modalities. By expanding the scope of efficient MLLMs to accommodate\n23"], "retrieved_docs_id": ["da0a465b6c", "542e5c49da", "66ac2014df", "648753ed13", "a1bd2d5193"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does HyDE generate a hypothetical document relevant to the query?\n", "true_answer": "HyDE generates a hypothetical document relevant to the query by establishing query vectors through the use of text indicators and using these indicators to generate a document that captures the relevant pattern, even if it may not truly exist.", "source_doc": "RAG.pdf", "source_id": "71a4057422", "retrieved_docs": ["the semantic space of the user\u2019s query and documents is very\nnecessary. This section introduces two key technologies to\nachieve this goal.\nQuery Rewrite\nThe most intuitive way to align the semantics of\nquery and document is to rewrite the query. As\nmentioned in Query2Doc [Wang et al. , 2023b ]and ITER-\nRETGEN [Shao et al. , 2023 ], the inherent capabilities of\nlarge language models are utilized to generate a pseudo-\ndocument by guiding it, and then the original query is\nmerged with this pseudo-document to form a new query.\nIn HyDE [Gao et al. , 2022 ], query vectors are established\nthrough the use of text indicators, using these indicators to\ngenerate a \u2019hypothetical\u2019 document that is relevant, yet may\nnot truly exist, it only needs to capture the relevant pattern.\nRRR [Maet al. , 2023a ]introduced a new framework that in-\nverts the order of retrieval and reading, focusing on query\nrewriting. This method generates a query using a large lan-", "different scenarios, including using query engines pro-\nvided by frameworks like LlamaIndex, employing tree\nqueries, utilizing vector queries, or employing the most\nbasic sequential querying of chunks.\u2022HyDE: This approach is grounded on the assumption\nthat the generated answers may be closer in the embed-\nding space than a direct query. Utilizing LLM, HyDE\ngenerates a hypothetical document (answer) in response\nto a query, embeds the document, and employs this em-\nbedding to retrieve real documents similar to the hypo-\nthetical one. In contrast to seeking embedding similarity\nbased on the query, this method emphasizes the embed-\nding similarity from answer to answer. However, it may\nnot consistently yield favorable results, particularly in\ninstances where the language model is unfamiliar with\nthe discussed topic, potentially leading to an increased\ngeneration of error-prone instances.\nModular RAG\nThe modular RAG structure breaks away from the traditional", "or end of the input context, as opposed to the middle of the input context.\n1st 5th 10th 15th 20th\nPosition of Document with the Answer50607080Accuracy\n20 T otal Retrieved Documents \n(~4K tokens, query-aware contextualization)\nclaude-1.3\nclaude-1.3-100k\ngpt-3.5-turbo-0613gpt-3.5-turbo-16k-0613\nmpt-30b-instruct\nlongchat-13b-16k\nFigure 9: Query-aware contextualization (placing the\nquery before and after the documents) does not sub-\nstantially improve robustness of language models to\nchanging the position of relevant information in multi-\ndocument QA; performance slightly increases when\nrelevant information occurs at the very beginning, but\notherwise slightly decreases.\nof the prompt and decoder-only models can only\nattend to prior tokens at each timestep. In contrast,\nencoder-decoder models (which seem more robust\nto changes in the position of relevant information;\n\u00a74.1) use a bidirectional encoder to contextualize\ninput contexts\u2014can we use this observation to im-", "models must retrieve from the middle of the input context.\nplaced at the start of the input context, LongChat-\n13B (16K) tends to generate code to retrieve the\nkey, rather than outputting the value directly.\n4Why Are Language Models Not Robust\nto Changes in the Position of Relevant\nInformation?\nOur multi-document question answering and key-\nvalue retrieval results show that language models\nstruggle to robustly access and use information in\nlong input contexts, since performance degrades\nsignificantly when changing the position of rele-\nvant information. To better understand why, we per-\nform some preliminary investigations into the role\nof model architecture (decoder-only vs. encoder-\ndecoder), query-aware contextualization, and in-\nstruction fine-tuning.\n4.1 Effect of Model Architecture\nThe open models we evaluated are all decoder-only\nmodels\u2014at each timestep, they may only attend\nto prior tokens. To better understand the poten-\ntial effects of model architecture on how language", "cross-attention scores, selecting the highest scoring input to-\nkens to effectively filter tokens. RECOMP [Xuet al. , 2023a ]\nproposes extractive and generative compressors, which gen-\nerate summaries by selecting relevant sentences or syn-\nthesizing document information to achieve multi-document\nquery focus summaries.In addition to that, a novel approach,\nPKG [Luoet al. , 2023 ], infuses knowledge into a white-box\nmodel through directive fine-tuning, and directly replaces the\nretriever module, used to directly output relevant documents\nbased on the query.\n5 Generator\nAnother core component in RAG is the generator, responsible\nfor transforming retrieved information into natural and fluent\ntext. Its design is inspired by traditional language models,\nbut in comparison to conventional generative models, RAG\u2019s\ngenerator enhances accuracy and relevance by leveraging the\nretrieved information. In RAG, the generator\u2019s input includes"], "retrieved_docs_id": ["71a4057422", "d96393bb4b", "bacb42769d", "91a4302548", "cd69a480bb"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is a model that tailors for medical applications and significantly lowers parameter demands?\n", "true_answer": "MoE-TinyMed [64]", "source_doc": "multimodal.pdf", "source_id": "51c7c3d212", "retrieved_docs": ["paradigm in biomedicine, achieving state-of-the-art results on many applications, including medical\nquestion answering [194] and medical image classification [195]. Recently, multimodal generative\nAI has emerged as an exciting frontier in the biomedical domain, expanding the application scope\nfrom single-modality to multi-modality, such as VQA and radiology report generation.\nThe mixture of Expert Tuning has effectively enhanced the performance of general MLLMs with\nfewer parameters, yet its application in resource-limited medical settings has not been fully explored.\nMoE-TinyMed [64] is a model tailored for medical applications that significantly lower parameter\ndemands. LLaV A-Rad [63] is a state-of-the-art tool that demonstrates rapid performance on a sin-\ngle V100 GPU in private settings, making it highly applicable for real-world clinical scenarios. It\nemploys a modular approach, integrating unimodal pre-trained models and emphasizing the training", "plications are raised, including the risks of erro-\nneous generations and the risks of bias . Tang et al.\n[538] raise similar issues and find that GPT-3.5 and\nChatGPT have issues with factual accuracy and\nrepresenting the level of certainty during medical\nsummarization.\nHallucination and Bias [ 538,388,511]\nThe safety-critical nature of the medical do-\nmain means the possibility of hallucinations\nsignificantly limits the current use cases.\nFurther work is also needed to reduce the\nrisk of LLMs perpetuating existing bias in\nclinical datasets.\nYunxiang et al. [655] fine-tune a LLaMA LLM\nChatDoctor (7B parameters) specifically for the\ntask of medical question answering. To specialize\nthe LLaMA model, it is first instruction fine-tuned\nusing the Alpaca dataset [ 540] and then fine-tuned\nto the medical domain using a dataset of 100k pa-\ntient conversations. Similarly to Li\u00e9vin et al. [320] ,\nChatDoctor is augmented with two external knowl-\nedge sources (a disease database and Wikipedia) to", "retrieving external knowledge databases, such\nas the Disease Database and Wikipedia retrieval,\nduring doctor-patient conversations to obtain more\naccurate outputs from the model. The ChatDoctor\nsignificantly improves the model\u2019s ability to\ncomprehend patient needs and provide informed\nadvice. By equipping the model with self-directed\ninformation retrieval from reliable online and\noffline sources, the accuracy of its responses is\nsubstantially improved.\nChatGLM-Med (Haochun Wang, 2023) is\nfine-tuned on the Chinese medical instruction\ndataset based on the ChatGLM-6B (Du et al.,\n2022) model. The instruction dataset comprises\nmedically relevant question and answer pairs,\ncreated using the GPT 3.5 API and the Medical\nKnowledge Graph. This model improves the\nquestion-answering performance of ChatGLM (Du\net al., 2022) in the medical field.\n6.7 Arithmetic\nGoat (Liu and Low, 2023) is a fine-tuned\nLLaMA-7B (Touvron et al., 2023a) model based\non instructions, which aims to solve arithmetic", "dict case outcomes from the European Court of\nHuman Rights (ECHR). The attention-based mod-\nels outperformed an SVM with a bag of words\napproach for binary violation classification, multi-\nlabel violation classification, and case importance\nprediction.\nFinally, Peric et al. [423] use a dataset of 50,000\njudicial opinions from U.S. Circuit Courts to train\na Transformer-XL model and fine-tune a GPT-2\nmodel. The models were then evaluated for their\nability to complete a judicial opinion, with a start\ngiven as a prompt. In qualitative evaluations, hu-\nman participants struggled distinguishing between\nmachine-generated and genuine text.\n3.7 Medicine\nMany applications of LLMs have been proposed\nin the medical domain, including medical ques-\ntion answering [ 511,512,320,655,388], clinical\ninformation extraction [ 10,448], indexing [ 650],\ntriage [ 491,301], and management of health\nrecords [276].\n3.7.1 Medical Question Answering and\nComprehension\nMedical question answering and comprehension", "Yaqing Wang, Subhabrata Mukherjee, Xiaodong Liu,\nJing Gao, Ahmed Hassan Awadallah, and Jian-\nfeng Gao. 2022. Adamix: Mixture-of-adapter for\nparameter-efficient tuning of large language models.\nArXiv , abs/2205.12410.\nLi Yunxiang, Li Zihan, Zhang Kai, Dan Ruilong, and\nZhang You. 2023. Chatdoctor: A medical chat model\nfine-tuned on llama model using medical domain\nknowledge. arXiv preprint arXiv:2303.14070 ."], "retrieved_docs_id": ["51c7c3d212", "a829cb0658", "cbf528979b", "d56f5a0eff", "03748e7ce7"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How can increasing the scale of data affect bias in a model?\n", "true_answer": "Increasing the scale of data can alleviate the effect of bias in a model, but it cannot fully resolve it due to the long-tail distribution of the real world.", "source_doc": "hallucination.pdf", "source_id": "44cf8ffcb0", "retrieved_docs": ["stream tasks. To further explore scaling effect, a potential\nissue is that the amount of available data for training LLMs\nis actually limited. With the ever-increasing model scale, the\npublic text data would be soon \u201cexhausted\u201d for LLMs [60].\nThus, it will be meaningful to study how scaling laws apply\nto a data-constrained regime [61], where data repetition or\naugmentation might be useful to alleviate data scarcity.\n\u2022Task-level predictability . Existing research of scaling laws\nare mostly conducted in terms of language modeling loss\n(e.g., per-token cross-entropy loss in nats [30]), while in\npractice we are more concerned about the performance of\nLLMs on actual tasks. Thus, a basic problem is that how\nthe decrease of language modeling loss translates into the\nimprovement of task performance [58]. Intuitively, a model\nwith a smaller language modeling loss tends to yield a\nbetter performance on downstream tasks, since language\nmodeling loss can be considered as a general measure of", "We use these key properties of Pythia in order to study for\nthe first time how properties like gender bias, memorization,\nand few-shot learning are affected by the precise training\ndata processed and model scale. We intend the following ex-\nperiments to be case studies demonstrating the experimental\nsetups Pythia enables, and to additionally provide directions\nfor future work.\nMitigating Gender Bias There is much work cataloging\nhow language models reflect the biases encoded in their\ntraining data. However, while some work has explored\nfinetuning\u2019s effects on bias in language models (Gira et al.,\n2022; Kirtane et al., 2022; Choenni et al., 2021), or the\nrelationship between the corpus statistics and the measured\nbias (Bordia & Bowman, 2019; Van der Wal et al., 2022b),\nresearchers have generally lacked the tools to study the role\nof the training data on the learning dynamics of bias in large\nlanguage models of different sizes. To demonstrate what is", "dataset has strong effects on the behavior of the model. Frequently appeared objects and object\nco-occurrence are two prominent types of statistical bias, as discussed in [ 69,90,137]. For example,\n\u2018person \u2019 might be one of the most frequently appearing objects in the training data. During inference,\neven if the given image does not contain a person, the model still tends to predict the presence\nof a person. On the other hand, object co-occurrence refers to the phenomenon that the model\nwill remember which two objects usually \u2018go together\u2019 [ 90]. For instance, given an image of a\nkitchen with a refrigerator, MLLMs are prone to answer \u2018 Yes\u2019 when asked about a microwave, as\nrefrigerators and microwaves frequently appear together in kitchen scenes. Bias exists in most\ndatasets. Increasing the scale of data may alleviate the effect, but cannot fully resolve it, given the\nlong-tail distribution of the real world.\n3.2 Model", "ity without being updated. In what follows, we discuss two\nkey questions about the ICL ability of LLMs, i.e.,\u201chow does\npre-training affect the ICL ability \u201d and \u201c how do LLMs perform\nICL during inference \u201d.\nHow Pre-Training Affects ICL? ICL is first proposed in\nGPT-3 [55], and it has been shown that the ICL ability\nbecomes more significant with a larger model size. Further,\nsome studies reveal that small-scale PLMs can also demon-\nstrate a strong ICL ability by continual pre-training [490]\nor fine-tuning [491] on specially designed training tasks,\nwhich typically involve additional task examples in theinput during the training process. It suggests that the design\nof training tasks is an important influence factor on the ICL\ncapability of LLMs. Besides training tasks, recent studies\nhave also investigated the relationship between ICL and\npre-training corpora [488, 492]. For example, ICL can be\ntheoretically explained as the product of pre-training on", "the writing styles, quality, and preferences of demonstration\ndata, which tends to affect the learning performance of SFT.\nThus, high-quality instruction data (but not the quantity) is\nthe primary factor for effective training of LLMs during the\nSFT stage [99].\nPros and Cons of RLHF . RLHF was early explored in the\nliterature of deep RL [79], then borrowed to improve the\ncapacity of language models ( e.g., summarization [129]),\nand subsequently adopted as the fundamental technique to\ndevelop InstructGPT [66]. Recently, increasing evidence [99,\n371] has demonstrated the effectiveness of RLHF in miti-\ngating the harmful responses and enhancing the model ca-\npacity. Specially, LLaMA 2 has demonstrated that RLHF can\nimprove both the helpfulness and harmlessness scores [99],\nand attributed this to a better human-LLM synergy for data\nannotation. They explain this reason in two major aspects\nas follows. First, since human annotators mainly provide"], "retrieved_docs_id": ["5d3c3d184a", "a72d5b292c", "44cf8ffcb0", "b0a5af4ba8", "de36ff2374"], "reranker_type": "None", "search_type": "text", "rr": 0.3333333333333333, "hit": 1}, {"question": "What is the challenge faced by MLLMs in tasks requiring intricate recognition?\n", "true_answer": "MLLMs face challenges in tasks like crowd counting and OCR of small characters, which require detailed recognition.", "source_doc": "multimodal.pdf", "source_id": "8beea9b82e", "retrieved_docs": ["tion answering and image captioning. However, MLLMs face considerable challenges in tasks ne-\ncessitating intricate recognition, including crowd counting and OCR of small characters. A direct\napproach to address these challenges involves increasing the image resolution, practically, the num-\nber of visual tokens. This strategy, nonetheless, imposes a substantial computational burden on\nMLLMs, primarily due to the quadratic scaling of computational costs with the number of input to-\nkens in the Transformer architecture. Motivated by this challenge, vision token compression, aimed\nto reduce the prohibitive computation budget caused by numerous tokens, has become an essential\naspect of efficient MLLMs. We will explore this topic through several key techniques, including\nmulti-view input, token processing, multi-scale information fusion, vision expert agents and video-\nspecific methods.\nMulti-view Input Directly employing high-resolution vision encoders for fine-grained percep-", "ing images from public sources with manually-collected\ntext instructions for perception and cognition evaluations.\nMMBench [838] transforms these instructions into multiple-\nchoice questions and introduces CircularEval to ensure\nevaluation consistency. SEED-Bench [854] further considers\ntemporal understanding tasks and enlarges the evaluation\nscale to 19K multiple-choice questions with the assistance of\nLLMs. MM-Vet [855] presents more complex tasks to assess\nthe integrated multimodal capabilities of MLLMs. It starts\nby defining six essential multimodal abilities and then cre-\nates intricate questions by combining multiple abilities. In\nsummary, the above benchmarks collectively contribute to\nthe comprehensive evaluation and improved development\nof MLLMs.\nKey Points for Improving MLLMs. To develop capable\nMLLMs, we continue to discuss three key points to improve\nthe model capacities, from the perspectives of instruction\ndata, training strategy, and safety and alignment.", "even OCR-free NLP (directly fed with document images), (ii) perception-language\ntasks, including multimodal dialogue, image captioning, visual question answering,\nand (iii) vision tasks, such as image recognition with descriptions (specifying\nclassi\ufb01cation via text instructions). We also show that MLLMs can bene\ufb01t from\ncross-modal transfer, i.e., transfer knowledge from language to multimodal, and\nfrom multimodal to language. In addition, we introduce a dataset of Raven IQ test,\nwhich diagnoses the nonverbal reasoning capability of MLLMs.\nInput Prompt CompletionQuestion: Explain why \nthis photo is funny? \nAnswer:\nThe cat is wearing a \nmask that gives the \ncat a smile.\nQuestion: Why did the \nlittle boy cry? Answer:\nBecause his scooter \nbroke.Question: What is the \nhairstyle of the blond \ncalled? Answer:\npony tailQuestion: When will the \nmovie be released? \nAnswer:\nOn June 27\n5 + 4 = 9Question: The result \nis? Answer:What is TorchScale ?\nA library that allows", "Based on powerful large language models, multimodal large language models demonstrate remark-\nable performance across various multimodal tasks. However, the phenomenon of hallucination\npresents a significant challenge to the practical applications of MLLMs, giving rise to undeniable\nconcerns about safety, reliability, and trustworthiness. In this comprehensive survey, we conducted\na thorough examination of hallucinations within multimodal large language models, focusing\non their underlying causes, evaluation metrics, benchmarks, and mitigation methods. Despite\nconsiderable progress, hallucination remains a complex and persistent concern that warrants ongo-\ning investigation. The challenge of hallucination in multimodal large language models remains\ncompelling, requiring continuous scrutiny and innovation. In light of these challenges, we have\noutlined several promising future directions in this burgeoning domain. Through navigating the", "Vision Expert Agents Most MLLMs, due to their non-lossless image tokenization, struggle to\nfully capture the intricate details of text and objects. Leveraging vision expert agents is a solution\nto the problem of a single vision encoder\u2019s limited generalization ability on detail-abundant content.\nP2G [38] employs expert agents for real-time grounding, enabling efficient and purposeful reasoning\n8"], "retrieved_docs_id": ["8beea9b82e", "df8870e586", "1da9964ec4", "114f3dada8", "f09b6750be"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does Mixture of Experts (MoE) decompose a large-scale model?\n", "true_answer": "MoE decomposes a large-scale model into several smaller models, each focusing on learning a specific part of the input data.", "source_doc": "multimodal.pdf", "source_id": "811840a2cd", "retrieved_docs": ["into a high-dimensional space, where task-related information can be more readily captured. In\nthis new space, each word in the text sequence is represented as a high-dimensional vector, and the\ndistances between these vectors serve to measure their similarities. Low-Rank [147] aims to decom-\npose a high-dimensional matrix into the product of two lower-dimensional matrices. Consequently,\nby calculating the inverses of these two lower-dimensional matrices, an approximate inverse of the\nattention matrix can be obtained, thereby significantly reducing computational complexity.\n4.2 Framework\nMixture of Experts The core idea behind MoE [89] is to decompose a large-scale model into sev-\neral smaller models, each of which focuses on learning a specific part of the input data. During the\ntraining process, each expert is assigned a weight that determines its importance within the overall\nmodel. During the inference phase, given an input, all experts are ranked, and the most relevant", "resentative LLMs based on prefix decoders include GLM-\n130B [93] and U-PaLM [118].\nMixture-of-Experts. For the above three types of archi-\ntectures, we can further extend them via the mixture-of-\nexperts (MoE) scaling, in which a subset of neural network\nweights for each input are sparsely activated, e.g., Switch\nTransformer [25] and GLaM [112]. The major merit is that\nMoE is a flexible way to scale up the model parameter while\nmaintaining a constant computational cost [25]. It has been\nshown that substantial performance improvement can be\nobserved by increasing either the number of experts or the\ntotal parameter size [246]. Despite the merits, training large\nMoE models may suffer from instability issues due to the\ncomplex, hard-switching nature of the routing operation.\nTo enhance the training stability of MoE-based language\nmodels, techniques such as selectively using high-precision\ntensors in the routing module or initializing the model with", "work component: a Sparsely-Gated Mixture-of-Experts Layer (MoE). The MoE consists of a num-\nber of experts, each a simple feed-forward neural network, and a trainable gating network which\nselects a sparse combination of the experts to process each input (see Figure 1). All parts of the\nnetwork are trained jointly by back-propagation.\n2", "Under review as a conference paper at ICLR 2017\nResults: Results are reported in Table 6. All the combinations containing at least one the two\nlosses led to very similar model quality, where having no loss was much worse. Models with higher\nvalues ofwloadhad lower loads on the most overloaded expert.\nB H IERACHICAL MIXTURE OF EXPERTS\nIf the number of experts is very large, we can reduce the branching factor by using a two-level\nhierarchical MoE. In a hierarchical MoE, a primary gating network chooses a sparse weighted com-\nbination of \u201cexperts\", each of which is itself a secondary mixture-of-experts with its own gating\nnetwork.3If the hierarchical MoE consists of agroups ofbexperts each, we denote the primary gat-\ning network by Gprimary , the secondary gating networks by (G1,G2..Ga), and the expert networks\nby(E0,0,E0,1..Ea,b). The output of the MoE is given by:\nyH=a\u2211\ni=1b\u2211\nj=1Gprimary (x)i\u00b7Gi(x)j\u00b7Ei,j(x) (12)\nOur metrics of expert utilization change to the following:", "which can pose a significant computational challenge within the context window of LLMs. Ely-\nsium [92] provides a trade-off between performance and visual token consumption, where T-Selector\nis introduced as a visual token compression network to enable LLMs to distinguish individual frames\nwhile reducing visual token use. VideoLLaV A [44], building upon LanguageBind [93], unifies vi-\nsual representation into the language feature space to advance foundational LLMs towards a unified\nlanguage-vision LLM without incurring a large computational burden.\n2.5 Efficient Structures\nEfficient structures primarily explore three directions: Mixture-of-Experts, Mamba and Inference\nAcceleration.\nMixture of Experts MoE enhances model capacity by modulating the total count of model pa-\nrameters while maintaining the activated parameters unchanged, hence, not significantly compro-\nmising the inference speed. MoE-LLaV A[25] presents an MoE-based sparse MLLM framework"], "retrieved_docs_id": ["811840a2cd", "3c084f5868", "1bc3705cf4", "5f55e9e161", "ffe176eb03"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is the name of the concurrent work that also uses preference-based reinforcement learning to improve the faithfulness of MLLMs?\n", "true_answer": "Silkie [68]", "source_doc": "hallucination.pdf", "source_id": "0b66cff7c9", "retrieved_docs": ["samples) and hallucinatory descriptions (negative samples). HA-DPO then trains the model using\nthese sample pairs, enabling it to distinguish between accurate and hallucinatory descriptions. This\ngoal is achieved through direction preference optimization (DPO), which optimizes a specific loss\nfunction designed to maximize the model\u2019s preference for positive samples while minimizing its\npreference for negative samples.\nA concurrent work, Silkie [ 68], introduces a similar approach of utilizing preference-based\nreinforcement learning to enhance the faithfulness of MLLMs. Specifically, it emphasizes the\nconcept of reinforcement learning from AI feedback (RLAIF) by distilling preferences from a more\nrobust MLLM, i.e., GPT-4V [ 83]. Responses are first generated by models from 12 MLLMs, and then\nassessed by GPT-4V. The constructed dataset, termed as VLFeedback, contains preferences distilled\nfrom GPT-4V and is utilized to train other MLLMs through direct preference optimization.", "18 Bai, et al.\nOptimization, 2) Reinforcement Learning from AI Feedback, 3) Reinforcement Learning from\nHuman Feedback.\nAutomatic Metric-based Optimization. Motivated by the limitation of LLMs (and MLLMs) training,\nwhich is unable to optimize at the sequence level, the MOCHa [ 5] framework is proposed to\napply reinforcement learning. This work aims to improve the accuracy and relevance of image\ncaptioning, thereby reducing hallucination. The framework introduces three metric-based objectives\nto guide the reinforcement learning process for image captioning: 1) Natural Language Inference\n(NLI) for fidelity, focusing on the accuracy of the caption in describing the image content; 2)\nBERTScore [ 127] for semantic adequacy, assessing the relevance and richness of the description;\nand 3) Kullback\u2013Leibler (KL) divergence for regularization, which constrains the model to stay\nclose to its initial policy. The framework incorporates these objectives into a multi-objective reward", "from what appears in the document being summarized. Consequently, it is important to measure and\nimprove the faithfulness of these systems since unfaithful systems may be harmful by potentially spreading\nmisinformation, including dangerous, yet hard to detect errors, when deployed in real-world settings. We\nevaluate the LMs using recently proposed reference-free evaluation metrics that have been shown to get high\ncorrelations with human scores for faithfulness (Laban et al., 2022; Fabbri et al., 2022). We note recent\nwork has shown that some reference-free evaluation metrics may be mostly relying on spurious correlations\n(Durmus et al., 2022).\nDatasets. There is a growing collection of summarization datasets, including datasets that capture finer-\ngrained and more specific summarization functions (e.g. summarizing multiple documents or conditional\non a user query). Bommasani & Cardie (2020) show that there is significant diversity in summarization", "NN are grouped into sensitive/insensitive to quantization,\nand higher/lower bits are used for each layer. As such,\none can minimize accuracy degradation and still bene\ufb01t\nfrom reduced memory footprint and faster speed up with\nlow precision quantization. Recent work [ 267] has also\nshown that this approach is hardware-ef\ufb01cient as mixed-\nprecision is only used across operations/layers.\nC. Hardware Aware Quantization\nOne of the goals of quantization is to improve the\ninference latency. However, not all hardware provide\nthe same speed up after a certain layer/operation is\nquantized. In fact, the bene\ufb01ts from quantization is\nhardware-dependant, with many factors such as on-chip\nmemory, bandwidth, and cache hierarchy affecting the\nquantization speed up.\nIt is important to consider this fact for achieving\noptimal bene\ufb01ts through hardware-aware quantization [ 87,\n91,246,250,254,256,265,267]. In particular, the\nwork [ 246] uses a reinforcement learning agent to", "language models with reinforcement learning remains a major practical challenge; this work provides\na theoretically-justified approach to optimizing relative preferences without RL.\nOutside of the context of language, learning policies from preferences has been studied in both bandit\nand reinforcement learning settings, and several approaches have been proposed. Contextual bandit\nlearning using preferences or rankings of actions, rather than rewards, is known as a contextual\ndueling bandit (CDB; [ 48,14]). In the absence of absolute rewards, theoretical analysis of CDBs\nsubstitutes the notion of an optimal policy with a von Neumann winner , a policy whose expected win\nrate against anyother policy is at least 50% [ 14]. However, in the CDB setting, preference labels\nare given online, while in learning from human preferences, we typically learn from a fixed batch of\noffline preference-annotated action pairs [ 47]. Similarly, preference-based RL (PbRL) learns from"], "retrieved_docs_id": ["0b66cff7c9", "9ab3536359", "e99622852f", "3e3cb80a9a", "519b134c1b"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How can the CHAIR metric be affected in the context of MLLMs?\n", "true_answer": "The CHAIR metric can be affected by the instruction designs and the length of generated captions in the context of MLLMs.", "source_doc": "hallucination.pdf", "source_id": "84a3c00c17", "retrieved_docs": ["MHaluBench [13] arXiv\u201924 Feb. MSCOCO [70] 1,860 Gen Acc/P/R/F \u2713 \u2713 \u2717 T2I\nVHTest [46] arXiv\u201924 Feb. MSCOCO [70] 1,200 Dis & Gen Acc \u2713 \u2713 \u2717 \u2713\nHal-Eavl [53] arXiv\u201924 Feb.MSCOCO [70] &\nLAION [92]10,000 Dis & GenAcc/P/R/F &\nLLM Assessment\u2713 \u2713 \u2713 Obj. Event\n(denoted as CHAIR \ud835\udc60):\nCHAIR \ud835\udc56=|{hallucinated objects }|\n|{all objects mentioned }|,\nCHAIR \ud835\udc60=|{sentences with hallucinated object }|\n|{all sentences}|.\nIn the paper of CHAIR [ 90], the range of objects is restricted to the 80 MSCOCO objects. Sentence\ntokenization and synonyms mapping are applied to determine whether a generated sentence\ncontains hallucinated objects. Ground-truth caption and object segmentations both serve as ground-\ntruth objects in the computation. In the MLLM era, this metric is still widely used for assessing the\nresponse of MLLMs.\nPOPE [ 69]. When used in MLLMs, the work of [ 69] argues that the CHAIR metric can be\naffected by the instruction designs and the length of generated captions. Therefore, it proposes a", "affected by the instruction designs and the length of generated captions. Therefore, it proposes a\nnew evaluation metric as well as a benchmark, called Pooling-based Object Probing Evaluation\n(POPE). The basic idea is to convert the evaluation of hallucination into a binary classification task\nby prompting MLLMs with simple Yes-or-Noshort questions about the probing objects ( e.g., Is there\nacarin the image?) Compared to CHAIR, POPE offers increased stability and flexibility. Based on\nthis metric design, it further proposed an evaluation benchmark, drawing 500 images from the\nMSCOCO dataset. The questions in the benchmark consist of both positive and negative questions.\nThe positive questions are formed based on the ground-truth objects, while the negative questions\nare built from sampling nonexistent objects. The benchmark is divided into three subsets according\nto different negative sampling strategy: random, popular, and adversarial. Popular and adversarial", "randomly samples 100 images from Visual Genome to form a benchmark. In evaluation, GPT-4\nis utilized to parse the captions generated by MLLMs and extract objects. Additionally, this work\nintroduces the \"coverage\" metric on top of CHAIR to ensure that the captions are detailed enough.\nThis metric computes the ratio of objects in the caption that match the ground truth to the total\nnumber of ground truth objects. It additionally records the average number of objects as well as\nthe average length of captions as auxiliary metric. Compared with CHAIR, CCEval employs more\ndiverse objects, as reflected in the source of ground truth (Visual Genome vs. COCO) and caption\nparsing (GPT-4 vs. rule-based tool).\nMERLIM [ 100]MERLIM ( Multi-modal Evaluation benchma Rk for Large Image-language\nModels) is a test-bed aimed at empirically evaluating MLLMs on core computer vision tasks,\nincluding object recognition, instance counting, and identifying object-to-object relationships.", "tokens. The issue of \u2019losing attention\u2019 would also lead to the model\u2019s output response being\nirrelevant to the visual content.\n4 HALLUCINATION METRICS AND BENCHMARKS\nIn this section, we present a comprehensive overview of existing hallucination metrics and bench-\nmarks, which are designed to assess the extent of hallucinations generated by existing cutting-edge\nMLLMs. Currently, the primary focus of these benchmarks is on evaluating the object hallucination\nof MLLM-generated content. Tab. 1 illustrates a summary of related benchmarks.\nCHAIR [ 90]. As one of the early works, the metric of CHAIR was proposed to evaluate ob-\nject hallucination in the traditional image captioning task. This is achieved by computing what\nproportion of words generated are actually in the image according to the ground truth sentences\nand object segmentations. The computation of the CHAIR metric is straightforward and easy", "12 Bai, et al.\nof the model can be disrupted, making it more susceptible to hallucination. Due to the small amount\nof data in this benchmark, the assessment and analysis are mostly conducted by humans.\nAMBER [ 103]Upon the application and evaluation of MLLMs, the tasks can be roughly divided\ninto generative tasks and discriminative tasks. For generative tasks, this paper argues that most\nexisting works rely on additional LLMs, suffering from computational cost. As for discriminative\ntasks, the most popular evaluation suite is POPE [ 69]. However, POPE lacks fine-grained hallucina-\ntion types such as attributes and relations. AMBER (An LLM-free Multi-dimensional Benchmark)\nis proposed to support the evaluation of generative tasks and discriminative tasks, including object\nexistence hallucination, attribute hallucination, and relation hallucination. It further combines the\nCHAIR [90] metric in generative tasks and F1in discriminative tasks to form the AMBER Score as\nfollows:"], "retrieved_docs_id": ["84a3c00c17", "d3d3d6a133", "6e78496733", "52c95dc6e8", "5d9a4f66e0"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "Why is parametric knowledge not updated dynamically in this model?\n", "true_answer": "The model parameters cannot be updated dynamically, making the parametric knowledge susceptible to becoming outdated over time.", "source_doc": "RAG.pdf", "source_id": "9ebdac13a1", "retrieved_docs": ["and more specific knowledge. Secondly, since the model\nparameters cannot be updated dynamically, the parametric\nknowledge is susceptible to becoming outdated over time.\nLastly, an expansion in parameters leads to increased com-arXiv:2312.10997v1  [cs.CL]  18 Dec 2023", "can be updated during inference time to reflect\nan updated state of the underlying knowledge.\nE.g., Lewis et al. [304] demonstrate that swapping\ntheir model\u2019s non-parametric memory with an up-\ndated version enabled it to answer questions about\nworld leaders who had changed between the mem-\nory collection dates. Similarly, Izacard et al. [236]\ndemonstrate that their retrieval-augmented model\ncan update its knowledge forward and backward in\ntime by swapping the index.\n2.11 Brittle Evaluations\nOne reason why the evaluation of language models\nis a challenging problem is that they have an un-\neven capabilities surface \u2014a model might be able\nto solve a benchmark problem without issues, but\na slight modification of the problem (or even a sim-\nple change of the prompt) can give the opposite\nresult [ 675,342,533] (see Section 2.7). Unlike\nhumans, we cannot easily infer that an LLM that\ncan solve one problem will have other related capa-\nbilities. This means that it is difficult to assess the", "numerous shortcomings. They often fabricate\nfacts [Zhang et al. , 2023b ]and lack knowledge when\ndealing with specific domains or highly specialized\nqueries [Kandpal et al. , 2023 ]. For instance, when the infor-\nmation sought extends beyond the model\u2019s training data or\nrequires the latest data, LLM may fail to provide accurate\nanswers. This limitation poses challenges when deploying\ngenerative artificial intelligence in real-world production\nenvironments, as blindly using a black-box LLM may not\nsuffice.\nTraditionally, neural networks adapt to specific domains\nor proprietary information by fine-tuning models to param-\neterize knowledge. While this technique yields significant\nresults, it demands substantial computational resources, in-\ncurs high costs, and requires specialized technical expertise,\nmaking it less adaptable to the evolving information land-\nscape. Parametric knowledge and non-parametric knowledge\nplay distinct roles. Parametric knowledge is acquired through", "to be still at a superficial level. In addition, existing studies\nalso explore editing parameters of language models to up-\ndate intrinsic knowledge [669\u2013671]. Nevertheless, previous\nwork [672] has shown that several parameter editing meth-\nods perform not well on LLMs, though they can improve\nthe performance of small language models. Therefore, it\nis still difficult to directly amend intrinsic knowledge or\ninject specific knowledge into LLMs, which remains an\nopen research problem [672]. Recently, a useful framework\nEasyEdit [673] has been released to facilitate the research of\nknowledge editing for LLMs.\nKnowledge Recency\nThe parametric knowledge of LLMs is hard to be\nupdated in a timely manner. Augmenting LLMs\nwith external knowledge sources is a practical\napproach to tackling the issue. However, how\nto effectively update knowledge within LLMs\nremains an open research problem.\n7.1.3 Complex Reasoning\nComplex reasoning refers to the ability of understanding", "play distinct roles. Parametric knowledge is acquired through\ntraining LLMs and stored in the neural network weights, rep-\nresenting the model\u2019s understanding and generalization of\nthe training data, forming the foundation for generated re-\nsponses. Non-parametric knowledge, on the other hand, re-\nsides in external knowledge sources such as vector databases,\nnot encoded directly into the model but treated as updatable\nsupplementary information. Non-parametric knowledge em-\npowers LLMs to access and leverage the latest or domain-\nspecific information, enhancing the accuracy and relevance\nof responses.\nPurely parameterized language models (LLMs) store their\nworld knowledge, which is acquired from vast corpora, in\nthe parameters of the model. Nevertheless, such models have\ntheir limitations. Firstly, it is difficult to retain all the knowl-\nedge from the training corpus, especially for less common\nand more specific knowledge. Secondly, since the model"], "retrieved_docs_id": ["9ebdac13a1", "e1118fca72", "b40c0db2f1", "66aa6c0fd1", "fc82ce8e28"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "Which model outperforms both GPT-4V and Med-PaLM in terms of efficiency and effectiveness?\n", "true_answer": "LLaV A-Rad", "source_doc": "multimodal.pdf", "source_id": "0da5fa4a36", "retrieved_docs": ["employs a modular approach, integrating unimodal pre-trained models and emphasizing the training\nof lightweight adapters. As a result, LLaV A-Rad outperforms larger models such as GPT-4V and\nMed-PaLM in terms of standard metrics, showcasing its superior efficiency and effectiveness.\n22", "3.7.1 Medical Question Answering and\nComprehension\nMedical question answering and comprehension\nconsists of generating multiple-choice and free-text\nresponses to medical questions.\nSinghal et al. [511] proposed using few-shot,\nCoT, and self-consistency prompting to specialize\nthe general-purpose PaLM LLM to medical ques-\ntion answering and comprehension. They demon-\nstrate a Flan-PaLM model [ 93] using a combination\nof the three prompting strategies to achieve the pre-\nvious SOTA results on the MedQA, MedMCQA,\nPubMedQA, and MMLU medical datasets. To fur-\nther align the model to the medical domain, they\nproposed Med-PaLM, which utilizes instruction\nprompt-tuning based on 40 examples from a panel\nof clinicians and task-specific human-engineered\nprompts.\nSinghal et al. [512] then extend the Med-PaLM\napproach with Med-PaLM 2 using the newer PaLM\n2 LLM as its base model. Singhal et al. [512]\nconduct further instruction-fine tuning and use a\nnew ensemble refinement (ER) prompting strategy", "done for GPT-4 [46], OpenAI further released GPT-4V in\nSeptember 2023, which focused on the safe deployment of\nthe vision capabilities of GPT-4. In the GPT-4V\u2019s system\ncard [133], it has extensively discussed the assessment and\nmitigation of risks related to visually augmented inputs.\nSpecially, GPT-4V exhibited strong vision capacities in var-\nious application scenarios, showing the great potential as", "it to the Vicuna models Chiang et al. (2023) on the MMLU benchmark Hendrycks et al. (2021)\nand the Vicuna benchmark Chiang et al. (2023) (Sec. 5.3). Furthermore, our deployed models on\nA6000 GPUs also exhibit significant gains in latency of up to 2.4 \u00d7compared to the FP16 base-\nline, showcasing the effectiveness of our method in terms of both quantization performance and\ninference efficiency (Sec. 5.4).\n2 R ELATED WORK\nIn Sec. A.1, we offer an overview and related works of Transformer quantization, with a particular\nemphasis on Post-Training Quantization (PTQ) and non-uniform quantization, which are the pri-\nmary focus of our work. Among the various challenges in low-bit Transformer quantization, one\nkey issue is the presence of outliers Kovaleva et al. (2021), which can unnecessarily increase the\nquantization range. To address this issue, outlier-aware quantization methods have been investi-", "samples) and hallucinatory descriptions (negative samples). HA-DPO then trains the model using\nthese sample pairs, enabling it to distinguish between accurate and hallucinatory descriptions. This\ngoal is achieved through direction preference optimization (DPO), which optimizes a specific loss\nfunction designed to maximize the model\u2019s preference for positive samples while minimizing its\npreference for negative samples.\nA concurrent work, Silkie [ 68], introduces a similar approach of utilizing preference-based\nreinforcement learning to enhance the faithfulness of MLLMs. Specifically, it emphasizes the\nconcept of reinforcement learning from AI feedback (RLAIF) by distilling preferences from a more\nrobust MLLM, i.e., GPT-4V [ 83]. Responses are first generated by models from 12 MLLMs, and then\nassessed by GPT-4V. The constructed dataset, termed as VLFeedback, contains preferences distilled\nfrom GPT-4V and is utilized to train other MLLMs through direct preference optimization."], "retrieved_docs_id": ["0da5fa4a36", "13a0ba9bc1", "8db2759d47", "48648996b8", "0b66cff7c9"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is the only concurrent survey on the hallucination problem in Multimodal Large Language Models (MLLMs)?\n", "true_answer": "The only concurrent survey on the hallucination problem in MLLMs is a short survey on the hallucination problem of LVLMs, as mentioned in the context.", "source_doc": "hallucination.pdf", "source_id": "33d47ad8cc", "retrieved_docs": ["Hallucination of Multimodal Large Language Models: A Survey 3\ncontrast, there are very few surveys on hallucination in the field of MLLMs. To the best of our\nknowledge, there is only one concurrent work [ 76], a short survey on the hallucination problem of\nLVLMs. However, our survey distinguishes itself in terms of both taxonomy and scope. We present a\nlayered and granular classification of hallucinations, as shown in Fig. 1, drawing a clearer landscape\nof this field. Additionally, our approach does not limit itself to specific model architectures as\nprescribed in the work of [ 76], but rather dissects the causes of hallucinations by tracing back to\nvarious affecting factors. We cover a larger range of literature both in terms of paper number and\ntaxonomy structure. Furthermore, our mitigation strategies are intricately linked to the underlying\ncauses, ensuring a cohesive and targeted approach.\nOrganization of this survey. In this paper, we present a comprehensive survey of the latest", "Hallucination of Multimodal Large Language Models: A\nSurvey\nZECHEN BAI, Show Lab, National University of Singapore, Singapore\nPICHAO WANG, Amazon Prime Video, USA\nTIANJUN XIAO, AWS Shanghai AI Lab, China\nTONG HE, AWS Shanghai AI Lab, China\nZONGBO HAN, Show Lab, National University of Singapore, Singapore\nZHENG ZHANG, AWS Shanghai AI Lab, China\nMIKE ZHENG SHOU\u2217,Show Lab, National University of Singapore, Singapore\nThis survey presents a comprehensive analysis of the phenomenon of hallucination in multimodal large\nlanguage models (MLLMs), also known as Large Vision-Language Models (LVLMs), which have demonstrated\nsignificant advancements and remarkable abilities in multimodal tasks. Despite these promising developments,\nMLLMs often generate outputs that are inconsistent with the visual content, a challenge known as hallucination,\nwhich poses substantial obstacles to their practical deployment and raises concerns regarding their reliability", "Based on powerful large language models, multimodal large language models demonstrate remark-\nable performance across various multimodal tasks. However, the phenomenon of hallucination\npresents a significant challenge to the practical applications of MLLMs, giving rise to undeniable\nconcerns about safety, reliability, and trustworthiness. In this comprehensive survey, we conducted\na thorough examination of hallucinations within multimodal large language models, focusing\non their underlying causes, evaluation metrics, benchmarks, and mitigation methods. Despite\nconsiderable progress, hallucination remains a complex and persistent concern that warrants ongo-\ning investigation. The challenge of hallucination in multimodal large language models remains\ncompelling, requiring continuous scrutiny and innovation. In light of these challenges, we have\noutlined several promising future directions in this burgeoning domain. Through navigating the", "Hallucination of Multimodal Large Language Models: A Survey 5\nVision InputVision ModelLLMImageVideo\u2026CLIP DINO-v2Linear\u2026LLaMAVicunaChatGLMFuyuDecodingGreedyBeam SearchSamplingText InputInstruction\u2026TokenizerBPE SentencePiece\u2026\nFig. 2. Popular architecture of multimodal large language model.\nintegration of human feedback into the training loop has demonstrated effectiveness in enhancing\nthe alignment of LLMs.\n2.2 Multimodal Large Language Models\nMLLMs [ 22,75,111,138] typically refers to a series of models that enable LLMs to perceive and\ncomprehend data from various modalities. Among them, vision+LLM is particularly prominent,\nowing to the extensive research on vision-language models (VLMs) [ 51,88,116] prior to LLMs. As a\nresult, MLLMs are sometimes referred to as vision-LLMs (VLLMs) or large vision language models\n(LVLMs). The goal of MLLMs is to activate the visual capabilities of LLMs, enabling them to \"see\"", "Organization of this survey. In this paper, we present a comprehensive survey of the latest\ndevelopments regarding hallucinations in MLLMs. The survey is organized as follows: We begin by\nproviding sufficient context and defining concepts related to LLMs, MLLMs, hallucination, etc. Next,\nwe delve into an in-depth analysis of the factors contributing to hallucinations in MLLMs. Following\nthis, we present a set of metrics and benchmarks employed for evaluating hallucinations in MLLMs.\nWe then elaborate on a range of approaches designed to mitigate hallucinations in MLLMs. Finally,\nwe delve into the challenges and open questions that frame the current limitations and future\nprospects of this field, offering insights and delineating potential pathways for forthcoming research.\n2 DEFINITIONS\n2.1 Large Language Models\nBefore moving to multimodal large language models, it is essential to introduce the concept of large"], "retrieved_docs_id": ["33d47ad8cc", "72dc971633", "114f3dada8", "f49f3b54ce", "e1b4ac9436"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is a technique for efficiently encoding images of varying resolutions?\n", "true_answer": "LLaVA A-UHD [35] proposes an image modularization strategy that divides native-resolution images into smaller variable-sized slices for efficient and extensible encoding.", "source_doc": "multimodal.pdf", "source_id": "c0bdc4830f", "retrieved_docs": ["Figure 6: Comparision of Phi[86] (from left to right: phi-1.5, phi-2, phi-3-mini, phi-3-small) versus\nLlama-2 [91] family of models(7B, 13B, 34B, 70B) that were trained on the same fixed data.\nLLaV A-UHD [35] proposes an image modularization strategy that divides native-resolution im-\nages into smaller variable-sized slices for efficient and extensible encoding. Inaddition, InternLM-\nXComposer2-4KHD [90] introduces a strategy that dynamically adjusts resolution with an automatic\nlayout arrangement, which not only maintains the original aspect ratios of images but also adaptively\nalters patch layouts and counts, thereby enhancing the efficiency of image information extraction.\nBy implementing an adaptive input strategy for images of varying resolutions, a balance between\nperceptual capability and efficiency can be achieved.\nToken Processing Techniques designed to process lengthy visual token squence are critical in ef-", "L Experiment Details\nL.1 Datasets\n\u2022Cifar10 [Krizhevsky et al., 2009] consists of 60000 coloured images of resolution 32 \u00d732. Each of\nthem belong to one of 10 classes, including airplanes, cars, birds, cats, deer, dogs, frogs, horses, ships,\nand trucks. Among these, 50000 images are allocated to be the training set and 10000 images the\ntesting set.\n\u2022Cifar100 [Krizhevsky et al., 2009] is similar to Cifar10. It also consists of images of resolution 32 \u00d7\n32. In total, there are 60000 images, each of which belongs to one of 100 classes. Each of the 100\nclasses has 500 images in training set and 100 images in testing set.\n\u2022ImageNet1K [Russakovsky et al., 2015] spans 1000 object classes, containing 1,281,167 training im-\nages, 50,000 validation images and 100,000 test images. Although images are collected in di\ufb00erent\nresolutions, in practice they are generally reshaped and cropped into 224 \u00d7224.\n\u2022WikiText-103 [Merity et al., 2016] contains articles from the wikipedia page. It extracts veri\ufb01ed", "7.2 Document Understanding\nDocuments or charts serve as a crucial source of information, offering an intuitive visualization\nof data in various forms. They have become an indispensable part of information dissemination,\nbusiness decision-making, and academic research. However, current chart understanding models\nstill face two primary limitations: (1) The considerable number of parameters makes training and\ndeployment challenging. For instance, ChartLlama [196], a 13-billion-parameter model, is difficult\nto deploy on a single consumer-grade GPU. (2) These models struggle with efficiently encoding\nhigh-resolution images, as vision transformers tend to produce lengthy feature sequences.\nTo address the challenges of fine-grained visual perception and visual information compression for\ndocument-oriented MLLMs. TinyChart [37] outperforms several 13B MLLMs with Program-of-\nThoughts (PoT) learning and Visual Token Merging strategy while excelling in faster inference", "MEGABYTE matches the state-of-the-art performance of\nPerceiverAR whilst using only half the compute.\n6.3. Scaling to higher resolutions\nWe compare three transformer variants (vanilla, Per-\nceiverAR, MEGABYTE) to test scalability to long sequences\non increasingly large image resolutions. We use our own\nimplementations of these in the same framework and budget\nthe same amount of GPU hours and data to train each of\nthese model variants.\nMEGABYTE is able to handle all sequence lengths with a\nsingle forward pass of up to 1.2M tokens. We found nei-\nther the standard Transformer nor PerceiverAR could model\nsuch long sequences at a reasonable model size, so instead\nwe split images into segments of size 1024 and 12000 re-\nspectively. For Megabyte, we set patch size as 12 for Im-\nage64 and patch size as 192 for Image256 and Image640\ndatasets. Model sizes are adjusted to match overall training\nspeeds across models and we do not use any form of sliding", "VBR [Zhuet al. , 2022 ]method is used to generate images to\nguide the text generation of the language model, which has\nsignificant effects in open text generation tasks.\nIn the code field, RBPS [Nashid et al. , 2023 ]is used for\nsmall-scale learning related to code. By encoding or fre-\nquency analysis, similar code examples to the developers\u2019\ntasks are automatically retrieved. This technique has proven\nits effectiveness in test assertion generation and program re-\npair tasks. In the field of structured knowledge, methods like\nCoK [Liet al. , 2023c ]hints first retrieve facts related to the\ninput question from the knowledge graph and then add these\nfacts to the input in the form of hints. This method has per-\nformed well in knowledge graph question answering tasks.\nFor the field of audio and video, the\nGSS[Zhao et al. , 2022 ]method retrieves and concatenates\naudio clips from the spoken vocabulary bank, immediately\ntransforming MT data into ST data. UEOP [Chan et al. , 2023 ]"], "retrieved_docs_id": ["c0bdc4830f", "9f7080518a", "6b47636d3a", "705a34eae0", "150d364554"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What model is used to evaluate all prompts in the RAGAS framework?\n", "true_answer": "The gpt-3.5-turbo-16k model, which is available through the OpenAI API, is used to evaluate all prompts in the RAGAS framework.", "source_doc": "RAG.pdf", "source_id": "ffd5c8b41e", "retrieved_docs": ["open-source library proposed by the industry, also offers a\nsimilar evaluation mode. These frameworks all use LLMs as\njudges for evaluation. As TruLens is similar to RAGAS, this\nchapter will specifically introduce RAGAS and ARES.\nRAGAS\nThis framework considers the retrieval system\u2019s ability to\nidentify relevant and key context paragraphs, the LLM\u2019s abil-\nity to use these paragraphs faithfully, and the quality of\nthe generation itself. RAGAS is an evaluation framework\nbased on simple handwritten prompts, using these prompts\nto measure the three aspects of quality - answer faithfulness,\nanswer relevance, and context relevance - in a fully auto-\nmated manner. In the implementation and experimentation\nof this framework, all prompts are evaluated using the gpt-\n3.5-turbo-16k model, which is available through the OpenAI\nAPI[Eset al. , 2023 ].\nAlgorithm Principles\n1. Assessing Answer Faithfulness: Decompose the answer\ninto individual statements using an LLM and verify", "ARES\nARES aims to automatically evaluate the performance of\nRAG systems in three aspects: Context Relevance, Answer\nFaithfulness, and Answer Relevance. These evaluation met-\nrics are similar to those in RAGAS. However, RAGAS, being\na newer evaluation framework based on simple handwritten\nprompts, has limited adaptability to new RAG evaluation set-\ntings, which is one of the significances of the ARES work.\nFurthermore, as demonstrated in its assessments, ARES per-\nforms significantly lower than RAGAS.\nARES reduces the cost of evaluation by using a small\namount of manually annotated data and synthetic data,\nand utilizes Predictive-Driven Reasoning (PDR) to provide\nstatistical confidence intervals, enhancing the accuracy of\nevaluation [Saad-Falcon et al. , 2023 ].\nAlgorithm Principles\n1. Generating Synthetic Dataset: ARES initially generates\nsynthetic questions and answers from documents in the\ntarget corpus using a language model to create positive\nand negative samples.", "Buddhism practitioners are \nOne who practices Buddhism is \nAll Christianity practitioners are \nChristianity practitioners are \nOne who practices Christianity is \nAll Hinduism practitioners are \nHinduism practitioners are \nOne who practices Hinduism is \nAll Islam practitioners are \nIslam practitioners are \nOne who practices Islam is \nAll Judaism practitioners are \nJudaism practitioners are \nOne who practices Judaism is \nFigure 22: Distribution of toxicity probabilities of the continuation in the \ufb01rst sentence for various religious\ngroups for PaLM 540B.\n10.2 Toxicity in open-ended generation\nToxicity degeneration corresponds to generation of text that can be perceived as toxic by a language model.\nTo evaluate toxicity degeneration, we adapt the methodology used in Welbl et al. (2021); Rae et al. (2021).\nWe leverage the RealToxicityPrompts dataset (Gehman et al., 2020) which consists of sentence-level prompts", "Published in Transactions on Machine Learning Research (08/2023)\nThis approach is also the dominant approach to language model evaluation,79often with even broader\ncollections: Brown et al. (2020) popularized the approach in their work on GPT-3, where they evaluated on\n42 datasets. Indeed, this is the approach used in all the works that introduced models we evaluate in this\nwork. Efforts like the EleutherAI Language Model Evaluation Harness (Gao et al., 2021b), HuggingFace\u2019s\nEvaluate library (von Werra et al., 2022), and Big-Bench (Srivastava et al., 2022) have centralized and\nexpanded these evaluations into systematic repositories.\nSituated against this landscape, what differentiates our work is our holistic approach, which manifests in both\nour benchmark design process and our concrete benchmark. HELM is the byproduct of an explicit two-step\nprocess: we taxonomize the space for language model evaluation, structured around use cases (scenarios)", "Published in Transactions on Machine Learning Research (08/2023)\nDataset Selection. Gehman et al. (2020) introduced the main dataset used to evaluate toxicity in Re-\nalToxicityPrompts . Shortly thereafter, Dhamala et al. (2021) introduced BOLD, which follows a similar\nstructure as RealToxicityPrompts but uses more innocuous input prompts. Given this, we choose to\nevaluate on both datasets to understand the relationship between properties of the prompt and properties\nof the model generation. We note that other works, especially Abid et al. (2021), also demonstrate language\nmodel toxicity, but do not release a standardized dataset that has been used for measuring toxicity more\nbroadly.\nProblem Setting. For toxicity evaluation, models are presented with a prompt and generate a completion.\nIn the case of RealToxicityPrompts , these prompts are drawn from OpenWebText (Gokaslan & Cohen,\n2019), which is a collection of Internet text that replicates the training data of GPT-2 (Radford et al.,"], "retrieved_docs_id": ["ffd5c8b41e", "1b1cdfdd79", "c60ae7c95a", "6e018423c0", "35f53f76e0"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does IBD compute a more reliable next-token probability distribution?\n", "true_answer": "IBD calculates a more reliable next-token probability distribution by contrasting the predictions of the original model with those of an image-biased model.", "source_doc": "hallucination.pdf", "source_id": "9a2cc490f3", "retrieved_docs": ["decoding probability distribution is calibrated using the reference (distorted) distribution.\nFollowing the same idea of contrastive decoding, IBD [ 139] proposes an image-biased decoding\nstrategy. Specifically, IBD involves computing a more reliable next-token probability distribution\nby contrasting the predictions of the original model with those of an image-biased model, which\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024.", "acterising what these models do as reasoning,\nproperly speaking.\n11 How Do LLMs Generalise?\nGiven that LLMs are sometimes capable of solv-\ning reasoning problems with few-shot prompting\nalone, albeit somewhat unreliably, including rea-\nsoning problems that are not in their training set,\nsurely what they are doing is more than \u201cjust\u201d\nnext token prediction? Well, it is an engineer-\ning fact that this is what an LLM does. The\nnoteworthy thing is that next token prediction issu\ufb03cient for solving previously unseen reasoning\nproblems, even if unreliably. How is this pos-\nsible? Certainly it would not be possible if the\nLLM were doing nothing more than cutting-and-\npasting fragments of text from its training set\nand assembling them into a response. But this is\nnot what an LLM does. Rather, an LLM mod-\nels a distribution that is unimaginably complex,\nand allows users and applications to sample from\nthat distribution.\nThis unimaginably complex distribution is a", "of the generated texts, mostly independent of the sampling method, but slightly dependent on the LM\nused. Sec. 5.3 experimentally shows mirostat sampling avoids both boredom and confusion traps for\na wide range of target perplexity values. Sec. 5.4 provides our own experiments with human raters\nthat demonstrate mirostat ef\ufb01cacy for \ufb02uency, coherence, and overall quality.\n1.1 R ELATED WORK\nSampling from distorted probability distribution Pure sampling from LMs often leads to in-\ncoherent text whereas greedy decoding leads to repetitions. Distorting probability distributions,\nas in top-k, top-p, or temperature sampling help improve quality of generated texts, if parameters\nare properly tuned (Holtzman et al., 2018; Fan et al., 2018; Holtzman et al., 2020). Tuning these\nmethods, however, is ad hoc and does not provide good control over the statistics of the output.\nOur method uses statistics of previously-generated tokens as input to generate the next token, by", "the standard neural approach to modeling the con-\nditional probability. Speci\ufb01cally, a trainable neu-\nral network is used to encode the context x<tinto\na \ufb01xed size hidden state, which is multiplied with\nthe word embeddings to obtain the logits. The log-\nits are then fed into the Softmax function, yielding\na categorical probability distribution over the next\ntoken.\n3.1 Vanilla Transformer Language Models\nIn order to apply Transformer or self-attention to\nlanguage modeling, the central problem is how to\ntrain a Transformer to effectively encode an arbi-\ntrarily long context into a \ufb01xed size representation.\nGiven in\ufb01nite memory and computation, a sim-\nple solution would be to process the entire con-\ntext sequence using an unconditional Transformer\ndecoder, similar to a feed-forward neural network.\nHowever, this is usually infeasible with the limited\nresource in practice.\nOne feasible but crude approximation is to split\nthe entire corpus into shorter segments of man-", "2022) and assemble prompt chains (Wu et al., 2022). In general, since language models increasingly embed\ninto myriad applications, calibration and reliable estimates of model uncertainty can build trust in their\nintegration. Figure 17 depicts how we measure calibration; see Appendix C.2 for more details.\nCalibration (Murphy,1973;Murphy&Winkler,1977;DeGroot&Fienberg,1983)isawidelystudiedproperty\nin the literature on uncertainty quantification: a model is calibrated if it assigns meaningful probabilities\nto its predictions. Concretely, if a well-calibrated model predicts that 1,000 sentences are toxic each with\nprobability 0.7, then we expect around 700 of them to be toxic. To quantify calibration, we compute the\nexpected calibration error (ECE; Naeini et al., 2015; Guo et al., 2017), which measures the difference between\nthe model\u2019s predicted probability and the fraction of times the model is correct. By default, we use 10-bins\nwith an equal number of probabilities per bin."], "retrieved_docs_id": ["9a2cc490f3", "37a1f2530d", "dd12a3c5b3", "f3fa38ad39", "9554f4358c"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How can the adaptability of MLLMs be improved according to the context?\n", "true_answer": "The adaptability of MLLMs can be improved by incorporating a more varied set of lightweight LLMs, which can be customized to cater to a broad spectrum of requirements.", "source_doc": "multimodal.pdf", "source_id": "f10976c224", "retrieved_docs": ["can reserve the original capacities of LLMs but likely have\na weak an adaptation performance, while the latter can\nfully adapt to multimodal tasks but suffer from the loss of\noriginal capacities of LLMs. More efforts should be made to\ninvestigate how to effectively balance the two aspects, so as\nto achieving improved multimodal capacities. In addition,\nexisting MLLMs are still overly dependent on the capacities\nof LLMs, which pose the limits on many multimodal tasks\n(e.g., space positioning). It will be meaningful to explore\nimproved training approaches of language models, so that\nmultimodal information can be also utilized in this process.\n\u2022Safety and alignment. Safety and alignment has been\nwidely discussed in LLMs, which aim to regulate the behav-\niors of models by technical approaches [66]. This topic is also\nimportant to MLLMs. Even a highly advanced MLLM ( e.g.,\nGPT-4V [133]) can be susceptible to safety issues. For exam-", "77\ntext output. To boost the performance, high-quality visual\ninstruction data is key to eliciting and enhancing the abil-\nities of MLLMs. Therefore, most studies are dedicated to\nconstructing various visual instruction datasets. As the basic\napproaches, early studies construct visual instructions by\ndistilling from GPT-4 [149] or reformulating vision-language\ntask datasets [151]. To enhance the quality of instruction\ndata, recent work further proposes improved strategies by\nincreasing the instruction diversity [834], incorporating fine-\ngrained information ( e.g., coordinate of objects) into the\ninstruction [833], or synthesizing complex visual reasoning\ninstructions [835].\nEvaluation of MLLM. After introducing the approaches to\ndeveloping MLLMs, we further discuss how to effectively\nassess the multimodal capabilities of MLLMs from the fol-\nlowing three aspects.\n\u2022Evaluation perspectives. The evaluation tasks for MLLMs\ncan be categorized into two main types: perception and", "GPT-4V [133]) can be susceptible to safety issues. For exam-\nple, GPT-4V might occasionally exhibit factual inaccuracies\nand baseless inferences about images. In some cases, it may\neven generate harmful content targeting specific individuals\nor groups [133]. Furthermore, open-sourced MLLMs are\nalso prone to generate hallucinated response [844] and can\nbe easily manipulated to produce harmful content [858].\nTo address the aforementioned issues, some studies collect\nspecialized visual instructions to mitigate the problem of\nhallucination [834]. Another alternative approach is to train\na revision model to rectify hallucinated response generated\nby MLLMs in a post-hoc way [859]. Additionally, aligning\nMLLMs with RLHF can also assist MLLMs in generating\nresponses with improved factuality [860]. Despite these\nefforts, existing alignment techniques for MLLMs mainly\nconcentrate on several specific aspects ( e.g., hallucination),\nlacking a comprehensive consideration of alignment criteria.", "Figure 1.2: Larger models make increasingly ef\ufb01cient use of in-context information. We show in-context learning\nperformance on a simple task requiring the model to remove random symbols from a word, both with and without a\nnatural language task description (see Sec. 3.9.2). The steeper \u201cin-context learning curves\u201d for large models demonstrate\nimproved ability to learn a task from contextual information. We see qualitatively similar behavior across a wide range\nof tasks.\nsuf\ufb01cient to enable a human to perform a new task to at least a reasonable degree of competence. Aside from pointing\nto a conceptual limitation in our current NLP techniques, this adaptability has practical advantages \u2013 it allows humans\nto seamlessly mix together or switch between many tasks and skills, for example performing addition during a lengthy\ndialogue. To be broadly useful, we would someday like our NLP systems to have this same \ufb02uidity and generality.", "6.4 Establishing Standardized Benchmarks\nThe lack of standardized benchmarks and evaluation metrics poses significant challenges in as-\nsessing the degree of hallucination in MLLMs. In Table 1, it can be observed that there is a variety\nof evaluation benchmarks, but a lack of unified standards. Among them, one of the most popular\nbenchmarks might be POPE [ 69], which employs a \u2019Yes-or-No\u2019 evaluation protocol. However, this\nbinary-QA manner does not align with how humans use MLLMs. Accordingly, some benchmarks\nspecifically evaluate the hallucination of MLLMs in the (free-form) generative context. Yet, they\noften rely on external models, such as vision expert models or other LLMs, which limits their wide-\nspread application. Moving forward, future research can investigate standardized benchmarks that\nare theoretically sound and easy to use. Otherwise, research on methods to mitigate hallucinations\nmay be built on an incorrect foundation.\n6.5 Reframing Hallucination as a Feature"], "retrieved_docs_id": ["32fb098424", "722c60f298", "52bcc49954", "74ba43f588", "312439a972"], "reranker_type": "None", "search_type": "text", "rr": 0.0, "hit": 0}, {"question": "What is one of the processes involved in post-retrieval processing to enhance the quality of information retrieval?\n", "true_answer": "Information compression is one of the processes involved in post-retrieval processing. It is used to optimize the relevant information retrieved by the retriever from a large document database.", "source_doc": "RAG.pdf", "source_id": "faf8e03358", "retrieved_docs": ["rely on well-recognized large language models like GPT-\n4[OpenAI, 2023 ]to leverage their robust internal knowl-\nedge for the comprehensive retrieval of document knowledge.\nHowever, inherent issues of these large models, such as con-\ntext length restrictions and vulnerability to redundant infor-\nmation, persist. To mitigate these issues, some research has\nmade efforts in post-retrieval processing. Post-retrieval pro-\ncessing refers to the process of further treating, filtering, or\noptimizing the relevant information retrieved by the retriever\nfrom a large document database. Its primary purpose is to en-\nhance the quality of retrieval results to better meet user needs\nor for subsequent tasks. It can be understood as a process of\nreprocessing the documents obtained in the retrieval phase.\nThe operations of post-retrieval processing usually involve in-\nformation compression and result rerank.\nInformation Compression\nEven though the retriever can fetch relevant information from", "retrieved information. In RAG, the generator\u2019s input includes\nnot only traditional contextual information but also relevant\ntext segments obtained through the retriever. This allows the\ngenerator to better comprehend the context behind the ques-\ntion and produce responses that are more information-rich.\nFurthermore, the generator is guided by the retrieved text toensure consistency between the generated content and the re-\ntrieved information. It is the diversity of input data that has\nled to a series of targeted efforts during the generation phase,\nall aimed at better adapting the large model to the input data\nfrom queries and documents. We will delve into the intro-\nduction of the generator through aspects of post-retrieval pro-\ncessing and fine-tuning.\n5.1 How Can Retrieval Results be Enhanced via\nPost-retrieval Processing?\nIn terms of untuned large language models, most studies\nrely on well-recognized large language models like GPT-", "challenging, and the augmentation process needs to balance\nthe value of each passage appropriately. The retrieved con-\ntent may also come from different writing styles or tones, and\nthe augmentation process needs to reconcile these differences\nto ensure output consistency. Lastly, generation models may\noverly rely on augmented information, resulting in output thatmerely repeats the retrieved content, without providing new\nvalue or synthesized information.\n3.2 Advanced RAG\nAdvanced RAG has made targeted improvements to over-\ncome the deficiencies of Naive RAG. In terms of the quality\nof retrieval generation, Advanced RAG has incorporated pre-\nretrieval and post-retrieval methods. To address the indexing\nissues encountered by Naive RAG, Advanced RAG has op-\ntimized indexing through methods such as sliding window,\nfine-grained segmentation, and metadata. Concurrently, it has\nput forward various methods to optimize the retrieval process.", "put forward various methods to optimize the retrieval process.\nIn terms of specific implementation, Advanced RAG can be\nadjusted either through a pipeline or in an end-to-end manner.\nPre-Retrieval Process\n\u2022Optimizing Data Indexing\nThe purpose of optimizing data indexing is to enhance\nthe quality of indexed content. Currently, there are five\nmain strategies employed for this purpose: increasing\nthe granularity of indexed data, optimizing index struc-\ntures, adding metadata, alignment optimization, and\nmixed retrieval.\n1.Enhancing Data Granularity: The objective of\npre-index optimization is to improve text standard-\nization, consistency, and ensure factual accuracy\nand contextual richness to guarantee the perfor-\nmance of the RAG system. Text standardization in-\nvolves removing irrelevant information and special\ncharacters to enhance the efficiency of the retriever.\nIn terms of consistency, the primary task is to elim-\ninate ambiguity in entities and terms, along with", "as much context as possible to ensure \u201chealthy\u201d out-\ncomes.Built upon the principles of large language mod-\nels like GPT, OpenAI\u2019s embeddings-ada-02 is more so-\nphisticated than static embedding models, capturing a\ncertain level of context. While it excels in contextual\nunderstanding, it may not exhibit the same sensitivity to\ncontext as the latest full-size language models like GPT-\n4.\nPost-Retrieval Process\nAfter retrieving valuable context from the database, merg-\ning it with the query for input into LLM poses challenges.\nPresenting all relevant documents to the LLM at once may\nexceed the context window limit. Concatenating numerous\ndocuments to form a lengthy retrieval prompt is ineffective,\nintroducing noise and hindering the LLM\u2019s focus on crucial\ninformation. Additional processing of the retrieved content is\nnecessary to address these issues.\n\u2022ReRank: Re-ranking to relocate the most relevant in-\nformation to the edges of the prompt is a straightfor-"], "retrieved_docs_id": ["faf8e03358", "fefa202c19", "873e6df003", "8a71abd00a", "5b18d3e068"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is the speed difference in training between Switch Transformer and Google's T5-XXL?\n", "true_answer": "The Switch Transformer trains four times faster than T5-XXL under the same computational resources.", "source_doc": "multimodal.pdf", "source_id": "45effa0e86", "retrieved_docs": ["making minimal changes to existing model code. It enables us to scale multi-lingual neural machine\ntranslation Transformer models with sparse gated mixtures of experts to over 600 billion parameters\nusing automatic sharding. Switch Transformer [150] replaces the feedforward network (FFN) layer\nin the standard Transformer with a MoE routing layer, where each expert operates independently on\nthe tokens in the sequence. Its training speed is four times faster than Google\u2019s previously developed\nlargest model, T5-XXL, under the same computational resources. The proposed training techniques\nhave eliminated instability during the training process, demonstrating that large sparse models can\nalso be trained in a low-precision format, such as bfloat16.\nTransformer-Alternative Structures Although the Transformer is the dominant architecture in\ncurrent large-scale language models, models like RWKV [151] and Mamba [77] have emerged as", "C4 data set after 250k and 500k steps, respectively. We observe that the Switch-\nC Transformer variant is 4x faster to a \ufb01xed perplexity (with the same compute\nbudget) than the T5-XXL model, with the gap increasing as training progresses.\ndepth, number of heads, and so on, are all much smaller than the T5-XXL model. In\ncontrast, the Switch-XXL is FLOP-matched to the T5-XXL model, which allows for larger\ndimensions of the hyper-parameters, but at the expense of additional communication costs\ninduced by model-parallelism (see Section 5.5 for more details).\nSample e\ufb03ciency versus T5-XXL. In the \ufb01nal two columns of Table 9 we record\nthe negative log perplexity on the C4 corpus after 250k and 500k steps, respectively. After\n250k steps, we \ufb01nd both Switch Transformer variants to improve over the T5-XXL version\u2019s\nnegative log perplexity by over 0.061.10To contextualize the signi\ufb01cance of a gap of 0.061,\nwe note that the T5-XXL model had to train for an additional 250k steps to increase", "\u2022Improved pre-training and \ufb01ne-tuning techniques: (1)selective precision training that\nenables training with lower b\ufb02oat16 precision (2)an initialization scheme that allows\nfor scaling to a larger number of experts and (3)increased expert regularization that\nimproves sparse model \ufb01ne-tuning and multi-task training.\n\u2022A measurement of the pre-training bene\ufb01ts on multilingual data where we \ufb01nd a\nuniversal improvement across all 101 languages and with 91% of languages bene\ufb01ting\nfrom 4x+ speedups over the mT5 baseline (Xue et al., 2020).\n\u2022An increase in the scale of neural language models achieved by e\ufb03ciently combining\ndata, model, and expert-parallelism to create models with up to a trillion parameters.\nThese models improve the pre-training speed of a strongly tuned T5-XXL baseline by\n4x.\n2. Switch Transformer\nThe guiding design principle for Switch Transformers is to maximize the parameter count of\na Transformer model (Vaswani et al., 2017) in a simple and computationally e\ufb03cient way.", "we note that the T5-XXL model had to train for an additional 250k steps to increase\n0.052. The gap continues to increase with additional training, with the Switch-XXL model\nout-performing the T5-XXL by 0.087 by 500k steps.\nTraining instability. However, as described in the introduction, large sparse models\ncan be unstable, and as we increase the scale, we encounter some sporadic issues. We\n\ufb01nd that the larger Switch-C model, with 1.6T parameters and 2048 experts, exhibits no\ntraining instability at all. Instead, the Switch XXL version, with nearly 10x larger FLOPs\nper sequence, is sometimes unstable. As a result, though this is our better model on a\nstep-basis, we do not pre-train for a full 1M steps, in-line with the \ufb01nal reported results of\nT5 (Ra\ufb00el et al., 2019).\n10. This reported quality di\ufb00erence is a lower bound, and may actually be larger. The T5-XXL was pre-\ntrained on an easier C4 data set which included duplicated, and thus easily copied, snippets within\nexamples.\n23", "Switch Transformers\nModel Parameters FLOPs/seq dmodel FFN GEGLU dff dkvNum. Heads\nT5-Base 0.2B 124B 768 \u2713 2048 64 12\nT5-Large 0.7B 425B 1024 \u2713 2816 64 16\nT5-XXL 11B 6.3T 4096 \u2713 10240 64 64\nSwitch-Base 7B 124B 768 \u2713 2048 64 12\nSwitch-Large 26B 425B 1024 \u2713 2816 64 16\nSwitch-XXL 395B 6.3T 4096 \u2713 10240 64 64\nSwitch-C 1571B 890B 2080 6144 64 32\nModel Expert Freq. Num. Layers Num Experts Neg. Log Perp. @250k Neg. Log Perp. @ 500k\nT5-Base \u2013 12 \u2013 -1.599 -1.556\nT5-Large \u2013 24 \u2013 -1.402 -1.350\nT5-XXL \u2013 24 \u2013 -1.147 -1.095\nSwitch-Base 1/2 12 128 -1.370 -1.306\nSwitch-Large 1/2 24 128 -1.248 -1.177\nSwitch-XXL 1/2 24 64 -1.086 -1.008\nSwitch-C 1 15 2048 -1.096 -1.043\nTable 9: Switch model design and pre-training performance. We compare the hyper-\nparameters and pre-training performance of the T5 models to our Switch Trans-\nformer variants. The last two columns record the pre-training model quality on the\nC4 data set after 250k and 500k steps, respectively. We observe that the Switch-"], "retrieved_docs_id": ["45effa0e86", "526652a233", "62effe45f7", "2181f830ab", "e9ffcdbd3f"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does Efficient Vision aim to optimize visual fracture extraction strategies?\n", "true_answer": "Efficient Vision explores optimizing visual fracture extraction strategies by emphasizing methods that enhance efficiency without compromising accuracy. It also focuses on integrating high-quality visual data for effective cross-modal understanding.", "source_doc": "multimodal.pdf", "source_id": "f53fc9e54d", "retrieved_docs": ["the development of novel technologies.\n\u2022 Efficient Vision explores optimizing efficient visual fracture extraction strategies, empha-\nsizing methods that boost efficiency while maintaining accuracy. It addresses integrating\nhigh-quality visual data for effective cross-modal understanding.\n\u2022 Efficient LLMs explores these strategies of improving the computational efficiency and\nscalability of language models. It examines the trade-offs between model complexity and\nperformance while suggesting promising avenues for balancing these competing factors.\n2", "78\nmakes good visual instructions and how visual instructions\nelicit specific multimodal abilities in MLLMs.\n\u2022Model training. Different from LLMs, MLLMs are not\ntrained from scratch, but instead developed based on pre-\ntrained language and vision models. Existing work em-\nploys a typical two-stage approach for training MLLMs,\ni.e.,vision-language alignment pre-training and visual in-\nstruction tuning. In essence, existing MLLMs aim to (1) pre-\nserve the inherent capabilities and parametric knowledge\nof LLMs as possible, and meanwhile (2) effectively adapt\nto multimodal tasks by leveraging the pre-trained LLMs\nand visual encoders. To achieve the above two goals, two\ntypical training strategies are often employed for visual\ninstruction tuning, either only optimizing the connection\nmodule [151] or fine-tuning both the connector module\nand LLM component [851]. As we can see, the former\ncan reserve the original capacities of LLMs but likely have", "for resource-sensitive tasks was provided, with some works employing visual token compression\nto boost efficiency, enabling the transfer of MLLM capabilities to resource-intensive tasks such as\nhigh-resolution image and video understanding[35, 39, 14, 40].\nIn this survey, we aim to present an exhaustive organization of the recent advancements in the rapidly\nevolving field of efficient MLLMs, as depicted in Figure.2. We organize the literature in a taxonomy\nconsisting of six primary categories, encompassing various aspects of efficient MLLMs, including\narchitecture ,efficient vision ,efficient LLMs ,training ,data and benchmarks , and applications .\n\u2022 Architecture focuses on the MLLM framework developed by efficient techniques to reduce\nthe computational cost. The architecture is composed of multiple modality-based funda-\nmental models, exhibits characteristics distinct from single-modal models, thus promoting\nthe development of novel technologies.", "specific modification involves updating the parameters within the gradient computation rather than\nafter an entire layer. MeZO[159] proposes an optimizer that computes gradients using merely two\nforward passes, enabling the fine-tuning of LLMs with a memory footprint equivalent to that of in-\nference. With a GPU memory requirement of 55GB, it allows for the comprehensive fine-tuning of\na 30B parameter model.\n5 Training\nThe training process of efficient MLLMs is a critical aspect that determines their performance on\ndownstream tasks and their ability to handle diverse modalities. In this section, we provide an\noverview of various training methodologies, including pre-training, instruction-tuning, diverse train-\ning steps, and parameter-efficient transfer learning strategies. These approaches aim to optimize the\nalignment between different modalities, fine-tune the models on specific tasks, and minimize the", "further categorized into 1) learnable query-based and 2) projection layer based. Learnable query-\nbased methods, exemplified by Q-Former [ 66], as used in MiniGPT-4 [ 138] and Instruct-BLIP [ 22],\nutilize a set of learnable query tokens to capture visual signals via cross-attention. Projection layer-\nbased methods, as widely applied in LLaVA [ 75], Shikra [ 12], etc., involve training a linear projection\nlayer or a Multi-Layer Perceptron (MLP) module to transform extracted visual features. Both types\nof interfaces aim to transform pre-trained visual features into the input space of pre-trained LLMs.\nAnother line of work is represented by Fuyu-8B [ 4] and Gemini [ 97]. Unlike previous methods\nthat leverage pre-trained uni-modal models, these works employ end-to-end training from scratch.\nTaking Fuyu-8B as an example, it does not employ any pre-trained vision encoder. Instead, it\ndirectly inputs image patches and employs a linear projection to transform the raw pixels of each"], "retrieved_docs_id": ["f53fc9e54d", "88b06a3483", "cd55ca1477", "ddf5825776", "b3ef5fcc7d"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does the VQAv2-IDK benchmark categorize \"I Know (IK)\" hallucination in machine-learned language models?\n", "true_answer": "The VQAv", "source_doc": "hallucination.pdf", "source_id": "d18c108916", "retrieved_docs": ["desired answer is \u2019I don\u2019t know\u2019. The concept is defined as \u2019I Know (IK)\u2019 hallucination in the work\nof [11]. Accordingly, a new benchmark, VQAv2-IDK, is proposed to specifically evaluate this type of\nhallucination. VQAv2-IDK is a subset of VQAv2 comprising unanswerable image-question pairs as\ndetermined by human annotators. In this benchmark, \u2019I Know (IK)\u2019 hallucination has been further\ncategorized into four types:\n\u2022Unanswerable: no one can know.\n\u2022Don\u2019t know: human may not know, but robot might.\n\u2022False questions: refers non-existing.\n\u2022Not sure: ambiguous to answer.\nThis benchmark opens a new track for the study of hallucination in MLLMs.\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024.", "providing the MLLM with images that are highly relevant but inconsistent with the answers,\ncausing MLLMs to suffer from hallucination. Such visual inputs are defined as \u2019spurious visual\ninputs\u2019. This benchmark reveals that most of mainstream MLLMs, including GPT-4V, suffer from\nhallucination when presented with such spurious visual inputs. This phenomenon indicates that\nan image can induce MLLMs to instinctively focus on visual content, resulting in responses that\nare predominantly based on visual information without proper reasoning and thinking.\nVQAv2-IDK [ 11]It has been widely discussed that in the binary QA scenario, MLLMs generally\nhave a bias on answering \u2019Yes-or-No, \u2019 leading to hallucination. In a more detailed question and\nanswer scenario, MLLMs generally tend to respond to the user\u2019s question plausibly, even if the\ndesired answer is \u2019I don\u2019t know\u2019. The concept is defined as \u2019I Know (IK)\u2019 hallucination in the work", "14 Bai, et al.\nMHaluBench [ 13]This benchmark does not aim to evaluate the MLLMs themselves. Instead, it\nis intentionally designed to evaluate the hallucination detection tools of MLLMs, i.e., judge whether\na tool can successfully detect the hallucination produced by an MLLM. Thus, the benchmark\nconsists of hallucinatory examples. Specifically, the benchmark unifies image-to-text tasks and the\ntext-to-image tasks into one evaluation suite: cross-modal consistency checking. The hallucinatory\nexamples are generated using leading MLLMs and image generation models, such as LLaVA [ 75],\nMiniGPT-4 [ 138], DALL-E2 [ 89], and DALL-E3 [ 6]. During evaluation, the benchmark can be used\nto compare different hallucination detection methods based on their performance. So far, there are\nnot many dedicated hallucination detection methods. This work serves as a basis for this direction.\nVHTest [ 46]VHTest categorizes visual properties of objects in an image into 1) individual", "Hallucination of Multimodal Large Language Models: A Survey 7\n\u2022Attribute. The object categories identified by MLLMs are accurate, while the descriptions of\nthese objects\u2019 attributes (such as color, shape, material, content, counting, action, etc.) are\nwrong. In Fig. 3, \"pink blossoms\" is hallucinated by the MLLM as the color is inaccurate.\n\u2022Relation. All objects and their attributes are described correctly, but the relationships among\nthem (such as human-object interactions or relative positions) do not align with the actual\nimage content. In Fig. 3, \"...standing around her, watching... \" is a typical example of relation\nhallucination, as the objects are presented in the image but the relation is inaccurate.\nIt\u2019s worth noting that some literature may categorize objects counting, objects event, etc., as\nindependent hallucination categories. In this work, we classify them under the attribute category.", "6.4 Establishing Standardized Benchmarks\nThe lack of standardized benchmarks and evaluation metrics poses significant challenges in as-\nsessing the degree of hallucination in MLLMs. In Table 1, it can be observed that there is a variety\nof evaluation benchmarks, but a lack of unified standards. Among them, one of the most popular\nbenchmarks might be POPE [ 69], which employs a \u2019Yes-or-No\u2019 evaluation protocol. However, this\nbinary-QA manner does not align with how humans use MLLMs. Accordingly, some benchmarks\nspecifically evaluate the hallucination of MLLMs in the (free-form) generative context. Yet, they\noften rely on external models, such as vision expert models or other LLMs, which limits their wide-\nspread application. Moving forward, future research can investigate standardized benchmarks that\nare theoretically sound and easy to use. Otherwise, research on methods to mitigate hallucinations\nmay be built on an incorrect foundation.\n6.5 Reframing Hallucination as a Feature"], "retrieved_docs_id": ["d18c108916", "842ef8fff1", "5c89e9ef97", "f2b3e09bb2", "312439a972"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does PRCA train the adapter?\n", "true_answer": "PRCA trains the adapter through the Contextual Extraction Stage and the Reward-Driven Stage.", "source_doc": "RAG.pdf", "source_id": "af13cfcd4c", "retrieved_docs": ["the retrieved documents as latent variables. Perplexity Dis-\ntillation directly trains using the perplexity of the model-\ngenerated tokens as an indicator.LOOP introduces a new loss\nfunction based on the effect of document deletion on LM\nprediction, providing an effective training strategy for better\nadapting the model to specific tasks.\nPlug in an adapter However, fine-tuning an embed-\nding model can be challenging due to factors such as\nutilizing an API to implement embedding functionality\nor insufficient local computational resources. There-\nfore, some works choose to externally attach an adapter\nfor alignment.PRCA [Yang et al. , 2023b ]trains the Adapter\nthrough the Contextual Extraction Stage and the Reward-\nDriven Stage, and optimizes the output of the re-\ntriever based on a token-based autoregressive strategy.\nTokenFiltering [Berchansky et al. , 2023 ]method calculates\ncross-attention scores, selecting the highest scoring input to-", "igate alignment issues. PRCA [Yang et al. , 2023b ]lever-\naged reinforcement learning to train a context adapter\ndriven by LLM rewards, positioned between the re-\ntriever and generator. It optimizes the retrieved in-\nformation by maximizing rewards in the reinforcement\nlearning phase within the labeled autoregressive pol-\nicy. AAR [Yuet al. , 2023b ]proposed a universal plu-\ngin that learns LM preferences from known-source\nLLMs to assist unknown or non-co-finetuned LLMs.\nRRR [Maet al. , 2023a ]designed a module for rewriting\nqueries based on reinforcement learning to align queries\nwith documents in the corpus.\n\u2022Validation Module: In real-world scenarios, it is notalways guaranteed that the retrieved information is reli-\nable. Retrieving irrelevant data may lead to the occur-\nrence of illusions in LLM. Therefore, an additional val-\nidation module can be introduced after retrieving docu-\nments to assess the relevance between the retrieved doc-", "Figure 3: Comparison between the three paradigms of RAG\n\u2022Task Adaptable Module: Focused on trans-\nforming RAG to adapt to various downstream\ntasks, UPRISE [Cheng et al. , 2023a ] automati-\ncally retrieves prompts for given zero-shot task\ninputs from a pre-constructed data pool, en-\nhancing universality across tasks and models.\nPROMPTAGATOR [Daiet al. , 2022 ]utilizes LLM\nas a few-shot query generator and, based on the gener-\nated data, creates task-specific retrievers. Leveraging\nthe generalization capability of LLM, PROMPTAGA-\nTOR enables the creation of task-specific end-to-end\nretrievers with just a few examples.\n\u2022Alignment Module: The alignment between queries\nand texts has consistently been a critical issue influenc-\ning the effectiveness of RAG. In the era of Modular\nRAG, researchers have discovered that adding a train-\nable Adapter module to the retriever can effectively mit-\nigate alignment issues. PRCA [Yang et al. , 2023b ]lever-", "pler math reasoning datasets such as MultiArith,\nAddSub, and SingleEq, adapter-based methods like\nLLaMA-13B with LoRA outperform GPT-3.5. No-\ntably, LLaMA-13B with LoRA achieves an aver-\nage accuracy of 65.4%, which is approximately\n92.8% of the performance exhibited by GPT-3.5.\nThis suggests that with sufficient task-specific train-\ning data, adapter-based PEFT of smaller LLMs\nhas the potential to achieve performance compa-\nrable to that of extremely large language models.\nThe utilization of adapter-based PEFT yields su-\nperior performance by smaller language models\ncompared to GPT-3.5 specifically in simpler tasks\nsuch as MultiArith, AddSub, and SingleEq. How-", "2019b), Compacter (Karimi Mahabadi et al., 2021),\nand LoRA (Hu et al., 2021b); they all suffer from\ntwo major common problems: \ufb01rst, it is not clear\nhow to select the size of their rank (while their per-\nformance is very sensitive to this rank selection);\nsecond, their training is static which means that if\na low-rank model is trained based on a particular\nrank size, it will not work well in other rank values\n(i.e. for any other rank value we need to train a\nseparate model).\nThis paper proposes a dynamic low-rank adapter\ntechnique (DyLoRA) to address these two prob-\nlems. Without loss of generality, we focus on\nLoRA(Hu et al., 2021a) and train LoRA blocks\nfor a range of ranks instead of a single rank by\nsorting out the representation learned at different\nranks during training. While our model is more\n\ufb02exible, it can outperform LoRA in a much wider\nrange of ranks without adding to the training time.\nMoreover, our technique does not need extra train-"], "retrieved_docs_id": ["af13cfcd4c", "8d0a82337c", "bbfa682738", "d0301707ca", "e6c1b6e263"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is a hardware-aware quantization method for ViTs?\n", "true_answer": "GPUSQ-ViT", "source_doc": "multimodal.pdf", "source_id": "8a087225e4", "retrieved_docs": ["in the seminal work of Optimal Brain Damage [ 139].\nIn HAWQv2, this method was extended to mixed-\nprecision activation quantization [ 50], and was shown to\nbe more than 100x faster than RL based mixed-precision\nmethods [ 246]. Recently, in HAWQv3, an integer-only,\nhardware-aware quantization was introduced [ 267] that\nproposed a fast Integer Linear Programming method to\n\ufb01nd the optimal bit precision for a given application-\nspeci\ufb01c constraint (e.g., model size or latency). This work\nalso addressed the common question about hardware\nef\ufb01ciency of mixed-precision quantization by directly\ndeploying them on T4 GPUs, showing up to 50% speed\nup with mixed-precision (INT4/INT8) quantization as\ncompared to INT8 quantization.\nSummary (Mixed-precision Quantization). Mixed-\nprecision quantization has proved to be an effective and\nhardware-ef\ufb01cient method for low-precision quantizationof different NN models. In this approach, the layers of a", "improved performance for the ViT student model.\n3.4 Quantization\nViT quantization is the process of reducing the precision of numerical representations in ViT models,\ntypically transitioning from floating-point to fixed-point arithmetic [140]. This reduction in preci-\nsion aims to decrease memory usage, computational complexity, and energy consumption while\npreserving model accuracy to an acceptable level. Current research can be mainly categorized into\npost-training quantization, quantization-aware training, and hardware-aware quantization.\nPost-Training Quantization (PTQ) compresses trained ViT models by converting their param-\neters from high-precision floating-point numbers to lower-precision fixed-point numbers, such as\n8-bit integers. For example, Liu et al. [141] introduced a ranking loss method to identify opti-\nmal low-bit quantization intervals for weights and inputs, ensuring the functionality of the attention", "NN are grouped into sensitive/insensitive to quantization,\nand higher/lower bits are used for each layer. As such,\none can minimize accuracy degradation and still bene\ufb01t\nfrom reduced memory footprint and faster speed up with\nlow precision quantization. Recent work [ 267] has also\nshown that this approach is hardware-ef\ufb01cient as mixed-\nprecision is only used across operations/layers.\nC. Hardware Aware Quantization\nOne of the goals of quantization is to improve the\ninference latency. However, not all hardware provide\nthe same speed up after a certain layer/operation is\nquantized. In fact, the bene\ufb01ts from quantization is\nhardware-dependant, with many factors such as on-chip\nmemory, bandwidth, and cache hierarchy affecting the\nquantization speed up.\nIt is important to consider this fact for achieving\noptimal bene\ufb01ts through hardware-aware quantization [ 87,\n91,246,250,254,256,265,267]. In particular, the\nwork [ 246] uses a reinforcement learning agent to", "91,246,250,254,256,265,267]. In particular, the\nwork [ 246] uses a reinforcement learning agent to\ndetermine the hardware-aware mixed-precision setting\nfor quantization, based on a look-up table of latency\nwith respect to different layers with different bitwidth.\nHowever, this approach uses simulated hardware latency.\nTo address this the recent work of [ 267] directly deploys\nquantized operations in hardware, and measures the\nactual deployment latency of each layer for different\nquantization bit precisions.\nD. Distillation-Assisted Quantization\nAn interesting line of work in quantization is to\nincorporate model distillation to boost quantization accu-\nracy [ 126,177,195,267]. Model distillation [ 3,95,150,\n177,195,207,268,270,289] is a method in which a\nlarge model with higher accuracy is used as a teacher to\nhelp the training of a compact student model. During the\ntraining of the student model, instead of using just the\nground-truth class labels, model distillation proposes to", "in quantization which are mostly used for sub-INT8\nquantization. We will \ufb01rst discuss simulated quantiza-\ntion and its difference with integer-only quantization\nin Section IV-A . Afterward, we will discuss different\nmethods for mixed-precision quantization in Section IV-B ,\nfollowed by hardware-aware quantization in Section IV-C .Then we will describe how distillation can be used to\nboost the quantization accuracy in Section IV-D , and then\nwe will discuss extremely low bit precision quantization\nin Section IV-E . Finally, we will brie\ufb02y describe the\ndifferent methods for vector quantization in Section IV-F.\nA. Simulated and Integer-only Quantization\nThere are two common approaches to deploy a quan-\ntized NN model, simulated quantization (aka fake quan-\ntization) and integer-only quantization (aka \ufb01xed-point\nquantization). In simulated quantization, the quantized\nmodel parameters are stored in low-precision, but the\noperations (e.g. matrix multiplications and convolutions)"], "retrieved_docs_id": ["64d03aeb69", "354a427ccf", "3e3cb80a9a", "a58f51092e", "bfb27f54c1"], "reranker_type": "None", "search_type": "text", "rr": 0.0, "hit": 0}, {"question": "How does MARINE implement guided decoding?\n", "true_answer": "MARINE implements guided decoding by employing an additional vision encoder for object grounding and utilizing the grounded objects to guide the decoding process, using the classifier-free guidance technique.", "source_doc": "hallucination.pdf", "source_id": "9e707211bd", "retrieved_docs": ["20 Bai, et al.\nfocuses more on the image information. The image-based model is created by modifying the\nattention weight matrix structure within the original model, without altering its parameters. This\napproach emphasizes the knowledge of the image-biased model and diminishes that of the original\nmodel, which may be text-biased. Thus, it encourages the extraction of correct content while\nsuppressing hallucinations resulting from textual over-reliance.\nGuided Decoding. MARINE [ 131] proposes a training-free approach. It employs an additional\nvision encoder for object grounding and utilizes the grounded objects to guide the decoding process.\nSpecifically, it innovatively adapts the classifier-free guidance [ 40] technique to implement guided\ndecoding, showing promising performance in emphasizing the detected objects while reducing\nhallucination in the text response.\nSimilarly, GCD [ 24] devises a CLIP-Guided Decoding (GCD) approach. It first verifies that", "Contrastive Loss e.g.HACL [52]\nOthers e.g.EOS [120]\nReinforcement LearningAutomatic\nMetric-basede.g.MOCHa [5]\nRLAIF-based e.g.HA-DPO [133], POVID [136]\nRLHF-based e.g.LLaVA-RLHF [96], RLHF-V [119]\nMitigating Inference-related\nHallucinations (\u00a75.4)Generation InterventionContrastive Decoding e.g.VCD [64], IBD [139]\nGuided Decoding e.g.MARINE [131], GCD [24]\nOthers e.g.OPERA [45], Skip\u2018\\n\u2019 [36]\nPost-hoc Correction e.g.Woodpecker [114], Volcano [63], LURE [137]\nFig. 1. The main content flow and categorization of this survey.\n(RLHF) [ 19,84,94] emerges as a notable approach for achieving alignment through reinforcement\nlearning. RLHF typically employs a preference model [ 7], trained to predict preference rankings\nbased on prompts and human-labeled responses. To better align with human preferences, RLHF opti-\nmizes the LLM to generate outputs that maximize rewards provided by the trained preference model,", "Similarly, GCD [ 24] devises a CLIP-Guided Decoding (GCD) approach. It first verifies that\nCLIPScore [ 88] can effectively distinguish between hallucinated and non-hallucinated sentences\nthrough a series of studies across different models and datasets. Based on this conclusion, it further\nrecalibrates the decoding process of MLLMs, including two steps: 1) reliability scoring, which\ndesigns a (CLIP-based) scoring function aiming to assign higher scores to candidate responses that\nare less likely to be hallucinated, and 2) guided sentence generation, which generates responses\nbased on this scoring. This is implemented in a similar way to beam search but at the sentence\nlevel.\nHALC [ 15] provides a key insight that when decoding a specific token in the MLLM, identifying a\ntoken-wise optimal visual context to provide the most informative visual grounding can effectively\nreduce hallucination. Visual context refers to the visual tokens that can be grounded from the", "iments show that it not only achieves competitive performance with state-of-the-art efficient meth-\nods but also boasts faster speeds due to its linear sequential modeling.It also excels in overcom-\ning visual illusions and spatial relationship judgments in closed-set challenging prediction bench-\nmarks and achieves performance comparable to LLaV A while using only 43% of the parameters.\nVL-Mamba[18] substitutes the Transformer-based backbone language model with the pre-trained\nMamba language model. It explores how to effectively implement the 2D vision selective scan\nmechanism for multimodal learning and the combinations of different vision encoders and pre-\ntrained Mamba language model variants.\nInference Acceleration SPD[45] proposes the speculative decoding with a language-only model\nto improve inference efficiency. By employing a language-only model as a draft model for specu-\n9", "reduce hallucination. Visual context refers to the visual tokens that can be grounded from the\ngenerated text response. An oracle study showed that decoding from the provided optimal visual\ncontexts eliminates over 84.5% of hallucinations. Based on the insight and observation, the authors\ndesigned mechanisms to locate the fine-grained visual information to correct each generated\ntoken that might be hallucinating. This is essentially a visual content-guided decoding strategy.\nIn addition to token-level correction, HALC also incorporates a matching-based beam search that\nutilizes a visual matching score to steer the generation of the final outputs, balancing both object\nhallucination mitigation and text generation quality.\nOthers. The work of OPEAR [ 45] makes an interesting observation that most hallucinations\nare closely tied to the knowledge aggregation patterns manifested in the self-attention matrix,"], "retrieved_docs_id": ["9e707211bd", "9644813f29", "17a462daf3", "6bebc6e320", "31eefbd9eb"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does TinyLlava adjust pre-trained modules during pre-training?\n", "true_answer": "TinyLlava partially freezes pre-trained vision encoder and symmetric language model (SLM) modules to activate more parameters for learning alignment during the pre-training stage.", "source_doc": "multimodal.pdf", "source_id": "1bd741e7c9", "retrieved_docs": ["Figure 14: Training stages of efficient MLLMs.\nusing a standard cross-entropy loss function:\nmax\n\u03b8LX\ni=1logp\u03b8(xi|Xv, Xinstruct , Xa,<i), (4)\nwhere Lis the length of Xaand\u03b8denotes the trainable parameters. In order to better align different\nmodalities of knowledge and avoid catastrophic forgetting during the pre-training stage, \u03b8typically\nincludes only a learnable modality interface, i.e., a vision-language projector.\nWhich part to unfreeze? Considering that only training the connector may not well align the\nvision and text information when using SLMs, TinyLlava[23] also opt to partially freeze pre-\ntrained modules (i.e. vision encoder and SLM) to activate more parameters for learning alignment.\nVILA[49] reveals that updating the base LLM throughout the pre-training stage is essential to in-\nheriting some of the appealing LLM properties like in-context learning. ShareGPT4V[55] found\nthat unfreezing more parameters, particularly in the latter half of the vision encoder\u2019s layers, proves", "used in model pre-training [234, 235, 237, 238]. It aims to\norganize different parts of pre-training data for LLMs in\na specific order, e.g., starting with easy/general examples\nand progressively introducing more challenging/special-\nized ones. More generally, it can broadly refer to the adap-\ntive adjustment of data proportions for different sources\nduring pre-training. Existing work about data curriculum\nmainly focuses on continual pre-training, such as special-\nized coding LLMs ( e.g., CodeLLaMA [235]) or long context\nLLMs ( e.g., LongLLaMA [238]). However, it still lacks of\nmore detailed report about data curriculum for general-\npurpose LLMs ( e.g., LLaMA) in the literature. To determine\ndata curriculum, a practical approach is to monitor the de-\nvelopment of key abilities of LLMs based on specially con-\nstructed evaluation benchmarks, and then adaptively adjust\nthe data mixture during pre-training. Next, we take three\ncommon abilities as examples to introduce how the concept", "dicting masked tokens auto-regressively in a permuted\norder. This objective allows predictions to condition on\nboth left and right context. In contrast, the BART de-\ncoder works left-to-right during pre-training, matching\nthe setting during generation.\nSeveral papers have explored using pre-trained rep-\nresentations to improve machine translation. The\nlargest improvements have come from pre-training on\nboth source and target languages (Song et al., 2019;\nLample & Conneau, 2019), but this requires pre-\ntraining on all languages of interest. Other work has\nshown that encoders can be improved using pre-trained\nrepresentations (Edunov et al., 2019), but gains in de-\ncoders are more limited. We show how BART can be\nused to improve machine translation decoders.8 Conclusions\nWe introduced BART, a pre-training approach that\nlearns to map corrupted documents to the original.\nBART achieves similar performance to RoBERTa on\ndiscriminative tasks, while achieving new state-of-the-", "expressiveness and generalization capabilities. Adapter-based tuning introduces lightweight adapter\nmodules into the pre-trained model\u2019s architecture. These adapter modules, typically composed of\nfeed-forward neural networks with a small number of parameters, are inserted between the layers\nof the original model. During fine-tuning, only the adapter parameters are updated, while the pre-\ntrained model\u2019s parameters remain fixed. This method significantly reduces the number of trainable\nparameters, leading to faster training and inference times without compromising the model\u2019s per-\nformance. LLM-Adapters [154] presents a framework for integrating various adapters into large\nlanguage models, enabling parameter-efficient fine-tuning for diverse tasks. This framework en-\n16", "ity without being updated. In what follows, we discuss two\nkey questions about the ICL ability of LLMs, i.e.,\u201chow does\npre-training affect the ICL ability \u201d and \u201c how do LLMs perform\nICL during inference \u201d.\nHow Pre-Training Affects ICL? ICL is first proposed in\nGPT-3 [55], and it has been shown that the ICL ability\nbecomes more significant with a larger model size. Further,\nsome studies reveal that small-scale PLMs can also demon-\nstrate a strong ICL ability by continual pre-training [490]\nor fine-tuning [491] on specially designed training tasks,\nwhich typically involve additional task examples in theinput during the training process. It suggests that the design\nof training tasks is an important influence factor on the ICL\ncapability of LLMs. Besides training tasks, recent studies\nhave also investigated the relationship between ICL and\npre-training corpora [488, 492]. For example, ICL can be\ntheoretically explained as the product of pre-training on"], "retrieved_docs_id": ["1bd741e7c9", "55df9c8a81", "adcb30382c", "004ffc5dd9", "b0a5af4ba8"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "What is the focus of the survey presented in the paper?\n", "true_answer": "The focus of the survey presented in the paper is the latest developments regarding hallucinations in multimodal large language models (MLLMs).", "source_doc": "hallucination.pdf", "source_id": "e1b4ac9436", "retrieved_docs": ["demonstrations in a reasonable order.\nA comprehensive review of ICL has been presented in\nthe survey paper [50], and we suggest the readers refer-\nring to it for a more general, detailed discussion on this\ntopic. Compared with this survey, we specially focus on the\ndiscussion of applying ICL to LLMs in two major aspects,\ni.e.,demonstration design and the underlying mechanism\nof ICL. Also, ICL has a close connection with instruction\ntuning (discussed in Section 5.1) in that both utilize nat-\nural language to format the task or instances. However,\ninstruction tuning needs to fine-tune LLMs for adaptation,\nwhile ICL only prompts LLMs for utilization. Furthermore,\ninstruction tuning can enhance the ICL ability of LLMs to\nperform target tasks, especially in the zero-shot setting (only\nusing task descriptions) [69].\n6.2.2 Demonstration Design\nSeveral studies have shown that the effectiveness of ICL\nis highly affected by the design of demonstrations [432,", "to understand the format of the task without prior examples, so this setting is in some cases \u201cunfairly hard\u201d.\nFor example, if someone is asked to \u201cmake a table of world records for the 200m dash\u201d, this request can be\nambiguous, as it may not be clear exactly what format the table should have or what should be included (and\neven with careful clari\ufb01cation, understanding precisely what is desired can be dif\ufb01cult). Nevertheless, for at\nleast some settings zero-shot is closest to how humans perform tasks \u2013 for example, in the translation example\nin Figure 2.1, a human would likely know what to do from just the text instruction.\nFigure 2.1 shows the four methods using the example of translating English to French. In this paper we focus on\nzero-shot, one-shot and few-shot, with the aim of comparing them not as competing alternatives, but as different\nproblem settings which offer a varying trade-off between performance on speci\ufb01c benchmarks and sample ef\ufb01ciency.", "Hallucination of Multimodal Large Language Models: A Survey 3\ncontrast, there are very few surveys on hallucination in the field of MLLMs. To the best of our\nknowledge, there is only one concurrent work [ 76], a short survey on the hallucination problem of\nLVLMs. However, our survey distinguishes itself in terms of both taxonomy and scope. We present a\nlayered and granular classification of hallucinations, as shown in Fig. 1, drawing a clearer landscape\nof this field. Additionally, our approach does not limit itself to specific model architectures as\nprescribed in the work of [ 76], but rather dissects the causes of hallucinations by tracing back to\nvarious affecting factors. We cover a larger range of literature both in terms of paper number and\ntaxonomy structure. Furthermore, our mitigation strategies are intricately linked to the underlying\ncauses, ensuring a cohesive and targeted approach.\nOrganization of this survey. In this paper, we present a comprehensive survey of the latest", "models and retrieval-Augmented generation. They become\nfamiliar with the evolutionary path and key technologies of\nknowledge retrieval augment, enabling them to discern the\nadvantages and disadvantages of different techniques, iden-\ntify applicable scenarios, and explore current typical applica-\ntion cases in practice.It is noteworthy that in previous work,\nFeng el al. [2023b ]systematically reviewed the methods, ap-\nplications, and future trends of combining large models with\nknowledge, with a primary focus on knowledge editing and\nretrieval augmentation methods. Zhu et al. [2023 ]introduced\nthe latest advancements in augmenting retrieval systems for\nLarge Language Models, with a specific focus on the retrieval\nsystem. Meanwhile, Asai et al. [2023a ]focusing on ques-\ntions such as \u201cWhat\u201d, \u201cWhen\u201d, \u201cHow\u201d, analyzed and eluci-\ndated the key processes in Retrieval-based Language Mod-\nels. In comparison with them, this paper aims to systemati-", "In cases where the LLM is only used to label\nexisting data [ 583,123] this will likely reduce\nthe risk of generating an unrepresentative training\ndistribution (although hallucinated labels remain\nan issue). Where the LLM is used to generate\n(or partially generate) both the input and the tar-\nget [ 123,104,182,51,503] the issue of halluci-\nnated distributions becomes potentially significant.\n4 Related Work\nClosest to ours is the concurrent work by Zhao\net al. [673] , who provide an extensive survey of\nlarge language models and associated topics. Mi-\nalon et al. [363] focus on surveying augmented\nlanguage models, i.e., \u201clanguage models with rea-\nsoning skills and the ability to use tools\u201d. Tornede\net al. [555] survey LLMs in the context of AutoML\nmethods, highlighting existing methods and chal-\nlenges in leveraging these for improving LLMs.\nTang et al. [539] survey LLM-generated text de-\ntection techniques. Chang et al. [72] concurrently\nsurvey evaluation tasks of LLMs."], "retrieved_docs_id": ["e00fea5766", "a2aa4ee198", "33d47ad8cc", "fe157c6a57", "648753ed13"], "reranker_type": "None", "search_type": "text", "rr": 0.0, "hit": 0}, {"question": "How does D-Abstractor maintain the local context in visual feature abstraction?\n", "true_answer": "D-Abstractor, or Deformable attention-based Abstractor, maintains the local context through a 2-D coordinate-based sampling process, using reference points and sampling offsets.", "source_doc": "multimodal.pdf", "source_id": "3a3d9edb48", "retrieved_docs": ["additional LResNet blocks, which facilitate the abstraction of visual features to any squared num-\nber of visual tokens. Conversely, D-Abstractor, or Deformable attention-based Abstractor utilizes\ndeformable attention, which maintains the local context through a 2-D coordinate-based sampling\nprocess, using reference points and sampling offsets.\n6", "original LDP[20].\nMamba-based VL-Mamba[18] implements the 2D vision selective scanning(VSS) technique\nwithin its vision-language projector, facilitating the amalgamation of diverse learning method-\nologies. The VSS module primarily resolves the distinct processing approaches between one-\ndimensional sequential processing and two-dimensional non-causal visual information.\nHybrid Structure Honeybee [19] put forward two visual projectors, namely C-Abstractor and D-\nAbstractor, which adhere to two primary design principles: (i) providing adaptability in terms of the\nnumber of visual tokens, and (ii) efficiently maintaining the local context. C-Abstractor, or Convo-\nlutional Abstractor, focuses on proficiently modeling the local context by employing a convolutional\narchitecture. This structure consists of LResNet blocks, followed by adaptive average pooling and\nadditional LResNet blocks, which facilitate the abstraction of visual features to any squared num-", "frames for short video understanding.\nTo address the computational challenges associated with processing long videos due to the excessive\nnumber of visual tokens, several approaches have been developed. mPLUG-video [67] is designed\nfor video understanding tasks and begins with a TimeSformer-based video encoder to extract fea-\ntures from sparsely sampled video frames effectively, followed by a visual abstractor module to\nreduce sequence length. Video-LLaV A [44] excels in various video understanding tasks by unify-\ning visual representations of images and videos into a single language feature space before projec-\ntion. This approach enables effective learning of multi-modal interactions with LanguageBind [93].\nLLaMA-VID [69] addresses this issue by representing each frame with two distinct tokens, namely\ncontext token and content token. The context token encodes the overall image context based on user", "GPUs. LLaV A-PruMerge[41] and MADTP [42] propose an adaptive visual token reduction ap-\nproach that significantly decreases the number of visual tokens while preserving comparable model\nperformance. TinyChart [37] and TextHawk [36] focus on document-oriented tasks, with the former\nadopting the Vision Token Merging module and the latter introducing the ReSampling and ReAr-\nrangement module. These modules can enhance fine-grained visual perception and information\ncompression capabilities.\nMulti-Scale Information Fusion Utilizing multi-scale image information is indeed crucial for\nvisual feature extraction. This approach allows the model to capture both the fine-grained details\npresent in smaller scales and the broader context available in larger scales. Mini-Gemini [26] com-\nprises twin encoders, one for high-resolution images and the other for low-resolution visual em-\nbedding. It proposes Patch Info Mining, which uses low-resolution visual embeddings as queries", "bedding. It proposes Patch Info Mining, which uses low-resolution visual embeddings as queries\nto retrieve relevant visual cues from high-resolution candidates through cross-attention. Scaling on\nScales ( S2) [40] demonstrated that a multi-scale smaller model has comparable learning capacity to\na larger model, and pre-training smaller models with S2can match or even exceed the advantage of\nlarger models on MLLM benchmarks while being more compute-efficient. After splitting the large\nimage into small sub-images, S2-wrapper processes individual sub-images instead of using window\nattention, which allows using a pre-trained model that does not support window attention and avoids\ntraining additional parameters from scratch.It then interpolates the large feature map into the regular\nsize, making sure the number of visual tokens stays acceptable.\nVision Expert Agents Most MLLMs, due to their non-lossless image tokenization, struggle to"], "retrieved_docs_id": ["3a3d9edb48", "3238be52f9", "c16b4c1887", "8e97c297be", "5435a1d695"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does Mamba Cobra [13] incorporate the efficient Mamba [77] language model into the vision modality?\n", "true_answer": "Mamba Cobra [13] incorporates the efficient Mamba [77] language model into the vision modality by exploring different modal fusion schemes to develop an effective multi-modal Mamba.", "source_doc": "multimodal.pdf", "source_id": "5510d4cc4e", "retrieved_docs": ["mising the inference speed. MoE-LLaV A[25] presents an MoE-based sparse MLLM framework\nthat effectively increases the number of parameters without compromising computational efficiency.\nFurthermore, it introduces MoE-Tuning, a three-stage training strategy designed to adapt MoE [89]\nto MLLMs and prevent model degradation caused by sparsity. MM1[30] designs two variants of\nMoE models. The first is a 3B-MoE model that employs 64 experts and substitutes a dense layer\nwith a sparse one every two layers. The second is a 7B-MoE model that utilizes 32 experts and\nsubstitutes a dense layer with a sparse one every four layers.\nMamba Cobra [13] incorporates the efficient Mamba [77] language model into the vision modal-\nity and explores different modal fusion schemes to develop an effective multi-modal Mamba. Exper-\niments show that it not only achieves competitive performance with state-of-the-art efficient meth-", "Efficient MLLMArchitecture (\u00a72)Vision Encoder (\u00a72.1)ViTamin [11], BRA VE[12],\nCobra[13], SPHINX-X[14]\nVision-Language Projector (\u00a72.2)QFormer [15], Perceiver Resampler[16],\nLDPv2[17], VSS[18], C/D-Abstractor[19],\nMEQ-Former[12]\nSmall Language Models (\u00a72.3)MobileVLM [20], LLaV A-Phi [21],\nImp-v1 [22], TinyLLaV A [23],\nBunny [24], Gemini Nano-2 [2],\nMobileVLM-v2 [17], MoE-LLaV A [25],\nCobra [13], Mini-Gemini [26],\nVary-toy [27], TinyGPT-V [28],\nSPHINX-Tiny [14], ALLaV A [29],\nMM1 [30], LLaV A-Gemma [31],\nMipha [32], VL-Mamba [18]\nMiniCPM-V 2.0 [33], DeepSeek-VL [34]\nVision Token Compression (\u00a72.4)Mini-Gemini [26], LLaV A-UHD [35],\nTextHawk [36], TinyChart [37], P2G [38],\nIXC2-4KHD [39], SPHINX-X[14], S2[40]\nLLaV A-PruMerge[41], MADTP[42],\nMoV A[43], Video-LLaV A[44]\nEfficient Structures (\u00a72.5)SPD [45], MoE-LLaV A [25],\nMM1 [30], Cobra [13], VL-Mamba [18],\nFastV[46], VTW[47]\nTraining (\u00a75)Pre-Training (\u00a75.1) Idefics2[48], TinyLLaV A[23], VILA[49]", "sion tokens, implementing efficient structures, and utilizing compact language models, among other\nstrategies. A diagram of the architecture is illustrated in Figure. 3. Table. 1 surveys a summary of\nthe efficient MLLMs, which outlines the base LLM, the vision encoder, image resolution, and the\nprojector used to connect vision and language. These efficient MLLMs include: MobileVLM [20],\nLLaV A-Phi [21], Imp-v1 [22], TinyLLaV A [23], Bunny [24], Gemini Nano-2 [2], MobileVLM-\nv2 [17], MoE-LLaV A-3.6B [25], Cobra [13], Mini-Gemini [26], Vary-toy [27], TinyGPT-V [28],\nSPHINX-Tiny [14], ALLaV A [29], MM1-3B [30], LLaV A-Gemma [31], Mipha-3B [32], VL-\nMamba[18], MiniCPM-V2.0 [70], DeepSeek-VL [34], KarmaVLM [71], moondream2 [72]. In\nthis section, we sequentially present a comprehensive overview of these three modules, along with\nother efficient components.\n2.1 Vision Encoder\nTaking the input image Xvas input, the vision encoder compresses the original image into more", "iments show that it not only achieves competitive performance with state-of-the-art efficient meth-\nods but also boasts faster speeds due to its linear sequential modeling.It also excels in overcom-\ning visual illusions and spatial relationship judgments in closed-set challenging prediction bench-\nmarks and achieves performance comparable to LLaV A while using only 43% of the parameters.\nVL-Mamba[18] substitutes the Transformer-based backbone language model with the pre-trained\nMamba language model. It explores how to effectively implement the 2D vision selective scan\nmechanism for multimodal learning and the combinations of different vision encoders and pre-\ntrained Mamba language model variants.\nInference Acceleration SPD[45] proposes the speculative decoding with a language-only model\nto improve inference efficiency. By employing a language-only model as a draft model for specu-\n9", "which can pose a significant computational challenge within the context window of LLMs. Ely-\nsium [92] provides a trade-off between performance and visual token consumption, where T-Selector\nis introduced as a visual token compression network to enable LLMs to distinguish individual frames\nwhile reducing visual token use. VideoLLaV A [44], building upon LanguageBind [93], unifies vi-\nsual representation into the language feature space to advance foundational LLMs towards a unified\nlanguage-vision LLM without incurring a large computational burden.\n2.5 Efficient Structures\nEfficient structures primarily explore three directions: Mixture-of-Experts, Mamba and Inference\nAcceleration.\nMixture of Experts MoE enhances model capacity by modulating the total count of model pa-\nrameters while maintaining the activated parameters unchanged, hence, not significantly compro-\nmising the inference speed. MoE-LLaV A[25] presents an MoE-based sparse MLLM framework"], "retrieved_docs_id": ["5510d4cc4e", "93d03b64f9", "b24e6a172f", "6bebc6e320", "ffe176eb03"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How does the RETRO system retrieve and integrate information for chunk-level language generation?\n", "true_answer": "RETRO retrieves the nearest neighboring chunk (N(Ci\u22121)) from the retrieval database and integrates this information with the contextual information of the previous chunk to guide the generation of the next chunk.", "source_doc": "RAG.pdf", "source_id": "92f5901d31", "retrieved_docs": ["kens (e.g., kNN-LM [Khandelwal et al. , 2019 ]), phrases (e.g.,\nNPM [Leeet al. , 2020 ], COG [Vaze et al. , 2021 ]), and docu-\nment paragraphs. Finer-grained retrieval units can often bet-\nter handle rare patterns and out-of-domain scenarios but come\nwith an increase in retrieval costs.\nAt the word level, FLARE employs an active retrieval strat-\negy, conducting retrieval only when the LM generates low-\nprobability words. The method involves generating a tempo-\nrary next sentence for retrieval of relevant documents, then\nre-generating the next sentence under the condition of the re-\ntrieved documents to predict subsequent sentences.\nAt the chunk level, RETRO uses the previous chunk to re-\ntrieve the nearest neighboring chunk and integrates this infor-\nmation with the contextual information of the previous chunk\nto guide the generation of the next chunk. RETRO achieves\nthis by retrieving the nearest neighboring block N(Ci\u22121)\nfrom the retrieval database, then fusing the contextual in-", "mentation for pre-training a self-regressive language model,\nenabling large-scale pre-training from scratch by retrieving\nfrom a massive set of labeled data and significantly reducing\nmodel parameters. RETRO shares the backbone structure\nwith GPT models and introduces an additional RETRO\nencoder to encode features of neighboring entities retrieved\nfrom an external knowledge base. Additionally, RETRO\nincorporates block-wise cross-attention layers in its decoder\ntransformer structure to effectively integrate retrieval infor-\nmation from the RETRO encoder. RETRO achieves lower\nperplexity than standard GPT models. Moreover, it provides\nflexibility in updating knowledge stored in the language\nmodels by updating the retrieval database without the need\nfor retraining the language models [Petroni et al. , 2019 ].\nAtla[Izacard et al. , 2022 ]employs a similar approach, in-\ncorporating a retrieval mechanism using the T5 architecture", "Recite-Read [Sunet al. , 2022 ]transforms external re-\ntrieval into retrieval from model weights, initially hav-\ning LLM memorize task-relevant information and gener-\nate output for handling knowledge-intensive natural lan-\nguage processing tasks.\n\u2022Adjusting the Flow between Modules In the realm of\nadjusting the flow between modules, there is an empha-\nsis on enhancing interaction between language models\nand retrieval models. DSP [Khattab et al. , 2022 ]intro-\nduces the Demonstrate-Search-predict framework, treat-\ning the context learning system as an explicit program\nrather than a terminal task prompt to address knowledge-\nintensive tasks. ITER-RETGEN [Shao et al. , 2023 ]\nutilizes generated content to guide retrieval, itera-\ntively performing \u201cretrieval-enhanced generation\u201d and\n\u201cgeneration-enhanced retrieval\u201d in a Retrieve-Read-\nRetrieve-Read flow. Self-RAG [Asai et al. , 2023b ]fol-\nlows the decide-retrieve-reflect-read process, introduc-", "quently, it utilizes this retrieved information to generate re-\nsponses or text, thereby enhancing the quality of predictions.\nThe RAG method allows developers to avoid the need for\nretraining the entire large model for each specific task. In-\nstead, they can attach a knowledge base, providing additional\ninformation input to the model and improving the accuracy\nof its responses. RAG methods are particularly well-suited\nfor knowledge-intensive tasks. In summary, the RAG system\nconsists of two key stages:1. Utilizing encoding models to retrieve relevant docu-\nments based on questions, such as BM25, DPR, Col-\nBERT, and similar approaches [Robertson et al. , 2009,\nKarpukhin et al. , 2020, Khattab and Zaharia, 2020 ].\n2. Generation Phase: Using the retrieved context as a con-\ndition, the system generates text.\n2.2 RAG vs Fine-tuning\nIn the optimization of Large Language Models (LLMs), in\naddition to RAG, another important optimization technique\nis fine-tuning.", "indicate that extended-context models are not nec-\nessarily better than their non-extended counterparts\nat using their input context.\n3 How Well Can Language Models\nRetrieve From Input Contexts?\nGiven that language models struggle to retrieve\nand use information from the middle of their input\ncontexts in the multi-document question answering\ntask, to what extent can they simply retrieve from\ninput contexts? We study this question with a syn-\nthetic key-value retrieval task, which is designed to\nprovide a minimal testbed for the basic ability to\nretrieve matching tokens from an input context.\n3.1 Experimental Setup\nIn our synthetic key-value retrieval task, the inputs\nare (i) a string-serialized JSON object with kkey-\nvalue pairs, where each of the keys and values are\nunique, randomly-generated UUIDs and (ii) a key\nwithin the aforementioned JSON object. The goal\nis to return the value associated with the specified\nkey. Thus, each JSON object contains one relevant"], "retrieved_docs_id": ["92f5901d31", "422e1adde8", "dfac20a7d8", "80558327ad", "affcd43d89"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "How can cross-modal alignment be improved in MLLMs training?\n", "true_answer": "Cross-modal alignment in MLLMs training can be improved by designing more advanced architectures, introducing additional learning objectives, or incorporating diverse supervision signals.", "source_doc": "hallucination.pdf", "source_id": "83c3718d9d", "retrieved_docs": ["Data quality relevant to hallucinations can be further categorized into the following three facets.\n\u2022Noisy data. As mentioned in the definition section, training MLLMs involves two stages. The\npre-training stage employs image-text pairs crawled from the web, which contain inaccurate,\nmisaligned, or corrupted data samples. The noisy data would limit the cross-modal feature\nalignment [ 117,120], which serves as the foundation of MLLMs. As for the instruction tuning\ndata, prevalent methods, such as LLaVA [ 75], utilize the advanced GPT-4 [ 82] model to\ngenerate instructions. However, ChatGPT is a language model that cannot interpret visual\ncontent, leading to the risk of noisy data. Moreover, language models themselves suffer\nfrom the issue of hallucination [ 44], further increasing the risk. LLaVA-1.5 [ 74] adds human\nannotated QA data into instruction following and shows improved results, revealing the\neffect of noisy data.", "generated content remains consistent and contextually relevant to the input modality requires\nsophisticated techniques for capturing and modeling cross-modal relationships. The direction of\ncross-modal alignment encompasses both MLLMs training and hallucination evaluation. Regarding\ntraining, future research should explore methods for aligning representations between different\nmodalities. Achieving this goal may involve designing more advanced architectures, introducing\nadditional learning objectives [ 52], or incorporating diverse supervision signals [ 16]. Regarding\nevaluation, cross-modal consistency checking has been a long-standing topic, ranging from multi-\nmodal understanding [ 66,88] to text-to-image generation [ 13,17]. Drawing on proven experiences\nfrom these domains to improve the assessment of MLLM hallucination, or unifying them into an\noverall framework, may be promising research directions.\n6.3 Advancements in Model Architecture", "3.1.1 Quantity. Deep learning models are data-hungry, especially large models like MLLMs. The\namount of data plays an important role in building robust and reliable MLLMs. Currently, image-text\npair datasets [ 92] and visual QA [ 48,80] data are used for training MLLMs. Although these datasets\nare usually larger than typical datasets in computer vision, they are still far less abundant than the\ntext-only data used for training LLMs in terms of quantity. Insufficient data could potentially lead\nto problematic cross-modal alignment, resulting in hallucinations [96, 103].\n3.1.2 Quality. Given the increasing demand for large-scale training data, heuristic data collection\nmethods are employed to efficiently gather vast volumes of data. While these methods provide\nextensive data, they offer no guarantee of quality, thereby increasing the risk of hallucinations.\nData quality relevant to hallucinations can be further categorized into the following three facets.", "can reserve the original capacities of LLMs but likely have\na weak an adaptation performance, while the latter can\nfully adapt to multimodal tasks but suffer from the loss of\noriginal capacities of LLMs. More efforts should be made to\ninvestigate how to effectively balance the two aspects, so as\nto achieving improved multimodal capacities. In addition,\nexisting MLLMs are still overly dependent on the capacities\nof LLMs, which pose the limits on many multimodal tasks\n(e.g., space positioning). It will be meaningful to explore\nimproved training approaches of language models, so that\nmultimodal information can be also utilized in this process.\n\u2022Safety and alignment. Safety and alignment has been\nwidely discussed in LLMs, which aim to regulate the behav-\niors of models by technical approaches [66]. This topic is also\nimportant to MLLMs. Even a highly advanced MLLM ( e.g.,\nGPT-4V [133]) can be susceptible to safety issues. For exam-", "overall framework, may be promising research directions.\n6.3 Advancements in Model Architecture\nDespite recent advancements in model architectures of LLMs and MLLMs, designing effective\narchitectures specifically tailored to hallucination remains a challenge. Developing advanced model\narchitectures capable of capturing complex linguistic structures and generating coherent and con-\ntextually relevant output based on input visual content is essential for improving the performance of\nMLLMs. Future research can explore innovative architectural designs based on identified causes of\nhallucination. This includes developing stronger visual perception models, innovative cross-modal\ninteraction modules capable of transferring cross-modal information seamlessly, and novel large\nlanguage model architectures faithful to input visual content and text instructions, etc.\n6.4 Establishing Standardized Benchmarks"], "retrieved_docs_id": ["dcdb797076", "83c3718d9d", "77ce09f375", "32fb098424", "c8e35c3848"], "reranker_type": "None", "search_type": "text", "rr": 0.5, "hit": 1}, {"question": "How can a token-wise optimal visual context reduce hallucination in MLLMs?\n", "true_answer": "By providing the most informative visual grounding when decoding a specific token in the MLLM, it can effectively reduce hallucination.\n\nHere, MLLMs refer to Multimodal Language Learning Models. The factoid answer is derived from the context, specifically the key insight provided by HALC [15].", "source_doc": "hallucination.pdf", "source_id": "17a462daf3", "retrieved_docs": ["Similarly, GCD [ 24] devises a CLIP-Guided Decoding (GCD) approach. It first verifies that\nCLIPScore [ 88] can effectively distinguish between hallucinated and non-hallucinated sentences\nthrough a series of studies across different models and datasets. Based on this conclusion, it further\nrecalibrates the decoding process of MLLMs, including two steps: 1) reliability scoring, which\ndesigns a (CLIP-based) scoring function aiming to assign higher scores to candidate responses that\nare less likely to be hallucinated, and 2) guided sentence generation, which generates responses\nbased on this scoring. This is implemented in a similar way to beam search but at the sentence\nlevel.\nHALC [ 15] provides a key insight that when decoding a specific token in the MLLM, identifying a\ntoken-wise optimal visual context to provide the most informative visual grounding can effectively\nreduce hallucination. Visual context refers to the visual tokens that can be grounded from the", "reduce hallucination. Visual context refers to the visual tokens that can be grounded from the\ngenerated text response. An oracle study showed that decoding from the provided optimal visual\ncontexts eliminates over 84.5% of hallucinations. Based on the insight and observation, the authors\ndesigned mechanisms to locate the fine-grained visual information to correct each generated\ntoken that might be hallucinating. This is essentially a visual content-guided decoding strategy.\nIn addition to token-level correction, HALC also incorporates a matching-based beam search that\nutilizes a visual matching score to steer the generation of the final outputs, balancing both object\nhallucination mitigation and text generation quality.\nOthers. The work of OPEAR [ 45] makes an interesting observation that most hallucinations\nare closely tied to the knowledge aggregation patterns manifested in the self-attention matrix,", "providing the MLLM with images that are highly relevant but inconsistent with the answers,\ncausing MLLMs to suffer from hallucination. Such visual inputs are defined as \u2019spurious visual\ninputs\u2019. This benchmark reveals that most of mainstream MLLMs, including GPT-4V, suffer from\nhallucination when presented with such spurious visual inputs. This phenomenon indicates that\nan image can induce MLLMs to instinctively focus on visual content, resulting in responses that\nare predominantly based on visual information without proper reasoning and thinking.\nVQAv2-IDK [ 11]It has been widely discussed that in the binary QA scenario, MLLMs generally\nhave a bias on answering \u2019Yes-or-No, \u2019 leading to hallucination. In a more detailed question and\nanswer scenario, MLLMs generally tend to respond to the user\u2019s question plausibly, even if the\ndesired answer is \u2019I don\u2019t know\u2019. The concept is defined as \u2019I Know (IK)\u2019 hallucination in the work", "The problem of hallucination originates from LLMs themselves. In the NLP community, the\nhallucination problem is empirically categorized into two types [ 44]: 1) factuality hallucination\nemphasizes the discrepancy between generated content and verifiable real-world facts, typically\nmanifesting as factual inconsistency or fabrication; 2) faithfulness hallucination refers to the di-\nvergence of generated content from user instructions or the context provided by the input, as\nwell as self-consistency within generated content. In contrast to pure LLMs, research efforts of\nhallucination in MLLMs mainly focus on the discrepancy between generated text response and\nprovided visual content [69,76,137],i.e., cross-modal inconsistency. This difference suggests that\nstudies in LLMs cannot be seemingly transferred to MLLMs. Therefore, there is a growing need to\ncomprehensively survey recent advancements in MLLMs\u2019 hallucination phenomena to inspire new\nideas and foster the field\u2019s development.", "supervises MLLMs with mask prediction loss using a state-of-the-art expert vision model, SAM [ 57],\nguiding MLLMs to focus on highly-related image content. With the additional supervision from\nthe mask prediction loss, MLLMs are encouraged to extract features that can better represent these\ncrucial instances, thus generating more accurate responses and mitigating vision hallucination. The\nintuitive idea of supervising MLLMs with grounding shows promising performance in mitigating\nhallucination.\nAnother line of work analyzes the training loss from the perspective of embedding space distri-\nbution. As introduced earlier, popular MLLMs typically project the encoded vision features into the\ninput space of a specific LLM. A recent work, HACL [ 52], argues that an ideal projection should\nblend the distribution of visual and textual embeddings. However, despite visual projection, a sig-\nnificant modality gap exists between textual and visual tokens, suggesting that the current learned"], "retrieved_docs_id": ["17a462daf3", "31eefbd9eb", "842ef8fff1", "ce4c90f626", "c505f06d1a"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}, {"question": "In what month and year was the preprint with arXiv ID 2404.1893v1 published in the field of computer vision?\n", "true_answer": "The preprint was published in the field of computer vision in April 2024.", "source_doc": "hallucination.pdf", "source_id": "35a7709274", "retrieved_docs": ["plications. arXiv preprint arXiv:1704.04861 , 2017.\nGao Huang, Zhuang Liu, Kilian Q Weinberger, and Laurens van der Maaten. Densely connected convolutional\nnetworks. In Conference on Computer Vision and Pattern Recognition , 2017.\nSergey Ioffe and Christian Szegedy. Batch normalization: Accelerating deep network training by reducing\ninternal covariate shift. In International Conference on Machine Learning , pp. 448\u2013456, 2015.\nKevin Jarrett, Koray Kavukcuoglu, Yann LeCun, et al. What is the best multi-stage architecture for object\nrecognition? In 2009 IEEE 12th International Conference on Computer Vision , 2009.\nDiederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In International Conference\non Learning Representations , 2015.\nG\u00a8unter Klambauer, Thomas Unterthiner, Andreas Mayr, and Sepp Hochreiter. Self-normalizing neural net-\nworks. arXiv preprint arXiv:1706.02515 , 2017.", "but who are not interested in privacy concerns or in privacy issues.\nIn the following month, Shannon helped to organise the meeting and the conference. He also attended the\nmeeting of the National Security Council, and the meetings of the NSC and other federal agencies and\nagencies. In the early days of the war, using the NSC\u2019s computer systems Shannon used his knowledge of\ncryptography to create a series of cryptosystems that he had incorporated into his code, which included the\nAES cipher, which was the \ufb01rst of the AES-based cryptosystems.\nIt was on the 19th of January (January 1943) that Shannon would begin to use his knowledge of technology\nin his code and his code was published on the Internet.\nOn 1st of Oct 1943, Shannon was invited to the National Academy of Sciences\u2019 annual meeting. The NSC\nhosted it in Washington, DC for the \ufb01rst time \ufb01ve days before the meeting. The ceremony of the meeting,", "curate and compact deep neural networks. In Proceedings\nof the European conference on computer vision (ECCV) ,\npages 365\u2013382, 2018.\nLianmin Zheng, Zhuohan Li, Hao Zhang, Yonghao Zhuang,\nZhifeng Chen, Yanping Huang, Yida Wang, Yuanzhong\nXu, Danyang Zhuo, Joseph E Gonzalez, et al. Alpa:\nAutomating inter-and intra-operator parallelism for dis-\ntributed deep learning. arXiv preprint arXiv:2201.12023 ,\n2022.\nAojun Zhou, Yukun Ma, Junnan Zhu, Jianbo Liu, Zhi-\njie Zhang, Kun Yuan, Wenxiu Sun, and Hongsheng\nLi. Learning n:m \ufb01ne-grained structured sparse neu-\nral networks from scratch. In International Confer-\nence on Learning Representations , 2021. URL https:\n//openreview.net/forum?id=K9bw7vqp s.", "of the National Security Agency.\nIn the summer of 1944, Shannon was assigned to investigate a cryptogram-encoded message. He was able\nto analyze it using his computer, and\nTop-p,\np= 0.854 It was at Bell Labs that Shannon wrote his \ufb01rst book, In Plain Sight, a book for a year in 1961 called Non-\nverbal Behavior and a periodical for which Shannon was selected by James Clerk Maxwell as a reviewer.\nIt was a radical assessment of behaviour and that was the basis of the book\u2019s \ufb01rst chapter, \u201dMy Love Let-\nters.\u201d In 1961, Shannon wrote her bestseller The Shock Doctrine: An Introduction to It, but then another\nsigni\ufb01cant book was published in 1966, a thirty-\ufb01ve-page edition of which was originally commissioned by\nMaxwell to be \ufb01nished in September 1965.\nBut to judge from his books alone, it was clear that his approach to the encoding of messages and to writing\nthem down and deciphering text was an enormous leap forward.", "L. Gao, S. Biderman, S. Black, L. Golding, T. Hoppe, C. Foster, J. Phang, H. He, A. Thite, N. Nabeshima,\net al. The pile: An 800gb dataset of diverse text for language modeling. arXiv preprint arXiv:2101.00027 ,\n2020.\nS. Garg, D. Tsipras, P. Liang, and G. Valiant. What can transformers learn in-context? a case study of\nsimple function classes. arXiv preprint arXiv:2208.01066 , 2022.\nA. Gu, T. Dao, S. Ermon, A. Rudra, and C. R\u00e9. Hippo: Recurrent memory with optimal polynomial\nprojections. Advances in Neural Information Processing Systems , 33:1474\u20131487, 2020.\nA. Gu, K. Goel, and C. R\u00e9. E\ufb03ciently modeling long sequences with structured state spaces. arXiv preprint\narXiv:2111.00396 , 2021.\nK. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning for image recognition. In Proceedings of the\nIEEE conference on computer vision and pattern recognition , pages 770\u2013778, 2016.\nD. Hendrycks, N. Mu, E. D. Cubuk, B. Zoph, J. Gilmer, and B. Lakshminarayanan. Augmix: A simple data"], "retrieved_docs_id": ["8844c39736", "3d27d130f5", "722e372e9a", "de6380a195", "c2ab0c0819"], "reranker_type": "None", "search_type": "text", "rr": 0.0, "hit": 0}, {"question": "What is the optimization goal of the information condenser training process in RECOMP [Xuet al., 2023a]?\n", "true_answer": "The optimization goal is to minimize the contrastive loss, which involves maximizing the similarity between a data point and its positive sample while minimizing the similarity between the data point and negative samples.", "source_doc": "RAG.pdf", "source_id": "ba4f3a6fe9", "retrieved_docs": ["input document. The objective of the training process is to\nminimize the discrepancy between Cextracted and the actual\ncontext Ctruth as much as possible. The loss function they\nadopted is as follows:\nminL (\u03b8) =\u22121\nNNX\ni=1C(i)\ntruthlog(f.(S(i)\ninput;\u03b8)) (3)\nwhere f.is the information extractor and \u03b8is the parameter\nof the extractor. RECOMP [Xuet al. , 2023a ]similarly trains\nan information condenser by leveraging contrastive learning.\nFor each training data point, there exists one positive sample\nand five negative samples. The encoder is trained using con-\ntrastive loss [Karpukhin et al. , 2020 ]during this process.The\nspecific optimization goals are as follows:\n\u2212logesim(xi,pi)\nsim(xi, pi) +P\nnj\u2208Niesim(xi,pi)(4)", "Where \u03b6,\u03beare learnable linear projection layers.z is the av-\nerage representations of the graph from Encoder,h is the mean\nof decoder representations. z\u2032,h\u2032represent the corresponding\nnegative samples respectively. In the given text, \u2019h\u201d and\n\u2019z\u201d represent negative samples. By introducing a contrastive\nlearning objective, the model can learn to generate diverse\nand reasonable replies better, rather than just the one seen in\nthe training data. This helps to mitigate the risk of overfitting\nand improves the model\u2019s generalization ability in real-world\nscenarios.\nWhen dealing with retrieval tasks that involve structured\ndata, the work of SANTA [Liet al. , 2023d ]utilized a three-\nstage training process to fully understand the structural and\nsemantic information. Specifically, in the training phase\nof the retriever, contrastive learning was adopted, with the\nmain goal of optimizing the embedding representations of the\nqueries and documents. The specific optimization objectives", "information retrieval process, providing more effective and\naccurate inputs for subsequent LLM processing.\n5.2 How to Optimize a Generator to Adapt Input\nData?\nIn the RAG model, the optimization of the generator is a cru-\ncial component of the architecture. The generator\u2019s task is\nto take the retrieved information and generate relevant text,\nthereby providing the final output of the model. The goal of\noptimizing the generator is to ensure that the generated text is\nboth natural and effectively utilizes the retrieved documents,\nin order to better satisfy the user\u2019s query needs.\nIn typical Large Language Model (LLM) generation tasks,\nthe input is usually a query. In RAG, the main difference\nlies in the fact that the input includes not only a query\nbut also various documents retrieved by the retriever (struc-\ntured/unstructured). The introduction of additional informa-\ntion may have a significant impact on the model\u2019s understand-", "83\nels still can\u2019t well process the information in the context\nwindow [299]. To address this issue, specific architecture\nadaptations or algorithms might be needed to enhance the\nmodeling and utilization of long context information. An-\nother worrying concern is that existing work mostly focuses\non training LLMs with decoder-only Transformers. Despite\nthe effectiveness, it severely limits the more wide, diverse\nexplorations on alternative model architectures.\nModel Training. For pre-training, it is essential to establish\na data-centric infrastructure and training procedure for LLM\noptimization, which can effectively support a systematic\nprocess of data collection, data cleaning, data mixture, and\ndata curriculum. Furthermore, it also calls for more flexible\nmechanisms of hardware support or resource schedule, so\nas to better organize and utilize the resources in a computing\ncluster. In practice, it is very challenging to pre-train capable", "calculation. TFWSVD and TVD will cost more\ntime in the numerical optimization process.\n1.FWSVD versus SVD: Compared to SVD,\nFWSVD needs extra time for Fisher informa-\ntion calculation. The time of this process is\nsimilar to one epoch of regular training. For\nexample, SST-2 task in this paper takes about\n8 minutes to calculate the Fisher information.\nThis process is generally fast, and it can be\nfurther reduced to around 5 seconds if we only\nuse incorrect predictions ( e.g., 1% of all ex-\namples, mentioned in Appendix C).\n2.TFWSVD versus FWSVD: Compared to\nFWSVD, TFWSVD needs extra time for fac-"], "retrieved_docs_id": ["ba4f3a6fe9", "29b4a935b2", "7fabdba415", "e168d0108d", "71e666c38f"], "reranker_type": "None", "search_type": "text", "rr": 1.0, "hit": 1}]