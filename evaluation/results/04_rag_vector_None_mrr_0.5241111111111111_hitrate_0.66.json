[{"question": "What is a significant advantage of State Space Models over attention mechanisms?\n", "true_answer": "State Space Models offer near-linear computational complexity, providing an advantage over attention mechanisms.", "source_doc": "multimodal.pdf", "source_id": "85b5cac71b", "retrieved_docs": ["insufficient for length generalization in the context\nof reasoning tasks. Instead, they propose combin-\ning in-context learning and scratchpad/chain-of-\nthought reasoning to enable LLMs to generalize to\nunseen sequence lengths in- and out-of-distribution,\nwith performance scaling with model size. The au-\nthors report that fine-tuning can further improve\nmodel performance dependent on the task perfor-\nmance of the baseline.\nTransformer Alternatives While Transformers\nare the dominant paradigm in LLMs today due to\ntheir strong performance, several more efficient\nalternative architectures exist. One line of work\ntries to replace the attention mechanism using state\nspace models (SSMs), which offer near-linear com-\nputational complexity w.r.t. the sequence length.\nDao et al. [108] investigate the weaknesses of state\nspace models (SSMs) in language modeling and\nfind that existing approaches struggle with recall-\ning previous tokens and comparing tokens in the", "further engineering challenges and adjustments to the model that are not discussed in this paper.\n6 Conclusion\nWe introduce a selection mechanism to structured state space models, allowing them to perform context-dependent\nreasoning while scaling linearly in sequence length. When incorporated into a simple attention-free architecture,\nMamba achieves state-of-the-art results on a diverse set of domains, where it matches or exceeds the performance\nof strong Transformer models. We are excited about the broad applications of selective state space models to\nbuild foundation models for di\ufb00erent domains, especially in emerging modalities requiring long context such as\ngenomics, audio, and video. Our results suggest that Mamba is a strong candidate to be a general sequence model\nbackbone.\nAcknowledgments\nWe thank Karan Goel, Arjun Desai, and Kush Bhatia for helpful feedback on the draft.\nReferences", "SSMs by conditioning matrix A with a low-rank correction, and the Diagonal State Space (DSS)\nmodel [153], which proposes fully diagonal parameterization of state spaces for greater efficiency.\nH3 stacks two SSMs to interact with their output and input projection, bridging the gap between\nSSMs and attention while adapting to modern hardware. Mamba [77], a selective state space model,\nhas been introduced as a strong competitor to the Transformer architecture in large language models.\nMamba incorporates a selection mechanism to eliminate irrelevant data and develops a hardware-\naware parallel algorithm for recurrent operation. This results in competitive performance compared\nto LLMs of the same capacity, with faster inference speeds that scale linearly with time and con-\nstant memory usage. In conclusion, State Space Models offer significant potential as an alternative\nto attention mechanisms by providing near-linear computational complexity and effectively captur-", "Figure 13: The elements(left) block(middle) and architecture(right) in RWKV [151].\nThis approach parallelizes computations during training and maintains constant computational and\nmemory complexity during inference.\nState Space Models (SSMs) [152] can be formulated as a type of RNN for efficient autoregressive\ninference and have emerged as a promising alternative to attention mechanisms, offering near-linear\ncomputational complexity compared to the quadratic complexity of attention. SSMs are formulated\nas x\u2019(t) = Ax(t) + Bu(t), y(t) = Cx(t) + Du(t), mapping a single-dimension input signal u(t) to an N-\ndimension latent state x(t) before projecting it to a single-dimension output signal y(t), with A, B, C,\nand D being parameters learned by gradient descent [152]. Several techniques have been proposed\nto enhance SSMs, such as the Structured State Space sequence model (S4) [152], which refines\nSSMs by conditioning matrix A with a low-rank correction, and the Diagonal State Space (DSS)", "We compare the runtime of our proposed methods in Table 11. As we can see, the clipped softmax is\nonly marginally more expensive compared to using the vanilla softmax attention. The gated attention\n\u2020In our experiments, we found this value to perform better compared to the value of 6\u00b710\u22124listed in the paper.\n21"], "retrieved_docs_id": ["9e5f877b03", "53f73ec6b6", "85b5cac71b", "bb2e9ee3f0", "ae40bc46db"], "reranker_type": "None", "search_type": "vector", "rr": 0.3333333333333333, "hit": 1}, {"question": "How does VCoder enhance the object identification ability of MLLMs?\n", "true_answer": "VCoder enhances the object identification ability of MLLMs by utilizing additional perception formats, such as segmentation masks and depth maps.", "source_doc": "hallucination.pdf", "source_id": "c461600dc0", "retrieved_docs": ["task encoders are dedicated to integrating various types of latent visual information extracted by\nmultiple visual encoders. Additionally, the structural knowledge enhancement module is designed\nto utilize visual tools, such as OCR tools and object detectors, to extract prior knowledge from\nvisual inputs.\nFollowing the approach of the structural knowledge enhancement module in [ 38], another line\nof research investigates the utilization of vision tool models to enhance the perception of MLLMs.\nVCoder [ 49] utilizes additional perception formats, such as segmentation masks and depth maps,\nto enhance the object identification ability of the MLLM. Another work [ 54] ensembles additional\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024.", "robust evaluation of object hallucination, POPE [844] pro-\nposes a polling-based object probing approach for convert-\ning object recognition into a series of binary questions, and\nthe results indicate that current MLLMs often struggle with\nobject hallucination. Cognition tasks, on the other hand, re-\nquire MLLMs to perform reasoning based on image percep-\ntion. A common reasoning task is visual question answering\n(VQA), where models answer questions about images that\ndemand reasoning about spatial relationships [845], general\nknowledge [846], or scene text [847]. To fully explore the\ncapabilities of MLLMs, HallusionBench [848] collects 200\nsophisticated visual dependent or supplement questions, on\nwhich even the most advanced MLLMs like LLaVA-1.5 [831]\nand GPT-4V [133] fail to achieve good performance.\n\u2022Evaluation paradigms. The responses of MLLMs can\nbe evaluated either in a closed-ended or an open-ended\nmanner. Traditional multimodal tasks often rely on a closed-", "77\ntext output. To boost the performance, high-quality visual\ninstruction data is key to eliciting and enhancing the abil-\nities of MLLMs. Therefore, most studies are dedicated to\nconstructing various visual instruction datasets. As the basic\napproaches, early studies construct visual instructions by\ndistilling from GPT-4 [149] or reformulating vision-language\ntask datasets [151]. To enhance the quality of instruction\ndata, recent work further proposes improved strategies by\nincreasing the instruction diversity [834], incorporating fine-\ngrained information ( e.g., coordinate of objects) into the\ninstruction [833], or synthesizing complex visual reasoning\ninstructions [835].\nEvaluation of MLLM. After introducing the approaches to\ndeveloping MLLMs, we further discuss how to effectively\nassess the multimodal capabilities of MLLMs from the fol-\nlowing three aspects.\n\u2022Evaluation perspectives. The evaluation tasks for MLLMs\ncan be categorized into two main types: perception and", "directly inputs image patches and employs a linear projection to transform the raw pixels of each\npatch into embeddings.\nThe abstracted pipeline is depicted in Fig. 2. MLLMs take input from both visual and textual\nmodalities, learning from multimodal instructions and responses, which leads to remarkable per-\nformance across various multimodal tasks. Regarding the training of MLLMs, we provide a concise\noverview of the training process for interface-based MLLMs. Given that end-to-end models are\nclosed-source, the training details are unknown. Typically, the training of interface-based MLLMs\nconsists of two stages: 1) pre-training, 2) instruction tuning.\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024.", "ing images from public sources with manually-collected\ntext instructions for perception and cognition evaluations.\nMMBench [838] transforms these instructions into multiple-\nchoice questions and introduces CircularEval to ensure\nevaluation consistency. SEED-Bench [854] further considers\ntemporal understanding tasks and enlarges the evaluation\nscale to 19K multiple-choice questions with the assistance of\nLLMs. MM-Vet [855] presents more complex tasks to assess\nthe integrated multimodal capabilities of MLLMs. It starts\nby defining six essential multimodal abilities and then cre-\nates intricate questions by combining multiple abilities. In\nsummary, the above benchmarks collectively contribute to\nthe comprehensive evaluation and improved development\nof MLLMs.\nKey Points for Improving MLLMs. To develop capable\nMLLMs, we continue to discuss three key points to improve\nthe model capacities, from the perspectives of instruction\ndata, training strategy, and safety and alignment."], "retrieved_docs_id": ["c461600dc0", "736e8a6bfb", "722c60f298", "a8f0bda3b0", "df8870e586"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does the standard self-attention mechanism's time complexity affect large language models?\n", "true_answer": "The standard self-attention mechanism has a time complexity of O(n^2), where n is the sequence length. This quadratic complexity can lead to scalability issues, particularly when dealing with long sequences in large language models (LLMs).", "source_doc": "multimodal.pdf", "source_id": "323641b323", "retrieved_docs": ["Figure 11: Organization of efficient large language models advancements.\nOccupying a significant majority of the parameter volume in MLLMs, LLM serves as a crucial entry\npoint for enhancing the efficiency of MLLMs. In this section, similar to the survey paper [160], we\nprovide a brief overview of the research progress in efficient LLMs, offering inspiration for the\ndevelopment of Efficient MLLMs.\n4.1 Attention\nIn the standard self-attention mechanism, the time complexity is O(n2), where nis the sequence\nlength. This quadratic complexity arises due to the pairwise interactions between all input tokens,\nwhich can lead to scalability issues, especially when dealing with long sequences in LLMs. To\ntackle this, researchers have developed techniques to expedite attention mechanisms and reduce\ntime complexity, such as sharing-based attention, feature information reduction, kernelization or\nlow-rank, fixed and learnable pattern strategies, and hardware-assisted attention.", "ory. Observing a serial-position-like effect in lan-\nguage models is perhaps surprising, since the self-\nattention mechanisms underlying Transformer lan-\nguage models is technically equally capable of re-\ntrieving any token from their contexts.\n7 Conclusion\nWe empirically study how language models use\nlong input contexts via a series of controlled ex-\nperiments. We show that language model perfor-\nmance degrades significantly when changing the\nposition of relevant information, indicating that\nmodels struggle to robustly access and use infor-\nmation in long input contexts. In particular, per-\nformance is often lowest when models must use\ninformation in the middle of long input contexts.\nWe conduct a preliminary investigation of the role\nof (i) model architecture, (ii) query-aware contextu-\nalization, and (iii) instruction fine-tuning to better\nunderstand how they affect how language models\nuse context. Finally, we conclude with a practi-\ncal case study of open-domain question answering,", "and reinforcement learning [ JLL21 ,CLR+21,WWX+22]. Remarkable success of the self-attention mechanism and\ntransformers has paved the way for the development of sophisticated language models such as GPT4 [ Ope23 ], Bard\n[Goo23], LLaMA [TLI+23], and ChatGPT [Ope22].\nQ:Can we characterize the optimization landscape and implicit bias of transformers?\nHow does the attention layer select and compose tokens when trained with gradient descent?\nWe address these questions by rigorously connecting the optimization geometry of the attention layer and a hard\nmax-margin SVM problem, namely (Att-SVM) , that separates and selects the optimal tokens from each input sequence.\nThis formalism, which builds on the recent work [ TLZO23 ], is practically meaningful as demonstrated through\nexperiments, and sheds light on the intricacies of self-attention. Throughout, given input sequences X,Z\u2208RT\u00d7dwith\nlength Tand embedding dimension d, we study the core cross-attention and self-attention models:", "Augmenting Self-attention with Persistent Memory\nSainbayar Sukhbaatar, Edouard Grave, Guillaume Lample, Herve Jegou, Armand Joulin\nFacebook AI Research\nsainbar,egrave,guismay,rvj,ajoulin@fb.com\nAbstract\nTransformer networks have lead to important progress in language modeling and\nmachine translation. These models include two consecutive modules, a feed-\nforward layer and a self-attention layer. The latter allows the network to capture\nlong term dependencies and are often regarded as the key ingredient in the success\nof Transformers. Building upon this intuition, we propose a new model that solely\nconsists of attention layers. More precisely, we augment the self-attention layers\nwith persistent memory vectors that play a similar role as the feed-forward layer.\nThanks to these vectors, we can remove the feed-forward layer without degrading\nthe performance of a transformer. Our evaluation shows the bene\ufb01ts brought by", "for analyzing large language models across training\nand scaling. arXiv preprint arXiv:2304.01373 ."], "retrieved_docs_id": ["323641b323", "e8c8d8c36a", "9b0e4abb0c", "7202a249a2", "b0cd75dbe0"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "What is the source of ground truth objects used in the CCEval metric?\n", "true_answer": "The source of ground truth objects used in the CCEval metric is Visual Genome.", "source_doc": "hallucination.pdf", "source_id": "6e78496733", "retrieved_docs": ["randomly samples 100 images from Visual Genome to form a benchmark. In evaluation, GPT-4\nis utilized to parse the captions generated by MLLMs and extract objects. Additionally, this work\nintroduces the \"coverage\" metric on top of CHAIR to ensure that the captions are detailed enough.\nThis metric computes the ratio of objects in the caption that match the ground truth to the total\nnumber of ground truth objects. It additionally records the average number of objects as well as\nthe average length of captions as auxiliary metric. Compared with CHAIR, CCEval employs more\ndiverse objects, as reflected in the source of ground truth (Visual Genome vs. COCO) and caption\nparsing (GPT-4 vs. rule-based tool).\nMERLIM [ 100]MERLIM ( Multi-modal Evaluation benchma Rk for Large Image-language\nModels) is a test-bed aimed at empirically evaluating MLLMs on core computer vision tasks,\nincluding object recognition, instance counting, and identifying object-to-object relationships.", "CCF1763315 (Beyond Sparsity), CCF1563078 (Volume to Velocity), and 1937301 (RTML); ARL under\nNo. W911NF-21-2-0251 (Interactive Human-AI Teaming); ONR under No. N000141712266 (Unifying Weak\nSupervision); ONR N00014-20-1-2480: Understanding and Applying Non-Euclidean Geometry in Machine\nLearning; N000142012275 (NEPTUNE); NXP, Xilinx, LETI-CEA, Intel, IBM, Microsoft, NEC, Toshiba,\nTSMC, ARM, Hitachi, BASF, Accenture, Ericsson, Qualcomm, Analog Devices, Google Cloud, Salesforce,\nTotal, the HAI-GCP & HAI-Azure Cloud Credits for Research program, the Stanford Data Science Initiative\n(SDSI), Department of Defense (DoD) through the National Defense Science and Engineering Graduate\nFellowship (NDSEG) Program, and members of the Stanford DAWN project: Facebook, Google, and\nVMWare. The U.S. Government is authorized to reproduce and distribute reprints for Governmental purposes\n10", "incurring an ECE-10 of roughly 0.5 or more for both NaturalQuestions variants,QuAC,NarrativeQA ,\nandTruthfulQA . In contrast, some models are quite calibrated for some scenarios (e.g. Cohere xlarge\nv20220609 (52.4B) has a calibration error of 0.06 on NarrativeQA ).\nFor robustness and fairness, we see all models tend to show consistent drops of 5 to 10 points for all scenarios.\nConsistent with the broader trends, we find robustness and fairness are strongly correlated with accuracy,\nwith no observed cases of the most accurate models suffering especially large drops for robustness/fairness.\nOne exception is HellaSwag , where the three most accurate models are the only models with standard\naccuracies above 80% (text-davinci-002 = 81.5%, Cohere xlarge v20220609 (52.4B) = 81.1%, Anthropic-LM\nv4-s3 (52B) = 80.4%), and only text-davinci-002 remains about 70% in the presence of fairness perturbations", "MHaluBench [13] arXiv\u201924 Feb. MSCOCO [70] 1,860 Gen Acc/P/R/F \u2713 \u2713 \u2717 T2I\nVHTest [46] arXiv\u201924 Feb. MSCOCO [70] 1,200 Dis & Gen Acc \u2713 \u2713 \u2717 \u2713\nHal-Eavl [53] arXiv\u201924 Feb.MSCOCO [70] &\nLAION [92]10,000 Dis & GenAcc/P/R/F &\nLLM Assessment\u2713 \u2713 \u2713 Obj. Event\n(denoted as CHAIR \ud835\udc60):\nCHAIR \ud835\udc56=|{hallucinated objects }|\n|{all objects mentioned }|,\nCHAIR \ud835\udc60=|{sentences with hallucinated object }|\n|{all sentences}|.\nIn the paper of CHAIR [ 90], the range of objects is restricted to the 80 MSCOCO objects. Sentence\ntokenization and synonyms mapping are applied to determine whether a generated sentence\ncontains hallucinated objects. Ground-truth caption and object segmentations both serve as ground-\ntruth objects in the computation. In the MLLM era, this metric is still widely used for assessing the\nresponse of MLLMs.\nPOPE [ 69]. When used in MLLMs, the work of [ 69] argues that the CHAIR metric can be\naffected by the instruction designs and the length of generated captions. Therefore, it proposes a", "lent to the correct reference, which is the default accuracy metric for MATH.\nEquivalent (chain-of-thought). The correctness condition for equivalent (chain-of-thought) is if the\nmodel generation is mathematically equivalent to the correct reference, which is the default accuracy metric\nforMATH (chain-of-thought).\nC.2 Calibration and uncertainty\nWe first setup some formal notation, then state the metrics in the population (\u201cinfinite data\u201d) setting, and\nfinally give formulas for the metrics that we actually compute on finite data.\nFormal setup. We measure calibration metrics for classification tasks. Given an input x, let the true label\nbey\u2208[k] ={1, . . . , k}and the model\u2019s predicted probability be p\u2208[0,1]kwhere\u2211\njpj= 1. Here, pjdenotes\nthe model\u2019s confidence that the true label is j. Let \u02c6y= arg max j\u2208[k]pjbe the model\u2019s predicted label, and\npmax= max j\u2208[k]pjdenote the model\u2019s confidence in its predicted label \u02c6y(the model\u2019s \u201ctop probability\u201d)."], "retrieved_docs_id": ["6e78496733", "4dc35452e9", "31a0ab4048", "84a3c00c17", "6f291feee3"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "What is a challenge in the integration process of retrieved passages in the generation task?\n", "true_answer": "If not handled properly, the output might appear incoherent or disjointed.", "source_doc": "RAG.pdf", "source_id": "e75af48a5e", "retrieved_docs": ["equally diverse. Hallucination is a prominent issue where the\nmodel fabricates an answer that doesn\u2019t exist in the context.\nIrrelevance is another concern where the model generates an\nanswer that fails to address the query. Further, toxicity or\nbias, where the model generates a harmful or offensive re-\nsponse, is another problem.\nFinally, the augmentation process also faces several chal-\nlenges. Crucially, the effective integration of the context from\nretrieved passages with the current generation task is of ut-\nmost importance. If mishandled, the output might appear in-\ncoherent or disjointed. Redundancy and repetition are another\nissue, particularly when multiple retrieved passages contain\nsimilar information, leading to content repetition in the gen-\neration step. Moreover, determining the importance or rele-\nvance of multiple retrieved passages to the generation task is\nchallenging, and the augmentation process needs to balance", "Recite-Read [Sunet al. , 2022 ]transforms external re-\ntrieval into retrieval from model weights, initially hav-\ning LLM memorize task-relevant information and gener-\nate output for handling knowledge-intensive natural lan-\nguage processing tasks.\n\u2022Adjusting the Flow between Modules In the realm of\nadjusting the flow between modules, there is an empha-\nsis on enhancing interaction between language models\nand retrieval models. DSP [Khattab et al. , 2022 ]intro-\nduces the Demonstrate-Search-predict framework, treat-\ning the context learning system as an explicit program\nrather than a terminal task prompt to address knowledge-\nintensive tasks. ITER-RETGEN [Shao et al. , 2023 ]\nutilizes generated content to guide retrieval, itera-\ntively performing \u201cretrieval-enhanced generation\u201d and\n\u201cgeneration-enhanced retrieval\u201d in a Retrieve-Read-\nRetrieve-Read flow. Self-RAG [Asai et al. , 2023b ]fol-\nlows the decide-retrieve-reflect-read process, introduc-", "generation quality (as evidenced by the Vicuna Benchmark Questions and our TruthfulQA generation\ntask), it harms the model\u2019s performance in several multiple-choice benchmarks, particularly in ranking\nmore trustworthy responses. Drawing on the \u201calignment taxes\u201d concept introduced by Bai et al.\n[4], we refer to this phenomenon as verbose tax . Understanding the underlying reasons for this\noccurrence and exploring methods to improve the model\u2019s helpfulness (verbose generation ability)\nwhile maintaining its harmlessness and trustworthiness warrant further investigation.\n4.3 Qualitative Demonstrations\nTo offer a more profound insight into the strengths and weaknesses of Dromedary , we present\nqualitative demonstrations of its performance across diverse contexts. Our focus lies in highlighting\nthe model\u2019s capacity to address harmful or sensitive queries while generating comprehensive and\nnuanced responses. Due to the space limit, we present these results in the appendix. The results of", "retrieved information. In RAG, the generator\u2019s input includes\nnot only traditional contextual information but also relevant\ntext segments obtained through the retriever. This allows the\ngenerator to better comprehend the context behind the ques-\ntion and produce responses that are more information-rich.\nFurthermore, the generator is guided by the retrieved text toensure consistency between the generated content and the re-\ntrieved information. It is the diversity of input data that has\nled to a series of targeted efforts during the generation phase,\nall aimed at better adapting the large model to the input data\nfrom queries and documents. We will delve into the intro-\nduction of the generator through aspects of post-retrieval pro-\ncessing and fine-tuning.\n5.1 How Can Retrieval Results be Enhanced via\nPost-retrieval Processing?\nIn terms of untuned large language models, most studies\nrely on well-recognized large language models like GPT-", "which refers to the conflict phenomenon of integrating new\nand old knowledge. Similar cases also occur in human align-\nment of LLMs, where \u201c alignment tax \u201d [66] ( e.g., a potential\nloss in the in-context learning ability) has to be paid for\naligning to human values and needs. Moreover, due to\nthe limitations of sequence modeling architecture, LLMs\nstill face challenges in the understanding and generation\nof structured data. Consequently, they often fall behind\ntask-specific models on complex structured data tasks, such\nas knowledge-base question answering and semantic pars-\ning [458, 651]. Therefore, it is important to develop effective\nmodel specialization methods that can flexibly adapt LLMs\nto various task scenarios, meanwhile retaining the original\nabilities as possible.\nUnderperforming Specialized Generation\nLLMs may fall short in mastering generation\ntasks that require domain-specific knowledge or\ngenerating structured data. It is non-trivial to"], "retrieved_docs_id": ["e75af48a5e", "dfac20a7d8", "c0014fdf5f", "fefa202c19", "545745e0d3"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does the ChipNeMo project adapt large language models for chip design?\n", "true_answer": "The ChipNeMo project adapts large language models for chip design using domain-adaptive tokenization, domain-adaptive continued pretraining, and model alignment techniques.", "source_doc": "ChipNemo.pdf", "source_id": "36c5c0c7f1", "retrieved_docs": ["ChipNeMo: Domain-Adapted LLMs for Chip Design\nMingjie Liu* 1Teodor-Dumitru Ene* 1Robert Kirby* 1Chris Cheng* 1Nathaniel Pinckney* 1\nRongjian Liang* 1Jonah Alben1Himyanshu Anand1Sanmitra Banerjee1Ismet Bayraktaroglu1\nBonita Bhaskaran1Bryan Catanzaro1Arjun Chaudhuri1Sharon Clay1Bill Dally1Laura Dang1\nParikshit Deshpande1Siddhanth Dhodhi1Sameer Halepete1Eric Hill1Jiashang Hu1Sumit Jain1\nAnkit Jindal1Brucek Khailany1George Kokai1Kishor Kunal1Xiaowei Li1Charley Lind1Hao Liu1\nStuart Oberman1Sujeet Omar1Ghasem Pasandi1Sreedhar Pratty1Jonathan Raiman1Ambar Sarkar1\nZhengjiang Shao1Hanfei Sun1Pratik P Suthar1Varun Tej1Walker Turner1Kaizhe Xu1Haoxing Ren1\nAbstract\nChipNeMo aims to explore the applications of\nlarge language models (LLMs) for industrial chip\ndesign. Instead of directly deploying off-the-\nshelf commercial or open-source LLMs, we in-\nstead adopt the following domain adaptation tech-\nniques: domain-adaptive tokenization, domain-\nadaptive continued pretraining, model alignment", "ChipNeMo: Domain-Adapted LLMs for Chip Design\nFigure 4: Domain-Adapted ChipNeMo Tokenizer Improvements.\n3.1. Domain-Adaptive Tokenization\nWe adapt the LLaMA2 tokenizer (containing 32K tokens) to\nchip design datasets using the previously outlined four-step\nprocess. Approximately 9K new tokens are added to the\nLLaMA2 tokenizer. The adapted tokenizers can improve\ntokenization efficiency by 1.6% to 3.3% across various chip\ndesign datasets as shown in Figure 4. We observe no obvious\nchanges to tokenizer efficiency on public data. Importantly,\nwe have not observed significant decline in the LLM\u2019s accu-\nracy on public benchmarks when using the domain-adapted\ntokenizers even prior to DAPT.\n3.2. Domain Adaptive Pretraining\nFigure 5: Chip Domain Benchmark Result for ChipNeMo.\nFigure 5 presents the outcomes for ChipNeMo models on\nthe AutoEval benchmark for chip design domain (detailed\nin Appendix A.5). Results on open domain academic bench-\nmark results are presented in Appendix A.6. Our research", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ndomain-specific data improves the retriever hit rate\nby 30% over a pre-trained state-of-the-art retriever, in\nturn improving overall quality of RAG responses.\nThe paper is organized as follows. Section 2 outlines do-\nmain adaptation and training methods used including the\nadapted tokenizer, DAPT, model alignment, and RAG. Sec-\ntion 3 describes the experimental results including human\nevaluations for each application. Section 4 describes rel-\nevant LLM methods and other work targeting LLMs for\nchip design. Finally, detailed results along with additional\nmodel training details and examples of text generated by the\napplication use-cases are illustrated in the Appendix.\n2. ChipNeMo Domain Adaptation Methods\nChipNeMo implements multiple domain adaptation tech-\nniques to adapt LLMs to the chip design domain. These\ntechniques include domain-adaptive tokenization for chip\ndesign data, domain adaptive pretraining with large corpus", "ChipNeMo: Domain-Adapted LLMs for Chip Design\n2Domain -Adaptive\nPretraining\n24B tokens of chip \ndesign docs/code\nThousands GPU hrs\nModel\nAlignmen t\n56K/128K \n(SteerLM /SFT)  insts\n+ 1.4K task insts\n100+ GPU hrsFoundation Models\nLLaMA2 \n(7B, 13B, 70B) \nChipNeMo \nChat Models\n(7B, 13B, 70B)ChipNeMo \nFoundation Models\n(7B, 13B, 70B)Pretraining\nTrillions tokens of \ninternet data\n105 \u2013 106 GPU hrs\nFigure 1: ChipNeMo Training Flow\n2023)) fine-tuned on additional Verilog data can outperform\nstate-of-art OpenAI GPT-3.5 models. Customizing LLMs\nin this manner also avoids security risks associated with\nsending proprietary chip design data to third party LLMs\nvia APIs. However, it would be prohibitively expensive to\ntrain domain-specific models for every domain from scratch,\nsince this often requires millions of GPU training hours. To\ncost-effectively train domain-specific models, we instead\npropose to combine the following techniques: Domain-", "niques: domain-adaptive tokenization, domain-\nadaptive continued pretraining, model alignment\nwith domain-specific instructions, and domain-\nadapted retrieval models. We evaluate these\nmethods on three selected LLM applications for\nchip design: an engineering assistant chatbot,\nEDA script generation, and bug summarization\nand analysis. Our evaluations demonstrate that\ndomain-adaptive pretraining of language models,\ncan lead to superior performance in domain re-\nlated downstream tasks compared to their base\nLLaMA2 counterparts, without degradations in\ngeneric capabilities. In particular, our largest\nmodel, ChipNeMo-70B, outperforms the highly\ncapable GPT-4 on two of our use cases, namely en-\ngineering assistant chatbot and EDA scripts gener-\nation, while exhibiting competitive performance\non bug summarization and analysis. These re-\nsults underscore the potential of domain-specific\ncustomization for enhancing the effectiveness of\nlarge language models in specialized applications."], "retrieved_docs_id": ["36c5c0c7f1", "ac7c0c980b", "df0b9868f2", "2079d05356", "a6c3d05123"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "What is one of the benchmarks used for evaluating video comprehension in multimodal large language models?\n", "true_answer": "Video-LLaV A", "source_doc": "multimodal.pdf", "source_id": "d85947fa4f", "retrieved_docs": ["Figure 2: Organization of efficient multimodal large language models advancements.\n\u2022 Training surveys the landscape of training methodologies that are pivotal in the devel-\nopment of efficient MLLMs. It addresses the challenges associated with the pre-training\nstage, instruction-tuning stage, and the overall training strategy for state-of-the-art results.\n\u2022 Data and Benchmarks evaluates the efficiency of datasets and benchmarks used in the\nevaluation of multimodal language models. It assesses the trade-offs between dataset size,\ncomplexity, and computational cost, while advocating for the development of benchmarks\nthat prioritize efficiency and relevance to real-world applications.\n\u2022 Application investigates the practical implications of efficient MLLMs in various do-\nmains, emphasizing the balance between performance and computational cost. By ad-\ndressing resource-intensive tasks such as high-resolution image understanding and medical\n3", "benchmarks employed to assess the performance of these models. The discussion highlights the\nimportance of diverse and high-quality datasets in achieving robust and accurate MLLMs, as well\nas the various strategies employed to generate and refine these datasets. Furthermore, we present a\ncomprehensive comparison of MLLM performance across established benchmarks, emphasizing the\nneed for a thorough evaluation to ensure the effectiveness of these models in real-world applications.\n6.1 Pre-Training Data\nPre-training data primarily serve two critical objectives: (1) promoting the integration of various\nmodalities and (2) conveying comprehensive knowledge. Large-scale image-caption pair datasets\nnaturally fulfill these requirements. Firstly, they predominantly originate from the internet, provid-\ning an extensive data volume with a broad knowledge coverage. Secondly, the direct alignment\nbetween the two modalities is beneficial for training modality projectors. However, captions in such", "Thoughts (PoT) learning and Visual Token Merging strategy while excelling in faster inference\nspeed at the same time. TextHawk [36] explores efficient fine-grained perception by designing four\ndedicated components to address challenges posed by document-oriented tasks. HRVDA [66] and\nMonkey [65] are also large multimodal models designed to address the challenges posed by high-\nresolution requirements in visual document understanding tasks.\n7.3 Video Comprehension\nVideos provide an impressively accurate representation of how humans continuously perceive the\nvisual world. Intelligent video understanding is vital for a variety of real-world applications, in-\ncluding video category classification, video captioning, and video-text retrieval. Several works like\nvideoChat [197] and Video-LLaMA [198] are LLM-based large multimodal models for end-to-end\nchat-centric video comprehension. However, these methods can only take in a limited number of\nframes for short video understanding.", "121\n\u201cReform-eval: Evaluating large vision language mod-\nels via unified re-formulation of task-oriented bench-\nmarks,\u201d CoRR , vol. abs/2310.02569, 2023.\n[854] B. Li, R. Wang, G. Wang, Y. Ge, Y. Ge, and\nY. Shan, \u201cSeed-bench: Benchmarking multimodal\nllms with generative comprehension,\u201d CoRR , vol.\nabs/2307.16125, 2023.\n[855] W. Yu, Z. Yang, L. Li, J. Wang, K. Lin, Z. Liu,\nX. Wang, and L. Wang, \u201cMm-vet: Evaluating large\nmultimodal models for integrated capabilities,\u201d CoRR ,\nvol. abs/2308.02490, 2023.\n[856] J. Wang, L. Meng, Z. Weng, B. He, Z. Wu, and Y. Jiang,\n\u201cTo see is to believe: Prompting GPT-4V for better\nvisual instruction tuning,\u201d CoRR , vol. abs/2311.07574,\n2023.\n[857] Y. Zhang, R. Zhang, J. Gu, Y. Zhou, N. Lipka, D. Yang,\nand T. Sun, \u201cLlavar: Enhanced visual instruction tun-\ning for text-rich image understanding,\u201d arXiv preprint\narXiv:2306.17107 , 2023.\n[858] X. Qi, K. Huang, A. Panda, M. Wang, and P . Mittal,\n\u201cVisual adversarial examples jailbreak aligned large", "Efficient Multimodal Large Language Models:\nA Survey\nYizhang Jin1,2,*, Jian Li1,*, Yexin Liu3, Tianjun Gu4, Kai Wu1, Zhengkai Jiang1,\nMuyang He3, Bo Zhao3, Xin Tan4, Zhenye Gan1, Yabiao Wang1, Chengjie Wang1,\nLizhuang Ma2\n1Youtu Lab, Tencent,2SJTU,3BAAI,4ECNU\nAbstract\nIn the past year, Multimodal Large Language Models (MLLMs) have demon-\nstrated remarkable performance in tasks such as visual question answering, vi-\nsual understanding and reasoning. However, the extensive model size and high\ntraining and inference costs have hindered the widespread application of MLLMs\nin academia and industry. Thus, studying efficient and lightweight MLLMs\nhas enormous potential, especially in edge computing scenarios. In this survey,\nwe provide a comprehensive and systematic review of the current state of effi-\ncient MLLMs. Specifically, we summarize the timeline of representative effi-\ncient MLLMs, research state of efficient structures and strategies, and the appli-"], "retrieved_docs_id": ["542e5c49da", "8f79f68811", "73fba2ab9b", "2678016e21", "ac70fcc9f2"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How does LURE correct hallucinations in generated text?\n", "true_answer": "LURE corrects hallucinations in generated text using a hallucination revisor, which transforms potentially hallucinatory descriptions into accurate ones. This is achieved by training the revisor model on a dataset, with the goal of reconstructing clean data from corrupted input.", "source_doc": "hallucination.pdf", "source_id": "ceeab98980", "retrieved_docs": ["Another interesting study observes that the hallucination of MLLMs seems to be easily triggered\nby paragraph break \u2018\\n\\n\u2019 [ 36]. Based on this observation, this work proposes two simple methods\nto reduce hallucination by avoiding generating \u2018\\n\u2019 during generation. First, intuitively, users can\ndesign the prompt to instruct the model to output responses within one paragraph, avoiding \u2018\\n\u2019.\nBesides, the authors tried to alter the output logits during generation by manually lowering the\nprobability of generating \u2018\\n\u2019. Experimental results show that this simple strategy can alleviate\nhallucination on popular benchmarks.\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024.", "Based on powerful large language models, multimodal large language models demonstrate remark-\nable performance across various multimodal tasks. However, the phenomenon of hallucination\npresents a significant challenge to the practical applications of MLLMs, giving rise to undeniable\nconcerns about safety, reliability, and trustworthiness. In this comprehensive survey, we conducted\na thorough examination of hallucinations within multimodal large language models, focusing\non their underlying causes, evaluation metrics, benchmarks, and mitigation methods. Despite\nconsiderable progress, hallucination remains a complex and persistent concern that warrants ongo-\ning investigation. The challenge of hallucination in multimodal large language models remains\ncompelling, requiring continuous scrutiny and innovation. In light of these challenges, we have\noutlined several promising future directions in this burgeoning domain. Through navigating the", "in real-world applications. This problem has attracted increasing attention, prompting efforts to detect\nand mitigate such inaccuracies. We review recent advances in identifying, evaluating, and mitigating these\nhallucinations, offering a detailed overview of the underlying causes, evaluation benchmarks, metrics, and\nstrategies developed to address this issue. Additionally, we analyze the current challenges and limitations,\nformulating open questions that delineate potential pathways for future research. By drawing the granular\nclassification and landscapes of hallucination causes, evaluation benchmarks, and mitigation methods, this\nsurvey aims to deepen the understanding of hallucinations in MLLMs and inspire further advancements in\nthe field. Through our thorough and in-depth review, we contribute to the ongoing dialogue on enhancing the\nrobustness and reliability of MLLMs, providing valuable insights and resources for researchers and practitioners", "Hallucination of Multimodal Large Language Models: A Survey 3\ncontrast, there are very few surveys on hallucination in the field of MLLMs. To the best of our\nknowledge, there is only one concurrent work [ 76], a short survey on the hallucination problem of\nLVLMs. However, our survey distinguishes itself in terms of both taxonomy and scope. We present a\nlayered and granular classification of hallucinations, as shown in Fig. 1, drawing a clearer landscape\nof this field. Additionally, our approach does not limit itself to specific model architectures as\nprescribed in the work of [ 76], but rather dissects the causes of hallucinations by tracing back to\nvarious affecting factors. We cover a larger range of literature both in terms of paper number and\ntaxonomy structure. Furthermore, our mitigation strategies are intricately linked to the underlying\ncauses, ensuring a cohesive and targeted approach.\nOrganization of this survey. In this paper, we present a comprehensive survey of the latest", "Organization of this survey. In this paper, we present a comprehensive survey of the latest\ndevelopments regarding hallucinations in MLLMs. The survey is organized as follows: We begin by\nproviding sufficient context and defining concepts related to LLMs, MLLMs, hallucination, etc. Next,\nwe delve into an in-depth analysis of the factors contributing to hallucinations in MLLMs. Following\nthis, we present a set of metrics and benchmarks employed for evaluating hallucinations in MLLMs.\nWe then elaborate on a range of approaches designed to mitigate hallucinations in MLLMs. Finally,\nwe delve into the challenges and open questions that frame the current limitations and future\nprospects of this field, offering insights and delineating potential pathways for forthcoming research.\n2 DEFINITIONS\n2.1 Large Language Models\nBefore moving to multimodal large language models, it is essential to introduce the concept of large"], "retrieved_docs_id": ["3fc78f0ef0", "114f3dada8", "c7f1da1e07", "33d47ad8cc", "e1b4ac9436"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How does the Knowledge Updates feature affect the retrieval knowledge base?\n", "true_answer": "The Knowledge Updates feature directly updates the retrieval knowledge base, ensuring information remains current without the need for frequent retraining. This is suitable for dynamic data environments.", "source_doc": "RAG.pdf", "source_id": "9c38efbac6", "retrieved_docs": ["Feature Comparison RAG Fine-tuning\nKnowledge UpdatesDirectly updates the retrieval knowledge\nbase, ensuring information remains current\nwithout the need for frequent retraining, suit-\nable for dynamic data environments.Stores static data, requiring retraining for\nknowledge and data updates.\nExternal KnowledgeProficient in utilizing external resources,\nparticularly suitable for documents or other\nstructured/unstructured databases.Can be applied to align the externally learned\nknowledge from pretraining with large lan-\nguage models, but may be less practical for\nfrequently changing data sources.\nData ProcessingRequires minimal data processing and han-\ndling.Relies on constructing high-quality datasets,\nand limited datasets may not yield significant\nperformance improvements.\nModel CustomizationFocuses on information retrieval and inte-\ngrating external knowledge but may not fully\ncustomize model behavior or writing style.Allows adjustments of LLM behavior, writ-", "can be updated during inference time to reflect\nan updated state of the underlying knowledge.\nE.g., Lewis et al. [304] demonstrate that swapping\ntheir model\u2019s non-parametric memory with an up-\ndated version enabled it to answer questions about\nworld leaders who had changed between the mem-\nory collection dates. Similarly, Izacard et al. [236]\ndemonstrate that their retrieval-augmented model\ncan update its knowledge forward and backward in\ntime by swapping the index.\n2.11 Brittle Evaluations\nOne reason why the evaluation of language models\nis a challenging problem is that they have an un-\neven capabilities surface \u2014a model might be able\nto solve a benchmark problem without issues, but\na slight modification of the problem (or even a sim-\nple change of the prompt) can give the opposite\nresult [ 675,342,533] (see Section 2.7). Unlike\nhumans, we cannot easily infer that an LLM that\ncan solve one problem will have other related capa-\nbilities. This means that it is difficult to assess the", "models and retrieval-Augmented generation. They become\nfamiliar with the evolutionary path and key technologies of\nknowledge retrieval augment, enabling them to discern the\nadvantages and disadvantages of different techniques, iden-\ntify applicable scenarios, and explore current typical applica-\ntion cases in practice.It is noteworthy that in previous work,\nFeng el al. [2023b ]systematically reviewed the methods, ap-\nplications, and future trends of combining large models with\nknowledge, with a primary focus on knowledge editing and\nretrieval augmentation methods. Zhu et al. [2023 ]introduced\nthe latest advancements in augmenting retrieval systems for\nLarge Language Models, with a specific focus on the retrieval\nsystem. Meanwhile, Asai et al. [2023a ]focusing on ques-\ntions such as \u201cWhat\u201d, \u201cWhen\u201d, \u201cHow\u201d, analyzed and eluci-\ndated the key processes in Retrieval-based Language Mod-\nels. In comparison with them, this paper aims to systemati-", "63\nthe latest knowledge beyond the training data. To tackle\nthis issue, a straightforward approach is to regularly update\nLLMs with new data. However, it is very costly to fine-tune\nLLMs, and also likely to cause the catastrophic forgetting\nissue when incrementally training LLMs. Therefore, it is\nnecessary to develop efficient and effective approaches that\ncan integrate new knowledge into existing LLMs, making\nthem up-to-date. Existing studies have explored how to\nutilize the external knowledge source ( e.g., search engine)\nto complement LLMs, which can be either jointly optimized\nwith LLMs [653] or used as a plug-and-play module [659].\nFor instance, ChatGPT utilizes a retrieval plugin to access\nup-to-date information sources [665]. By incorporating the\nextracted relevant information into the context [666\u2013668],\nLLMs can acquire new factual knowledge and perform\nbetter on relevant tasks. However, such an approach seems\nto be still at a superficial level. In addition, existing studies", "employs a graph encoding method that reflects the graph\nstructure into PTMs\u2019 representation space and utilizes a\nmulti-modal contrastive learning objective between graph-\ntext modes to ensure consistency between retrieved facts\nand generated text. KnowledgeGPT [Wang et al. , 2023c ]\ngenerates search queries for Knowledge Bases (KB) in code\nformat and includes predefined KB operation functions.\nApart from retrieval, KnowledgeGPT also offers the ca-\npability to store knowledge in a personalized knowledge\nbase to meet individual user needs. These structured data\nsources provide RAG with richer knowledge and context,\ncontributing to improved model performance.\nLLM Generated Content RAG\nObserving that the auxiliary information recalled by RAG\nis not always effective and may even have negative effects,\nsome studies have expanded the paradigm of RAG by delving\ndeeper into the internal knowledge of LLM. This approach\nutilizes the content generated by LLM itself for retrieval, aim-"], "retrieved_docs_id": ["9c38efbac6", "e1118fca72", "fe157c6a57", "b08dd9fa3b", "4c3ac6cb2e"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How is the \"Faithfulness Score\" calculated in the given context?\n", "true_answer": "The \"Faithfulness Score\" is calculated by comparing the number of statements supported by the context to the total number of statements, using a large language model (LLM) to break down the context into individual statements and verify their consistency with the original context.", "source_doc": "RAG.pdf", "source_id": "716582522f", "retrieved_docs": ["into individual statements using an LLM and verify\nwhether each statement is consistent with the context.\nUltimately, a \u201dFaithfulness Score\u201d is calculated by com-\nparing the number of supported statements to the total\nnumber of statements.\n2. Assessing Answer Relevance: Generate potential ques-\ntions using an LLM and calculate the similarity between\nthese questions and the original question. The Answer\nRelevance Score is derived by calculating the average\nsimilarity of all generated questions to the original ques-\ntion.\n3. Assessing Context Relevance: Extract sentences directly\nrelevant to the question using an LLM, and use the ratio\nof these sentences to the total number of sentences in the\ncontext as the Context Relevance Score.", "from what appears in the document being summarized. Consequently, it is important to measure and\nimprove the faithfulness of these systems since unfaithful systems may be harmful by potentially spreading\nmisinformation, including dangerous, yet hard to detect errors, when deployed in real-world settings. We\nevaluate the LMs using recently proposed reference-free evaluation metrics that have been shown to get high\ncorrelations with human scores for faithfulness (Laban et al., 2022; Fabbri et al., 2022). We note recent\nwork has shown that some reference-free evaluation metrics may be mostly relying on spurious correlations\n(Durmus et al., 2022).\nDatasets. There is a growing collection of summarization datasets, including datasets that capture finer-\ngrained and more specific summarization functions (e.g. summarizing multiple documents or conditional\non a user query). Bommasani & Cardie (2020) show that there is significant diversity in summarization", "for wedging. Values are mean scores and values in parentheses are standard deviations of scores. Reiteration\nvalues are in the range from 1 to 5, while wedging values are between -1 to 1, except for Hostility, which is\nrated from 0 to 2.\nResults and discussion. Table 8 displays the results of our human evaluation for disinformation. We\nfind that for the reiteration scenario, all models received average quality scores above 3, indicating that\nthey generated text that tended to support the given thesis statements. When it came to style, there was\ngreater variation with text-davinci-002, Anthropic-LM v4-s3 (52B), OPT (175B), and even davinci (175B)\nreceiving scores above 4.0, but OPT (66B) and GLM (130B), received much lower scores. text-davinci-002\nand Anthropic-LM v4-s3 (52B) generate text that supports the given thesis statements, and looks like real\nheadlines. text-davinci-002 significantly outperforms Anthropic-LM v4-s3 (52B) ( p= 0.028), GLM (130B)", "Esin Durmus, He He, and Mona Diab. FEQA: A question answering evaluation framework for faithfulness\nassessment in abstractive summarization. In Proceedings of the 58th Annual Meeting of the Association for\nComputational Linguistics , pp. 5055\u20135070, Online, July 2020. Association for Computational Linguistics.\ndoi: 10.18653/v1/2020.acl-main.454. URL https://aclanthology.org/2020.acl-main.454 .\nEsin Durmus, Faisal Ladhak, and Tatsunori Hashimoto. Spurious correlations in reference-free evaluation of\ntext generation. In Proceedings of the 60th Annual Meeting of the Association for Computational Linguis-\ntics (Volume 1: Long Papers) , pp. 1443\u20131454, Dublin, Ireland, May 2022. Association for Computational\nLinguistics. doi: 10.18653/v1/2022.acl-long.102. URL https://aclanthology.org/2022.acl-long.102 .\nSanghamitra Dutta, Dennis Wei, Hazar Yueksel, Pin-Yu Chen, Sijia Liu, and Kush R. Varshney. Is there a", "evaluation metrics. Additionally, the latest evalu-\nation frameworks like RAGAS [Eset al. , 2023 ]and\nARES [Saad-Falcon et al. , 2023 ]also involve RAG eval-\nuation metrics. Summarizing these works, three core metrics\nare primarily focused on: Faithfulness of the answer, Answer\nRelevance, and Context Relevance.\n1.Faithfulness\nThis metric emphasizes that the answers generated by\nthe model must remain true to the given context, ensur-\ning that the answers are consistent with the context infor-\nmation and do not deviate or contradict it. This aspect of\nevaluation is vital for addressing illusions in large mod-\nels.\n2.Answer Relevance\nThis metric stresses that the generated answers need to\nbe directly related to the posed question.\n3.Context Relevance\nThis metric demands that the retrieved contextual infor-\nmation be as accurate and targeted as possible, avoid-\ning irrelevant content. After all, processing long texts\nis costly for LLMs, and too much irrelevant information"], "retrieved_docs_id": ["716582522f", "e99622852f", "897b2d91c3", "99efaadafc", "57b75e5528"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does RAG's generator improve the accuracy and relevance of the generated text?\n", "true_answer": "RAG's generator enhances accuracy and relevance by leveraging the retrieved information, in contrast to conventional generative models.", "source_doc": "RAG.pdf", "source_id": "cd69a480bb", "retrieved_docs": ["retrieved information. In RAG, the generator\u2019s input includes\nnot only traditional contextual information but also relevant\ntext segments obtained through the retriever. This allows the\ngenerator to better comprehend the context behind the ques-\ntion and produce responses that are more information-rich.\nFurthermore, the generator is guided by the retrieved text toensure consistency between the generated content and the re-\ntrieved information. It is the diversity of input data that has\nled to a series of targeted efforts during the generation phase,\nall aimed at better adapting the large model to the input data\nfrom queries and documents. We will delve into the intro-\nduction of the generator through aspects of post-retrieval pro-\ncessing and fine-tuning.\n5.1 How Can Retrieval Results be Enhanced via\nPost-retrieval Processing?\nIn terms of untuned large language models, most studies\nrely on well-recognized large language models like GPT-", "ules and offers more flexibility.\nIn the subsequent chapters, we further analyze three key\nparts of RAG in detail. Chapter 4 introduces the retriever of\nRAG, how to process corpora to obtain better semantic repre-\nsentations, how to mitigate the semantic gap between Query\nand documents, and how to adjust the retriever to fit the gen-\nerator. Chapter 5 explains how the generator obtains better\ngeneration results by post-processing retrieved documents,\navoiding the \u201dLost in the middle\u201d issue, as well as methods to\nadjust the generator to fit the retriever. Subsequently, in Chap-\nter 6, we review the current retrieval enhancement methods\nfrom the aspects of the retrieval stage, retrieval data sources,\nand retrieval process.\nChapter 7 explains how to evaluate current RAG methods,\nincluding evaluation, key indicators, and current evaluation\nframeworks Finally, we provided an outlook on the poten-\ntial future research directions for RAG. As a method that", "quently, it utilizes this retrieved information to generate re-\nsponses or text, thereby enhancing the quality of predictions.\nThe RAG method allows developers to avoid the need for\nretraining the entire large model for each specific task. In-\nstead, they can attach a knowledge base, providing additional\ninformation input to the model and improving the accuracy\nof its responses. RAG methods are particularly well-suited\nfor knowledge-intensive tasks. In summary, the RAG system\nconsists of two key stages:1. Utilizing encoding models to retrieve relevant docu-\nments based on questions, such as BM25, DPR, Col-\nBERT, and similar approaches [Robertson et al. , 2009,\nKarpukhin et al. , 2020, Khattab and Zaharia, 2020 ].\n2. Generation Phase: Using the retrieved context as a con-\ndition, the system generates text.\n2.2 RAG vs Fine-tuning\nIn the optimization of Large Language Models (LLMs), in\naddition to RAG, another important optimization technique\nis fine-tuning.", "information retrieval process, providing more effective and\naccurate inputs for subsequent LLM processing.\n5.2 How to Optimize a Generator to Adapt Input\nData?\nIn the RAG model, the optimization of the generator is a cru-\ncial component of the architecture. The generator\u2019s task is\nto take the retrieved information and generate relevant text,\nthereby providing the final output of the model. The goal of\noptimizing the generator is to ensure that the generated text is\nboth natural and effectively utilizes the retrieved documents,\nin order to better satisfy the user\u2019s query needs.\nIn typical Large Language Model (LLM) generation tasks,\nthe input is usually a query. In RAG, the main difference\nlies in the fact that the input includes not only a query\nbut also various documents retrieved by the retriever (struc-\ntured/unstructured). The introduction of additional informa-\ntion may have a significant impact on the model\u2019s understand-", "challenging, and the augmentation process needs to balance\nthe value of each passage appropriately. The retrieved con-\ntent may also come from different writing styles or tones, and\nthe augmentation process needs to reconcile these differences\nto ensure output consistency. Lastly, generation models may\noverly rely on augmented information, resulting in output thatmerely repeats the retrieved content, without providing new\nvalue or synthesized information.\n3.2 Advanced RAG\nAdvanced RAG has made targeted improvements to over-\ncome the deficiencies of Naive RAG. In terms of the quality\nof retrieval generation, Advanced RAG has incorporated pre-\nretrieval and post-retrieval methods. To address the indexing\nissues encountered by Naive RAG, Advanced RAG has op-\ntimized indexing through methods such as sliding window,\nfine-grained segmentation, and metadata. Concurrently, it has\nput forward various methods to optimize the retrieval process."], "retrieved_docs_id": ["fefa202c19", "8cdb0d5ff2", "80558327ad", "7fabdba415", "873e6df003"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What is the purpose of the source with the given context?\n", "true_answer": "The purpose of the source is to serve as a continually updated source of information, promoting ongoing growth in a certain field by providing brief overviews of key contributions.", "source_doc": "multimodal.pdf", "source_id": "6e2ea7a4ef", "retrieved_docs": ["used to transform the original records ( e.g., knowledge\ntriples) into sequences [458] due to the simplicity. Further,\nthe programming language ( e.g., executable code) has also\nbeen utilized to formulate the structured data, which can\nalso support using external tools ( e.g., program executor) to\nproduce the precise results [459, 460].\n\u2022Contextual information. In addition to the task descrip-\ntion and input data, contextual or background information", "Context\u2192Organisms require energy in order to do what?\nCorrect Answer \u2192mature and develop.\nIncorrect Answer \u2192rest soundly.\nIncorrect Answer \u2192absorb light.\nIncorrect Answer \u2192take in nutrients.\nFigure G.8: Formatted dataset example for OpenBookQA. When predicting, we normalize by the unconditional\nprobability of each answer as described in 2.\nContext\u2192Making a cake: Several cake pops are shown on a display. A woman and girl\nare shown making the cake pops in a kitchen. They\nCorrect Answer \u2192bake them, then frost and decorate.\nIncorrect Answer \u2192taste them as they place them on plates.\nIncorrect Answer \u2192put the frosting on the cake as they pan it.\nIncorrect Answer \u2192come out and begin decorating the cake as well.\nFigure G.9: Formatted dataset example for HellaSwag\nContext\u2192anli 3: anli 3: We shut the loophole which has American workers actually\nsubsidizing the loss of their own job. They just passed an expansion of\nthat loophole in the last few days: $43 billion of giveaways, including", "data[Wang et al. , 2022a ].\n\u2022Extra Generation Module: In retrieved content, re-\ndundancy and noise are common issues. Instead of di-\nrectly retrieving from a data source, the Extra Gener-\nation Module leverages LLM to generate the required\ncontext [Yuet al. , 2022 ]. Content generated by LLM is\nmore likely to contain relevant information compared to\ndirect retrieval.", "are most relevant to the query and do not contain\nany of the NaturalQuestions-annotated answers.2,3\nIn the input context, the distractor documents are\npresented in order of decreasing relevance.4\nTo modulate the position of relevant information\nwithin the input context, we adjust the order of the\ndocuments to change the position of the document\nthat contains the answer (Figure 3). To modulate\nthe input context length in this task, we increase or\ndecrease the number of retrieved documents that\ndo not contain the answer (Figure 4).\nFollowing Kandpal et al. (2022) and Mallen et al.\n(2023), we use accuracy as our primary evaluation\nmetric, judging whether any of the correct answers\n(as taken from the NaturalQuestions annotations)\nappear in the predicted output.\n2Ambiguity in NaturalQuestions-Open means that a small\nnumber of distractor passages may contain a reasonable an-\nswer. We additionally run experiments on subset of unam-", "spreading misinformation or conspiracy theories.\nInstead, I would like to emphasize the impor-\ntance of fact-checking and critical thinking when\nevaluating information. It is crucial to rely on\ncredible sources and evidence-based reasoning\nwhen assessing the validity of a claim.\nIf you have any other questions or concerns,\nplease feel free to ask, and I will do my best to\nprovide a helpful and accurate response.\nTable 13: Examples of context distillation with generic preprompt and preprompt with answer template.\nThe tailored preprompt with answer template is more relevant to the answer.\n4.2.4 Context Distillation for Safety\nWeencourage Llama 2-Chat toassociateadversarialpromptswithsaferresponsesbyusingcontextdistillation\n(Askell et al., 2021a) similar to Section 3.3. We observe that the safety capabilities of LLMs can be efficiently\nenhanced by prefixing the model with a safety preprompt (e.g., \u201cYou are a safe and responsible assistant\u201d )."], "retrieved_docs_id": ["20be91c676", "879c865355", "3ed835a82b", "d4c191c109", "15ec95849f"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What is the task of the vision-language projector in this context?\n", "true_answer": "The task of the vision-language projector is to map the visual patch embeddings into the text feature space.", "source_doc": "multimodal.pdf", "source_id": "6ac775b4ef", "retrieved_docs": ["original LDP[20].\nMamba-based VL-Mamba[18] implements the 2D vision selective scanning(VSS) technique\nwithin its vision-language projector, facilitating the amalgamation of diverse learning method-\nologies. The VSS module primarily resolves the distinct processing approaches between one-\ndimensional sequential processing and two-dimensional non-causal visual information.\nHybrid Structure Honeybee [19] put forward two visual projectors, namely C-Abstractor and D-\nAbstractor, which adhere to two primary design principles: (i) providing adaptability in terms of the\nnumber of visual tokens, and (ii) efficiently maintaining the local context. C-Abstractor, or Convo-\nlutional Abstractor, focuses on proficiently modeling the local context by employing a convolutional\narchitecture. This structure consists of LResNet blocks, followed by adaptive average pooling and\nadditional LResNet blocks, which facilitate the abstraction of visual features to any squared num-", "vision and language models. It commences with a convolutional stem, succeeded by Mobile Con-\nvolution Blocks in the first and second stages, and Transformer Blocks in the third stage. Remark-\nably, ViTamin-XL, with a modest count of 436M parameters, attains an 82.9% ImageNet zero-shot\naccuracy. This outperforms the 82.0% accuracy achieved by EV A-E [80], which operates with a pa-\nrameter count ten times larger, at 4.4B. Simply replacing LLaV A\u2019s image encoder with ViTamin-L\ncan establish new standards in various MLLM performance metrics.\n2.2 Vision-Language Projector\nThe task of the vision-language projector is to map the visual patch embeddings Zvinto the text\nfeature space:\nHv=P(Zv), (2)\nwhere Hvdenotes the projected visual embeddings. The aligned visual features are used as prompts\nand inputted into the language model along with the text embeddings. Vision-language projector\n5", "Figure 4: BRA VE [12] concatenates features from K different Vision Encoders in a sequence-wise\nmanner. These concatenated features are then reduced by the MEQ-Former.\navoids the high cost of training an end-to-end multimodal model from scratch and effectively lever-\nages the capabilities of pre-trained language and vision models.\nMLP-based As outlined in [7, 54], the vision-language projector is typically realized using a\nstraightforward, learnable Linear Projector or a Multi-Layer Perceptron (MLP), i.e., several linear\nprojectors interleaved with non-linear activation functions, as illustrated in Table.1.\nAttention-based BLIP2 [15] introduces Q-Former, a lightweight transformer, which employs a\nset of learnable query vectors to extract visual features from a frozen vision model. Perceiver\nResampler, proposed by Flamingo[16], contemplates the use of learnable latent queries as Q in\ncross-attention, while image features are unfolded and concatenated with Q to serve as K and V in", "Perception-language tasks\nCOCO Caption [LMB+14] Image captioning CIDEr, etc. \u0013 \u0013\nFlicker30k [YLHH14] Image captioning CIDEr, etc. \u0013 \u0013\nVQAv2 [GKSS+17] Visual question answering VQA acc. \u0013 \u0013\nVizWiz [GLS+18] Visual question answering VQA acc. \u0013 \u0013\nWebSRC [CZC+21] Web page question answering F1 score \u0013\nVision tasks\nImageNet [DDS+09] Zero-shot image classi\ufb01cation Top-1 acc. \u0013\nCUB [WBW+11] Zero-shot image classi\ufb01cation with descriptions Accuracy \u0013\nTable 1: We evaluate the capabilities of KOSMOS -1on language, perception-language, and vision\ntasks under both zero- and few-shot learning settings.\n1 Introduction: From LLMs to MLLMs\nLarge language models (LLMs) have successfully served as a general-purpose interface across various\nnatural language tasks [ BMR+20]. The LLM-based interface can be adapted to a task as long as we\nare able to transform the input and output into texts. For example, the input of the summarization task", "tasks, spanning visual dialogue, visual explanation, visual question answering, image captioning,\nsimple math equation, OCR, and zero-shot image classi\ufb01cation with descriptions. We also build\n4"], "retrieved_docs_id": ["3238be52f9", "6ac775b4ef", "1fea51e26c", "4c8f867655", "04a17f65a3"], "reranker_type": "None", "search_type": "vector", "rr": 0.5, "hit": 1}, {"question": "How many GPU hours are needed to train MiniGPT-v2?\n", "true_answer": "Over 800 GPU hours are needed to train MiniGPT-v2, based on NVIDIA A100 GPUs.", "source_doc": "multimodal.pdf", "source_id": "2f6f7fb082", "retrieved_docs": ["modeling) reaches the target 72.0%, and the wall-clock run-time is measured. We train with FP16 precision\nusing Apex AMP (with O2 optimization level).\nWe compare our results with the reported training speed from Nvidia that was submitted to MLPerf 1.1\n(Table 1).\nWe use the same train / validation data split provided by MLPerf 1.1 reference implementation. In\nparticular, we evaluate on the same 10000 validation examples as the baseline from Nvidia.\nWe train the model on 8 \u0002A100-80GB GPUs. Each training run takes between 16 and 19 minutes, and we\naverage the results of 10 runs.\nE.2 GPT-2\nWe use the standard implementations of GPT-2 [ 67] from Huggingface transformers library and from\nNvidia\u2019s Megatron-LM repo. We follow the training recipe of the Megatron-LM repo.\nWe use an e\ufb00ective batch size of 512, and use gradient accumulation to \ufb01t into available GPU memory.\nWe use the AdamW optimizer, with learning rate 6e-4 for GPT-2 small and 1.5e-4 for GPT-2 medium, and", "However, scalability comes at the cost of high resource demands, which hinders the development\nand deployment of large models. For example, the training of MiniGPT-v2 necessitates a total of\nover 800 GPU hours, as calculated based on NVIDIA A100 GPUs [9]. This imposes a substantial\nexpense that is difficult for researchers outside of major enterprises to bear. Aside from training,\n1* Equal contribution.\n2Yizhang Jin is an intern in Tencent, and Jian Li is the project leader.\nPreprint. Under review.arXiv:2405.10739v1  [cs.CV]  17 May 2024", "70 M 32 4 8 \u00d7\n160 M 32 8 4 \u00d7\n410 M 32 8 4 \u00d7\n1.0 B 64 16 4 \u00d7\nTable 3. Models in the Pythia suite, number of GPUs used during\ntraining, and the number of GPUs we would have been able to use\nhad we used the GPT-3 suite\u2019s batch sizes. Due to the ability of\nGPT-NeoX to scale linearly as the number of GPUs increases, this\nproduces substantial wall-clock speed-ups for small models. All\nGPUs are A100s with 40 GiB VRAM.\nA large batch size is essential to training models quickly:\nin a regime where one is not bottlenecked by access to\nGPUs or high quality interconnect, doubling the batch size\nhalves the training time. A maximum batch size therefore\ndirectly implies a minimum wall-clock training time and\nmaximum number of compute-saturated GPUs. By inflating\nbatch sizes beyond previous standards, we achieve wall-\nclock speed-ups of factors as large as 10\u00d7compared with\nstandard batch sizes on our smaller models (Table 5). We\nalso note that our models still perform on par with widely", "CPU @ 2.60GHz, 512GB of RAM , and four NVIDIA A100 (PG506-243) GPUs with 64GB of memory . A total of 12 NVIDIA\nA100 GPUs are used in parallel for the training phase through Torchrun load distribution pipeline10. We used eight\nexamples for each GPU as batch size, 1 step for gradient accumulation, paged AdamW 32bit optimizer with a learning\nrate of 2e-4, gradient clipping of 0.3, and weight decay parameters of 0.001. The models have been adapted for 25k steps\nwith a warmup ratio of 3%. The maximum textual content length has been cut to 1024 due to efficiency requirements.\n3.1 LLaMAntino 2-Chat Models\nLLaMA 2-Chat models are built to provide excellent performance in tasks involving dialogues and long user-system\nconversations. For this reason, we considered a fundamental step to further tune the model over long dialogues in\nthe Italian Language to reach this goal. We started from the LLaMA 2-Chat-hf models (adapted to the HuggingFace", "Pythia: A Suite for Analyzing Large Language Models\nD. Training Hardware and GPU hours\nWe additionally report the number of accelerators used to train each Pythia model size, alongside counts of total GPU-hours\nrequired for training our models at the throughputs that we achieve.\nModel Size GPU Count Total GPU hours required\n70 M 32 510\n160 M 32 1,030\n410 M 32 2,540\n1.0 B 64 4,830\n1.4 B 64 7,120\n2.8 B 64 14,240\n6.9 B 128 33,500\n12 B 256 72,300\nTotal 136,070\nTable 5. Model sizes in the Pythia suite, number of GPUs used during training, and the total number of GPU hours, calculated via\n(iteration time (s) \u00d7number of iterations \u00d7number of GPUs \u00f73600 s/hour). All GPUs are A100s with 40GB of memory.\nHere \u201ctotal\u201d refers to training one model of each size in our suite. For this paper, we trained two models of each size (one on\nthe Pile and one on the Pile deduplicated) and had to retrain both model suites an additional time as discussed in Appendix B."], "retrieved_docs_id": ["530e7971d2", "2f6f7fb082", "30dd302263", "787b56f772", "0a2bdce1fe"], "reranker_type": "None", "search_type": "vector", "rr": 0.5, "hit": 1}, {"question": "What is the primary optimization for enhancing the efficiency of efficient MLLMs?\n", "true_answer": "The primary optimization for enhancing the efficiency of efficient MLLMs includes handling high-resolution images, compressing vision tokens, implementing efficient structures, and utilizing compact language models.", "source_doc": "multimodal.pdf", "source_id": "de74717e46", "retrieved_docs": ["Figure 3: The architectures of efficient MLLMs.\nquestion-answering, this section highlights the potential of efficient MLLMs to broaden\ntheir application scope and contribute to real-world problem-solving.\nIn summary, this survey delves into these research endeavors, exploring various strategies for making\nMLLMs more resource-efficient. We review the development history of efficient MLLMs, provide\na taxonomy of the strategies for efficient MLLMs, and comprehensively compare the performance\nof existing efficient MLLMs.Through this exploration, we aspire to provide a comprehensive under-\nstanding of the current state-of-the-art, thereby illuminating the intricate nuances of this emerging\nfield. Furthermore, this survey serves as a roadmap, highlighting potential avenues for future re-\nsearch, and fostering a deeper comprehension of the challenges and opportunities that lie ahead in\nthe domain of efficient MLLMs. In addition to the survey, we have established a GitHub repository", "the domain of efficient MLLMs. In addition to the survey, we have established a GitHub repository\nwhere we compile the papers featured in the survey, organizing them with the same taxonomy at\nhttps://github.com/lijiannuist/Efficient-Multimodal-LLMs-Survey. We will actively maintain it and\nincorporate new research as it emerges.\n2 Architecture\nFollowing the standard MLLM framework, efficient MLLMs can be divided into three main mod-\nules: a visual encoder gtasked with receiving and processing visual inputs, a pre-trained language\nmodel that manages the received multimodal signals and performs reasoning, and a visual-language\nprojector Pwhich functions as a bridge to align the two modalities. To enhance the efficiency of the\ngeneral MLLMs, the primary optimization lies in handling high-resolution images, compressing vi-\nsion tokens, implementing efficient structures, and utilizing compact language models, among other", "and preserving user privacy.\nIn light of these challenges, there has been growing attention on the study of efficient MLLMs.\nThe primary objective of these endeavors is to decrease the resource consumption of MLLMs\nand broaden their applicability while minimizing performance degradation. Research on efficient\nMLLMs began with replacing large language models with lightweight counterparts and performing\ntypical visual instruction tuning. Subsequent studies further enhanced capabilities and expanded\nuse cases in the following ways: (1) lighter architectures were introduced with an emphasis on ef-\nficiency, aiming to reduce the number of parameters or computational complexity[25, 13, 18]; (2)\nmore specialized components were developed, focusing on efficiency optimizations tailored to ad-\nvanced architectures or imbuing specific properties, such as locality[19, 17, 12]; and (3) support\nfor resource-sensitive tasks was provided, with some works employing visual token compression", "specific modification involves updating the parameters within the gradient computation rather than\nafter an entire layer. MeZO[159] proposes an optimizer that computes gradients using merely two\nforward passes, enabling the fine-tuning of LLMs with a memory footprint equivalent to that of in-\nference. With a GPU memory requirement of 55GB, it allows for the comprehensive fine-tuning of\na 30B parameter model.\n5 Training\nThe training process of efficient MLLMs is a critical aspect that determines their performance on\ndownstream tasks and their ability to handle diverse modalities. In this section, we provide an\noverview of various training methodologies, including pre-training, instruction-tuning, diverse train-\ning steps, and parameter-efficient transfer learning strategies. These approaches aim to optimize the\nalignment between different modalities, fine-tune the models on specific tasks, and minimize the", "edge and the capability to interact with the real world has far-reaching implications, poten-\ntially revolutionizing fields such as robotics, automation, and artificial intelligence.\n8.2 Conclusion\nIn this study, we take a deep dive into the realm of efficient MLLM literature, providing an all-\nencompassing view of its central themes, including foundational theories and their extensions. Our\ngoal is to identify and highlight areas that require further research and suggest potential avenues\nfor future studies. We aim to provide a comprehensive perspective on the current state of efficient\nMLLM, with the hope of inspiring additional research. Given the dynamic nature of this field, it\u2019s\npossible that some recent developments may not be fully covered. To counter this, we\u2019ve set up a\ndedicated website that uses crowdsourcing to keep up with the latest advancements. This platform\nis intended to serve as a continually updated source of information, promoting ongoing growth in"], "retrieved_docs_id": ["d5970c4389", "de74717e46", "04b6ebc53f", "ddf5825776", "17ac4e37d9"], "reranker_type": "None", "search_type": "vector", "rr": 0.5, "hit": 1}, {"question": "How is a foundation model adapted to a specific domain using DAPT?\n", "true_answer": "DAPT, or Domain-Adaptive Pre-Training, adapts a foundation model to a specific domain by continued pretraining with in-domain data. In this case, the domain-specific pre-training dataset is constructed from a collection of proprietary hardware-related code and natural language datasets.", "source_doc": "ChipNemo.pdf", "source_id": "926168a67f", "retrieved_docs": ["propose to combine the following techniques: Domain-\nAdaptive Pre-Training (DAPT) (Gururangan et al., 2020) of\nfoundation models with domain-adapted tokenizers, model\nalignment using general and domain-specific instructions,\nand retrieval-augmented generation (RAG) (Lewis et al.,\n2021b) with a trained domain-adapted retrieval model.\nAs shown in Figure 1, our approach is to start with a base\nfoundational model and apply DAPT followed by model\nalignment. DAPT, also known as continued pretraining with\nin-domain data, has been shown to be effective in areas such\nas biomedical and computer science publications, news, and\nreviews. In our case, we construct our domain-specific pre-\ntraining dataset from a collection of proprietary hardware-\nrelated code (e.g. software, RTL, verification testbenches,\netc.) and natural language datasets (e.g. hardware specifi-\ncations, documentation, etc.). We clean up and preprocess\nthe raw dataset, then continued-pretrain a foundation model", "the raw dataset, then continued-pretrain a foundation model\nwith the domain-specific data. We call the resulting model a\nChipNeMo foundation model. DAPT is done on a fraction\nof the tokens used in pre-training, and is much cheaper, only\nrequiring roughly 1.5% of the pretraining compute.\nLLM tokenizers convert text into sequences of tokens for\ntraining and inference. A domain-adapted tokenizer im-\nproves the tokenization efficiency by tailoring rules and\npatterns for domain-specific terms such as keywords com-\nmonly found in RTL. For DAPT, we cannot retrain a new\ndomain-specific tokenizer from scratch, since it would make\nthe foundation model invalid. Instead of restricting Chip-\nNeMo to the pre-trained general-purpose tokenizer used\nby the foundation model, we instead adapt the pre-trained\ntokenizer to our chip design dataset, only adding new tokens\nfor domain-specific terms.\nChipNeMo foundation models are completion models whichrequire model alignment to adapt to tasks such as chat.", "ChipNeMo: Domain-Adapted LLMs for Chip Design\nour application of a low learning rate.\nWe refer readers to Appendix for details on the training data\ncollection process A.2, training data blend A.3, and imple-\nmentation details and ablation studies on domain-adaptive\npretraining A.6.\n2.3. Model Alignment\nAfter DAPT, we perform model alignment. We specifically\nleverage two alignment techniques: supervised fine-tuning\n(SFT) and SteerLM (Dong et al., 2023). We adopt the iden-\ntical hyperparameter training configuration as DAPT for all\nmodels, with the exception of using a reduced global batch\nsize of 128. We employ an autoregressive optimization ob-\njective, implementing a strategy where losses associated\nwith tokens originating from the system and user prompts\nare masked (Touvron et al., 2023). This approach ensures\nthat during backpropagation, our focus is exclusively di-\nrected towards the optimization of answer tokens.\nWe combined our domain alignment dataset, consisting", "models: LLaMA2 7B/13B/70B. Each DAPT model is ini-\ntialized using the weights of their corresponding pretrained\nfoundational base models. We name our domain-adapted\nmodels ChipNeMo . We employ tokenizer augmentation\nas depicted in Section 2.1 and initialize embedding weight\naccordingly (Koto et al., 2021). We conduct further pre-\ntraining on domain-specific data by employing the standard\nautoregressive language modeling objective. All model\ntraining procedures are conducted using the NVIDIA NeMo\nframework (Kuchaiev et al., 2019), incorporating techniques\nsuch as tensor parallelism (Shoeybi et al., 2019) and flash\nattention (Dao et al., 2022) for enhanced efficiency.\nOur models undergo a consistent training regimen with\nsimilar configurations. A small learning rate of 5\u00b710\u22126\nis employed, and training is facilitated using the Adam\noptimizer, without the use of learning rate schedulers. The\nglobal batch size is set at 256, and a context window of 4096", "except on coding. We hypothesize that a smaller learning\nrate played a dual role, facilitating the distillation of domain\nknowledge through DAPT while maintaining a balance that\ndid not veer too far from the base model, thus preserving\ngeneral natural language capabilities.\nWe also explored the application of Parameter Efficient\nFine-Tuning (PEFT) in the context of Domain-Adaptive\nPre-training (DAPT). In this pursuit, we conducted two ex-\nperiments involving the incorporation of LoRA adapters (Hu\net al., 2021), introducing additional parameters of 26.4 mil-\nlion (small) and 211.2 million (large) respectively. In both\ninstances, our findings revealed a significant accuracy gap\non in-domain tasks when compared to the full-parameter\nDAPT approach. Furthermore, when contrasting the out-\ncomes between small and large PEFT models, we observed\na marginal enhancement on in-domain task accuracy, with\nlarge adapter exhibiting a slight improvement.\n3.4. Training Cost"], "retrieved_docs_id": ["926168a67f", "273b593026", "a5a7c4ceb0", "7eb44773ae", "453536e071"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does the DSP framework enhance the generation quality in the RAG method?\n", "true_answer": "The DSP framework enhances the generation quality in the RAG method by passing natural language text between a frozen Language Model (LM) and a Retrieval Model (RM), providing the model with more informative context.", "source_doc": "RAG.pdf", "source_id": "0264588829", "retrieved_docs": ["providing an effective solution to the incomplete and insuf-\nficient knowledge problem inherent in purely parameterized\nmodels.\nThe paper systematically reviews and analyzes the current\nresearch approaches and future development paths of RAG,\nsummarizing them into three main paradigms: Naive RAG,\nAdvanced RAG, and Modular RAG. Subsequently, the paper\nprovides a consolidated summary of the three core compo-\nnents: Retrieval, Augmented, and Generation, highlighting\nthe improvement directions and current technological char-\nacteristics of RAG. In the section on augmentation methods,the current work is organized into three aspects: the augmen-\ntation stages of RAG, augmentation data sources, and aug-\nmentation process. Furthermore, the paper summarizes the\nevaluation system, applicable scenarios, and other relevant\ncontent related to RAG. Through this article, readers gain a\nmore comprehensive and systematic understanding of large\nmodels and retrieval-Augmented generation. They become", "Figure 1: A timeline of existing RAG research. The timeline was established mainly according to the release date.\ncuses on introducing the generator in RAG.Chapter 6 em-\nphasizes the introduction of the augmentation methods in\nRAG.Chapter 7 introduces the evaluation system of RAG.\nChapter 8 provides an outlook on the future development\ntrends of RAG. Finally, in Chapter 9, we summarize the main\ncontents of the survey.\n2 Background\nIn this chapter, we will introduce the definition of RAG, as\nwell as the comparison between RAG and other model opti-\nmization techniques, such as fine-tuning.\n2.1 Definition\nThe meaning of RAG has expanded in tandem with techno-\nlogical developments. In the era of Large Language Mod-\nels, the specific definition of RAG refers to the model, when\nanswering questions or generating text, first retrieving rele-\nvant information from a vast corpus of documents. Subse-\nquently, it utilizes this retrieved information to generate re-", "ules and offers more flexibility.\nIn the subsequent chapters, we further analyze three key\nparts of RAG in detail. Chapter 4 introduces the retriever of\nRAG, how to process corpora to obtain better semantic repre-\nsentations, how to mitigate the semantic gap between Query\nand documents, and how to adjust the retriever to fit the gen-\nerator. Chapter 5 explains how the generator obtains better\ngeneration results by post-processing retrieved documents,\navoiding the \u201dLost in the middle\u201d issue, as well as methods to\nadjust the generator to fit the retriever. Subsequently, in Chap-\nter 6, we review the current retrieval enhancement methods\nfrom the aspects of the retrieval stage, retrieval data sources,\nand retrieval process.\nChapter 7 explains how to evaluate current RAG methods,\nincluding evaluation, key indicators, and current evaluation\nframeworks Finally, we provided an outlook on the poten-\ntial future research directions for RAG. As a method that", "challenging, and the augmentation process needs to balance\nthe value of each passage appropriately. The retrieved con-\ntent may also come from different writing styles or tones, and\nthe augmentation process needs to reconcile these differences\nto ensure output consistency. Lastly, generation models may\noverly rely on augmented information, resulting in output thatmerely repeats the retrieved content, without providing new\nvalue or synthesized information.\n3.2 Advanced RAG\nAdvanced RAG has made targeted improvements to over-\ncome the deficiencies of Naive RAG. In terms of the quality\nof retrieval generation, Advanced RAG has incorporated pre-\nretrieval and post-retrieval methods. To address the indexing\nissues encountered by Naive RAG, Advanced RAG has op-\ntimized indexing through methods such as sliding window,\nfine-grained segmentation, and metadata. Concurrently, it has\nput forward various methods to optimize the retrieval process.", "complement each other, enhancing the model\u2019s capabilities at\ndifferent levels. In certain situations, combining these two\ntechniques can achieve optimal model performance. The en-\ntire process of optimizing with RAG and fine-tuning may re-\nquire multiple iterations to achieve satisfactory results.\nExisting research has demonstrated significant ad-\nvantages of Retrieval-Augmented Generation (RAG)\ncompared to other methods for optimizing large lan-\nguage models [Shuster et al. , 2021, Yasunaga et al. , 2022,\nWang et al. , 2023c, Borgeaud et al. , 2022 ]:\n\u2022 RAG improves accuracy by associating answers with ex-\nternal knowledge, reducing hallucination issues in lan-\nguage models and making generated responses more ac-\ncurate and reliable.\n\u2022 The use of retrieval techniques allows the identifica-\ntion of the latest information. Compared to traditionallanguage models relying solely on training data, RAG\nmaintains the timeliness and accuracy of responses."], "retrieved_docs_id": ["1bd400d39e", "7470fe30c9", "8cdb0d5ff2", "873e6df003", "72cb2b4f23"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How does the Funnel-Transformer model address the issue of computational efficiency in attention mechanisms?\n", "true_answer": "The Funnel-Transformer model addresses the issue of computational efficiency in attention mechanisms by progressively reducing the sequence size of hidden representations in self-attention models.", "source_doc": "multimodal.pdf", "source_id": "3045b9cbb1", "retrieved_docs": ["scale, reaching similar perplexity and downstream performance with a smaller computational budget (Section\n4.2) andwithout hybridization of attention.\nNarrowing the capabilities gap The design of Hyenais motivated by a quality gap between standard\ndense attention and alternative subquadratic operators, which we identify by focusing on reasoning tasks cor-\nrelatedwithlanguagemodelingperformanceatscale. Weextendthesuiteofbasicmechanisticinterpretability\nbenchmarks ( induction andrecall) with additional tasks that probe how quickly model performance degrades\n1Self-attention can be expressed as y=A(k, q)vwhere Ais the attention matrix conditioned by linear projections k, qof the\ninput and multiplied by v, another projection.\n2", "[114] Puneesh Deora, Rouzbeh Ghaderi, Hossein Taheri, and Christos Thrampoulidis. On the\noptimization and generalization of multi-head attention. arXiv preprint arXiv:2310.12680 ,\n2023.\n16", "to conventional models like MLPs and CNNs, self-attention models employ global interactions to capture feature\nrepresentations, resulting in exceptional empirical performance.\nDespite their achievements, the mechanisms and learning processes of attention layers remain enigmatic. Recent\ninvestigations [ EGKZ22 ,SEO+22,ENM22 ,BV22 ,DCL21 ] have concentrated on specific aspects such as sparse\nfunction representation, convex relaxations, and expressive power. Expressivity discussions concerning hard-attention\n[Hah20 ] or attention-only architectures [ DCL21 ] are connected to our findings when h(\u00b7)is linear. In fact, our work\nreveals how linear hresults in attention\u2019s optimization dynamics to collapse on a single token whereas nonlinear h\nprovably requires attention to select and compose multiple tokens. This supports the benefits of the MLP layer for\nexpressivity of transformers. There is also a growing body of research aimed at a theoretical comprehension of in-context", "UniNet [102] introduced context-aware down-sampling modules improving information accommo-\ndation by transformer and MLP operators.\nOptimization of Attention Mechanisms Methods focus on reducing computational complexity\nby introducing adaptive attention, learning sparse attention patterns, and dynamically adjusting at-\ntention mechanisms. Fayyaz et al. [135] implemented adaptive attention by scoring and adaptively\nsampling significant tokens. PatchMerger [103] extracted global information among regional to-\nkens and exchanged local self-attention with information among regional tokens via self-attention.\nDynamicViT [104] proposed an attention masking strategy to differentiably prune tokens by block-\ning interactions with other tokens. Additionally, Sepvit [105] conducted local-global information\ninteraction within and across windows using depthwise separable self-attention. These methods\ncollectively optimize attention mechanisms, enhancing computational efficiency and performance.", "B Further experiments on vision and language transformers\nThe practice of training transformer models often deviates substantially from the assumptions made\nin our theoretical analysis, and it is a priori unclear to what extent gradual rank increase behaviour\nand a low rank bias are manifested in setups more common in practical applications. To gauge the\nrelevancy of our findings we conduct experiments on popular vision and language benchmarks, using\nalgorithms and hyperparameters common in the literature. We use the stable rank of a matrix W\ngiven by\u2225W\u22252\nF\n\u2225W\u22252\n2as a smooth approximation of rank. We track the value of the stable rank for the\ndifferent attention matrices throughout training. Although we do not expect our theoretical results\nto to hold precisely in practice, we find evidence of gradual increase in stable rank, leading to a\nlow rank bias in Figures 12, 13, 15, 17 and 19. In these experiments we use off-the-shelf vision"], "retrieved_docs_id": ["50409052be", "d004145ce2", "bfb96ebe0c", "e7939ae097", "7184e5eb62"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What is the architecture of the C-Abstractor in the Hybrid Structure Honeybee project?\n", "true_answer": "The C-Abstractor, or Conventional Abstractor, in the Hybrid Structure Honeybee project employs a convolutional architecture consisting of LResNet blocks, followed by adaptive average pooling and additional LResNet blocks for abstracting visual features.", "source_doc": "multimodal.pdf", "source_id": "3238be52f9", "retrieved_docs": ["original LDP[20].\nMamba-based VL-Mamba[18] implements the 2D vision selective scanning(VSS) technique\nwithin its vision-language projector, facilitating the amalgamation of diverse learning method-\nologies. The VSS module primarily resolves the distinct processing approaches between one-\ndimensional sequential processing and two-dimensional non-causal visual information.\nHybrid Structure Honeybee [19] put forward two visual projectors, namely C-Abstractor and D-\nAbstractor, which adhere to two primary design principles: (i) providing adaptability in terms of the\nnumber of visual tokens, and (ii) efficiently maintaining the local context. C-Abstractor, or Convo-\nlutional Abstractor, focuses on proficiently modeling the local context by employing a convolutional\narchitecture. This structure consists of LResNet blocks, followed by adaptive average pooling and\nadditional LResNet blocks, which facilitate the abstraction of visual features to any squared num-", "the former, to avoid communication in layernorm.\nThe CollectiveEinsum loops are the overwhelming major-\nity of the inference latency, so we invested considerable\neffort to maximize their performance. First, we used the\nunderlying \u201casync CollectivePermute\u201d APIs of Wang et al.\n(2023) to develop a suite of variants of the CollectiveEinsum\nconcept, to optimize for different scenarios: latency versus\nthroughput, different numbers of torus axes, fusing with dif-\nferent input/output collectives. Second, we explicitly match\nup communication collectives with the matrix multiplies\nthat they should be fused with, to maximize the potential for\noverlap. Through such optimizations, we achieved about\n1.4 times better performance than the simpler compiler-\npartitioned-and-scheduled implementation that we started\nwith. Some of the weight-gathered layouts would exhaust\nmemory without these optimizations.\nWe also included the following low-level optimizations:", "further engineering challenges and adjustments to the model that are not discussed in this paper.\n6 Conclusion\nWe introduce a selection mechanism to structured state space models, allowing them to perform context-dependent\nreasoning while scaling linearly in sequence length. When incorporated into a simple attention-free architecture,\nMamba achieves state-of-the-art results on a diverse set of domains, where it matches or exceeds the performance\nof strong Transformer models. We are excited about the broad applications of selective state space models to\nbuild foundation models for di\ufb00erent domains, especially in emerging modalities requiring long context such as\ngenomics, audio, and video. Our results suggest that Mamba is a strong candidate to be a general sequence model\nbackbone.\nAcknowledgments\nWe thank Karan Goel, Arjun Desai, and Kush Bhatia for helpful feedback on the draft.\nReferences", "Butterfly  \nFlat Butterfly  + + +\n++\nFlat Block Butterfly  \nBlock Butterfly  \n+ + ++\n+Figure 3: Visualization of Flat, Block, and Flat Block butter\ufb02y.\nsparsity structure. However, there are three technical challenges. We highlight them here along with our\napproaches to address them:\n1. Slow speed: butter\ufb02y matrices are not friendly to modern hardware as their sparsity patterns are not\nblock-aligned, thus are slow. We introduce a variant of butter\ufb02y matrices, block butter\ufb02y , which operate\nat the block level, yielding a block-aligned sparsity pattern.\n2. Di\ufb03culty of parallelization: the sequential nature of butter\ufb02y matrices as products of many factors makes\nit hard to parallelize the multiplication. We propose another class of matrices, \ufb02at butter\ufb02y matrices, that\nare the \ufb01rst-order approximation of butter\ufb02y with residual connections. Flat butter\ufb02y turns the product\nof factors into a sum, facilitating parallelization.", "Hotel, H., Johansen, H., Bernholdt, D., H\u00e9roux,\nM., and Hornung, R. Software productivity\nfor extreme-scale science, 2014.\nHowe, D. B. and Asanovi \u00b4c, K. SPACE:\nSymbolic Processing in Associative Comput-\ning Elements , pp. 243\u2013252. Springer US,\nBoston, MA, 1994. ISBN 978-1-4899-\n1331-9. doi: 10.1007/978-1-4899-1331-9_\n24. URL https://doi.org/10.1007/\n978-1-4899-1331-9_24 .\nIsaacson, W. Grace hopper, comput-\ning pioneer. The Harvard Gazette ,\n2014. URL https://news.harvard.\nedu/gazette/story/2014/12/\ngrace-hopper-computing-pioneer/ .\nJouppi, N. P., Young, C., Patil, N., Patterson,\nD., Agrawal, G., Bajwa, R., Bates, S., Bha-\ntia, S., Boden, N., Borchers, A., Boyle, R.,\nCantin, P.-l., Chao, C., Clark, C., Coriell,\nJ., Daley, M., Dau, M., Dean, J., Gelb, B.,\nGhaemmaghami, T. V ., Gottipati, R., Gulland,\nW., Hagmann, R., Ho, C. R., Hogberg, D.,\nHu, J., Hundt, R., Hurt, D., Ibarz, J., Jaffey,\nA., Jaworski, A., Kaplan, A., Khaitan, H.,\nKillebrew, D., Koch, A., Kumar, N., Lacy,"], "retrieved_docs_id": ["3238be52f9", "0cfc5d9a38", "53f73ec6b6", "86e4683867", "4feebe5f66"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does OpenAI's embeddings-ada-02 handle context compared to full-size language models like GPT-4?\n", "true_answer": "OpenAI's embeddings-ada-02 is more sophisticated than static embedding models and can capture a certain level of context, but it may not be as sensitive to context as the latest full-size language models like GPT-4.", "source_doc": "RAG.pdf", "source_id": "5b18d3e068", "retrieved_docs": ["as much context as possible to ensure \u201chealthy\u201d out-\ncomes.Built upon the principles of large language mod-\nels like GPT, OpenAI\u2019s embeddings-ada-02 is more so-\nphisticated than static embedding models, capturing a\ncertain level of context. While it excels in contextual\nunderstanding, it may not exhibit the same sensitivity to\ncontext as the latest full-size language models like GPT-\n4.\nPost-Retrieval Process\nAfter retrieving valuable context from the database, merg-\ning it with the query for input into LLM poses challenges.\nPresenting all relevant documents to the LLM at once may\nexceed the context window limit. Concatenating numerous\ndocuments to form a lengthy retrieval prompt is ineffective,\nintroducing noise and hindering the LLM\u2019s focus on crucial\ninformation. Additional processing of the retrieved content is\nnecessary to address these issues.\n\u2022ReRank: Re-ranking to relocate the most relevant in-\nformation to the edges of the prompt is a straightfor-", "2023; Rubin and Berant, 2023, inter alia ) have\nresulted in language models with larger context\nwindows (e.g., 4096, 32K, and even 100K tokens),\nbut it remains unclear how these extended-context\nlanguage models make use of their input contexts\nwhen performing downstream tasks.\nWe empirically investigate this question via\ncontrolled experiments with a variety of state-of-\nthe-art open (MPT-30B-Instruct, LongChat-13B\n(16K)) and closed (OpenAI\u2019s GPT-3.5-Turbo and\nAnthropic\u2019s Claude-1.3) language models in set-\ntings that require accessing and using information\nwithin an input context. In particular, our experi-\nments make controlled changes to the input context\nsize and the position of the relevant information\nwithin the input context and study their effects on\nlanguage model performance. If language models\ncan robustly use information within long input con-\ntexts, then their performance should be minimally\naffected by the position of the relevant information\nin the input context.", "et al., 2023), which extends the LLaMA-13B (Tou-\nvron et al., 2023a) context window from 2048 to\n16384 tokens by using condensed rotary positional\nembeddings before fine-tuning with 16384-token\nsequences.\nClosed models. We use the OpenAI API to ex-\nperiment with GPT-3.5-Turbo and GPT-3.5-Turbo", "4.2.4 Long Context Modeling\nIn real applications, there is an increasing demand for long\ncontext modeling capacities of LLMs, such as PDF pro-\ncessing and story writing [286]. Many closed-source LLMs\nprovide professional support for long text processing. For\ninstance, OpenAI releases GPT-4 Turbo with a 128K context\nwindow, and Anthropic releases Claude 2.1 with a 200K\ncontext window. To enhance the long context modeling\nabilities, there are generally two feasible directions, namely\nscaling position embeddings and adapting context window.\nNext, we introduce the two parts in detail.\nScaling Position Embeddings. Transformer-based LLMs\ncan learn effective position embeddings within the maxi-\nmum training length. Thus, when adapting LLMs to lan-\nguage tasks beyond the maximum training length, it is\nnecessary to scale to larger position indices. Some specific\nposition embeddings have been shown to possess a certain\ndegree of ability to generalize to text beyond the training", "use context. Finally, we conclude with a practi-\ncal case study of open-domain question answering,\nfinding that the performance of language model\nreaders saturates far before retriever recall. Our\nresults and analysis provide a better understanding\nof how language models use their input context\nand provides new evaluation protocols for future\nlong-context models.\nAcknowledgments\nWe would like to thank Luke Zettlemoyer, who\nserved as our TACL action editor, and the the\nanonymous reviewers for their comments and feed-\nback. We also thank Claudiu Leoveanu-Condrei,\nMegan Leszczynski, Dmytro Okhonko, Maithra\nRaghu, Eric Wallace and Sang Michael Xie for\nfeedback and discussions that helped improve this\nwork. Further, we are grateful to Sewon Min for\nher help with the AmbigQA dataset. This work\nwas supported by the Stanford Center for Research\non Foundation Models (CRFM), by OpenAI via\nan API credits grant to the Stanford CRFM, and\nby Anthropic via the Claude academic access pro-\ngram."], "retrieved_docs_id": ["5b18d3e068", "af5472ed0b", "b64fb4982f", "c0cb2f2bb5", "ae6e09f33b"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does Retrieval-Augmented Generation (RAG) improve the performance of large language models?\n", "true_answer": "RAG improves the performance of large language models by retrieving relevant information from external knowledge bases before answering questions, which enhances answer accuracy, reduces model hallucination, and is particularly beneficial for knowledge-intensive tasks.", "source_doc": "RAG.pdf", "source_id": "af911eac69", "retrieved_docs": ["Retrieval-Augmented Generation for Large Language Models: A Survey\nYunfan Gao1,Yun Xiong2,Xinyu Gao2,Kangxiang Jia2,Jinliu Pan2,Yuxi Bi3,Yi\nDai1,Jiawei Sun1and Haofen Wang1,3\u2217\n1Shanghai Research Institute for Intelligent Autonomous Systems, Tongji University\n2Shanghai Key Laboratory of Data Science, School of Computer Science, Fudan University\n3College of Design and Innovation,Tongji University\ngaoyunfan1602@gmail.com\nAbstract\nLarge language models (LLMs) demonstrate pow-\nerful capabilities, but they still face challenges in\npractical applications, such as hallucinations, slow\nknowledge updates, and lack of transparency in\nanswers. Retrieval-Augmented Generation (RAG)\nrefers to the retrieval of relevant information from\nexternal knowledge bases before answering ques-\ntions with LLMs. RAG has been demonstrated\nto significantly enhance answer accuracy, reduce\nmodel hallucination, particularly for knowledge-\nintensive tasks. By citing sources, users can verify", "retrieved information. In RAG, the generator\u2019s input includes\nnot only traditional contextual information but also relevant\ntext segments obtained through the retriever. This allows the\ngenerator to better comprehend the context behind the ques-\ntion and produce responses that are more information-rich.\nFurthermore, the generator is guided by the retrieved text toensure consistency between the generated content and the re-\ntrieved information. It is the diversity of input data that has\nled to a series of targeted efforts during the generation phase,\nall aimed at better adapting the large model to the input data\nfrom queries and documents. We will delve into the intro-\nduction of the generator through aspects of post-retrieval pro-\ncessing and fine-tuning.\n5.1 How Can Retrieval Results be Enhanced via\nPost-retrieval Processing?\nIn terms of untuned large language models, most studies\nrely on well-recognized large language models like GPT-", "erating document-level context and the pre-training objective\nof causal language modeling, allowing for better utilization\nof world knowledge stored in the model parameters.\nSelfmem [Cheng et al. , 2023b ]iteratively uses a retrieval-\nenhanced generator to create an unbounded memory pool. A\nmemory selector is employed to choose an output as the mem-\nory for subsequent generations. This output serves as the dual\nproblem to the original question. By combining the originaland dual problems, a retrieval-enhanced generative model can\nleverage its own output to enhance itself.\nThese diverse approaches showcase innovative strategies in\nRAG retrieval enhancement, aiming to elevate model perfor-\nmance and effectiveness.\n6.3 Augmentation Process\nMost RAG research typically only performs a single retrieval\nand generation process. However, single retrievals may con-\ntain redundant information, leading to a \u201dlost in the mid-\ndle\u201d phenomenon [Liuet al. , 2023 ]. This redundant informa-", "provide enough information about whether the produced answer would contradict.\nRetrieval-augmented language model pre-training\n(REALM) [ 186] inserts retrieved documents\ninto the pre-training examples. While Guu et al.\n[186] designed REALM for extractive tasks\nsuch as question-answering, Lewis et al. [304]\npropose retrieval-augmented generation (RAG), a\nlanguage generation framework using retrievers\nfor knowledge-intensive tasks that humans could\nnot solve without access to an external knowledge\nsource. Yogatama et al. [646] propose the adaptive\nSemiparametric Language Models architecture,\nwhich incorporates the current local context, a\nshort-term memory that caches earlier-computed\nhidden states, and a long-term memory based on a\nkey-value store of (hidden-state, output) tuples. To\nequip a retrieval-augmented LLM with few-shot\nabilities that were before only emergent in LLMs\nwith many more parameters, Izacard et al. [236]\npropose a KL-divergence loss term for retrieval", "complement each other, enhancing the model\u2019s capabilities at\ndifferent levels. In certain situations, combining these two\ntechniques can achieve optimal model performance. The en-\ntire process of optimizing with RAG and fine-tuning may re-\nquire multiple iterations to achieve satisfactory results.\nExisting research has demonstrated significant ad-\nvantages of Retrieval-Augmented Generation (RAG)\ncompared to other methods for optimizing large lan-\nguage models [Shuster et al. , 2021, Yasunaga et al. , 2022,\nWang et al. , 2023c, Borgeaud et al. , 2022 ]:\n\u2022 RAG improves accuracy by associating answers with ex-\nternal knowledge, reducing hallucination issues in lan-\nguage models and making generated responses more ac-\ncurate and reliable.\n\u2022 The use of retrieval techniques allows the identifica-\ntion of the latest information. Compared to traditionallanguage models relying solely on training data, RAG\nmaintains the timeliness and accuracy of responses."], "retrieved_docs_id": ["af911eac69", "fefa202c19", "6958fee9ba", "f7770d2394", "72cb2b4f23"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does MoE-LLaV increase model capacity without significantly compromising inference speed?\n", "true_answer": "MoE-LLaV increases model capacity by modulating the total count of model parameters while keeping the activated parameters unchanged, which does not significantly affect the inference speed.", "source_doc": "multimodal.pdf", "source_id": "ffe176eb03", "retrieved_docs": ["ory footprint gives rise to a large amount of memory traf\ufb01c\nto load the parameters and KV cache from high-bandwidth\nmemory (HBM) into the compute cores for each step, and\nhence a large total memory bandwidth required to meet a\ngiven latency target. Finally, inference cost from the atten-\ntion mechanism scales quadratically with input sequence\nlength (Sukhbaatar et al., 2019; Choromanski et al., 2020;\nDao et al., 2022).\nWe found two keys to optimize LLMs for inference ef\ufb01-\nciency. First, we found it useful to build a powerful and\nabstract partitioning framework to enable reaching the limits\nof model parallel scaling given the limited parallelizability\nof Transformer inference. Within this framework, we ana-\nlytically solve for the best partitioning strategy for a given\nmodel size with speci\ufb01c application requirements. This\nenables the user to intuitively understand the tradeoffs andarXiv:2211.05102v1  [cs.LG]  9 Nov 2022", "SQUEEZE LLM: D ENSE -AND -SPARSE QUANTIZATION\nSehoon Kim\u22171Coleman Hooper\u22171Amir Gholami\u2217\u202012Zhen Dong1\nXiuyu Li1Sheng Shen1Michael W. Mahoney123Kurt Keutzer1\n1UC Berkeley2ICSI3LBNL\n{sehoonkim, chooper, amirgh, zhendong, xiuyu, sheng.s,\nmahoneymw, keutzer }@berkeley.edu\nABSTRACT\nGenerative Large Language Models (LLMs) have demonstrated remarkable re-\nsults for a wide range of tasks. However, deploying these models for inference\nhas been a significant challenge due to their unprecedented resource requirements.\nThis has forced existing deployment frameworks to use multi-GPU inference\npipelines, which are often complex and costly, or to use smaller and less perfor-\nmant models. In this work, we demonstrate that the main bottleneck for generative\ninference with LLMs is memory bandwidth, rather than compute, specifically for\nsingle batch inference. While quantization has emerged as a promising solution by\nrepresenting weights with reduced precision, previous efforts have often resulted", "Efficient Inference of LLMs. The substantial parameter counts of large language models (LLMs)\npresent significant challenges for inference. To overcome this limitation, previous efforts have\nemployed model compression techniques with specific designs to achieve efficient LLM inference,\nsuch as the method described in [ 20,21,22], which employs one-shot pruning on LLMs, resulting in\nnegligible performance degradation even without retraining. Additionally, alternative approaches\nexplore quantization methods specifically tailored to LLMs, as discussed in [ 23,24,25,26,27,28].\nAlso, CoLT5 [ 29] employs a token-wise conditional computation strategy to reduce the overall\ncomputation cost. These methods address efficient inference from orthogonal perspectives and can be\norganically integrated. The techniques investigated in this study are closely associated with pruning or\nsparsity but focus on a distinct inference bottleneck, namely, KV cache . One closely related work[ 30]", "Note that this analysis focuses on the active parameter count (see Section 2.1), which is directly\nproportional to the inference compute cost, but does not consider the memory costs and hardware\nutilization. The memory costs for serving Mixtral are proportional to its sparse parameter count,\n47B, which is still smaller than Llama 2 70B. As for device utilization, we note that the SMoEs layer\nintroduces additional overhead due to the routing mechanism and due to the increased memory loads\nwhen running more than one expert per device. They are more suitable for batched workloads where\none can reach a good degree of arithmetic intensity.\nComparison with Llama 2 70B and GPT-3.5. In Table 3, we report the performance of Mixtral 8x7B\ncompared to Llama 2 70B and GPT-3.5. We observe that Mixtral performs similarly or above the\ntwo other models. On MMLU, Mixtral obtains a better performance, despite its significantly smaller", "Efficient LLM Inference on CPUs\nHaihao Shen Hanwen Chang Bo Dong Yu Luo Hengyu Meng\n{haihao.shen, hanwen.chang, bo1.dong, yu.luo, hengyu.meng}@intel.com\nAbstract\nLarge language models (LLMs) have demonstrated remarkable performance and\ntremendous potential across a wide range of tasks. However, deploying these\nmodels has been challenging due to the astronomical amount of model parameters,\nwhich requires a demand for large memory capacity and high memory bandwidth.\nIn this paper, we propose an effective approach that can make the deployment of\nLLMs more efficiently. We support an automatic INT4 weight-only quantization\nflow and design a special LLM runtime with highly-optimized kernels to accelerate\nthe LLM inference on CPUs. We demonstrate the general applicability of our\napproach on popular LLMs including Llama2, Llama, GPT-NeoX, and showcase\nthe extreme inference efficiency on CPUs. The code is publicly available at:\nhttps://github.com/intel/intel-extension-for-transformers."], "retrieved_docs_id": ["396d30df63", "b0f6d7c503", "b2577cf06d", "a0c6f9916d", "053d87b5a3"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How does the Memory Module in RAG find relevant memories?\n", "true_answer": "The Memory Module in RAG finds relevant memories by leveraging the memory capabilities of the LLM itself and finding memories most similar to the current input. It iteratively employs a retrieval-enhanced generator to create an unbounded memory pool.", "source_doc": "RAG.pdf", "source_id": "9067222c76", "retrieved_docs": ["RAG, the search module, tailored to specific sce-\nnarios, incorporates direct searches on (additional)\ncorpora in the process using LLM-generated code,\nquery languages (e.g., SQL, Cypher), or other cus-\ntom tools. The data sources for searching can include\nsearch engines, text data, tabular data, or knowledge\ngraphs [Wang et al. , 2023c ].\n\u2022Memory Module: Leveraging the memory capabili-\nties of LLM itself to guide retrieval, the principle in-\nvolves finding memories most similar to the current in-\nput. Self-mem [Cheng et al. , 2023b ]iteratively employs\na retrieval-enhanced generator to create an unbounded\nmemory pool, combining the \u201coriginal question\u201d and\n\u201cdual question.\u201d A retrieval-enhanced generative model\ncan use its own outputs to enhance itself, making the\ntext closer to the data distribution in the reasoning pro-\ncess, with the model\u2019s own outputs rather than training\ndata[Wang et al. , 2022a ].\n\u2022Extra Generation Module: In retrieved content, re-", "there has been increased attention on self-retrieval, which in-\nvolves mining the knowledge of LLMs themselves to enhance\ntheir performance.\nThe subsequent chapters of this paper are structured as fol-\nlows: Chapter 2 provides an introduction to the background\nof RAG.Chapter 3 introduces the mainstream paradigms of\nRAG.Chapter 4 analyzes the retriever in RAG.Chapter 5 fo-", "Modular RAG\nThe modular RAG structure breaks away from the traditional\nNaive RAG framework of indexing, retrieval, and genera-\ntion, offering greater diversity and flexibility in the over-\nall process. On one hand, it integrates various methods to\nexpand functional modules, such as incorporating a search\nmodule in similarity retrieval and applying a fine-tuning ap-\nproach in the retriever [Linet al. , 2023 ]. Additionally, spe-\ncific problems have led to the emergence of restructured\nRAG modules [Yuet al. , 2022 ]and iterative approaches like\n[Shao et al. , 2023 ]. The modular RAG paradigm is becom-\ning the mainstream in the RAG domain, allowing for ei-\nther a serialized pipeline or an end-to-end training approach\nacross multiple modules.The comparison between three RAG\nparadigms is illustrated in Fig 3.\nNew Modules\n\u2022Search Module: Diverging from the similarity re-\ntrieval between queries and corpora in Naive/Advanced\nRAG, the search module, tailored to specific sce-", "external knowledge, alleviates hallucination issues, identifies\ntimely information via retrieval technology, and enhances re-\nsponse accuracy. Additionally, by citing sources, RAG in-\ncreases transparency and user trust in model outputs. RAG\ncan also be customized based on specific domains by index-\ning relevant text corpora. RAG\u2019s development and charac-\nteristics are summarized into three paradigms: Naive RAG,\nAdvanced RAG, and Modular RAG, each with its models,\nmethods, and shortcomings. Naive RAG primarily involves\nthe \u2019retrieval-reading\u2019 process. Advanced RAG uses more\nrefined data processing, optimizes the knowledge base in-\ndexing, and introduces multiple or iterative retrievals. As\nexploration deepens, RAG integrates other techniques like\nfine-tuning, leading to the emergence of the Modular RAG\nparadigm, which enriches the RAG process with new mod-\nules and offers more flexibility.\nIn the subsequent chapters, we further analyze three key", "probabilities. This approach is designed to handle situations\nwhere LLMs might need additional knowledge.\nSelf-RAG [Asai et al. , 2023b ]introduces an important in-\nnovation called Reflection tokens. These special tokens are\ngenerated to review the output and come in two types: Re-\ntrieve and Critic. The model can autonomously decide when\nto retrieve paragraphs or use a set threshold to trigger re-\ntrieval. When retrieval is needed, the generator processes\nmultiple paragraphs simultaneously, performing fragment-\nlevel beam search to obtain the best sequence. The scores for\neach subdivision are updated using Critic scores, and these\nweights can be adjusted during the inference process to cus-\ntomize the model\u2019s behavior. The Self-RAG framework also\nallows the LLM to autonomously determine whether recall\nis necessary, avoiding training additional classifiers or rely-\ning on NLI models. This enhances the model\u2019s ability to au-\ntonomously judge inputs and generate accurate answers."], "retrieved_docs_id": ["9067222c76", "c3380c77fb", "1d479682a6", "123a2dcc44", "2449b179e1"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does REPLUG improve the initial retrieval model?\n", "true_answer": "REPLUG improves the initial retrieval model by obtaining feedback from the language model through supervised signals.", "source_doc": "RAG.pdf", "source_id": "662eb558d5", "retrieved_docs": ["domain question-answering tasks. Concerning retriever fine-\ntuning, REPlUG [Shiet al. , 2023 ]treats the language model\n(LM) as a black box and enhances it through an adjustable re-\ntrieval model. By obtaining feedback from the black-box lan-\nguage model through supervised signals, REPLUG improves\nthe initial retrieval model. UPRISE [Cheng et al. , 2023a ], on\nthe other hand, fine-tunes retrievers by creating a lightweight\nand versatile retriever through fine-tuning on diverse task\nsets. This retriever can automatically provide retrieval\nprompts for zero-shot tasks, showcasing its universality and\nimproved performance across tasks and models.\nSimultaneously, methods for fine-tuning generators in-\nclude Self-Mem [Cheng et al. , 2023b ], which fine-tunes the\ngenerator through a memory pool of examples, and\nSelf-RAG [Asai et al. , 2023b ], which satisfies active re-\ntrieval needs by generating reflection tokens. The RA-\nDIT[Linet al. , 2023 ]method fine-tunes both the generator", "Recite-Read [Sunet al. , 2022 ]transforms external re-\ntrieval into retrieval from model weights, initially hav-\ning LLM memorize task-relevant information and gener-\nate output for handling knowledge-intensive natural lan-\nguage processing tasks.\n\u2022Adjusting the Flow between Modules In the realm of\nadjusting the flow between modules, there is an empha-\nsis on enhancing interaction between language models\nand retrieval models. DSP [Khattab et al. , 2022 ]intro-\nduces the Demonstrate-Search-predict framework, treat-\ning the context learning system as an explicit program\nrather than a terminal task prompt to address knowledge-\nintensive tasks. ITER-RETGEN [Shao et al. , 2023 ]\nutilizes generated content to guide retrieval, itera-\ntively performing \u201cretrieval-enhanced generation\u201d and\n\u201cgeneration-enhanced retrieval\u201d in a Retrieve-Read-\nRetrieve-Read flow. Self-RAG [Asai et al. , 2023b ]fol-\nlows the decide-retrieve-reflect-read process, introduc-", "erating document-level context and the pre-training objective\nof causal language modeling, allowing for better utilization\nof world knowledge stored in the model parameters.\nSelfmem [Cheng et al. , 2023b ]iteratively uses a retrieval-\nenhanced generator to create an unbounded memory pool. A\nmemory selector is employed to choose an output as the mem-\nory for subsequent generations. This output serves as the dual\nproblem to the original question. By combining the originaland dual problems, a retrieval-enhanced generative model can\nleverage its own output to enhance itself.\nThese diverse approaches showcase innovative strategies in\nRAG retrieval enhancement, aiming to elevate model perfor-\nmance and effectiveness.\n6.3 Augmentation Process\nMost RAG research typically only performs a single retrieval\nand generation process. However, single retrievals may con-\ntain redundant information, leading to a \u201dlost in the mid-\ndle\u201d phenomenon [Liuet al. , 2023 ]. This redundant informa-", "retrieved information. In RAG, the generator\u2019s input includes\nnot only traditional contextual information but also relevant\ntext segments obtained through the retriever. This allows the\ngenerator to better comprehend the context behind the ques-\ntion and produce responses that are more information-rich.\nFurthermore, the generator is guided by the retrieved text toensure consistency between the generated content and the re-\ntrieved information. It is the diversity of input data that has\nled to a series of targeted efforts during the generation phase,\nall aimed at better adapting the large model to the input data\nfrom queries and documents. We will delve into the intro-\nduction of the generator through aspects of post-retrieval pro-\ncessing and fine-tuning.\n5.1 How Can Retrieval Results be Enhanced via\nPost-retrieval Processing?\nIn terms of untuned large language models, most studies\nrely on well-recognized large language models like GPT-", "is costly for LLMs, and too much irrelevant information\ncan reduce the efficiency of LLMs in utilizing context.\nThe OpenAI report also mentioned \u201dContext Recall\u201d as\na supplementary metric, measuring the model\u2019s abil-\nity to retrieve all relevant information needed to an-\nswer a question. This metric reflects the search opti-\nmization level of the RAG retrieval module. A low re-\ncall rate indicates a potential need for optimization of\nthe search functionality, such as introducing re-ranking\nmechanisms or fine-tuning embeddings, to ensure more\nrelevant content retrieval.\nKey abilities\nThe work of RGB [Chen et al. , 2023b ]analyzed the perfor-\nmance of different large language models in terms of four\nbasic abilities required for RAG, including Noise Robust-\nness, Negative Rejection, Information Integration, and Coun-\nterfactual Robustness, establishing a benchmark for retrieval-\naugmented generation.RGB focuses on the following four\nabilities:\n1.Noise Robustness"], "retrieved_docs_id": ["662eb558d5", "dfac20a7d8", "6958fee9ba", "fefa202c19", "6291d3f5de"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "What is the main factor contributing to the success of multimodal large language models (MLLMs)?\n", "true_answer": "The success of MLLMs is largely attributed to the scaling law, which states that the performance of an AI model improves as more resources, such as data, computational power, or model size, are invested into it.", "source_doc": "multimodal.pdf", "source_id": "7a547e4fbb", "retrieved_docs": ["Figure 2: Organization of efficient multimodal large language models advancements.\n\u2022 Training surveys the landscape of training methodologies that are pivotal in the devel-\nopment of efficient MLLMs. It addresses the challenges associated with the pre-training\nstage, instruction-tuning stage, and the overall training strategy for state-of-the-art results.\n\u2022 Data and Benchmarks evaluates the efficiency of datasets and benchmarks used in the\nevaluation of multimodal language models. It assesses the trade-offs between dataset size,\ncomplexity, and computational cost, while advocating for the development of benchmarks\nthat prioritize efficiency and relevance to real-world applications.\n\u2022 Application investigates the practical implications of efficient MLLMs in various do-\nmains, emphasizing the balance between performance and computational cost. By ad-\ndressing resource-intensive tasks such as high-resolution image understanding and medical\n3", "Efficient Multimodal Large Language Models:\nA Survey\nYizhang Jin1,2,*, Jian Li1,*, Yexin Liu3, Tianjun Gu4, Kai Wu1, Zhengkai Jiang1,\nMuyang He3, Bo Zhao3, Xin Tan4, Zhenye Gan1, Yabiao Wang1, Chengjie Wang1,\nLizhuang Ma2\n1Youtu Lab, Tencent,2SJTU,3BAAI,4ECNU\nAbstract\nIn the past year, Multimodal Large Language Models (MLLMs) have demon-\nstrated remarkable performance in tasks such as visual question answering, vi-\nsual understanding and reasoning. However, the extensive model size and high\ntraining and inference costs have hindered the widespread application of MLLMs\nin academia and industry. Thus, studying efficient and lightweight MLLMs\nhas enormous potential, especially in edge computing scenarios. In this survey,\nwe provide a comprehensive and systematic review of the current state of effi-\ncient MLLMs. Specifically, we summarize the timeline of representative effi-\ncient MLLMs, research state of efficient structures and strategies, and the appli-", "cient MLLMs, research state of efficient structures and strategies, and the appli-\ncations. Finally, we discuss the limitations of current efficient MLLM research\nand promising future directions. Please refer to our GitHub repository for more\ndetails: https://github.com/lijiannuist/Efficient-Multimodal-LLMs-Survey.\n1 Introduction\nLarge-scale pretraining, a leading approach in Artificial Intelligence(AI), has seen general-purpose\nmodels like large language and multimodal models outperform specialized deep learning models\nacross many tasks. The remarkable abilities of Large Language Models (LLM) have inspired efforts\nto merge them with other modality-based models to enhance multimodal competencies. This con-\ncept is further supported by the remarkable success of proprietary models like OpenAI\u2019s GPT-4V [1]\nand Google\u2019s Gemini[2]. As a result, Multimodal Large Language Models (MLLMs) have emerged,\nincluding the mPLUG-Owl series[3, 4], InternVL [5], EMU [6], LLaV A [7], InstructBLIP [8],", "general-purpose interface, i.e., language models.\nNew capabilities of MLLMs. As shown in Table 1, apart from the capabilities found in previous\nLLMs [ BMR+20,CND+22], MLLMs enable new usages and possibilities. First, we can conduct\nzero- and few-shot multimodal learning by using natural language instructions and demonstration\nexamples. Second, we observe promising signals of nonverbal reasoning by evaluating the Raven\nIQ test, which measures the \ufb02uid reasoning ability of humans. Third, MLLMs naturally support\nmulti-turn interactions for general modalities, such as multimodal dialogue.\n2 K OSMOS -1: A Multimodal Large Language Model\nAs shown in Figure 1, KOSMOS -1is a multimodal language model that can perceive general\nmodalities, follow instructions, learn in context, and generate outputs. Given the previous context, the\nmodel learns to generate texts in an auto-regressive manner. Speci\ufb01cally, the backbone of KOSMOS -1", "including the mPLUG-Owl series[3, 4], InternVL [5], EMU [6], LLaV A [7], InstructBLIP [8],\nMiniGPT-v2 [9], and MiniGPT-4[10]. These models circumvent the computational cost of train-\ning from scratch by effectively leveraging the pre-training knowledge of each modality. MLLMs\ninherit the cognitive capabilities of LLMs, showcasing numerous remarkable features such as robust\nlanguage generation and transfer learning abilities. Moreover, by establishing strong representa-\ntional connections and alignments with other modality-based models, MLLMs can process inputs\nfrom multiple modalities, significantly broadening their application scope.\nThe success of MLLMs is largely attributed to the scaling law: the performance of an AI model\nimproves as more resources, such as data, computational power, or model size, are invested into it.\nHowever, scalability comes at the cost of high resource demands, which hinders the development"], "retrieved_docs_id": ["542e5c49da", "ac70fcc9f2", "e021f7788d", "5494ed4540", "7a547e4fbb"], "reranker_type": "None", "search_type": "vector", "rr": 0.2, "hit": 1}, {"question": "What is the number of MLLMs (Multimodal Large Language Models) evaluated in Table 4?\n", "true_answer": "22 MLLMs were evaluated in Table 4.", "source_doc": "multimodal.pdf", "source_id": "de63235613", "retrieved_docs": ["Figure 2: Organization of efficient multimodal large language models advancements.\n\u2022 Training surveys the landscape of training methodologies that are pivotal in the devel-\nopment of efficient MLLMs. It addresses the challenges associated with the pre-training\nstage, instruction-tuning stage, and the overall training strategy for state-of-the-art results.\n\u2022 Data and Benchmarks evaluates the efficiency of datasets and benchmarks used in the\nevaluation of multimodal language models. It assesses the trade-offs between dataset size,\ncomplexity, and computational cost, while advocating for the development of benchmarks\nthat prioritize efficiency and relevance to real-world applications.\n\u2022 Application investigates the practical implications of efficient MLLMs in various do-\nmains, emphasizing the balance between performance and computational cost. By ad-\ndressing resource-intensive tasks such as high-resolution image understanding and medical\n3", "Efficient Multimodal Large Language Models:\nA Survey\nYizhang Jin1,2,*, Jian Li1,*, Yexin Liu3, Tianjun Gu4, Kai Wu1, Zhengkai Jiang1,\nMuyang He3, Bo Zhao3, Xin Tan4, Zhenye Gan1, Yabiao Wang1, Chengjie Wang1,\nLizhuang Ma2\n1Youtu Lab, Tencent,2SJTU,3BAAI,4ECNU\nAbstract\nIn the past year, Multimodal Large Language Models (MLLMs) have demon-\nstrated remarkable performance in tasks such as visual question answering, vi-\nsual understanding and reasoning. However, the extensive model size and high\ntraining and inference costs have hindered the widespread application of MLLMs\nin academia and industry. Thus, studying efficient and lightweight MLLMs\nhas enormous potential, especially in edge computing scenarios. In this survey,\nwe provide a comprehensive and systematic review of the current state of effi-\ncient MLLMs. Specifically, we summarize the timeline of representative effi-\ncient MLLMs, research state of efficient structures and strategies, and the appli-", "cient MLLMs, research state of efficient structures and strategies, and the appli-\ncations. Finally, we discuss the limitations of current efficient MLLM research\nand promising future directions. Please refer to our GitHub repository for more\ndetails: https://github.com/lijiannuist/Efficient-Multimodal-LLMs-Survey.\n1 Introduction\nLarge-scale pretraining, a leading approach in Artificial Intelligence(AI), has seen general-purpose\nmodels like large language and multimodal models outperform specialized deep learning models\nacross many tasks. The remarkable abilities of Large Language Models (LLM) have inspired efforts\nto merge them with other modality-based models to enhance multimodal competencies. This con-\ncept is further supported by the remarkable success of proprietary models like OpenAI\u2019s GPT-4V [1]\nand Google\u2019s Gemini[2]. As a result, Multimodal Large Language Models (MLLMs) have emerged,\nincluding the mPLUG-Owl series[3, 4], InternVL [5], EMU [6], LLaV A [7], InstructBLIP [8],", "2 Bai, et al.\n1 INTRODUCTION\nRecently, the emergence of large language models (LLMs) [ 29,81,85,99,132] has dominated a wide\nrange of tasks in natural language processing (NLP), achieving unprecedented progress in language\nunderstanding [ 39,47], generation [ 128,140] and reasoning [ 20,58,87,107,115]. Leveraging\nthe capabilities of robust LLMs, multimodal large language models (MLLMs) [ 22,75,111,138],\nsometimes referred to as large vision-language models (LVLMs), are attracting increasing attention.\nMLLMs show promising ability in multimodal tasks, such as image captioning [ 66], visual question\nanswering [ 22,75], etc. However, there is a concerning trend associated with the rapid advancement\nin MLLMs. These models exhibit an inclination to generate hallucinations [ 69,76,137], resulting in\nseemingly plausible yet factually spurious content.\nThe problem of hallucination originates from LLMs themselves. In the NLP community, the", "general-purpose interface, i.e., language models.\nNew capabilities of MLLMs. As shown in Table 1, apart from the capabilities found in previous\nLLMs [ BMR+20,CND+22], MLLMs enable new usages and possibilities. First, we can conduct\nzero- and few-shot multimodal learning by using natural language instructions and demonstration\nexamples. Second, we observe promising signals of nonverbal reasoning by evaluating the Raven\nIQ test, which measures the \ufb02uid reasoning ability of humans. Third, MLLMs naturally support\nmulti-turn interactions for general modalities, such as multimodal dialogue.\n2 K OSMOS -1: A Multimodal Large Language Model\nAs shown in Figure 1, KOSMOS -1is a multimodal language model that can perceive general\nmodalities, follow instructions, learn in context, and generate outputs. Given the previous context, the\nmodel learns to generate texts in an auto-regressive manner. Speci\ufb01cally, the backbone of KOSMOS -1"], "retrieved_docs_id": ["542e5c49da", "ac70fcc9f2", "e021f7788d", "da0a465b6c", "5494ed4540"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How does the Extra Generation Module generate required context according to Wang et al. (2022a)?\n", "true_answer": "The Extra Generation Module generates required context by using a large language model (LLM) to produce the content. This approach is more likely to contain relevant information compared to direct retrieval.", "source_doc": "RAG.pdf", "source_id": "3ed835a82b", "retrieved_docs": ["data[Wang et al. , 2022a ].\n\u2022Extra Generation Module: In retrieved content, re-\ndundancy and noise are common issues. Instead of di-\nrectly retrieving from a data source, the Extra Gener-\nation Module leverages LLM to generate the required\ncontext [Yuet al. , 2022 ]. Content generated by LLM is\nmore likely to contain relevant information compared to\ndirect retrieval.", "in the appendix. Nevertheless, there are still many\nother SFT capabilities (such as creative generation)\nwithin the LLMs community that have data compo-\nsition issues waiting to be explored by researchers,\nwhich will also be the focus of our future research\nefforts.\nReferences\nRohan Anil, Andrew M Dai, Orhan Firat, Melvin John-\nson, Dmitry Lepikhin, Alexandre Passos, Siamak\nShakeri, Emanuel Taropa, Paige Bailey, Zhifeng\nChen, et al. 2023. Palm 2 technical report. arXiv\npreprint arXiv:2305.10403 .\nJacob Austin, Augustus Odena, Maxwell Nye, Maarten\nBosma, Henryk Michalewski, David Dohan, Ellen\nJiang, Carrie Cai, Michael Terry, Quoc Le, et al. 2021.\nProgram synthesis with large language models. arXiv\npreprint arXiv:2108.07732 .\nLoubna Ben Allal, Niklas Muennighoff, Lo-\ngesh Kumar Umapathi, Ben Lipkin, and\nLeandro von Werra. 2022. A framework\nfor the evaluation of code generation mod-\nels. https://github.com/bigcode-project/\nbigcode-evaluation-harness .", "generation quality (as evidenced by the Vicuna Benchmark Questions and our TruthfulQA generation\ntask), it harms the model\u2019s performance in several multiple-choice benchmarks, particularly in ranking\nmore trustworthy responses. Drawing on the \u201calignment taxes\u201d concept introduced by Bai et al.\n[4], we refer to this phenomenon as verbose tax . Understanding the underlying reasons for this\noccurrence and exploring methods to improve the model\u2019s helpfulness (verbose generation ability)\nwhile maintaining its harmlessness and trustworthiness warrant further investigation.\n4.3 Qualitative Demonstrations\nTo offer a more profound insight into the strengths and weaknesses of Dromedary , we present\nqualitative demonstrations of its performance across diverse contexts. Our focus lies in highlighting\nthe model\u2019s capacity to address harmful or sensitive queries while generating comprehensive and\nnuanced responses. Due to the space limit, we present these results in the appendix. The results of", "D.2 Prompting experiments for code generations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28\nE Generation samples 30\nE.1 Continuations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30\nF Further Comparison between CFG and Instruction-Tuning 34\nG Experiments with GPT4All 34\nG.1 System prompts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34\nG.2 User prompts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35\nA Author Contributions\nThis work is a spontaneous collaboration between EleutherAI members and EleutherAI\u2019s Discord\u2019s members.\nGuillaume Sanchez came up with the initial theory, code and preliminary experiments, then reached EleutherAI in\nsearch for collaborators. He wrote the code for 2 and associated figures, redacted Sections 2.1, 2.2. He wrote the code", "and technical safeguards related to safety policies.\nWe recommend reviewing guides and tools for responsible development,\nand that all downstream developers consider the potential for harms and\nbias in the speci\ufb01c context of their application Shelby et al. (2023), particu-\nlarly since changes in decoding strategy and prompts can have a signi\ufb01cant\nimpact on generated responses. While we note the effectiveness of dialog-\nprompting in reducing toxic generation, we stress that these results may not\ngeneralize to other forms of representational harm, or to other prompting\nmethods or use contexts. We encourage application developers to consider\nrecent work demonstrating the promise of new methods for more precisely\nmeasuring application-speci\ufb01c harms (Mozes et al., 2023).\nKnown Caveats PaLM 2 should not be made available as part of a general-purpose service\nor product, or used within a speci\ufb01c downstream application without a"], "retrieved_docs_id": ["3ed835a82b", "4df34039e7", "c0014fdf5f", "36b0f37377", "6bd61563b2"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does the approach of augmented pre-training perform in knowledge-intensive tasks compared to standard GPT models?\n", "true_answer": "The approach of augmented pre-training outperforms standard GPT models in handling knowledge-intensive tasks, particularly in open-domain question answering.", "source_doc": "RAG.pdf", "source_id": "7411eec79c", "retrieved_docs": ["as many steps. Unsurprisingly, we \ufb01nd that pre-training provides signi\ufb01cant gains across\nalmost all benchmarks. The only exception is WMT English to French, which is a large\nenough data set that gains from pre-training tend to be marginal. We include this task in\nour experiments to test the behavior of transfer learning in the high-resource regime. Since\nwe perform early stopping by selecting the best-performing checkpoint, the large disparity\nbetween our baseline and \u201cno pre-training\u201d emphasize how much pre-training improves\nperformance on tasks with limited data. While we do not explicitly measure improvements\nin data e\ufb03ciency in this paper, we emphasize that this is one of the primary bene\ufb01ts of the\ntransfer learning paradigm.\n14", "tasks we \ufb01nd relatively smooth scaling with model capacity in all three settings; one notable pattern is that the gap\nbetween zero-, one-, and few-shot performance often grows with model capacity, perhaps suggesting that larger models\nare more pro\ufb01cient meta-learners.\nFinally, given the broad spectrum of capabilities displayed by GPT-3, we discuss concerns about bias, fairness, and\nbroader societal impacts, and attempt a preliminary analysis of GPT-3\u2019s characteristics in this regard.\nThe remainder of this paper is organized as follows. In Section 2, we describe our approach and methods for training\nGPT-3 and evaluating it. Section 3 presents results on the full range of tasks in the zero-, one- and few-shot settings.\nSection 4 addresses questions of data contamination (train-test overlap). Section 5 discusses limitations of GPT-3.\nSection 6 discusses broader impacts. Section 7 reviews related work and Section 8 concludes.\n2 Approach", "human feedback,\u201d arXiv preprint arXiv:2310.12773 ,\n2023.\n[182] V . Sanh, A. Webson, C. Raffel, S. H. Bach, L. Sutawika,\nZ. Alyafeai, A. Chaffin, A. Stiegler, A. Raja, M. Dey,\nM. S. Bari, C. Xu, U. Thakker, S. S. Sharma,\nE. Szczechla, T. Kim, G. Chhablani, N. V . Nayak,\nD. Datta, J. Chang, M. T. Jiang, H. Wang, M. Man-\nica, S. Shen, Z. X. Yong, H. Pandey, R. Bawden,\nT. Wang, T. Neeraj, J. Rozen, A. Sharma, A. Santilli,\nT. F\u00b4evry, J. A. Fries, R. Teehan, T. L. Scao, S. Bider-\nman, L. Gao, T. Wolf, and A. M. Rush, \u201cMultitask\nprompted training enables zero-shot task generaliza-", "Figure 5: Comparing our models with FLAN and T0 in terms of Likert scores on a 1-7 scale, on the\nInstructGPT prompt distribution. FLAN and T0 perform better than default GPT-3, and comparably\nwith a few-shot GPT-3 model placed into \u2018instruction-following\u2019 mode.\ncategories occur too infrequently in our API to obtain statistically signi\ufb01cant differences between our\nmodels.\nOur models generalize to the preferences of \"held-out\" labelers that did not produce any train-\ning data. Held-out labelers have similar ranking preferences as workers who we used to produce\ntraining data (see Figure 3). In particular, according to held-out workers, all of our InstructGPT\nmodels still greatly outperform the GPT-3 baselines. Thus, our InstructGPT models aren\u2019t simply\nover\ufb01tting to the preferences of our training labelers.\nWe see further evidence of this from the generalization capabilities of our reward models. We ran an", "Figure 4: Taxonomy of RAG\u2019s Core Components\nextension of RETRO, increased the model\u2019s parameter scale.\nStudies have found consistent improvements in text genera-\ntion quality, factual accuracy, low toxicity, and downstream\ntask accuracy, particularly in knowledge-intensive tasks such\nas open-domain question answering. These research findings\nhighlight the promising direction of pretraining autoregres-\nsive language models in conjunction with retrieval for future\nfoundational models.\nIn summary, the advantages and limitations of augmented\npre-training are evident. On the positive side, this approach\noffers a more powerful foundational model, outperforming\nstandard GPT models in perplexity, text generation quality,\nand downstream task performance. Moreover, it achieves\nhigher efficiency by utilizing fewer parameters compared to\npurely pre-trained models. It particularly excels in handling\nknowledge-intensive tasks, allowing the creation of domain-"], "retrieved_docs_id": ["afe7417e5f", "48e99e85eb", "512209314f", "5e020a3617", "7411eec79c"], "reranker_type": "None", "search_type": "vector", "rr": 0.2, "hit": 1}, {"question": "How does the SPHINX-X project create image captions with fine-grained correspondence to texts?\n", "true_answer": "The SPHINX-X project creates image captions with fine-grained correspondence to texts by using GPT-4V to generate captions from marked images and domain-specific guidelines.", "source_doc": "multimodal.pdf", "source_id": "7d5705c52b", "retrieved_docs": ["regional details and object relationships insight. During the training process, SPHINX-X utilizes the\nunaltered images rather than the marked ones. ALLaV A[29] propose to distill a caption and a QA\npair for an image within a single session. Specifically, it prompts GPT-4V with an image, and ask it\nto first generate a fine-grained caption then a VQA pair.\nAdditionally, excluding multimodal instructional data, conversations solely based on language be-\ntween users and assistants can significantly contribute to enhancing a model\u2019s conversational exper-\ntise and responsiveness to directives.For example, VILA\u2019s[49] research demonstrates that integrating\ntext-only instructional data with image-text data during the fine-tuning process not only mitigates the\ndecline in performance for text-only tasks but also enhances the accuracy of MLLM-related tasks.\nDataset Name Type I \u2192O Source Method #.Instance Representative Publications", "[SBBC20] Keisuke Sakaguchi, Ronan Le Bras, Chandra Bhagavatula, and Yejin Choi. WinoGrande:\nAn adversarial winograd schema challenge at scale. In AAAI , pages 8732\u20138740, 2020.\n[SBV+22]Christoph Schuhmann, Romain Beaumont, Richard Vencu, Cade Gordon, Ross Wight-\nman, Mehdi Cherti, Theo Coombes, Aarush Katta, Clayton Mullis, Mitchell Wortsman,\net al. Laion-5b: An open large-scale dataset for training next generation image-text\nmodels. arXiv preprint arXiv:2210.08402 , 2022.\n[SDGS18] Piyush Sharma, Nan Ding, Sebastian Goodman, and Radu Soricut. Conceptual captions:\nA cleaned, hypernymed, image alt-text dataset for automatic image captioning. In Pro-\nceedings of the 56th Annual Meeting of the Association for Computational Linguistics,\nACL 2018, Melbourne, Australia, July 15-20, 2018, Volume 1: Long Papers , pages\n2556\u20132565. Association for Computational Linguistics, 2018.\n[SDP+22]Yutao Sun, Li Dong, Barun Patra, Shuming Ma, Shaohan Huang, Alon Benhaim,", "[WYH+22]Jianfeng Wang, Zhengyuan Yang, Xiaowei Hu, Linjie Li, Kevin Lin, Zhe Gan, Zicheng\nLiu, Ce Liu, and Lijuan Wang. GIT: A generative image-to-text transformer for vision\nand language. CoRR , abs/2205.14100, 2022.\n[Y AS+22]Michihiro Yasunaga, Armen Aghajanyan, Weijia Shi, Rich James, Jure Leskovec,\nPercy Liang, Mike Lewis, Luke Zettlemoyer, and Wen tau Yih. Retrieval-augmented\nmultimodal language modeling. ArXiv , abs/2211.12561, 2022.\n[YLHH14] Peter Young, Alice Lai, Micah Hodosh, and Julia Hockenmaier. From image descrip-\ntions to visual denotations: New similarity metrics for semantic inference over event\ndescriptions. TACL , 2:67\u201378, 2014.\n[ZHB+19]Rowan Zellers, Ari Holtzman, Yonatan Bisk, Ali Farhadi, and Yejin Choi. Hellaswag:\nCan a machine really \ufb01nish your sentence? In Proceedings of the 57th Annual Meeting\nof the Association for Computational Linguistics , 2019.\n22", "(eds.), Proceedings of the 58th Annual Meeting of the As-\nsociation for Computational Linguistics , pp. 8440\u20138451,\nOnline, 07 2020. Association for Computational Linguis-\ntics. doi: 10.18653/v1/2020.acl-main.747. URL https:\n//aclanthology.org/2020.acl-main.747 .\nCrowson, K., Biderman, S., Kornis, D., Stander, D., Halla-\nhan, E., Castricato, L., and Raff, E. VQGAN-CLIP:\nOpen domain image generation and editing with nat-\nural language guidance. Computing Research Repos-\nitory , 2022. doi: 10.48550/arXiv.2204.08583. URL\nhttps://arxiv.org/abs/2204.08583v2 . Ver-\nsion 2.\nDao, T., Fu, D. Y ., Ermon, S., Rudra, A., and R \u00b4e, C. Flashat-\ntention: Fast and memory-efficient exact attention with\nio-awareness. arXiv preprint arXiv:2205.14135 , 2022.\nDodge, J., Sap, M., Marasovi \u00b4c, A., Agnew, W., Ilharco, G.,\nGroeneveld, D., Mitchell, M., and Gardner, M. Docu-\nmenting large webtext corpora: A case study on the colos-", "[43] Kelvin Xu, Jimmy Ba, Ryan Kiros, Kyunghyun Cho, Aaron C. Courville, Ruslan Salakhutdinov,\nRichard S. Zemel, and Yoshua Bengio. Show, attend and tell: Neural image caption generation\nwith visual attention. In ICML , 2015.\n[44] Wojciech Zaremba, Ilya Sutskever, and Oriol Vinyals. Recurrent neural network regularization.\narXiv preprint arXiv:1409.2329 , 2014.\n[45] Julian Georg Zilly, Rupesh Kumar Srivastava, Jan Koutn\u00edk, and J\u00fcrgen Schmidhuber. Recurrent\nhighway networks. In ICML , 2017.\n11"], "retrieved_docs_id": ["54fa378ef2", "264229819e", "4af2ca11b4", "cb553fd3d9", "7071beac18"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What is one ability of the RGB model in augmented generation that deals with erroneous information?\n", "true_answer": "Counterfactual Robustness is the ability of the RGB model in augmented generation that deals with erroneous information by identifying and handling it when receiving instructions about potential risks in retrieved information.", "source_doc": "RAG.pdf", "source_id": "070aa6c4f4", "retrieved_docs": ["augmented generation.RGB focuses on the following four\nabilities:\n1.Noise Robustness\nThis capability measures the model\u2019s efficiency in han-\ndling noisy documents, which are those related to the\nquestion but do not contain useful information.\n2.Negative Rejection\nWhen documents retrieved by the model lack the knowl-\nedge required to answer a question, the model should\ncorrectly refuse to respond. In the test setting for neg-\native rejection, external documents contain only noise.\nIdeally, the LLM should issue a \u201dlack of information\u201d or\nsimilar refusal signal.\n3.Information Integration\nThis ability assesses whether the model can integrate\ninformation from multiple documents to answer more\ncomplex questions.4.Counterfactual Robustness\nThis test aims to evaluate whether the model can iden-\ntify and deal with known erroneous information in doc-\numents when receiving instructions about potential risks\nin retrieved information. Counterfactual robustness tests", "are released to increase ease of adoption and allow\nfor the study of emergent phenomena.\nOn the other hand, with lower resource barri-\ners, the spreading of AI-generated text might be-\ncome more prevalent. Current RWKV LLMs may\nexhibit and/or reproduce biases and potentially\nharmful content present in the data used for train-\ning. Nonetheless, mitigation and finetuning strate-\ngies discussed for other, large Transformer models\nshould be applicable to RWKV as well.Acknowledgements\nWe thank StabilityAI for the compute used to train\nour models and for technical support in develop-\nment of RWKV . We also thank the members of the\nRWKV and EleutherAI Discord servers for their\nhelp and work on further extending the applicabil-\nity of RWKV to different domains.\nReferences\nMohammad Mahmudul Alam, Edward Raff, Stella Bi-\nderman, Tim Oates, and James Holt. 2023. Recasting\nself-attention with holographic reduced representa-\ntions. arXiv preprint arXiv:2305.19534 .", "equally diverse. Hallucination is a prominent issue where the\nmodel fabricates an answer that doesn\u2019t exist in the context.\nIrrelevance is another concern where the model generates an\nanswer that fails to address the query. Further, toxicity or\nbias, where the model generates a harmful or offensive re-\nsponse, is another problem.\nFinally, the augmentation process also faces several chal-\nlenges. Crucially, the effective integration of the context from\nretrieved passages with the current generation task is of ut-\nmost importance. If mishandled, the output might appear in-\ncoherent or disjointed. Redundancy and repetition are another\nissue, particularly when multiple retrieved passages contain\nsimilar information, leading to content repetition in the gen-\neration step. Moreover, determining the importance or rele-\nvance of multiple retrieved passages to the generation task is\nchallenging, and the augmentation process needs to balance", "Christoph Schuhmann, Romain Beaumont, Richard Vencu, Cade W Gordon, Ross Wightman, Mehdi\nCherti, Theo Coombes, Aarush Katta, Clayton Mullis, Mitchell Wortsman, Patrick Schramowski,\nSrivatsa R Kundurthy, Katherine Crowson, Ludwig Schmidt, Robert Kaczmarczyk, and Jenia\nJitsev. LAION-5b: An open large-scale dataset for training next generation image-text models.\nInThirty-sixth Conference on Neural Information Processing Systems Datasets and Benchmarks\nTrack , 2022. URL https://openreview.net/forum?id=M3Y74vmsMcY .\nRoy Schwartz, Jesse Dodge, Noah A. Smith, and Oren Etzioni. Green ai. Commun. ACM , 63(12):\n54\u201363, nov 2020. ISSN 0001-0782. doi: 10.1145/3381831. URL https://doi.org/10.1145/\n3381831 .\nPreethi Seshadri, Sameer Singh, and Yanai Elazar. The bias amplification paradox in text-to-\nimage generation. arXiv preprint arXiv:2308.00755 , 2023. URL https://arxiv.org/abs/2308.\n00755 .\nJaime Sevilla, Lennart Heim, Anson Ho, Tamay Besiroglu, Marius Hobbhahn, and Pablo Villalobos.", "Results Table 16 presents the zero-shot performance of KOSMOS -1andLLM on visual common-\nsense reasoning tasks. KOSMOS -1signi\ufb01cantly outperforms LLM by 1.5% on RELATIVE SIZE,\n14.7% on MEMORY COLOR , and 9.7% on COLOR TERMS dataset. The consistent improvements\nindicate that KOSMOS -1bene\ufb01ts from the visual knowledge to complete the corresponding visual\ncommonsense reasoning. The reason for KOSMOS -1\u2019s superior performance is that it has modality\ntransferability, which enables the model to transfer visual knowledge to language tasks. On the\ncontrary, LLM has to rely on textual knowledge and clues to answer visual commonsense questions,\nwhich limits its ability to reason about object properties.\nModelSize Reasoning Color Reasoning\nRELATIVE SIZE MEMORY COLOR COLOR TERMS\nUsing retrieved images\nVALM [WDC+23] 85.0 58.6 52.7\nLanguage-only zero-shot evaluation\nLLM 92.7 61.4 63.4\nKOSMOS -1 94.2 76.1 73.1\nTable 16: Zero-shot visual commonsense reasoning on RELATIVE SIZE,MEMORY COLOR , and"], "retrieved_docs_id": ["070aa6c4f4", "9d41cc16be", "e75af48a5e", "4c2a608bae", "90aa325305"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "What is the perplexity score of the Mini-Gemini [26] Gemma-2B model?\n", "true_answer": "The perplexity score of the Mini-Gemini [26] Gemma-2B model is 56.2.", "source_doc": "multimodal.pdf", "source_id": "0ad4077d27", "retrieved_docs": ["Gemini Pro [2] - 71.2 - - 74.6 - 47.9/\u2013 45.2 - 436.79 73.6 \u2013/70.7 - - 64.3\nGemini Ultra [2] - 77.8 - - 82.3 - 59.4/\u2013 53.0 - - - - - - -\nGPT4V [1] - 77.2 - - 78.0 - 56.8/55.7 49.9 - 517.14 75.8 67.3/69.1 - - 67.6\nMobileVLM [20] MobileLLaMA (2.7B) - 59.0\u221761.0 47.5 - - - 1288.9 - 59.6 - 84.9 - -\nLLaV A-Phi [21] Phi-2 (2.7B) 71.4\u2217- 68.4 48.6 35.9 - - 1335.1 - 59.8 - 85.0 - 28.9\nImp-v1 [22] Phi-2 (2.7B) 79.5 - 70.0 59.4 - - - 1434.0 - 66.5 - 88.0 - 33.1\nTinyLLaV A [23] Phi-2 (2.7B) 79.9\u221762.0\u221769.1 59.1 - - - 1464.9 - 66.9 - 86.4 75.8 32.0\nBunny [24] Phi-2 (2.7B) 79.8 62.5 70.9 - - 38.2/33.0 - 1488.8 289.3 68.6 62.5/- 86.8 - -\nGemini Nano-2 [2] - 67.5 - - 65.9 - 32.6/- 30.6 - - - - - - -\nMobileVLM-v2 [17] MobileLLaMA(2.7B) - 61.1 70.0 57.5 - - - 1440.5 - - - 84.7 - -\nMoE-LLaV A [25] Phi-2 (2.7B) 79.9\u221762.6\u221770.3 57.0 43.7 - - 1431.3 - 68.0 - 85.7 - 35.9\nCobra [13] Mamba-2.8B 75.9 58.5 - 46.0 52.0 - - - - - - 88.0 - -", "Cobra [13] Mamba-2.8B 75.9 58.5 - 46.0 52.0 - - - - - - 88.0 - -\nMini-Gemini [26] Gemma-2B - - - 56.2 - 31.7/29.1 29.4 1341.0 312.0 59.8 - - - 31.1\nVary-toy [27] Qwen-1.8B - - - - - - - - - - - - - 29.0\nTinyGPT-V [28] Phi-2 (2.7B) - 33.6 - - 24.8 - - - - - - - - -\nSPHINX-Tiny [14] TinyLlama-1.1B - - - 57.8 - - 26.4 1261.2 242.1 56.6 17.1/- 82.2 52.3 23.8\nALLaV A-Longer [29] Phi-2 (2.7B) - 50.0 - 50.3 - 33.2/- - 1564.6\u202064.6 - - 71.7 35.5\nMM1-3B [30] MM1-3B 82.5 - 76.1 72.9 - 38.6/35.7 32.6 1469.4 303.1 70.8 63.9/69.4 87.6 76.8 42.2\nLLaV A-Gemma [31] Gemma-2b-it 71.4 58.7 - - - - - 1133.0 307.0 - - 85.3 - 19.1\nMipha-3B [32] Phi-2 (2.7B) 81.3\u221763.9\u221770.9 56.6 47.5 - - 1488.9 295.0 69.7 - 86.7 - 32.1\nVL-Mamba [18] Mamba-2.8B 76.6 56.2 65.4 48.9 - - - 1369.6 - 57.0 - 84.4 - 32.6\nMiniCPM-V 2.0[33] MiniCPM-2.4B - - - 74.1 - 38.2/- 38.7 1808.6\u202069.6 - - - -\nDeepSeek-VL [34] DeepSeek-LLM-1B - - - - - 32.2/- 31.1 - - 64.6 -/66.7 87.6 - 36.8", "et al., 2019) and TriviaQA (Joshi et al., 2017). For\nboth benchmarks, we report exact match perfor-\nmance in a closed book setting, i.e., where the mod-\nels do not have access to documents that contain\nevidence to answer the question. In Table 4, we\nreport performance on NaturalQuestions, and in Ta-\nble 5, we report on TriviaQA. On both benchmarks,\nLLaMA-65B achieve state-of-the-arts performance\nin the zero-shot and few-shot settings. More im-\nportantly, the LLaMA-13B is also competitive on\nthese benchmarks with GPT-3 and Chinchilla, de-\nspite being 5-10 \u00d7smaller. This model runs on a\nsingle V100 GPU during inference.\n0-shot 1-shot 5-shot 64-shot\nGopher 280B 43.5 - 57.0 57.2\nChinchilla 70B 55.4 - 64.1 64.6\nLLaMA7B 50.0 53.4 56.3 57.6\n13B 56.6 60.5 63.1 64.0\n33B 65.1 67.9 69.9 70.4\n65B 68.2 71.6 72.6 73.0\nTable 5: TriviaQA. Zero-shot and few-shot exact\nmatch performance on the \ufb01ltered dev set.\n3.3 Reading Comprehension\nWe evaluate our models on the RACE reading com-", "et al., 2019) and TriviaQA (Joshi et al., 2017). For\nboth benchmarks, we report exact match perfor-\nmance in a closed book setting, i.e., where the mod-\nels do not have access to documents that contain\nevidence to answer the question. In Table 4, we\nreport performance on NaturalQuestions, and in Ta-\nble 5, we report on TriviaQA. On both benchmarks,\nLLaMA-65B achieve state-of-the-arts performance\nin the zero-shot and few-shot settings. More im-\nportantly, the LLaMA-13B is also competitive on\nthese benchmarks with GPT-3 and Chinchilla, de-\nspite being 5-10 \u00d7smaller. This model runs on a\nsingle V100 GPU during inference.\n0-shot 1-shot 5-shot 64-shot\nGopher 280B 43.5 - 57.0 57.2\nChinchilla 70B 55.4 - 64.1 64.6\nLLaMA7B 50.0 53.4 56.3 57.6\n13B 56.6 60.5 63.1 64.0\n33B 65.1 67.9 69.9 70.4\n65B 68.2 71.6 72.6 73.0\nTable 5: TriviaQA. Zero-shot and few-shot exact match\nperformance on the filtered dev set.\n3.3 Reading Comprehension\nWe evaluate our models on the RACE reading com-", "model has 24 attention heads instead of 32, and the 355M is\nmuch smaller than any seen previously while still using 64\nGPUs to train, leading to the much lower time per epoch.\nFigure 6 shows validation perpelixity as a function of num-\nber of iterations. As the model size increases, the validation\nperpelixity decreases and reaches a validation perplexity of\n9.27 for the 8.3B model. We report the zero-shot evaluation\nof the trained models on the LAMBADA and WikiText103\ndatasets in Table 3. For more details on evaluation method-\nology, see Appendix E. We observe the trend that increasing\nmodel size also leads to lower perplexity on WikiText103\nand higher cloze accuracy on LAMBADA. Our 8.3B model\nachieves state of the art perplexity on the WikiText103 test\nset at a properly adjusted perplexity of 10.81. At 66.51%\naccuracy, the 8.3B model similarly surpasses prior cloze\naccuracy results on the LAMBADA task. We have included\nsamples generated from the 8.3 billion parameters model"], "retrieved_docs_id": ["b8cafcd1b9", "0ad4077d27", "8fa5d65ad3", "8fa5d65ad3", "16600b04e0"], "reranker_type": "None", "search_type": "vector", "rr": 0.5, "hit": 1}, {"question": "How does ITRG enhance adaptability for tasks requiring multiple-step reasoning?\n", "true_answer": "ITRG enhances adaptability for tasks requiring multiple-step reasoning by iteratively retrieving and searching for the correct reasoning path.", "source_doc": "RAG.pdf", "source_id": "1f6c13012c", "retrieved_docs": ["refine the reasoning processes, Self-Refine [685] elicits feed-\nback from LLMs on self-generated solutions, enabling the\niterative refinement of solutions based on the feedback.\nMoreover, several studies improve the consistency in the\nreasoning chain of LLMs through the integration of process-\nbased supervision during training [688, 689]. As a promis-\ning solution, recent approaches reformulate the complex\nreasoning tasks into code generation tasks, where the strict\nexecution of the generated code ensures the consistency\nbetween the reasoning process and the outcome. Also,\nit has been revealed that there might exist inconsistency\nbetween tasks with similar inputs, where small changesin the task description may cause the model to produce\ndifferent results [49, 592]. To mitigate this problem, self-\nconsistency [436] adopts the ensemble of multiple reasoning\npaths to enhance the decoding process of LLMs.\nReasoning Inconsistency\nLLMs may generate the correct answer following", "vant knowledge without altering the parameters of LLMs, en-\nabling the model to perform more sophisticated tasks. Addi-\ntionally, CREA-ICL [Liet al. , 2023b ]leverages synchronous\nretrieval of cross-lingual knowledge to assist in acquiring ad-\nditional information, while RECITE forms context by sam-\npling one or more paragraphs from LLMs.\nDuring the inference phase, optimizing the process of RAG\ncan benefit adaptation to more challenging tasks. For ex-ample, ITRG [Feng et al. , 2023a ]enhances adaptability for\ntasks requiring multiple-step reasoning by iteratively retriev-\ning and searching for the correct reasoning path. ITER-\nRETGEN [Shao et al. , 2023 ]employs an iterative approach\nto coalesce retrieval and generation, achieving an alternating\nprocess of \u201dretrieval-enhanced generation\u201d and \u201dgeneration-\nenhanced retrieval.\u201d\nOn the other hand, IRCOT [Trivedi et al. , 2022 ]merges the\nconcepts of RAG and CoT [Weiet al. , 2022 ], employing al-", "composition problem in the SFT stage is crucial\nfor further enhancing the capabilities of LLMs in a\ncomprehensive manner.\nIn essence, the tasks of reasoning, coding, and\naligning human intentions are of different charac-\nteristics. Reasoning and coding tasks require ad-\nhoc abilities of complex and detailed logic in de-\ncomposing task instructions and dealing with non-\nlinguistic and symbolic features (Chen et al., 2021;\nHuang and Chang, 2023), whereas aligning human\nintentions requires versatility and understanding\nobscure intentions expressed in human instructions\n(Lu et al., 2023). Given the fundamental difference\namong the tasks, multi-task learning with compos-\nite data fine-tuning for small-scaled pre-trained lan-arXiv:2310.05492v3  [cs.CL]  19 Jan 2024", "adapters into LLMs, empowering researchers to im-\nplement adapter-based PEFT methods for a wide\nrange of tasks. To evaluate different PEFT meth-\nods on downstream tasks, we construct two high-\nquality fine-tuning datasets to enhance PEFT per-\nformance on math reasoning and commonsense rea-\nsoning tasks. By utilizing the LLM-Adapter toolkit\nand the constructed fine-tuning datasets, we con-\nduct a comprehensive empirical study and find the\nanswer of research questions on the optimal place-\nment and configuration of different PEFT methods,\nthe impact of adapter architectures, and the influ-\nence of ID and OOD scenarios. We hope this work", "model capability [869].\nSynergy-Augmented LLM. To solve complex tasks ( e.g.,\nmulti-hop question answering [656]), it often requires LLMs\nto query a KG multiple times, following a systematic solu-\ntion plan. We call such a multi-turn interaction approach to\nenhancing LLM synergy-augmented LLM . To better synergize\nthe LLM and KG in a complementary manner, recent studies\npropose to decompose the complex task into multiple sub-\ngoals and iteratively solve each one by leveraging the nec-\nessary knowledge from KG [458, 870, 871]. In this process,\nthe LLM can be regarded as an autonomous agent (detailed\nin Section 8.1.6), which automatically generates the plan\nand executes it through interaction with the KG environ-\nment [870]. Specially, the mainstream approaches typically\nstart by enumerating the candidates using the available\nknowledge information at the current step, and then retrieve\nthe most appropriate candidates for the next step according"], "retrieved_docs_id": ["c938be55de", "1f6c13012c", "fe2ed22eb8", "3d9464fa95", "ebd6447842"], "reranker_type": "None", "search_type": "vector", "rr": 0.5, "hit": 1}, {"question": "How does Llama-2 optimize memory bandwidth during autoregressive decoding?\n", "true_answer": "Llama-2 optimizes memory bandwidth during autoregressive decoding by using a technique called grouped-query attention (GQA), which is a Sharing-based Attention mechanism that partitions all query heads into several groups, with each group\u2019s query heads sharing a common key-value head.", "source_doc": "multimodal.pdf", "source_id": "7d67b0debb", "retrieved_docs": ["be accommodated. Moreover, inefficient memory manage-\nment can further decrease the batch size, as shown in Fig. 2.\nAdditionally, given the current trends, the GPU\u2019s computa-\ntion speed grows faster than the memory capacity [ 17]. For\nexample, from NVIDIA A100 to H100, The FLOPS increases\nby more than 2x, but the GPU memory stays at 80GB max-\nimum. Therefore, we believe the memory will become an\nincreasingly significant bottleneck.\nComplex decoding algorithms. LLM services offer a range\nof decoding algorithms for users to select from, each with\nvarying implications for memory management complexity.\nFor example, when users request multiple random samples\nfrom a single input prompt, a typical use case in program\nsuggestion [ 18], the KV cache of the prompt part, which\naccounts for 12% of the total KV cache memory in our ex-\nperiment (\u00a76.3), can be shared to minimize memory usage.\nOn the other hand, the KV cache during the autoregressive", "COPA, OPT-30B MathQA, OPT-30B RTE, OPT-66BOpenBookQA, OPT-66BXSUM, LLaMA-7B XSUM, LLaMA-13B XSUM, LLaMA-30B XSUM, GPT-NeoX-20B\nCNN/Daily Mail, LLaMA-7B CNN/Daily Mail, GPT-NeoX-20B OpenBookQA, OPT-30B\nCOPA, OPT-66B\nFigure 4: Comparsion results between the baseline model with full cache, our H2O, and the \"Local\" strategy\nthat utilizes the most recent KVembeddings.\n5 Empirical Evaluation\nIn this section, our goal is to demonstrate that H2O, a remarkably simple KV cache eviction policy is\ncapable of enhancing end-to-end throughput and reducing latency in wall-clock while maintaining\ngeneration quality across a broad spectrum of domains and tasks.\n\u2022In Section 5.1, we show that H2Ocan reduce the memory footprint of KV cache by up to 5\u00d7without\naccuracy degradation on a wide range of model architectures (OPT, LLaMA, GPT-NeoX), sizes\n(from 6.7B to 175B) and evaluation benchmarks (HELM and lm-eval-harness). More importantly,", "memory sharing at the granularity of a block, across the\ndifferent sequences associated with the same request or even\nacross the different requests.\nIn this work, we build vLLM , a high-throughput distributed\nLLM serving engine on top of PagedAttention that achieves\nnear-zero waste in KV cache memory. vLLM uses block-level\nmemory management and preemptive request scheduling\nthat are co-designed with PagedAttention. vLLM supports\npopular LLMs such as GPT [ 5], OPT [ 62], and LLaMA [ 52]\nwith varying sizes, including the ones exceeding the memory\ncapacity of a single GPU. Our evaluations on various models\nand workloads show that vLLM improves the LLM serving\nthroughput by 2-4 \u00d7compared to the state-of-the-art sys-\ntems [ 31,60], without affecting the model accuracy at all. The\nimprovements are more pronounced with longer sequences,\nlarger models, and more complex decoding algorithms (\u00a74.3).\nIn summary, we make the following contributions:", "MEGA BYTE: Predicting Million-byte Sequences with Multiscale Transformers\nLili Yu* 1D\u00b4aniel Simig* 1Colin Flaherty* 2Armen Aghajanyan1Luke Zettlemoyer1Mike Lewis1\nAbstract\nAutoregressive transformers are spectacular mod-\nels for short sequences but scale poorly to long se-\nquences such as high-resolution images, podcasts,\ncode, or books. We propose MEGABYTE, a multi-\nscale decoder architecture that enables end-to-end\ndifferentiable modeling of sequences of over one\nmillion bytes. MEGABYTE segments sequences\ninto patches and uses a local submodel within\npatches and a global model between patches. This\nenables sub-quadratic self-attention, much larger\nfeedforward layers for the same compute, and im-\nproved parallelism during decoding\u2014unlocking\nbetter performance at reduced cost for both train-\ning and generation. Extensive experiments show\nthatMEGABYTE allows byte-level models to per-\nform competitively with subword models on long\ncontext language modeling, achieve state-of-the-", "Latency Profiling. We measure the latency and peak memory usage for generating 128 and 1024\ntokens on an A6000 machine using the Torch CUDA profiler. As an official implementation of\nGPTQ (in particular, the grouped version) is not available, we implement an optimized kernel for\nsingle-batch inference based on the most active open-source codebase ( GPTQ-For-LLaMA).\n5.2 M AINRESULTS\nTable 1 shows quantization results for LLaMA along with comparison with RTN, GPTQ and AWQ.\nThe models are grouped based on their average bitwidth (i.e., model size) for a better comparison\nof size-perplexity trade-offs. See Fig. 5 for a visual illustration. Below we use LLaMA-7B as the\nmain example for the discussions for the impact of dense-only and Dense-and-Sparse quantization,\nand subsequently discuss how these trends extend to larger models. We provide the full evaluation\nresult on all LLaMA models in Tab. A.4.\nDense-only Quantization. In Tab. 1 (Top), we compare dense-only SqueezeLLM with 0% sparsity"], "retrieved_docs_id": ["75b52830d5", "e67e687aed", "ac4fac2f5f", "dbb3de89c4", "9fcf8cca06"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What percentage of the overall cost does DAPT account for in ChipNeMo training?\n", "true_answer": "DAPT accounts for less than 1.5% of the overall cost in ChipNeMo training.", "source_doc": "ChipNemo.pdf", "source_id": "d9ae12f819", "retrieved_docs": ["large adapter exhibiting a slight improvement.\n3.4. Training Cost\nAll models have undergone training using 128 A100 GPUs.\nWe estimate the costs associated with domain adaptive pre-\ntraining for ChipNeMo as illustrated in Table 1. It is worth\nnoting that DAPT accounts for less than 1.5% of the overall\n5", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ncost of pretraining a foundational model from scratch.\nModel Size Pretraining DAPT SFT\n7B 184,320 2,620 90\n13B 368,640 4,940 160\n70B 1,720,320 20,500 840\nTable 1: Training cost of LLaMA2 models in A100 GPU hours.\nPretraining cost from (Touvron et al., 2023).\n3.5. RAG and Engineering Assistant Chatbot\nWe created a benchmark to evaluate the performance of\ndesign chat assistance, which uses the RAG method. This\nbenchmark includes 88 questions in three categories: archi-\ntecture/design/verification specifications (Specs), testbench\nregression documentation (Testbench), and build infrastruc-\nture documentation (Build). For each question, we specify\nthe golden answer as well as the paragraphs in the design\ndocument that contains the relevant knowledge for the an-\nswer. These questions are created by designers manually\nbased on a set of design documents as the data store for\nretrieval. It includes about 1.8K documents, which were", "results on automated \u201ceasy\u201d and \u201cmedium\u201d benchmarks\nwhere we check for fully accurate code. For \u201cHard\u201d bench-\nmarks in Figure 9 we check for partial correctness of the\ncode, which is evaluated by a human user on a 0-10 scale.\nChipNeMo-70B-Steer performs significantly better than off-\nthe-shelf GPT-4 and LLaMA2-70B-Chat model.\nFigure 8: EDA Script Generation Evaluation Results, Pass@5\nAs seen in Figure 8, models like GPT-4 and LLaMA2-70B-\nChat have close to zero accuracy for the Python tool where\nthe domain knowledge related to APIs of the tool are neces-\nsary. This shows the importance of DAPT. Without DAPT,\nthe model had little to no understanding of the underlying\nAPIs and performed poorly on both automatic and human\nevaluated benchmarks. Our aligned model further improved\nthe results of DAPT because our domain instructional data\nhelps guide the model to present the final script in the most\nuseful manner. An ablation study on inclusion of domain", "useful manner. An ablation study on inclusion of domain\ninstructional data for model alignment and the application\nof retrieval is provided in Appendix A.9.\nFigure 9: EDA Script Generation Evaluation Results, Single Gen-\neration (temperature=0), Human Evaluated 0-10 Point Scale.\nOur non-domain models performed better on our Tcl tool\nthan the Python tool, but the trend for our domain trained\nmodel was the opposite. We suspect this was due to the\nproprietary nature of our Python tool. It was difficult for\ngeneral LLMs to perform well on our Python tool bench-\nmark without knowledge of the APIs. Since ChipNeMo is\ntrained with domain data, the inherent python coding ability\nof the base model allows ChipNeMo-70B-Steer to perform\nbetter. This again highlights the importance of DAPT for\nlow-volume or proprietary programming languages.\nFigure 10: Bug Summarization and Analysis Evaluation Results, 7\npoint Likert scale.\n3.7. Bug Summarization and Analysis", "models: LLaMA2 7B/13B/70B. Each DAPT model is ini-\ntialized using the weights of their corresponding pretrained\nfoundational base models. We name our domain-adapted\nmodels ChipNeMo . We employ tokenizer augmentation\nas depicted in Section 2.1 and initialize embedding weight\naccordingly (Koto et al., 2021). We conduct further pre-\ntraining on domain-specific data by employing the standard\nautoregressive language modeling objective. All model\ntraining procedures are conducted using the NVIDIA NeMo\nframework (Kuchaiev et al., 2019), incorporating techniques\nsuch as tensor parallelism (Shoeybi et al., 2019) and flash\nattention (Dao et al., 2022) for enhanced efficiency.\nOur models undergo a consistent training regimen with\nsimilar configurations. A small learning rate of 5\u00b710\u22126\nis employed, and training is facilitated using the Adam\noptimizer, without the use of learning rate schedulers. The\nglobal batch size is set at 256, and a context window of 4096"], "retrieved_docs_id": ["d9ae12f819", "7313e64a59", "cf9d13203d", "f1e5db7ca9", "7eb44773ae"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does a purely parameterized language model acquire and store world knowledge?\n", "true_answer": "A purely parameterized language model acquires world knowledge from vast corpora and stores it in the parameters of the model.", "source_doc": "RAG.pdf", "source_id": "fc82ce8e28", "retrieved_docs": ["play distinct roles. Parametric knowledge is acquired through\ntraining LLMs and stored in the neural network weights, rep-\nresenting the model\u2019s understanding and generalization of\nthe training data, forming the foundation for generated re-\nsponses. Non-parametric knowledge, on the other hand, re-\nsides in external knowledge sources such as vector databases,\nnot encoded directly into the model but treated as updatable\nsupplementary information. Non-parametric knowledge em-\npowers LLMs to access and leverage the latest or domain-\nspecific information, enhancing the accuracy and relevance\nof responses.\nPurely parameterized language models (LLMs) store their\nworld knowledge, which is acquired from vast corpora, in\nthe parameters of the model. Nevertheless, such models have\ntheir limitations. Firstly, it is difficult to retain all the knowl-\nedge from the training corpus, especially for less common\nand more specific knowledge. Secondly, since the model", "Language Models are Unsupervised Multitask Learners\nAlec Radford*1Jeffrey Wu*1Rewon Child1David Luan1Dario Amodei**1Ilya Sutskever**1\nAbstract\nNatural language processing tasks, such as ques-\ntion answering, machine translation, reading com-\nprehension, and summarization, are typically\napproached with supervised learning on task-\nspeci\ufb01c datasets. We demonstrate that language\nmodels begin to learn these tasks without any ex-\nplicit supervision when trained on a new dataset\nof millions of webpages called WebText. When\nconditioned on a document plus questions, the an-\nswers generated by the language model reach 55\nF1 on the CoQA dataset - matching or exceeding\nthe performance of 3 out of 4 baseline systems\nwithout using the 127,000+ training examples.\nThe capacity of the language model is essential\nto the success of zero-shot task transfer and in-\ncreasing it improves performance in a log-linear\nfashion across tasks. Our largest model, GPT-2,\nis a 1.5B parameter Transformer that achieves", "on the principles of knowledge representation and reasoning , 2012.\nLewkowycz, A., Andreassen, A., Dohan, D., Dyer, E., Michalewski, H., Ramasesh, V ., Slone, A., Anil, C., Schlag,\nI., Gutman-Solo, T., et al. Solving quantitative reasoning problems with language models. arXiv preprint\narXiv:2206.14858 , 2022. URL https://arxiv.org/abs/2206.14858 .\n36", "References\n[1]Michael Boratko, Harshit Padigela, Divyendra Mikkilineni, Pritish Yuvraj, Rajarshi Das,\nAndrew McCallum, Maria Chang, Achille Fokoue-Nkoutche, Pavan Kapanipathi, Nicholas\nMattei, Ryan Musa, Kartik Talamadupula, and Michael Witbrock. A systematic classifica-\ntion of knowledge, reasoning, and context within the ARC dataset. In Proceedings of the\nWorkshop on Machine Reading for Question Answering , pages 60\u201370, Melbourne, Australia,\nJuly 2018. Association for Computational Linguistics. doi: 10.18653/v1/W18-2607. URL\nhttps://aclanthology.org/W18-2607 .\n[2]Tom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Kaplan, Prafulla Dhariwal,\nArvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, and et. al. Language models\nare few-shot learners. In Conference on Neural Information Processing Systems , 2020.\n[3]Christopher De Sa, Kunle Olukotun, and Christopher R\u00e9. Global convergence of stochastic", "capacities. Considering the ever-growing interest in Chat-\nGPT and GPT models, we add a special discussion about the\ntechnical evolution of the GPT-series models, to briefly sum-\nmarize the progress how they have been developed in the\npast years. Meanwhile, we drew a schematic diagram de-\npicting the technological evolution of the GPT-series models\nin Figure 4. The basic principle underlying GPT models is\nto compress the world knowledge into the decoder-only\nTransformer model by language modeling, such that it can\nrecover (or memorize) the semantics of world knowledge\nand serve as a general-purpose task solver. Two key points\nto the success are (I) training decoder-only Transformer\nlanguage models that can accurately predict the next word\nand (II) scaling up the size of language models . Overall, the\nresearch of OpenAI on LLMs can be roughly divided into\nthe following stages13.\nEarly Explorations . According to one interview with Ilya"], "retrieved_docs_id": ["fc82ce8e28", "5981cc3258", "16f6c73e11", "a0670a0d58", "114995c415"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How do pre-trained language models primarily function?\n", "true_answer": "Pre-trained language models primarily function as completion machines.", "source_doc": "hallucination.pdf", "source_id": "f524021191", "retrieved_docs": ["During this stage, language models engage in autoregressive prediction, wherein they predict the\nsubsequent token in a sequence. By undergoing self-supervised training on vast textual datasets,\nthese models develop an understanding of language syntax, gain access to world knowledge, and\nenhance their reasoning capabilities. This pre-training process establishes a solid groundwork for\nthe models to undertake subsequent fine-tuning tasks effectively.\nSupervised Fine-Tuning. Although pre-training equips LLMs with substantial knowledge\nand skills, it\u2019s important to acknowledge that its primary focus is on optimizing for completion.\nConsequently, pre-trained LLMs essentially function as completion machines, which may create\na misalignment between the objective of predicting the next word within LLMs and the user\u2019s\nobjective of obtaining desired responses. To address this disparity, the concept of Supervised Fine-", "objective. Early works explored the use of the technique in image classi\ufb01cation [ 20,49,63] and\nregression tasks [ 3]. Subsequent research [ 15] demonstrated that pre-training acts as a regularization\nscheme, enabling better generalization in deep neural networks. In recent work, the method has\nbeen used to help train deep neural networks on various tasks like image classi\ufb01cation [ 69], speech\nrecognition [68], entity disambiguation [17] and machine translation [48].\nThe closest line of work to ours involves pre-training a neural network using a language modeling\nobjective and then \ufb01ne-tuning it on a target task with supervision. Dai et al. [ 13] and Howard and\nRuder [ 21] follow this method to improve text classi\ufb01cation. However, although the pre-training\nphase helps capture some linguistic information, their usage of LSTM models restricts their prediction\nability to a short range. In contrast, our choice of transformer networks allows us to capture longer-", "License.1\nKeywords: Language models, collaborative research\n1. Introduction\nPretrained language models have become a cornerstone of modern natural language pro-\ncessing (NLP) pipelines because they often produce better performance from smaller quan-\ntities of labeled data. The development of ELMo (Peters et al., 2018), ULMFiT (Howard\nand Ruder, 2018), GPT (Radford et al., 2018), and BERT (Devlin et al., 2019) led to the\nwidespread use of pretrained models as an initialization for finetuning on downstream tasks.\nThe subsequent finding that pretrained language models can perform useful tasks without\nany additional training (Radford et al., 2019; Brown et al., 2020) further demonstrated their\nutility. In addition, the empirical observation that a language model\u2019s performance tends to\nincrease as the model is made larger\u2014sometimes predictably (Hestness et al., 2017; Kaplan\n1.hf.co/bigscience/bloom\n3", "they are adopted as a new standard starting point for single-task \ufb01netuning.\n5 Related Work\nLarge Language Models As the foundation of instruction tuning, the practice of pretraining one general-\npurpose language representation that is useful for multiple downstream tasks has a long tradition that goes\nback at least Mikolov et al. (2013) and Dai and Le (2015). In 2018, Peters et al. (2018) and Devlin et al. (2019)\ncemented the paradigm of pretraining a large model on a large unsupervised corpus, and the \ufb01eld of NLP\nquickly converged to using these models which substantially outperform the prior art of non-pretrained\ntask-speci\ufb01c LSTM models on all tasks. However, the dominate way to access that high-quality syntactic\nand semantic knowledge encoded in pretrained models was not to prompt them with instructions, but to\ntrain an additional task-speci\ufb01c linear layer that maps the model activations into numerical class labels. A", "acceleration methods, and optimization techniques need to\nbe well designed. In what follows, we first discuss the data\ncollection and processing in Section 4.1, then introduce the\ncommonly used model architectures in Section 4.2, and fi-\nnally present the training techniques to stably and efficiently\noptimize LLMs in Section 4.3.\n4.1 Data Collection and Preparation\nCompared with small-scale language models, LLMs have\na stronger demand for high-quality data for model pre-\ntraining, and their model capacities largely rely on the pre-\ntraining corpus and how it has been preprocessed. In this\npart, we discuss the collection and processing of pre-training\ndata, including data sources, preprocessing methods, and\nimportant analysis of how pre-training data affects the\nperformance of LLMs."], "retrieved_docs_id": ["f524021191", "b33337bfbf", "b5c7b70dd9", "8848e08dc0", "a8f1212d5f"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How did using a larger learning rate affect the model's performance in the ablation studies?\n", "true_answer": "Using a larger learning rate led to substantial degradations across all domain-specific and academic benchmarks, except on coding.", "source_doc": "ChipNemo.pdf", "source_id": "49056b4ebb", "retrieved_docs": ["ablation studies to say this conclusively. However, Du et al. (2021) did perform ablation studies on the same\ntraining corpus, and show that the improvement in few-shot learning from careful data \ufb01ltering is extremely\nsigni\ufb01cant.\nSimilarly, we did not perform ablation studies to tease out the e\ufb00ects of (1) vs (2), due to the high training\ncost of performing such a study at full scale. In other words, a critical open scaling question is: \u201cHow would\na 62B parameter model trained for 7T tokens compare to our 540B parameter model trained for 780B tokens?\nWhat about a 120B model for 3.6T tokens? 240B for 1.8T tokens?\u201d It is clear that such a model would have\nroughly the same total training cost as PaLM 540B. However, if downstream task performance were to be\ncomparable, the smaller model would certainly be preferable, as the inference cost is proportional to its size.\nVery recently, Ho\ufb00mann et al. (2022) was published to explore this exact question. There, the authors train", "3.3. Training Ablation Studies\nFor our ablation studies, we conducted multiple rounds of\ndomain adaptive pre-training. We provide brief summaries\nand refer to the Appendix A.6 for details.\nThe differences between training with the augmented tok-\nenizer and the original tokenizer appeared to be negligible.\nWe thus primarily attribute the accuracy degradation on\nopen-domain academic benchmarks to domain data. More-\nover, the removal of the public dataset only slightly re-\ngressed on most tasks including academic benchmarks.\nIn our exploration, we experimented with employing a larger\nlearning rate, as in CodeLLaMA (Rozi `ere et al., 2023). We\nobserved large spikes in training loss at the initial training\nsteps. Although this approach eventually led to improved\ntraining and validation loss, we noted substantial degrada-\ntions across all domain-specific and academic benchmarks,\nexcept on coding. We hypothesize that a smaller learning", "(i.e. the sample efficiency of adaptation) influences performance, we vary the maximum number of examples\nacross n\u2208{0,1,2,4,8,16}. In Figure 32, we plot model performance as a fraction of the average number\nof in-context examples provided (which may be fewer than the maximum stated above if they do not fit\ninside the context window). To explore the results further, including the model generations, see https:\n//crfm.stanford.edu/helm/v0.1.0/?group=ablation_in_context .\nWe find that all models show clear improvement from n= 0ton= 1, sometimes having 0% accuracy in the\nzero-shot setting, with the consistent exception of CNN/DailyMail where zero-shot accuracy is better for\nalmost all models. We posit that models may not effectively understand the appropriate length distribution\nand the poor reference summaries may comparatively mislead the model in the one-shot setting compared to\nthe zero-shot setting. However, for larger numbers of in-context examples, we do not see consistent benefits", "prohibitive costs of training enough models.\nAn easy yet expensive fix is to run ablations\nby varying one factor at a time, e.g., keeping\nmost hyper-parameters fixed except the model\nsize [ 44] or context lengths [ 557]. A cheaper po-\ntential remedy can be zero-shot hyper-parameter\ntransfer from smaller models to larger ones [ 608,\n633]. Yang et al. [633] find that when using the \u00b5P\nnetwork parameterization scheme, one can transfer\nthe effect of changing hyper-parameters such as the\nlearning rate across varying model depths, batch\nsizes, sequence lengths, and training times, which\nthey verify empirically up to a 6.7B model. How-\never, it has yet to be verified if such transferability\nstill holds for other varying factors; and if so, re-\nsearchers could afford to conduct more ablation\nexperiments via smaller models.\nIf additional experiments are prohibitively ex-\npensive, another recommendation is to report eval-\nuation results beyond aggregated performance mea-", "Table 5: Analysis of various model ablations on different tasks. Avg. score is a unweighted average\nof all the results. ( mc= Mathews correlation, acc=Accuracy, pc=Pearson correlation)\nMethod Avg. Score CoLA SST2 MRPC STSB QQP MNLI QNLI RTE\n(mc) (acc) (F1) (pc) (F1) (acc) (acc) (acc)\nTransformer w/ aux LM (full) 74.7 45.4 91.3 82.3 82.0 70.3 81.8 88.1 56.0\nTransformer w/o pre-training 59.9 18.9 84.0 79.4 30.9 65.5 75.7 71.2 53.8\nTransformer w/o aux LM 75.0 47.9 92.0 84.9 83.2 69.8 81.1 86.9 54.4\nLSTM w/ aux LM 69.1 30.3 90.5 83.2 71.8 68.1 73.7 81.1 54.6\nattentional memory of the transformer assists in transfer compared to LSTMs. We designed a series\nof heuristic solutions that use the underlying generative model to perform tasks without supervised\n\ufb01netuning. We visualize the effectiveness of these heuristic solutions over the course of generative\npre-training in Fig 2(right). We observe the performance of these heuristics is stable and steadily"], "retrieved_docs_id": ["23ab72b1b7", "49056b4ebb", "30958146c4", "758ce381e6", "f99321b22c"], "reranker_type": "None", "search_type": "vector", "rr": 0.5, "hit": 1}, {"question": "Which Microsoft language model, with less than 3 billion parameters, can match the performance of models 25 times larger?\n", "true_answer": "Phi-2, as trained on special data recipes, can match the performance of models 25 times larger trained on regular data.", "source_doc": "multimodal.pdf", "source_id": "26327c579e", "retrieved_docs": ["consists of up to 11 billion parameters, and GPT-3 (Brown et al., 2020) comprises up to 175 billion\nparameters. Their extreme sizes bring challenges in deploying the models to practical applications\ndue to memory and computational requirements.\n\u2217Published as a conference paper in ICML 2023.\n\u2020Li, Yu, Zhang, Liang and Zhao are a ffiliated with Georgia Tech. He and Chen are a ffiliated with Microsoft Azure.\nCorrespondence to yixiaoli@gatech.edu ,yyu429@gatech.edu andtourzhao@gatech.edu .\n**Equal contributions\n1arXiv:2306.11222v2  [cs.LG]  26 Jun 2023", "samples generated from the 8.3 billion parameters model\nin the Appendix C. Recently researchers from Microsoft in\ncollaboration with NVIDIA trained a 17 billion parameter\nGPT-2 model called Turing-NLG (Microsoft, 2020) using\nMegatron and showed that the accuracies further improve\nas they scale the model, highlighting the value of larger\nmodels.\nTo ensure we do not train on any data found in our test sets,\nwe calculate the percentage of test set 8-grams that also\nappear in our training set as done in previous work (Rad-\nford et al., 2019). The WikiText103 test set has at most\nFigure 6. Validation set perplexity. All language models are trained\nfor 300k iterations. Larger language models converge notice-\nably faster and converge to lower validation perplexities than their\nsmaller counterparts.\nTable 4. Model con\ufb01gurations used for BERT.\nParameter Layers Hidden Attention Total\nCount Size Heads GPUs\n336M 24 1024 16 128\n1.3B 24 2048 32 256\n3.9B 48 2560 40 512", "language models rapidly became the substrate for almost all modeling work, especially with the advent\nof open infrastructure through Hugging Face Transformers (Wolf et al., 2019) and models developed for\nlanguages beyond English (e.g. multilingual-BERT, XLM; Devlin et al., 2019; Conneau & Lample, 2019).\nSince then, we have seen a proliferation of different organizations building language models, often through\nconceptually similar means, with a rapid growth in scale and resource-intensivity. Notably, some of the\nmodels (e.g. TNLG v2 (530B)) we benchmark 1000 \u00d7larger than ELMo and BERT. These models can\ncost millions of dollars to train, requiring extensive systems-level optimizations and dedicated large-scale\ncompute (Narayanan et al., 2021). These changes have also translated from research to deployment: language\nmodels are directly exposed as commercial APIs or are integrated into ubiquitous products (see Bommasani", "Recently a series of Large Language Models (LLMs) have been introduced (Brown et al., 2020; Lieber\net al., 2021; Rae et al., 2021; Smith et al., 2022; Thoppilan et al., 2022), with the largest dense\nlanguage models now having over 500 billion parameters. These large autoregressive transformers\n(Vaswani et al., 2017) have demonstrated impressive performance on many tasks using a variety of\nevaluation protocols such as zero-shot, few-shot, and \ufb01ne-tuning.\nThe compute and energy cost for training large language models is substantial (Rae et al., 2021;\nThoppilan et al., 2022) and rises with increasing model size. In practice, the allocated training\ncompute budget is often known in advance: how many accelerators are available and for how long\nwe want to use them. Since it is typically only feasible to train these large models once, accurately\nestimating the best model hyperparameters for a given compute budget is critical (Tay et al., 2021).", "quirement. Furthermore, when deployed on an A6000 GPU, our quantized models\nachieve up to 2.3 \u00d7speedup compared to the baseline. Our code is open-sourced\nand available online1.\n1 I NTRODUCTION\nRecent advances in Large Language Models (LLMs) trained on massive text corpora, with up to\nhundreds of billions of parameters, have showcased their remarkable problem-solving capabilities\nacross various domains Brown et al. (2020); Raffel et al. (2020); Scao et al. (2022); Du et al. (2022);\nHoffmann et al. (2022); Chowdhery et al. (2022); Smith et al. (2022); Zhang et al. (2022); Thoppilan\net al. (2022); Touvron et al. (2023a). However, deploying these models for inference has been\na significant challenge due to their demanding resource requirements. For instance, the LLaMA-\n65B Touvron et al. (2021) model requires at least 130GB of RAM to deploy in FP16, which exceeds\ncurrent GPU capacity. Even storing such large-sized models has become costly and complex."], "retrieved_docs_id": ["f688611ef4", "873274797e", "6530171a7b", "12fa1dd10e", "a940c9ed6f"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How does Hardware-Aware Quantization optimize the performance of neural network models on specific hardware platforms?\n", "true_answer": "Hardware-Aware Quantization optimizes the performance of neural network models on specific hardware platforms by adjusting precision levels and quantization strategies to maximize performance and energy efficiency during inference.", "source_doc": "multimodal.pdf", "source_id": "31efe3044d", "retrieved_docs": ["we have shown with theoretical bounds on many layers in neural networks that quantization is almost\nalways provably better than pruning. Our hypothesis is that quantized layers are more accurate than\npruned ones, as shown in the theoretical and PTQ setting, and fine-tuning a network is still highly\ndependent on that. This is in line with fine-tuning results, in which for many networks trained under\nthe same conditions, quantization always has higher performance than pruning.\nThe conclusion is clear: Quantization generally outperforms pruning for neural networks. Taking\ninto account the unfavorable hardware implications for pruning described, it could be argued that the\nconclusion holds even stronger. Based on this research, we recommend quantizing neural networks\nwhen efficiency is required before pruning is explored.\n9", "A Survey of Quantization Methods for Ef\ufb01cient\nNeural Network Inference\nAmir Gholami\u2217, Sehoon Kim\u2217, Zhen Dong\u2217, Zhewei Yao\u2217, Michael W. Mahoney, Kurt Keutzer\nUniversity of California, Berkeley\n{amirgh, sehoonkim, zhendong, zheweiy, mahoneymw, keutzer}@berkeley.edu\nAbstract \u2014As soon as abstract mathematical computa-\ntions were adapted to computation on digital computers,\nthe problem of ef\ufb01cient representation, manipulation, and\ncommunication of the numerical values in those computa-\ntions arose. Strongly related to the problem of numerical\nrepresentation is the problem of quantization: in what\nmanner should a set of continuous real-valued numbers be\ndistributed over a \ufb01xed discrete set of numbers to minimize\nthe number of bits required and also to maximize the\naccuracy of the attendant computations? This perennial\nproblem of quantization is particularly relevant whenever\nmemory and/or computational resources are severely re-\nstricted, and it has come to the forefront in recent years due", "quantization.\nAs we are particularly concerned about ef\ufb01cient NNs\ntargeted for edge-deployment, we considered problems\nthat are unique to this environment. These include\nquantization techniques that result in parameters rep-\nresented by fewer than 8 bits, perhaps as low as binary\nvalues. We also considered the problem of integer-only\nquantization, which enables the deployment of NNs on\nlow-end microprocessors which often lack \ufb02oating-point\nunits.\nWith this survey and its organization, we hope to have\npresented a useful snapshot of the current research in\nquantization for Neural Networks and to have given an\nintelligent organization to ease the evaluation of future\nresearch in this area.ACKNOWLEDGMENTS\nThe UC Berkeley team also acknowledges gracious\nsupport from Samsung (in particular Joseph Hassoun),\nIntel corporation, Intel VLAB team, Google TRC team,\nand Google Brain (in particular Prof. David Patterson,\nDr. Ed Chi, and Jing Li). Amir Gholami was supported", "*Equal contribution1Qualcomm AI Research, an initia-\ntive of Qualcomm Technologies, Inc.. Correspondence to:\nMarkus Nagel <markusn@qti.qualcomm.com >, Rana Ali Am-\njad<ramjad@qti.qualcomm.com >, Tijmen Blankevoort <tij-\nmen@qti.qualcomm.com >.\nProceedings of the 37thInternational Conference on Machine\nLearning , Vienna, Austria, PMLR 119, 2020. Copyright 2020 by\nthe author(s).cations, and even dedicated low-power hardware.\nOne effective way to optimize neural networks for infer-\nence is neural network quantization (Krishnamoorthi, 2018;\nGuo, 2018). In quantization, neural network weights and\nactivations are kept in a low-bit representation for both\nmemory transfer and calculations in order to reduce power\nconsumption and inference time. The process of quantizing\na network generally introduces noise, which results in a loss\nof performance. Various prior works adapt the quantization\nprocedure to minimize the loss in performance while going\nas low as possible in the number of bits used.", "Impact Using pruning or quantization leads to power reduction on many architectures and enables\nnew applications on mobile platforms. We see only a positive impact from this on the whole.\nLimitations First, our work has not extensively considered the hardware implications of pruning or\nquantization. Second, we do not study combinations of pruning and quantization apart from analyzing\nthe inherent sparsity due to pruning. We leave this for future work. Finally, we consider only uniform\nquantization and ignore the other formats, such as low-precision floating or logarithmic quantization,\nalthough these are not likely to change the results presented in this paper.\n7 Related work\nQuantization Integer quantization, or fixed-point quantization, is one of the most widely used\ntechniques for inference, allowing to reduce the latency and improved energy efficiency. There are two\nmain families of methods for model quantization. The first family includes post-training quantization"], "retrieved_docs_id": ["81e3649a4c", "051e86f623", "f5322232fb", "7542ef2a73", "7a815c3a72"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "Which large language models are mentioned as being explored for application in EDA algorithms and the chip design process?\n", "true_answer": "The large language models mentioned are ChatGPT, Bard, Vicuna, and those discussed in the papers by Khailany et al. (2020), Ren & Fojtik (2021), and Roy et al. (2021).", "source_doc": "ChipNemo.pdf", "source_id": "0e1c7b711e", "retrieved_docs": ["customization for enhancing the effectiveness of\nlarge language models in specialized applications.\n1. Introduction\nOver the last few decades, Electronic Design Automation\n(EDA) algorithms and tools have provided huge gains in\nchip design productivity. Coupled with the exponential\nincreases in transistor densities provided by Moore\u2019s law,\nEDA has enabled the development of feature-rich complex\nSoC designs with billions of transistors. More recently, re-\n*Equal contribution1NVIDIA.searchers have been exploring ways to apply AI to EDA al-\ngorithms and the chip design process to further improve chip\ndesign productivity (Khailany et al., 2020; Ren & Fojtik,\n2021; Roy et al., 2021). However, many time-consuming\nchip design tasks that involve interfacing with natural lan-\nguages or programming languages still have not been auto-\nmated. The latest advancements in commercial (ChatGPT,\nBard, etc.) and open-source (Vicuna (Chiang et al., 2023),", "Bard, etc.) and open-source (Vicuna (Chiang et al., 2023),\nLLaMA2 (Touvron et al., 2023), etc.) large language mod-\nels (LLM) provide an unprecedented opportunity to help\nautomate these language-related chip design tasks. Indeed,\nearly academic research (Thakur et al., 2023; Blocklove\net al., 2023; He et al., 2023) has explored applications of\nLLMs for generating Register Transfer Level (RTL) code\nthat can perform simple tasks in small design modules as\nwell as generating scripts for EDA tools.\nWe believe that LLMs have the potential to help chip de-\nsign productivity by using generative AI to automate many\nlanguage-related chip design tasks such as code generation,\nresponses to engineering questions via a natural language\ninterface, analysis and report generation, and bug triage. In\nthis study, we focus on three specific LLM applications: an\nengineering assistant chatbot for GPU ASIC and Architec-\nture design engineers, which understands internal hardware", "niques: domain-adaptive tokenization, domain-\nadaptive continued pretraining, model alignment\nwith domain-specific instructions, and domain-\nadapted retrieval models. We evaluate these\nmethods on three selected LLM applications for\nchip design: an engineering assistant chatbot,\nEDA script generation, and bug summarization\nand analysis. Our evaluations demonstrate that\ndomain-adaptive pretraining of language models,\ncan lead to superior performance in domain re-\nlated downstream tasks compared to their base\nLLaMA2 counterparts, without degradations in\ngeneric capabilities. In particular, our largest\nmodel, ChipNeMo-70B, outperforms the highly\ncapable GPT-4 on two of our use cases, namely en-\ngineering assistant chatbot and EDA scripts gener-\nation, while exhibiting competitive performance\non bug summarization and analysis. These re-\nsults underscore the potential of domain-specific\ncustomization for enhancing the effectiveness of\nlarge language models in specialized applications.", "Megatron-LM: Training Multi-Billion Parameter Language Models Using\nModel Parallelism\nMohammad Shoeybi1 2Mostofa Patwary1 2Raul Puri1 2Patrick LeGresley2Jared Casper2\nBryan Catanzaro2\nAbstract\nRecent work in language modeling demonstrates\nthat training large transformer models advances\nthe state of the art in Natural Language Processing\napplications. However, very large models can be\nquite dif\ufb01cult to train due to memory constraints.\nIn this work, we present our techniques for train-\ning very large transformer models and implement\na simple, ef\ufb01cient intra-layer model parallel ap-\nproach that enables training transformer models\nwith billions of parameters. Our approach does\nnot require a new compiler or library changes, is\northogonal and complimentary to pipeline model\nparallelism, and can be fully implemented with\nthe insertion of a few communication operations\nin native PyTorch. We illustrate this approach\nby converging transformer based models up to", "Challenges and Applications of Large Language Models\nJean Kaddour\u03b1,\u2020,\u2217, Joshua Harris\u03b2,\u2217, Maximilian Mozes\u03b1,\nHerbie Bradley\u03b3,\u03b4,\u03f5, Roberta Raileanu\u03b6, and Robert McHardy\u03b7,\u2217\n\u03b1University College London\u03b2UK Health Security Agency\u03b3EleutherAI\n\u03b4University of Cambridge\u03f5Stability AI\u03b6Meta AI Research\u03b7InstaDeep\nAbstract\nLarge Language Models (LLMs) went from\nnon-existent to ubiquitous in the machine learn-\ning discourse within a few years. Due to the\nfast pace of the field, it is difficult to identify\nthe remaining challenges and already fruitful\napplication areas. In this paper, we aim to es-\ntablish a systematic set of open problems and\napplication successes so that ML researchers\ncan comprehend the field\u2019s current state more\nquickly and become productive.\nContents\n1 Introduction 1\n2 Challenges 2\n2.1 Unfathomable Datasets . . . . . . 2\n2.2 Tokenizer-Reliance . . . . . . . . 4\n2.3 High Pre-Training Costs . . . . . 6\n2.4 Fine-Tuning Overhead . . . . . . 10\n2.5 High Inference Latency . . . . . . 11"], "retrieved_docs_id": ["0e1c7b711e", "f23b3625e0", "a6c3d05123", "56f7d6d82f", "bf695e58cf"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How did UniNet [102] improve information accommodation by transformer and MLP operators?\n", "true_answer": "UniNet [102] introduced context-aware down-sampling modules to improve information accommodation by transformer and MLP operators.", "source_doc": "multimodal.pdf", "source_id": "e7939ae097", "retrieved_docs": ["the limits of transfer learning with a uni\ufb01ed text-to-text transformer. JournalofMachine Learning\nResearch, 21(140):1\u201367, 2020a. URL http://jmlr.org/papers/v21/20-074.html .\nC. Ra\ufb00el, N. Shazeer, A. Roberts, K. Lee, S. Narang, M. Matena, Y. Zhou, W. Li, and P. J. Liu. Exploring\nthe limits of transfer learning with a uni\ufb01ed text-to-text transformer. JournalofMachine Learning\nResearch, 21(140):1\u201367, 2020b.\nS. Rajbhandari, J. Rasley, O. Ruwase, and Y. He. Zero: Memory optimizations toward training\ntrillion parameter models. In SC20:International Conference forHighPerformance Computing,\nNetworking, StorageandAnalysis, pages 1\u201316. IEEE, 2020.\n19", "nomenon does not extend to transformer encoders\ntrained on the MLM objective. We conjecture that\nthe causal attention mechanism, which limits atten-\ntion in one direction of the sequence, is responsible\nfor implicitly imbuing the transformer with posi-\ntional information.\n5https://twitter.com/BlancheMinerva/status/\n1394089508723900422", "UniNet [102] introduced context-aware down-sampling modules improving information accommo-\ndation by transformer and MLP operators.\nOptimization of Attention Mechanisms Methods focus on reducing computational complexity\nby introducing adaptive attention, learning sparse attention patterns, and dynamically adjusting at-\ntention mechanisms. Fayyaz et al. [135] implemented adaptive attention by scoring and adaptively\nsampling significant tokens. PatchMerger [103] extracted global information among regional to-\nkens and exchanged local self-attention with information among regional tokens via self-attention.\nDynamicViT [104] proposed an attention masking strategy to differentiably prune tokens by block-\ning interactions with other tokens. Additionally, Sepvit [105] conducted local-global information\ninteraction within and across windows using depthwise separable self-attention. These methods\ncollectively optimize attention mechanisms, enhancing computational efficiency and performance.", "S. Zhang, S. Roller, N. Goyal, M. Artetxe, M. Chen, S. Chen, C. Dewan, M. Diab, X. Li, X. V . Lin,\net al. Opt: Open pre-trained transformer language models. arXiv preprint arXiv:2205.01068 , 2022.\n6", "Transformer Language Models without Positional Encodings\nStill Learn Positional Information\nAdi Haviv\u03c4Ori Ram\u03c4O\ufb01r Press\u03c9Peter Izsak\u03b9Omer Levy\u03c4\u00b5\n\u03c4Tel Aviv University\u03c9University of Washington\u03b9Intel Labs\u00b5Meta AI\n{adi.haviv, ori.ram, levyomer}@cs.tau.ac.il ,ofirp@cs.washington.edu, peter.izsak@intel.com\nAbstract\nCausal transformer language models (LMs),\nsuch as GPT-3, typically require some form of\npositional encoding, such as positional embed-\ndings. However, we show that LMs without\nany explicit positional encoding are still com-\npetitive with standard models, and that this\nphenomenon is robust across different datasets,\nmodel sizes, and sequence lengths. Probing ex-\nperiments reveal that such models acquire an\nimplicit notion of absolute positions through-\nout the network, effectively compensating for\nthe missing information. We conjecture that\ncausal attention enables the model to infer the\nnumber of predecessors that each token can at-\ntend to, thereby approximating its absolute po-"], "retrieved_docs_id": ["fdae239e5e", "d203b5e503", "e7939ae097", "16528d852b", "0c1e445a8f"], "reranker_type": "None", "search_type": "vector", "rr": 0.3333333333333333, "hit": 1}, {"question": "How does TinyViT facilitate knowledge distillation during pretraining?\n", "true_answer": "TinyViT facilitates knowledge distillation during pretraining by pre-storing logits from large teacher models in the hardware, enabling memory and computational efficiency when transferring knowledge to scaled-down student transformers.", "source_doc": "multimodal.pdf", "source_id": "534dcc9fda", "retrieved_docs": ["4.5 Combination with Knowledge Distillation\nKnowledge distillation is a popular technique to improve the performance of small models (Romero\net al., 2014; Hinton et al., 2015). In knowledge distillation, the small model (student) is trained to\nmimic the output of a larger fine-tuned model (teacher) such that the performance of the small\nmodel can be improved.\nWe remark that compression methods are complementary to knowledge distillation. We show\nit by integrating knowledge distillation into LoSparse and other pruning methods. Specifically,\nwe choose a DeBERTaV3-base model that is fine-tuned on specific tasks as the teacher model\nand a compressed DeBERTaV3-base model as the student model. Then we conduct layer-wise\ndistillation for them. Please see Appendix E for more training details. Table 5 shows the results.\nWe find that distillation can further improve the performance of LoSparse and other compression", "VTP[110], PS-ViT[111]\nHybrid Pruning SPViT [112], ViT-Slim [113]\nKnowledge Distillation (\u00a73.3)Homomorphic KDDeiT [114], TinyViT [115], m2mKD [116],\nDeiT-Tiny [117], MiniViT [118]\nHeteromorphic KD DearKD [119], CiT [120]\nQuantization (\u00a73.4)Post-Training QuantizationPTQ4ViT [121], APQ-ViT [122],\nNoisyQuant [123]\nQuantization-Aware TrainingQuantformer [124] Bit-shrinking [125],\nQ-ViT [126], TerViT [127], BiViT [128],\nPackQViT [129], BinaryViT [130]\nHardware-Aware Quantization GPUSQ-ViT[131], Auto-ViT-Acc [132]\nFigure 9: Organization of efficient vision advancements.\n10", "Homomorphic KDs can further classified into logit-level [114, 115], patch-level [117], module-\nlevel [116], and feature-level KDs [118]. For logit-level methods, in DeiT [114], a distillation token\nis incorporated into the self-attention module to emulate the class label inferred by the teacher model,\nfacilitating interaction between the student attention and layers, thus enabling the learning of hard\nlabels during back-propagation. TinyViT [115] applies distillation during pretraining, where logits\nfrom large teacher models are pre-stored in the hardware, enabling memory and computational ef-\nficiency when transferring knowledge to scaled-down student transformers. Patch-level techniques\nlike DeiT-Tiny [117] train a small student model to match a pre-trained teacher model on patch-level\nstructures, then optimize with a decomposed manifold matching loss for reduced computational\ncosts. Module-level methods involve segregating teacher modules from a pre-trained unified model,", "develops a dynamic attention-based multi-head token selector for adaptive instance-wise token se-\nlection, alongside a soft pruning technique consolidating less informative tokens into package tokens\nrather than discarding them. ViT-Slim [113] utilizes a learnable and unified sparsity constraint with\npre-defined factors to represent global importance within the continuous search space across various\ndimensions.\n3.3 Knowledge Distillation\nKnowledge distillation is a technique in which a smaller model learns from a larger, more com-\nplex model to replicate its performance, enabling efficient deployment while maintaining predictive\naccuracy [139]. Knowledge distillation (KD) techniques for Vision Transformers (ViTs) can be\ncategorized into two main types: 1) homomorphic KDs and 2) heteromorphic KDs.\nHomomorphic KDs can further classified into logit-level [114, 115], patch-level [117], module-", "In this paper, we show that it is possible to reach similar performances on many downstream-tasks\nusing much smaller language models pre-trained with knowledge distillation, resulting in models\nthat are lighter and faster at inference time, while also requiring a smaller computational training\nbudget. Our general-purpose pre-trained models can be \ufb01ne-tuned with good performances on several\ndownstream tasks, keeping the \ufb02exibility of larger models. We also show that our compressed models\nare small enough to run on the edge, e.g. on mobile devices.\nUsing a triple loss, we show that a 40% smaller Transformer (Vaswani et al. [2017]) pre-trained\nthrough distillation via the supervision of a bigger Transformer language model can achieve similar\nperformance on a variety of downstream tasks, while being 60% faster at inference time. Further\nablation studies indicate that all the components of the triple loss are important for best performances."], "retrieved_docs_id": ["17e9bf4ddc", "8a087225e4", "534dcc9fda", "61a0681b1c", "9f281829ca"], "reranker_type": "None", "search_type": "vector", "rr": 0.3333333333333333, "hit": 1}, {"question": "What is a component of the modular RAG structure that diverges from the traditional similarity retrieval method?\n", "true_answer": "The Search Module is a component of the modular RAG structure that diverges from the traditional similarity retrieval method, as it is tailored to specific scenes.", "source_doc": "RAG.pdf", "source_id": "1d479682a6", "retrieved_docs": ["Modular RAG\nThe modular RAG structure breaks away from the traditional\nNaive RAG framework of indexing, retrieval, and genera-\ntion, offering greater diversity and flexibility in the over-\nall process. On one hand, it integrates various methods to\nexpand functional modules, such as incorporating a search\nmodule in similarity retrieval and applying a fine-tuning ap-\nproach in the retriever [Linet al. , 2023 ]. Additionally, spe-\ncific problems have led to the emergence of restructured\nRAG modules [Yuet al. , 2022 ]and iterative approaches like\n[Shao et al. , 2023 ]. The modular RAG paradigm is becom-\ning the mainstream in the RAG domain, allowing for ei-\nther a serialized pipeline or an end-to-end training approach\nacross multiple modules.The comparison between three RAG\nparadigms is illustrated in Fig 3.\nNew Modules\n\u2022Search Module: Diverging from the similarity re-\ntrieval between queries and corpora in Naive/Advanced\nRAG, the search module, tailored to specific sce-", "external knowledge, alleviates hallucination issues, identifies\ntimely information via retrieval technology, and enhances re-\nsponse accuracy. Additionally, by citing sources, RAG in-\ncreases transparency and user trust in model outputs. RAG\ncan also be customized based on specific domains by index-\ning relevant text corpora. RAG\u2019s development and charac-\nteristics are summarized into three paradigms: Naive RAG,\nAdvanced RAG, and Modular RAG, each with its models,\nmethods, and shortcomings. Naive RAG primarily involves\nthe \u2019retrieval-reading\u2019 process. Advanced RAG uses more\nrefined data processing, optimizes the knowledge base in-\ndexing, and introduces multiple or iterative retrievals. As\nexploration deepens, RAG integrates other techniques like\nfine-tuning, leading to the emergence of the Modular RAG\nparadigm, which enriches the RAG process with new mod-\nules and offers more flexibility.\nIn the subsequent chapters, we further analyze three key", "These efforts collectively strive to achieve a balance between\nefficiency and the richness of contextual information in RAG\nretrieval.\n\u2022Exploring Hybrid Search: By intelligently blending\nvarious techniques such as keyword-based search, se-\nmantic search, and vector search, the RAG system can\nleverage the strengths of each method. This approach\nenables the RAG system to adapt to different query types\nand information needs, ensuring consistent retrieval of\nthe most relevant and context-rich information. Hybrid\nsearch serves as a robust complement to retrieval strate-\ngies, enhancing the overall performance of the RAG\npipeline.\n\u2022Recursive Retrieval and Query Engine: Another pow-\nerful method to optimize retrieval in the RAG system\ninvolves implementing recursive retrieval and a sophis-\nticated query engine. Recursive retrieval entails acquir-\ning smaller document blocks during the initial retrieval\nphase to capture key semantic meanings. In the later", "providing an effective solution to the incomplete and insuf-\nficient knowledge problem inherent in purely parameterized\nmodels.\nThe paper systematically reviews and analyzes the current\nresearch approaches and future development paths of RAG,\nsummarizing them into three main paradigms: Naive RAG,\nAdvanced RAG, and Modular RAG. Subsequently, the paper\nprovides a consolidated summary of the three core compo-\nnents: Retrieval, Augmented, and Generation, highlighting\nthe improvement directions and current technological char-\nacteristics of RAG. In the section on augmentation methods,the current work is organized into three aspects: the augmen-\ntation stages of RAG, augmentation data sources, and aug-\nmentation process. Furthermore, the paper summarizes the\nevaluation system, applicable scenarios, and other relevant\ncontent related to RAG. Through this article, readers gain a\nmore comprehensive and systematic understanding of large\nmodels and retrieval-Augmented generation. They become", "ments to assess the relevance between the retrieved doc-\numents and the query. This enhances the robustness of\nRAG [Yuet al. , 2023a ].\nNew Pattern\nThe organizational approach of Modular RAG is flexible,\nallowing for the substitution or reconfiguration of modules\nwithin the RAG process based on specific problem con-\ntexts. For Naive RAG, which consists of the two modules\nof retrieval and generation ( referred as read or sythesis in\nsome literature), this framework offers adaptability and abun-\ndance. Present research primarily explores two organizational\nparadigms, involving the addition or replacement of modules,\nas well as the adjustment of the organizational flow between\nmodules.\n\u2022Adding or Replacing Modules\nThe strategy of adding or replacing modules entails\nmaintaining the structure of Retrieval-Read while intro-\nducing additional modules to enhance specific function-\nalities. RRR [Maet al. , 2023a ]proposes the Rewrite-\nRetrieve-Read process, utilizing LLM performance as a"], "retrieved_docs_id": ["1d479682a6", "123a2dcc44", "e34dfedd36", "1bd400d39e", "a016e8d322"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "What is the purpose of the StepBack-prompt approach in the RAG process?\n", "true_answer": "The StepBack-prompt approach encourages the language model to step back from specific instances and engage in reasoning about the underlying general concepts or principles.", "source_doc": "RAG.pdf", "source_id": "ad03b3dcc5", "retrieved_docs": ["phase to capture key semantic meanings. In the later\nstages of this process, larger blocks with more contex-\ntual information are provided to the language model\n(LM). This two-step retrieval method helps strike a bal-\nance between efficiency and contextually rich responses.\n\u2022StepBack-prompt: Integrated into the RAG process,\nthe StepBack-prompt approach [Zheng et al. , 2023 ]en-\ncourages LLM to step back from specific instances and\nengage in reasoning about the underlying general con-\ncepts or principles. Experimental findings indicate a sig-\nnificant performance improvement in various challeng-\ning, inference-intensive tasks with the incorporation of\nbackward prompts, showcasing its natural adaptability\nto RAG. The retrieval-enhancing steps can be applied in\nboth the generation of answers to backward prompts and\nthe final question-answering process.\n\u2022Subqueries: Various query strategies can be employed in\ndifferent scenarios, including using query engines pro-", "Figure 3: Comparison between the three paradigms of RAG\n\u2022Task Adaptable Module: Focused on trans-\nforming RAG to adapt to various downstream\ntasks, UPRISE [Cheng et al. , 2023a ] automati-\ncally retrieves prompts for given zero-shot task\ninputs from a pre-constructed data pool, en-\nhancing universality across tasks and models.\nPROMPTAGATOR [Daiet al. , 2022 ]utilizes LLM\nas a few-shot query generator and, based on the gener-\nated data, creates task-specific retrievers. Leveraging\nthe generalization capability of LLM, PROMPTAGA-\nTOR enables the creation of task-specific end-to-end\nretrievers with just a few examples.\n\u2022Alignment Module: The alignment between queries\nand texts has consistently been a critical issue influenc-\ning the effectiveness of RAG. In the era of Modular\nRAG, researchers have discovered that adding a train-\nable Adapter module to the retriever can effectively mit-\nigate alignment issues. PRCA [Yang et al. , 2023b ]lever-", "Figure 1: A timeline of existing RAG research. The timeline was established mainly according to the release date.\ncuses on introducing the generator in RAG.Chapter 6 em-\nphasizes the introduction of the augmentation methods in\nRAG.Chapter 7 introduces the evaluation system of RAG.\nChapter 8 provides an outlook on the future development\ntrends of RAG. Finally, in Chapter 9, we summarize the main\ncontents of the survey.\n2 Background\nIn this chapter, we will introduce the definition of RAG, as\nwell as the comparison between RAG and other model opti-\nmization techniques, such as fine-tuning.\n2.1 Definition\nThe meaning of RAG has expanded in tandem with techno-\nlogical developments. In the era of Large Language Mod-\nels, the specific definition of RAG refers to the model, when\nanswering questions or generating text, first retrieving rele-\nvant information from a vast corpus of documents. Subse-\nquently, it utilizes this retrieved information to generate re-", "probabilities. This approach is designed to handle situations\nwhere LLMs might need additional knowledge.\nSelf-RAG [Asai et al. , 2023b ]introduces an important in-\nnovation called Reflection tokens. These special tokens are\ngenerated to review the output and come in two types: Re-\ntrieve and Critic. The model can autonomously decide when\nto retrieve paragraphs or use a set threshold to trigger re-\ntrieval. When retrieval is needed, the generator processes\nmultiple paragraphs simultaneously, performing fragment-\nlevel beam search to obtain the best sequence. The scores for\neach subdivision are updated using Critic scores, and these\nweights can be adjusted during the inference process to cus-\ntomize the model\u2019s behavior. The Self-RAG framework also\nallows the LLM to autonomously determine whether recall\nis necessary, avoiding training additional classifiers or rely-\ning on NLI models. This enhances the model\u2019s ability to au-\ntonomously judge inputs and generate accurate answers.", "ments to assess the relevance between the retrieved doc-\numents and the query. This enhances the robustness of\nRAG [Yuet al. , 2023a ].\nNew Pattern\nThe organizational approach of Modular RAG is flexible,\nallowing for the substitution or reconfiguration of modules\nwithin the RAG process based on specific problem con-\ntexts. For Naive RAG, which consists of the two modules\nof retrieval and generation ( referred as read or sythesis in\nsome literature), this framework offers adaptability and abun-\ndance. Present research primarily explores two organizational\nparadigms, involving the addition or replacement of modules,\nas well as the adjustment of the organizational flow between\nmodules.\n\u2022Adding or Replacing Modules\nThe strategy of adding or replacing modules entails\nmaintaining the structure of Retrieval-Read while intro-\nducing additional modules to enhance specific function-\nalities. RRR [Maet al. , 2023a ]proposes the Rewrite-\nRetrieve-Read process, utilizing LLM performance as a"], "retrieved_docs_id": ["ad03b3dcc5", "bbfa682738", "7470fe30c9", "2449b179e1", "a016e8d322"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does a recent work address the hallucination problem in Multi-Modal Language Learning Models (MLLMs)?\n", "true_answer": "A recent work addresses the hallucination problem in MLLMs by utilizing the Efficient Fine-grained Unlearning Framework (EFUF) and the CLIP model to construct a dataset.", "source_doc": "hallucination.pdf", "source_id": "2dd3a385f4", "retrieved_docs": ["Hallucination of Multimodal Large Language Models: A Survey 3\ncontrast, there are very few surveys on hallucination in the field of MLLMs. To the best of our\nknowledge, there is only one concurrent work [ 76], a short survey on the hallucination problem of\nLVLMs. However, our survey distinguishes itself in terms of both taxonomy and scope. We present a\nlayered and granular classification of hallucinations, as shown in Fig. 1, drawing a clearer landscape\nof this field. Additionally, our approach does not limit itself to specific model architectures as\nprescribed in the work of [ 76], but rather dissects the causes of hallucinations by tracing back to\nvarious affecting factors. We cover a larger range of literature both in terms of paper number and\ntaxonomy structure. Furthermore, our mitigation strategies are intricately linked to the underlying\ncauses, ensuring a cohesive and targeted approach.\nOrganization of this survey. In this paper, we present a comprehensive survey of the latest", "Based on powerful large language models, multimodal large language models demonstrate remark-\nable performance across various multimodal tasks. However, the phenomenon of hallucination\npresents a significant challenge to the practical applications of MLLMs, giving rise to undeniable\nconcerns about safety, reliability, and trustworthiness. In this comprehensive survey, we conducted\na thorough examination of hallucinations within multimodal large language models, focusing\non their underlying causes, evaluation metrics, benchmarks, and mitigation methods. Despite\nconsiderable progress, hallucination remains a complex and persistent concern that warrants ongo-\ning investigation. The challenge of hallucination in multimodal large language models remains\ncompelling, requiring continuous scrutiny and innovation. In light of these challenges, we have\noutlined several promising future directions in this burgeoning domain. Through navigating the", "Organization of this survey. In this paper, we present a comprehensive survey of the latest\ndevelopments regarding hallucinations in MLLMs. The survey is organized as follows: We begin by\nproviding sufficient context and defining concepts related to LLMs, MLLMs, hallucination, etc. Next,\nwe delve into an in-depth analysis of the factors contributing to hallucinations in MLLMs. Following\nthis, we present a set of metrics and benchmarks employed for evaluating hallucinations in MLLMs.\nWe then elaborate on a range of approaches designed to mitigate hallucinations in MLLMs. Finally,\nwe delve into the challenges and open questions that frame the current limitations and future\nprospects of this field, offering insights and delineating potential pathways for forthcoming research.\n2 DEFINITIONS\n2.1 Large Language Models\nBefore moving to multimodal large language models, it is essential to introduce the concept of large", "Hallucination of Multimodal Large Language Models: A\nSurvey\nZECHEN BAI, Show Lab, National University of Singapore, Singapore\nPICHAO WANG, Amazon Prime Video, USA\nTIANJUN XIAO, AWS Shanghai AI Lab, China\nTONG HE, AWS Shanghai AI Lab, China\nZONGBO HAN, Show Lab, National University of Singapore, Singapore\nZHENG ZHANG, AWS Shanghai AI Lab, China\nMIKE ZHENG SHOU\u2217,Show Lab, National University of Singapore, Singapore\nThis survey presents a comprehensive analysis of the phenomenon of hallucination in multimodal large\nlanguage models (MLLMs), also known as Large Vision-Language Models (LVLMs), which have demonstrated\nsignificant advancements and remarkable abilities in multimodal tasks. Despite these promising developments,\nMLLMs often generate outputs that are inconsistent with the visual content, a challenge known as hallucination,\nwhich poses substantial obstacles to their practical deployment and raises concerns regarding their reliability", "overall framework, may be promising research directions.\n6.3 Advancements in Model Architecture\nDespite recent advancements in model architectures of LLMs and MLLMs, designing effective\narchitectures specifically tailored to hallucination remains a challenge. Developing advanced model\narchitectures capable of capturing complex linguistic structures and generating coherent and con-\ntextually relevant output based on input visual content is essential for improving the performance of\nMLLMs. Future research can explore innovative architectural designs based on identified causes of\nhallucination. This includes developing stronger visual perception models, innovative cross-modal\ninteraction modules capable of transferring cross-modal information seamlessly, and novel large\nlanguage model architectures faithful to input visual content and text instructions, etc.\n6.4 Establishing Standardized Benchmarks"], "retrieved_docs_id": ["33d47ad8cc", "114f3dada8", "e1b4ac9436", "72dc971633", "c8e35c3848"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "Who wrote the 2024 survey on hallucination of multimodal large language models?\n", "true_answer": "Zechen Bai, Pichao Wang, Tianjun Xiao, Tong He, Zongbo Han, and Zheng Zhang", "source_doc": "hallucination.pdf", "source_id": "9bfe24c206", "retrieved_docs": ["Based on powerful large language models, multimodal large language models demonstrate remark-\nable performance across various multimodal tasks. However, the phenomenon of hallucination\npresents a significant challenge to the practical applications of MLLMs, giving rise to undeniable\nconcerns about safety, reliability, and trustworthiness. In this comprehensive survey, we conducted\na thorough examination of hallucinations within multimodal large language models, focusing\non their underlying causes, evaluation metrics, benchmarks, and mitigation methods. Despite\nconsiderable progress, hallucination remains a complex and persistent concern that warrants ongo-\ning investigation. The challenge of hallucination in multimodal large language models remains\ncompelling, requiring continuous scrutiny and innovation. In light of these challenges, we have\noutlined several promising future directions in this burgeoning domain. Through navigating the", "Hallucination of Multimodal Large Language Models: A\nSurvey\nZECHEN BAI, Show Lab, National University of Singapore, Singapore\nPICHAO WANG, Amazon Prime Video, USA\nTIANJUN XIAO, AWS Shanghai AI Lab, China\nTONG HE, AWS Shanghai AI Lab, China\nZONGBO HAN, Show Lab, National University of Singapore, Singapore\nZHENG ZHANG, AWS Shanghai AI Lab, China\nMIKE ZHENG SHOU\u2217,Show Lab, National University of Singapore, Singapore\nThis survey presents a comprehensive analysis of the phenomenon of hallucination in multimodal large\nlanguage models (MLLMs), also known as Large Vision-Language Models (LVLMs), which have demonstrated\nsignificant advancements and remarkable abilities in multimodal tasks. Despite these promising developments,\nMLLMs often generate outputs that are inconsistent with the visual content, a challenge known as hallucination,\nwhich poses substantial obstacles to their practical deployment and raises concerns regarding their reliability", "Hallucination of Multimodal Large Language Models: A Survey 3\ncontrast, there are very few surveys on hallucination in the field of MLLMs. To the best of our\nknowledge, there is only one concurrent work [ 76], a short survey on the hallucination problem of\nLVLMs. However, our survey distinguishes itself in terms of both taxonomy and scope. We present a\nlayered and granular classification of hallucinations, as shown in Fig. 1, drawing a clearer landscape\nof this field. Additionally, our approach does not limit itself to specific model architectures as\nprescribed in the work of [ 76], but rather dissects the causes of hallucinations by tracing back to\nvarious affecting factors. We cover a larger range of literature both in terms of paper number and\ntaxonomy structure. Furthermore, our mitigation strategies are intricately linked to the underlying\ncauses, ensuring a cohesive and targeted approach.\nOrganization of this survey. In this paper, we present a comprehensive survey of the latest", "Organization of this survey. In this paper, we present a comprehensive survey of the latest\ndevelopments regarding hallucinations in MLLMs. The survey is organized as follows: We begin by\nproviding sufficient context and defining concepts related to LLMs, MLLMs, hallucination, etc. Next,\nwe delve into an in-depth analysis of the factors contributing to hallucinations in MLLMs. Following\nthis, we present a set of metrics and benchmarks employed for evaluating hallucinations in MLLMs.\nWe then elaborate on a range of approaches designed to mitigate hallucinations in MLLMs. Finally,\nwe delve into the challenges and open questions that frame the current limitations and future\nprospects of this field, offering insights and delineating potential pathways for forthcoming research.\n2 DEFINITIONS\n2.1 Large Language Models\nBefore moving to multimodal large language models, it is essential to introduce the concept of large", "Hallucination of Multimodal Large Language Models: A Survey 19\nPreference Optimization (FDPO). FDPO uses fine-grained preferences from individual examples to\ndirectly reduce hallucinations in generated text by enhancing the model\u2019s ability to distinguish\nbetween accurate and inaccurate descriptions.\nLLaVA-RLHF [ 96] also try to involve human feedback to mitigate hallucination. It extends the\nRLHF paradigm from the text domain to the task of vision-language alignment, where human\nannotators were asked to compare two responses and pinpoint the hallucinated one. The MLLM is\ntrained to maximize the human reward simulated by an reward model. To address the potential\nissue of reward hacking ,i.e.,achieving high scores from the reward model does not necessarily lead\nto improvement in human judgements, it proposes an algorithm named Factually Augmented RLHF.\nThis algorithm calibrates the reward signals by augmenting them with additional information such\nas image captions."], "retrieved_docs_id": ["114f3dada8", "72dc971633", "33d47ad8cc", "e1b4ac9436", "92e73c053a"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What are some methods for optimizing attention mechanisms in vision transformers?\n", "true_answer": "Some methods for optimizing attention mechanisms in vision transformers include PatchMerger, DynamicViT, and Sepvit.", "source_doc": "multimodal.pdf", "source_id": "20b3b3179f", "retrieved_docs": ["UniNet [102] introduced context-aware down-sampling modules improving information accommo-\ndation by transformer and MLP operators.\nOptimization of Attention Mechanisms Methods focus on reducing computational complexity\nby introducing adaptive attention, learning sparse attention patterns, and dynamically adjusting at-\ntention mechanisms. Fayyaz et al. [135] implemented adaptive attention by scoring and adaptively\nsampling significant tokens. PatchMerger [103] extracted global information among regional to-\nkens and exchanged local self-attention with information among regional tokens via self-attention.\nDynamicViT [104] proposed an attention masking strategy to differentiably prune tokens by block-\ning interactions with other tokens. Additionally, Sepvit [105] conducted local-global information\ninteraction within and across windows using depthwise separable self-attention. These methods\ncollectively optimize attention mechanisms, enhancing computational efficiency and performance.", "B Further experiments on vision and language transformers\nThe practice of training transformer models often deviates substantially from the assumptions made\nin our theoretical analysis, and it is a priori unclear to what extent gradual rank increase behaviour\nand a low rank bias are manifested in setups more common in practical applications. To gauge the\nrelevancy of our findings we conduct experiments on popular vision and language benchmarks, using\nalgorithms and hyperparameters common in the literature. We use the stable rank of a matrix W\ngiven by\u2225W\u22252\nF\n\u2225W\u22252\n2as a smooth approximation of rank. We track the value of the stable rank for the\ndifferent attention matrices throughout training. Although we do not expect our theoretical results\nto to hold precisely in practice, we find evidence of gradual increase in stable rank, leading to a\nlow rank bias in Figures 12, 13, 15, 17 and 19. In these experiments we use off-the-shelf vision", "to conventional models like MLPs and CNNs, self-attention models employ global interactions to capture feature\nrepresentations, resulting in exceptional empirical performance.\nDespite their achievements, the mechanisms and learning processes of attention layers remain enigmatic. Recent\ninvestigations [ EGKZ22 ,SEO+22,ENM22 ,BV22 ,DCL21 ] have concentrated on specific aspects such as sparse\nfunction representation, convex relaxations, and expressive power. Expressivity discussions concerning hard-attention\n[Hah20 ] or attention-only architectures [ DCL21 ] are connected to our findings when h(\u00b7)is linear. In fact, our work\nreveals how linear hresults in attention\u2019s optimization dynamics to collapse on a single token whereas nonlinear h\nprovably requires attention to select and compose multiple tokens. This supports the benefits of the MLP layer for\nexpressivity of transformers. There is also a growing body of research aimed at a theoretical comprehension of in-context", "learning and the role played by the attention mechanism [ ASA+22,LIPO23 ,ACDS23 ,ZFB23 ,BCW+23,GRS+23].\n[SEO+22] investigate self-attention with linear activation instead of softmax, while [ ENM22 ] approximate softmax\nusing a linear operation with unit simplex constraints. Their primary goal is to derive convex reformulations for\ntraining problems grounded in empirical risk minimization (ERM). In contrast, our methodologies, detailed in equations\n(W-ERM) and (KQ-ERM), delve into the nonconvex domain.\n[MRG+20,BALA+23] offer insights into the implicit bias of optimizing transformers. Specifically, [ MRG+20]\nprovide empirical evidence that an increase in attention weights results in a sparser softmax, which aligns with our\ntheoretical framework. [ BALA+23] study incremental learning and furnish both theory and numerical evidence that\nincrements of the softmax attention weights ( KQ\u22a4) are low-rank. Our theory aligns with this concept, as the SVM", "presented in Table 7. As the number of attention heads\nincreases, some of the GEMMS inside the self-attention\nlayer become smaller and also the number of elements in\nthe self attention softmax increases. This results in a slight\ndecrease in scaling ef\ufb01ciency. Future research should be\nwary of this hyperparameter to design large transformer\nmodels that balance model speed and model accuracy.\nD.2. Strong Scaling\nOur model parallelism is primarily designed to enable train-\ning models larger than what can \ufb01t in the memory of a"], "retrieved_docs_id": ["e7939ae097", "7184e5eb62", "bfb96ebe0c", "d8e0f51d42", "7796a06fa5"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What is the objective of the pre-training phase in cross-modal feature alignment?\n", "true_answer": "The objective of the pre-training phase is to achieve cross-modal feature alignment between models from each modality.", "source_doc": "hallucination.pdf", "source_id": "0be0058571", "retrieved_docs": ["pacities. To improve the alignment performance, it is crucial\nto design effective training strategies and select appropriate\npre-training data [829, 830]. Existing work mainly employs\nthe following strategies for cross-modality alignment: (1) if\nthe number of image-text pairs is not sufficiently large ( e.g.,\nless than 1M), it is often suggested to only update the\nconnection module [831]; (2) if the training data includes\nhigh-quality text corpora [832] or image-text pairs with\nfine-grained annotations [833], fine-tuning the LLM can be\nconducted to boost the performance; (3) if the number of\nimage-text pairs is very large ( e.g., about 1B), fine-tuning\nthe vision encoder is also plausible [829, 830], but the benefit\nremains further verification.\n\u2022Visual instruction tuning. After vision-language pre-\ntraining, the second-stage training, i.e., visual instruction\ntuning, aims to improve the instruction-following and task-\nsolving abilities of MLLMs. Generally, the input of vi-", "generated content remains consistent and contextually relevant to the input modality requires\nsophisticated techniques for capturing and modeling cross-modal relationships. The direction of\ncross-modal alignment encompasses both MLLMs training and hallucination evaluation. Regarding\ntraining, future research should explore methods for aligning representations between different\nmodalities. Achieving this goal may involve designing more advanced architectures, introducing\nadditional learning objectives [ 52], or incorporating diverse supervision signals [ 16]. Regarding\nevaluation, cross-modal consistency checking has been a long-standing topic, ranging from multi-\nmodal understanding [ 66,88] to text-to-image generation [ 13,17]. Drawing on proven experiences\nfrom these domains to improve the assessment of MLLM hallucination, or unifying them into an\noverall framework, may be promising research directions.\n6.3 Advancements in Model Architecture", "benchmarks employed to assess the performance of these models. The discussion highlights the\nimportance of diverse and high-quality datasets in achieving robust and accurate MLLMs, as well\nas the various strategies employed to generate and refine these datasets. Furthermore, we present a\ncomprehensive comparison of MLLM performance across established benchmarks, emphasizing the\nneed for a thorough evaluation to ensure the effectiveness of these models in real-world applications.\n6.1 Pre-Training Data\nPre-training data primarily serve two critical objectives: (1) promoting the integration of various\nmodalities and (2) conveying comprehensive knowledge. Large-scale image-caption pair datasets\nnaturally fulfill these requirements. Firstly, they predominantly originate from the internet, provid-\ning an extensive data volume with a broad knowledge coverage. Secondly, the direct alignment\nbetween the two modalities is beneficial for training modality projectors. However, captions in such", "alignment between different modalities, fine-tune the models on specific tasks, and minimize the\ncomputational and parameter costs associated with the transfer learning process. Figure.14 presents\na schematic representation of the different training stages involved in the development of efficient\nMLLMs. In the following subsections, we delve deeper into each of these aspects and discuss their\nsignificance in the context of efficient MLLMs.\n5.1 Pre-Training\nIn the pre-training stage, the primary focus is on aligning different modalities in the embedding\nspace, enabling the language model to accept inputs from various modalities. This phase of training\nmainly involves large-scale text-paired data, predominantly in the form of image-caption pairs. An\nimage-caption pair (X, Y )is typically expanded into a single-turn conversation (Xinstruct , Xa),\nwhere Xinstruct contains an image Xvand a randomly sampled question Xqfrom a set of instruc-", "Figure 14: Training stages of efficient MLLMs.\nusing a standard cross-entropy loss function:\nmax\n\u03b8LX\ni=1logp\u03b8(xi|Xv, Xinstruct , Xa,<i), (4)\nwhere Lis the length of Xaand\u03b8denotes the trainable parameters. In order to better align different\nmodalities of knowledge and avoid catastrophic forgetting during the pre-training stage, \u03b8typically\nincludes only a learnable modality interface, i.e., a vision-language projector.\nWhich part to unfreeze? Considering that only training the connector may not well align the\nvision and text information when using SLMs, TinyLlava[23] also opt to partially freeze pre-\ntrained modules (i.e. vision encoder and SLM) to activate more parameters for learning alignment.\nVILA[49] reveals that updating the base LLM throughout the pre-training stage is essential to in-\nheriting some of the appealing LLM properties like in-context learning. ShareGPT4V[55] found\nthat unfreezing more parameters, particularly in the latter half of the vision encoder\u2019s layers, proves"], "retrieved_docs_id": ["687ba2bcbe", "83c3718d9d", "8f79f68811", "3dbb490826", "1bd741e7c9"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What is one example of a task-specific dataset used to derive high-quality IT data?\n", "true_answer": "A sample from VQA (Visual Question Answering) datasets, where the input includes an image and a natural language question, and the output is the text-based answer to the question based on the image, is one example of a task-specific dataset used to derive high-quality IT data.", "source_doc": "multimodal.pdf", "source_id": "db45826cee", "retrieved_docs": ["A summary of frequently used pre-training datasets can be found in Table.3. High-quality IT data\ncan be derived from task-specific datasets. For instance, consider a sample from VQA datasets where\nthe input includes an image and a natural language question, and the output is the text-based answer\nto the question based on the image. This could easily form the multimodal input and response\nof the instruction sample. The instructions, or task descriptions, can be obtained either through\nmanual creation or semi-automatic generation with the help of GPT. In addition to utilizing publicly\navailable task-specific datasets, SPHINX-X[14] assembles a dataset focused on OCR from a wide\nrange of PDF data sourced from the internet. Specifically, it begins by gathering a large-scale PDF\ndataset from the web. It then obtains the rendering results of each page in the PDF file, while\nsimultaneously saving all text annotations along with their respective bounding boxes. Ultimately,", "dataset was constructed originally.\nWe can roughly divide the 29 benchmark tasks into four categories:\n\u2022Wholesale contamination \u2013 Datasets where a signi\ufb01cant portion of the dataset itself appears in the\nopen web. We consider these contaminated. Examples: SQuADv2, Winograd.\n36", "BLOOM\ncontextualize these efforts by providing a brief summary of the steps taken to compile the\ncorpus. For more detailed documentation of the overall dataset curation process and its\noutcomes, we refer the reader to Lauren\u00b8 con et al. (2022).\nMotivation The disconnect between developers and (in)voluntary users of the technology\nmentioned in Section 2 is particularly apparent in the curation of the datasets that have\nsupported recent large-scale machine learning projects, where intentional \u201cData work\u201d is\ngenerally under-valued (Sambasivan et al., 2021). In the context of LLMs, this tendency\nis exemplified by a range of heuristics-based filtering approaches that prioritize getting as\nmuch \u201chigh-quality\u201d data for as little cost as possible over engaging with the needs\u2014and\nrights\u2014of data subjects, where quality is commonly defined as maximizing performance on\ndownstream tasks while occasionally removing content deemed offensive by the developers.", "or all papers or systems that use the\ndataset?No.\nWhat (other) tasks could the dataset\nbe used for?The large-scale task-agnostic nature of the dataset makes it suitable\nfor many NLP tasks such as language model pretraining or question\nanswering.\nIs there anything about the com-\nposition of the dataset or the\nway it was collected and prepro-\ncessed/cleaned/labeled that might im-\npact future uses?The dataset is static in nature and thus will become progressively more\n\u201cstale\u201d. It will for example not re\ufb02ect new language and norms that evolve\nover time. However, due to the nature of the dataset it is relatively cheap\nto collect an up-to-date version of the same dataset.\nAre there tasks for which the dataset\nshould not be used?This model should not be used for any of the unacceptable language\nmodel use cases, e.g., generation of toxic speech.\nDistribution\n71", "and algorithms [ RSR+19,LOG+19,YDY+19,LCG+19]. However, a major limitation to this approach is that while\nthe architecture is task-agnostic, there is still a need for task-speci\ufb01c datasets and task-speci\ufb01c \ufb01ne-tuning: to achieve\nstrong performance on a desired task typically requires \ufb01ne-tuning on a dataset of thousands to hundreds of thousands\nof examples speci\ufb01c to that task. Removing this limitation would be desirable, for several reasons.\nFirst, from a practical perspective, the need for a large dataset of labeled examples for every new task limits the\napplicability of language models. There exists a very wide range of possible useful language tasks, encompassing\nanything from correcting grammar, to generating examples of an abstract concept, to critiquing a short story. For many\nof these tasks it is dif\ufb01cult to collect a large supervised training dataset, especially when the process must be repeated\nfor every new task."], "retrieved_docs_id": ["db45826cee", "cdc903725f", "9090b9d235", "93d281fb52", "2e4df88547"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How many image-question pairs does MERLIM contain and what is its focus?\n", "true_answer": "MERLIM contains over 279K image-question pairs and has a strong focus on detecting cross-modal hallucinations.", "source_doc": "hallucination.pdf", "source_id": "198c99577c", "retrieved_docs": ["including object recognition, instance counting, and identifying object-to-object relationships.\nMERLIM contains over 279K image-question pairs, and has a strong focus on detecting cross-modal\nhallucinations. Interestingly, when organizing the data, a set of edited images is intentionally added.\nBased on the original image, an inpainting strategy is employed to remove one object instance in\nthe image. With this original-edited image pair, one can compare the output of the target MLLM\nand identify the hallucinated objects that lack visual grounding.\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024.", "randomly samples 100 images from Visual Genome to form a benchmark. In evaluation, GPT-4\nis utilized to parse the captions generated by MLLMs and extract objects. Additionally, this work\nintroduces the \"coverage\" metric on top of CHAIR to ensure that the captions are detailed enough.\nThis metric computes the ratio of objects in the caption that match the ground truth to the total\nnumber of ground truth objects. It additionally records the average number of objects as well as\nthe average length of captions as auxiliary metric. Compared with CHAIR, CCEval employs more\ndiverse objects, as reflected in the source of ground truth (Visual Genome vs. COCO) and caption\nparsing (GPT-4 vs. rule-based tool).\nMERLIM [ 100]MERLIM ( Multi-modal Evaluation benchma Rk for Large Image-language\nModels) is a test-bed aimed at empirically evaluating MLLMs on core computer vision tasks,\nincluding object recognition, instance counting, and identifying object-to-object relationships.", "with respect to an image.\n4.1.1 Evaluation Setup\nWe evaluate the caption generation on MS COCO Caption [ LMB+14], and Flickr30k [ YLHH14 ].\nWe use the test set of COCO Karpathy split [KFF17 ], which re-partitions the train2014 and val2014\nimages [ LMB+14] into 113,287, 5,000, and 5,000 for the training set, validation set, and test set,\nrespectively. We conduct an evaluation on Flickr30k\u2019s Karpathy split test set. The image resolution\nis 224 \u00d7224. We use beam search to generate the captions, and the beam size is 5. In the few-shot\nsettings, we randomly sample demonstrations from the training set. We use COCOEvalCap4to\ncompute CIDEr [ VLZP15 ] and SPICE [ AFJG16 ] scores as the evaluation metrics. We prompt\nKOSMOS -1 with \u201cAn image of\u201d for zero-shot and few-shot caption generation experiments.\nFor visual question-answering tasks, we evaluate zero-shot and few-shot results on test-dev set of\nVQAv2 [ GKSS+17] and test-dev set of VizWiz [ GLS+18], respectively. The resolution of images is", "We use the ambiguity annotations of Min et al.\n(2020) to create a subset unambiguous questions.\nExperiments on this unambiguous subset of the\ndata show similar results and conclusions as the\nexperiments on the full questions collection (Fig-\nure 12).\n1st 5th 10th 15th 20th\nPosition of Document with the Answer60657075Accuracy\n20 T otal Retrieved Documents \n(~4K tokens, unambiguous questions)\nclaude-1.3\nclaude-1.3-100k\ngpt-3.5-turbo-0613gpt-3.5-turbo-16k-0613\nmpt-30b-instruct\nlongchat-13b-16kFigure 12: Language model performance on a unam-\nbiguous subset of questions.\nB Random Distractors in\nMulti-Document QA\nWe also run multi-document question answering\nexperiments with random Wikipedia documents as\ndistractors, which allows us to ablate the impact\nof retrieved distractors (hard negatives). Note that\nin this setting, the the document containing the an-\nswer can often be identified with simple heuristics\n(e.g., lexical overlap with the query). Figure 13", "The Visual Dependent questions are defined as questions that do not have an affirmative answer\nwithout the visual context. This setting aims to evaluate visual commonsense knowledge and visual\nreasoning skills. The Visual Supplement questions can be answered without the visual input; the\nvisual component merely provides supplemental information or corrections. This setting is designed\nto evaluate visual reasoning ability and the balance between parametric memory (language prior)\nand image context. This division provides a new perspective for understanding and diagnosing\nMLLMs.\nCCEval [ 123]CCEval focuses on the hallucination evaluation of detailed captions. Traditional\ncaption-based evaluation benchmarks and metrics, like CHAIR, are known to favor short captions.\nHowever, short captions often lack detail and contain less information. To address this issue, CCEval\nrandomly samples 100 images from Visual Genome to form a benchmark. In evaluation, GPT-4"], "retrieved_docs_id": ["198c99577c", "6e78496733", "949861762a", "4b4dfee891", "4e7d38fc3d"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How much does domain-specific data improve the retriever hit rate in the ChipNeMo system?\n", "true_answer": "The retriever hit rate is improved by 30% using domain-specific data in the ChipNeMo system.", "source_doc": "ChipNemo.pdf", "source_id": "df0b9868f2", "retrieved_docs": ["ChipNeMo: Domain-Adapted LLMs for Chip Design\ndomain-specific data improves the retriever hit rate\nby 30% over a pre-trained state-of-the-art retriever, in\nturn improving overall quality of RAG responses.\nThe paper is organized as follows. Section 2 outlines do-\nmain adaptation and training methods used including the\nadapted tokenizer, DAPT, model alignment, and RAG. Sec-\ntion 3 describes the experimental results including human\nevaluations for each application. Section 4 describes rel-\nevant LLM methods and other work targeting LLMs for\nchip design. Finally, detailed results along with additional\nmodel training details and examples of text generated by the\napplication use-cases are illustrated in the Appendix.\n2. ChipNeMo Domain Adaptation Methods\nChipNeMo implements multiple domain adaptation tech-\nniques to adapt LLMs to the chip design domain. These\ntechniques include domain-adaptive tokenization for chip\ndesign data, domain adaptive pretraining with large corpus", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ntask assignnment. Participants are tasked with rating the\nmodel\u2019s performance on a 7-point Likert scale for each of\nthese three assignments. The results can be found in Fig-\nure 10. Although the GPT-4 model excels in all three tasks,\noutperforming both our ChipNeMo-70B-Steer model and\nthe LLaMA2-70B-Chat model, ChipNeMo-70B-Steer does\nexhibit enhancements compared to the off-the-shelf LLaMA\nmodel of equivalent size. We attribute the comparatively\nlower improvements in summarization tasks resulting from\nour domain-adaptation to the limited necessity for domain-\nspecific knowledge in summarization compared to other\nuse-cases.\n4. Related Works\nMany domains have a significant amount of proprietary data\nwhich can be used to train a domain-specific LLM. One ap-\nproach is to train a domain specific foundation model from\nscratch, e.g., BloombergGPT(Wu et al., 2023) for finance,\nBioMedLLM(Venigalla et al., 2022) for biomed, and Galac-", "LLM\u2019s Preference\nIn the RAG pipeline, even if we employ the above techniques\nto enhance the retrieval hit rate, it may still not improve the\nfinal effect of RAG, because the retrieved documents may not\nbe what LLM needs. Thus, this section introduces two meth-\nods to align the outputs of the retriever and the preferences of\nthe LLM.\nLLM supervised training Many works leverage various\nfeedback signals from large language models to fine-tune em-\nbedding models. AAR [Yuet al. , 2023b ]provides supervi-\nsory signals for a pre-trained retriever through an encoder-\ndecoder architecture LM. By determining the LM\u2019s preferred\ndocuments through FiD cross-attention scores, the retriever\nis then fine-tuned with hard negative sampling and standard\ncross-entropy loss. Ultimately, the fine-tuned retriever can\ndirectly be used to enhance unseen target LMs, thereby per-\nforming better in the target task. The training loss of retriever\nas:\n\u03b6=X\nqX\nd+\u2208Da+X\nd\u2212\u2208D\u2212l\u0000\nf\u0000\nq, d+\u0001\n, f\u0000\nq, d\u2212\u0001\u0001\n(1)", "useful manner. An ablation study on inclusion of domain\ninstructional data for model alignment and the application\nof retrieval is provided in Appendix A.9.\nFigure 9: EDA Script Generation Evaluation Results, Single Gen-\neration (temperature=0), Human Evaluated 0-10 Point Scale.\nOur non-domain models performed better on our Tcl tool\nthan the Python tool, but the trend for our domain trained\nmodel was the opposite. We suspect this was due to the\nproprietary nature of our Python tool. It was difficult for\ngeneral LLMs to perform well on our Python tool bench-\nmark without knowledge of the APIs. Since ChipNeMo is\ntrained with domain data, the inherent python coding ability\nof the base model allows ChipNeMo-70B-Steer to perform\nbetter. This again highlights the importance of DAPT for\nlow-volume or proprietary programming languages.\nFigure 10: Bug Summarization and Analysis Evaluation Results, 7\npoint Likert scale.\n3.7. Bug Summarization and Analysis", "uations, more than 70% correctness on the generation\nof simple EDA scripts, and expert evaluation ratings\nabove 5 on a 7 point scale for summarizations and\nassignment identification tasks.\n\u2022 Domain-adapted ChipNeMo models dramatically out-\nperforms all vanilla LLMs evaluated on both multiple-\nchoice domain-specific AutoEval benchmarks and hu-\nman evaluations for applications.\n\u2022Using the SteerLM alignment method (Dong et al.,\n2023) over traditional SFT improves human evaluation\nscores for the engineering assistant chatbot by 0.62\npoints on a 7 point Likert scale.\n\u2022SFT on an additional 1.4Kdomain-specific instruc-\ntions significantly improves the model\u2019s proficiency at\ngenerating correct EDA tool scripts by 18%.\n\u2022Domain-adaptive tokenization reduce domain data to-\nken count by up to 3.3%without hurting effectiveness\non applications.\n\u2022Fine-tuning our ChipNeMo retrieval model with\n2"], "retrieved_docs_id": ["df0b9868f2", "74fe22ec46", "6b0d47093c", "f1e5db7ca9", "c7d05c4b43"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does fine-tuning retrievers and generators in the downstream phase improve information retrieval?\n", "true_answer": "Fine-tuning retrievers and generators in the downstream phase primarily enhances information retrieval in open-domain question-answering tasks.", "source_doc": "RAG.pdf", "source_id": "011ee221ab", "retrieved_docs": ["retrieved information. In RAG, the generator\u2019s input includes\nnot only traditional contextual information but also relevant\ntext segments obtained through the retriever. This allows the\ngenerator to better comprehend the context behind the ques-\ntion and produce responses that are more information-rich.\nFurthermore, the generator is guided by the retrieved text toensure consistency between the generated content and the re-\ntrieved information. It is the diversity of input data that has\nled to a series of targeted efforts during the generation phase,\nall aimed at better adapting the large model to the input data\nfrom queries and documents. We will delve into the intro-\nduction of the generator through aspects of post-retrieval pro-\ncessing and fine-tuning.\n5.1 How Can Retrieval Results be Enhanced via\nPost-retrieval Processing?\nIn terms of untuned large language models, most studies\nrely on well-recognized large language models like GPT-", "affected by the position of the relevant information\nin the input context.\nWe first experiment with multi-document ques-\ntion answering, which requires models to reason\nover provided documents to find relevant informa-\ntion and use it to answer a given question; this task\nmimics the retrieval-augmented generation setup\nunderlying many commercial generative search and\nquestion answering applications (e.g., Bing Chat).\nIn this setting, we control (i) the input context\nlength by changing the number of documents in\nthe input context (akin to retrieving more or less\ndocuments in retrieval-augmented generation), and\n(ii) control the position of the relevant information\nwithin the input context by changing the order of\nthe documents to place the relevant document at\nthe beginning, middle or end of the context.\nWe find that changing the position of relevant\ninformation in the input context can substantially\naffect model performance, indicating that current", "domain question-answering tasks. Concerning retriever fine-\ntuning, REPlUG [Shiet al. , 2023 ]treats the language model\n(LM) as a black box and enhances it through an adjustable re-\ntrieval model. By obtaining feedback from the black-box lan-\nguage model through supervised signals, REPLUG improves\nthe initial retrieval model. UPRISE [Cheng et al. , 2023a ], on\nthe other hand, fine-tunes retrievers by creating a lightweight\nand versatile retriever through fine-tuning on diverse task\nsets. This retriever can automatically provide retrieval\nprompts for zero-shot tasks, showcasing its universality and\nimproved performance across tasks and models.\nSimultaneously, methods for fine-tuning generators in-\nclude Self-Mem [Cheng et al. , 2023b ], which fine-tunes the\ngenerator through a memory pool of examples, and\nSelf-RAG [Asai et al. , 2023b ], which satisfies active re-\ntrieval needs by generating reflection tokens. The RA-\nDIT[Linet al. , 2023 ]method fine-tunes both the generator", "tion may have a significant impact on the model\u2019s understand-\ning, especially for smaller models. In such scenarios, fine-\ntuning the model to adapt to the input of query + retrieved\ndocuments becomes particularly important. Specifically, be-\nfore providing the input to the fine-tuned model, there is usu-\nally post-retrieval processing of the documents retrieved by\nthe retriever. It is essential to note that the method of fine-\ntuning the generator in RAG is essentially similar to the gen-\neral fine-tuning approach for LLMs. Here, we will brieflyintroduce some representative works, including data (format-\nted/unformatted) and optimization functions.\nGeneral Optimization Process\nRefers to the training data containing pairs of (input, output),\naiming to train the model\u2019s ability to generate output y given\ninput x. In the work of Self-mem [Cheng et al. , 2023b ], a\nrelatively classical training process is employed. Given in-\nput x, relevant documents z are retrieved (selecting Top-1", "knowledge-intensive tasks, allowing the creation of domain-\nspecific models through training on domain-specific corpora.\nHowever, there are drawbacks, including the requirement for\na substantial amount of pre-training data and larger training\nresources, as well as the issue of slower update speeds. Espe-\ncially as model size increases, the cost of retrieval-enhanced\ntraining becomes relatively higher. Despite these limitations,\nthis method demonstrates notable characteristics in terms of\nmodel robustness. Once trained, retrieval-enhanced models\nbased on pure pre-training eliminate the need for external li-brary dependencies, enhancing both generation speed and op-\nerational efficiency.\nFine-tuning Stage\nDuring the downstream fine-tuning phase, researchers have\nemployed various methods to fine-tune retrievers and gener-\nators for improved information retrieval, primarily in open-\ndomain question-answering tasks. Concerning retriever fine-"], "retrieved_docs_id": ["fefa202c19", "dfe81b1fca", "662eb558d5", "5e50b58781", "011ee221ab"], "reranker_type": "None", "search_type": "vector", "rr": 0.2, "hit": 1}, {"question": "How does the input to the generator differ in a RAG model compared to typical Large Language Model (LLM) generation tasks?\n", "true_answer": "In a RAG (Retriever-Augmented Generator) model, the input to the generator includes not only a query but also various documents retrieved by the retriever, whereas in typical LLM generation tasks, the input is usually just a query.", "source_doc": "RAG.pdf", "source_id": "7fabdba415", "retrieved_docs": ["information retrieval process, providing more effective and\naccurate inputs for subsequent LLM processing.\n5.2 How to Optimize a Generator to Adapt Input\nData?\nIn the RAG model, the optimization of the generator is a cru-\ncial component of the architecture. The generator\u2019s task is\nto take the retrieved information and generate relevant text,\nthereby providing the final output of the model. The goal of\noptimizing the generator is to ensure that the generated text is\nboth natural and effectively utilizes the retrieved documents,\nin order to better satisfy the user\u2019s query needs.\nIn typical Large Language Model (LLM) generation tasks,\nthe input is usually a query. In RAG, the main difference\nlies in the fact that the input includes not only a query\nbut also various documents retrieved by the retriever (struc-\ntured/unstructured). The introduction of additional informa-\ntion may have a significant impact on the model\u2019s understand-", "Retrieval-Augmented Generation for Large Language Models: A Survey\nYunfan Gao1,Yun Xiong2,Xinyu Gao2,Kangxiang Jia2,Jinliu Pan2,Yuxi Bi3,Yi\nDai1,Jiawei Sun1and Haofen Wang1,3\u2217\n1Shanghai Research Institute for Intelligent Autonomous Systems, Tongji University\n2Shanghai Key Laboratory of Data Science, School of Computer Science, Fudan University\n3College of Design and Innovation,Tongji University\ngaoyunfan1602@gmail.com\nAbstract\nLarge language models (LLMs) demonstrate pow-\nerful capabilities, but they still face challenges in\npractical applications, such as hallucinations, slow\nknowledge updates, and lack of transparency in\nanswers. Retrieval-Augmented Generation (RAG)\nrefers to the retrieval of relevant information from\nexternal knowledge bases before answering ques-\ntions with LLMs. RAG has been demonstrated\nto significantly enhance answer accuracy, reduce\nmodel hallucination, particularly for knowledge-\nintensive tasks. By citing sources, users can verify", "retrieved information. In RAG, the generator\u2019s input includes\nnot only traditional contextual information but also relevant\ntext segments obtained through the retriever. This allows the\ngenerator to better comprehend the context behind the ques-\ntion and produce responses that are more information-rich.\nFurthermore, the generator is guided by the retrieved text toensure consistency between the generated content and the re-\ntrieved information. It is the diversity of input data that has\nled to a series of targeted efforts during the generation phase,\nall aimed at better adapting the large model to the input data\nfrom queries and documents. We will delve into the intro-\nduction of the generator through aspects of post-retrieval pro-\ncessing and fine-tuning.\n5.1 How Can Retrieval Results be Enhanced via\nPost-retrieval Processing?\nIn terms of untuned large language models, most studies\nrely on well-recognized large language models like GPT-", "complement each other, enhancing the model\u2019s capabilities at\ndifferent levels. In certain situations, combining these two\ntechniques can achieve optimal model performance. The en-\ntire process of optimizing with RAG and fine-tuning may re-\nquire multiple iterations to achieve satisfactory results.\nExisting research has demonstrated significant ad-\nvantages of Retrieval-Augmented Generation (RAG)\ncompared to other methods for optimizing large lan-\nguage models [Shuster et al. , 2021, Yasunaga et al. , 2022,\nWang et al. , 2023c, Borgeaud et al. , 2022 ]:\n\u2022 RAG improves accuracy by associating answers with ex-\nternal knowledge, reducing hallucination issues in lan-\nguage models and making generated responses more ac-\ncurate and reliable.\n\u2022 The use of retrieval techniques allows the identifica-\ntion of the latest information. Compared to traditionallanguage models relying solely on training data, RAG\nmaintains the timeliness and accuracy of responses.", "intensive tasks. By citing sources, users can verify\nthe accuracy of answers and increase trust in model\noutputs. It also facilitates knowledge updates\nand the introduction of domain-specific knowl-\nedge. RAG effectively combines the parameter-\nized knowledge of LLMs with non-parameterized\nexternal knowledge bases, making it one of the\nmost important methods for implementing large\nlanguage models. This paper outlines the develop-\nment paradigms of RAG in the era of LLMs, sum-\nmarizing three paradigms: Naive RAG, Advanced\nRAG, and Modular RAG. It then provides a sum-\nmary and organization of the three main compo-\nnents of RAG: retriever, generator, and augmenta-\ntion methods, along with key technologies in each\ncomponent. Furthermore, it discusses how to eval-\nuate the effectiveness of RAG models, introducing\ntwo evaluation methods for RAG, emphasizing key\nmetrics and abilities for evaluation, and presenting\nthe latest automatic evaluation framework. Finally,"], "retrieved_docs_id": ["7fabdba415", "af911eac69", "fefa202c19", "72cb2b4f23", "4fffd3dc2b"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "What is one example of an Architecture Design Method used to create compact models?\n", "true_answer": "One example of an Architecture Design Method is Reformer, which introduces locality-sensitive hashing in attention mechanisms to reduce complexity and uses reversible residual layers to store activations more efficiently.", "source_doc": "multimodal.pdf", "source_id": "82a6543862", "retrieved_docs": ["3.1 Compact Architecture\nCompact Architecture refers to the design of lightweight and efficient models while maintaining high\nperformance in downstream tasks. It encompasses various strategies and methodologies to reduce\nmodel size, computational complexity, and memory footprint without compromising performance.\nThese strategies can be broadly categorized into three categories, 1) Architecture Design Methods,\n2) Architecture Search Methods, and 3) Optimization of Attention Mechanisms Methods.\nArchitecture Design Methods involve creating new architectures [133] or adjusting existing\nones [134] to achieve compactness without sacrificing performance. For example, Reformer [96]\nintroduced locality-sensitive hashing in attention mechanisms to reduce complexity, while also\nemploying reversible residual layers to store activations more efficiently. Furthermore, Efficient-\nFormer [97] analyzed ViT-based model architectures and operators, introducing a dimension-", "produce a collection called xP3mt. Further details on the prompt collection for xP3 and\nxP3mt are given in Muennighoff et al. (2022b).\n3.2 Model Architecture\nThis section discusses our design methodology and the architecture of the BLOOM model.\nIn-depth studies and experiments can be found in Le Scao et al. (2022) and Wang et al.\n(2022a). We first review our design methodology, then motivate our choice of training a\ncausal decoder-only model. Finally, we justify the ways that our model architecture deviates\nfrom standard practice.\n3.2.1 Design Methodology\nThe design spaceof possible architectures is immense, making exhaustive explorationimpos-\nsible. One option would be to exactly replicate the architecture of an existing large language\nmodel. On the other hand, a great deal of work on improving existing architectures has\nseen relatively little adoption (Narang et al., 2021); adopting some of these recommended", "larly to sliding window techniques (Press et al., 2020), this\napproach doubles the cost of inference but improves results.\n2.4. Motivation\nHaving described the model, we brie\ufb02y discuss the motiva-\ntion behind some of the architectural choices.\nWhy is the local model needed? Many of the ef\ufb01ciency\nadvantages of the MEGABYTE design could be realized", "seen relatively little adoption (Narang et al., 2021); adopting some of these recommended\npractices could yield a significantly better model. We take a middle ground and focus on\nmodel families that have been shown to scale well, and that have reasonable support in\npublicly available tools and codebases. We ablate components and hyperparameters of the\nmodels, seeking to make the best use of our final compute budget.\nExperimental Design for Ablations One of the main draws of LLMs has been their\nability to perform tasks in a \u201czero/few-shot\u201d way: large enough models can perform novel\ntasks simply from in-context instructions and examples (Radford et al., 2019), without ded-\n16.github.com/bigscience-workshop/promptsource\n14", "Published as a conference paper at ICLR 2022\nTable 2: Results of compressing an already compact model. The original task-speci\ufb01c models are\ndirectly downloaded from Huggingface pretrained models. Our FWSVD successfully reduces more\nparameters from all the compact models, while achieving the same level of accuracy. (ft: \ufb01ne-tuning)\nOriginal Compact Model ( St) Path-3 Compression ( St\u2192Stf)\nModel-Task #Param. Perf. #Param. SVD SVD+ft. FWSVD FWSVD+ft.\nTinyBERT-STSB 14.4M (7.8x) 87.5 11.8M (-18%) 73.8 86.1 84.9 88.0\nMiniLM-CoNLL 22.7M (4.8x) 88.5 18.4M (-19%) 12.5 88.0 70.1 88.6\nMobileBERT-MNLI 24.6M (4.4x) 83.6 22.5M (-9%) 36.4 81.9 51.1 82.5\nDistillBERT-MRPC 66.9M (1.6x) 88.7 46.7M (-30%) 0.0 83.4 67.9 89.0\nTable 3: Results of compressing an already compact model. This table compresses ALBERT (Lan\net al., 2019), which uses the parameter-sharing strategy to create the compact model. FWSVD pre-"], "retrieved_docs_id": ["82a6543862", "3dd09e5931", "8bd6c24a14", "89d315a0af", "31f8ee913f"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How can hallucination capabilities of large language models be used to improve human user experiences?\n", "true_answer": "Hallucination capabilities can be leveraged to enhance user experiences and enable new use cases, such as integrating hallucination to inspire creative ideas in real-world applications or optimizing the models for human experiences rather than specific cross-modal benchmarks.", "source_doc": "hallucination.pdf", "source_id": "dfb6343eae", "retrieved_docs": ["Based on powerful large language models, multimodal large language models demonstrate remark-\nable performance across various multimodal tasks. However, the phenomenon of hallucination\npresents a significant challenge to the practical applications of MLLMs, giving rise to undeniable\nconcerns about safety, reliability, and trustworthiness. In this comprehensive survey, we conducted\na thorough examination of hallucinations within multimodal large language models, focusing\non their underlying causes, evaluation metrics, benchmarks, and mitigation methods. Despite\nconsiderable progress, hallucination remains a complex and persistent concern that warrants ongo-\ning investigation. The challenge of hallucination in multimodal large language models remains\ncompelling, requiring continuous scrutiny and innovation. In light of these challenges, we have\noutlined several promising future directions in this burgeoning domain. Through navigating the", "Hallucination of Multimodal Large Language Models: A Survey 23\nrecollection of its training documents, most of the time the result goes someplace useful. It\u2019s only\nwhen the dreams enter deemed factually incorrect territory that we label them as \u2019hallucinations\u2019.\nFrom this perspective, leveraging hallucination capabilities as a feature in downstream applications\npresents exciting opportunities for enhancing user experiences and enabling new use cases. As\nhumans are the end-users of these models, the primary goal is to enrich human user experiences.\nFuture research may switch the optimization objective from specific cross-modal benchmarks to\nhuman experience. For example, Some content may cause hallucinations but will not affect the\nuser experience, while some content may. Alternatively, integrating hallucination to inspire more\ncreative ideas in real-world applications could also be intriguing.\n6.6 Enhancing Interpretability and Trust", "Hallucination of Multimodal Large Language Models: A\nSurvey\nZECHEN BAI, Show Lab, National University of Singapore, Singapore\nPICHAO WANG, Amazon Prime Video, USA\nTIANJUN XIAO, AWS Shanghai AI Lab, China\nTONG HE, AWS Shanghai AI Lab, China\nZONGBO HAN, Show Lab, National University of Singapore, Singapore\nZHENG ZHANG, AWS Shanghai AI Lab, China\nMIKE ZHENG SHOU\u2217,Show Lab, National University of Singapore, Singapore\nThis survey presents a comprehensive analysis of the phenomenon of hallucination in multimodal large\nlanguage models (MLLMs), also known as Large Vision-Language Models (LVLMs), which have demonstrated\nsignificant advancements and remarkable abilities in multimodal tasks. Despite these promising developments,\nMLLMs often generate outputs that are inconsistent with the visual content, a challenge known as hallucination,\nwhich poses substantial obstacles to their practical deployment and raises concerns regarding their reliability", "overall framework, may be promising research directions.\n6.3 Advancements in Model Architecture\nDespite recent advancements in model architectures of LLMs and MLLMs, designing effective\narchitectures specifically tailored to hallucination remains a challenge. Developing advanced model\narchitectures capable of capturing complex linguistic structures and generating coherent and con-\ntextually relevant output based on input visual content is essential for improving the performance of\nMLLMs. Future research can explore innovative architectural designs based on identified causes of\nhallucination. This includes developing stronger visual perception models, innovative cross-modal\ninteraction modules capable of transferring cross-modal information seamlessly, and novel large\nlanguage model architectures faithful to input visual content and text instructions, etc.\n6.4 Establishing Standardized Benchmarks", "Organization of this survey. In this paper, we present a comprehensive survey of the latest\ndevelopments regarding hallucinations in MLLMs. The survey is organized as follows: We begin by\nproviding sufficient context and defining concepts related to LLMs, MLLMs, hallucination, etc. Next,\nwe delve into an in-depth analysis of the factors contributing to hallucinations in MLLMs. Following\nthis, we present a set of metrics and benchmarks employed for evaluating hallucinations in MLLMs.\nWe then elaborate on a range of approaches designed to mitigate hallucinations in MLLMs. Finally,\nwe delve into the challenges and open questions that frame the current limitations and future\nprospects of this field, offering insights and delineating potential pathways for forthcoming research.\n2 DEFINITIONS\n2.1 Large Language Models\nBefore moving to multimodal large language models, it is essential to introduce the concept of large"], "retrieved_docs_id": ["114f3dada8", "dfb6343eae", "72dc971633", "c8e35c3848", "e1b4ac9436"], "reranker_type": "None", "search_type": "vector", "rr": 0.5, "hit": 1}, {"question": "What optimization objective is used during model alignment after domain-adaptive pretraining in ChipNeMo?\n", "true_answer": "An autoregressive optimization objective is used during model alignment after domain-adaptive pretraining in ChipNeMo.", "source_doc": "ChipNemo.pdf", "source_id": "a5a7c4ceb0", "retrieved_docs": ["ChipNeMo: Domain-Adapted LLMs for Chip Design\nour application of a low learning rate.\nWe refer readers to Appendix for details on the training data\ncollection process A.2, training data blend A.3, and imple-\nmentation details and ablation studies on domain-adaptive\npretraining A.6.\n2.3. Model Alignment\nAfter DAPT, we perform model alignment. We specifically\nleverage two alignment techniques: supervised fine-tuning\n(SFT) and SteerLM (Dong et al., 2023). We adopt the iden-\ntical hyperparameter training configuration as DAPT for all\nmodels, with the exception of using a reduced global batch\nsize of 128. We employ an autoregressive optimization ob-\njective, implementing a strategy where losses associated\nwith tokens originating from the system and user prompts\nare masked (Touvron et al., 2023). This approach ensures\nthat during backpropagation, our focus is exclusively di-\nrected towards the optimization of answer tokens.\nWe combined our domain alignment dataset, consisting", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ndomain-specific data improves the retriever hit rate\nby 30% over a pre-trained state-of-the-art retriever, in\nturn improving overall quality of RAG responses.\nThe paper is organized as follows. Section 2 outlines do-\nmain adaptation and training methods used including the\nadapted tokenizer, DAPT, model alignment, and RAG. Sec-\ntion 3 describes the experimental results including human\nevaluations for each application. Section 4 describes rel-\nevant LLM methods and other work targeting LLMs for\nchip design. Finally, detailed results along with additional\nmodel training details and examples of text generated by the\napplication use-cases are illustrated in the Appendix.\n2. ChipNeMo Domain Adaptation Methods\nChipNeMo implements multiple domain adaptation tech-\nniques to adapt LLMs to the chip design domain. These\ntechniques include domain-adaptive tokenization for chip\ndesign data, domain adaptive pretraining with large corpus", "uations, more than 70% correctness on the generation\nof simple EDA scripts, and expert evaluation ratings\nabove 5 on a 7 point scale for summarizations and\nassignment identification tasks.\n\u2022 Domain-adapted ChipNeMo models dramatically out-\nperforms all vanilla LLMs evaluated on both multiple-\nchoice domain-specific AutoEval benchmarks and hu-\nman evaluations for applications.\n\u2022Using the SteerLM alignment method (Dong et al.,\n2023) over traditional SFT improves human evaluation\nscores for the engineering assistant chatbot by 0.62\npoints on a 7 point Likert scale.\n\u2022SFT on an additional 1.4Kdomain-specific instruc-\ntions significantly improves the model\u2019s proficiency at\ngenerating correct EDA tool scripts by 18%.\n\u2022Domain-adaptive tokenization reduce domain data to-\nken count by up to 3.3%without hurting effectiveness\non applications.\n\u2022Fine-tuning our ChipNeMo retrieval model with\n2", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ntask assignnment. Participants are tasked with rating the\nmodel\u2019s performance on a 7-point Likert scale for each of\nthese three assignments. The results can be found in Fig-\nure 10. Although the GPT-4 model excels in all three tasks,\noutperforming both our ChipNeMo-70B-Steer model and\nthe LLaMA2-70B-Chat model, ChipNeMo-70B-Steer does\nexhibit enhancements compared to the off-the-shelf LLaMA\nmodel of equivalent size. We attribute the comparatively\nlower improvements in summarization tasks resulting from\nour domain-adaptation to the limited necessity for domain-\nspecific knowledge in summarization compared to other\nuse-cases.\n4. Related Works\nMany domains have a significant amount of proprietary data\nwhich can be used to train a domain-specific LLM. One ap-\nproach is to train a domain specific foundation model from\nscratch, e.g., BloombergGPT(Wu et al., 2023) for finance,\nBioMedLLM(Venigalla et al., 2022) for biomed, and Galac-", "the raw dataset, then continued-pretrain a foundation model\nwith the domain-specific data. We call the resulting model a\nChipNeMo foundation model. DAPT is done on a fraction\nof the tokens used in pre-training, and is much cheaper, only\nrequiring roughly 1.5% of the pretraining compute.\nLLM tokenizers convert text into sequences of tokens for\ntraining and inference. A domain-adapted tokenizer im-\nproves the tokenization efficiency by tailoring rules and\npatterns for domain-specific terms such as keywords com-\nmonly found in RTL. For DAPT, we cannot retrain a new\ndomain-specific tokenizer from scratch, since it would make\nthe foundation model invalid. Instead of restricting Chip-\nNeMo to the pre-trained general-purpose tokenizer used\nby the foundation model, we instead adapt the pre-trained\ntokenizer to our chip design dataset, only adding new tokens\nfor domain-specific terms.\nChipNeMo foundation models are completion models whichrequire model alignment to adapt to tasks such as chat."], "retrieved_docs_id": ["a5a7c4ceb0", "df0b9868f2", "c7d05c4b43", "74fe22ec46", "273b593026"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "What is a recent focus in reinforcement research during the inference stage for large language models?\n", "true_answer": "A recent focus is self-retrieval, where models retrieve and use their own information during the inference stage.", "source_doc": "RAG.pdf", "source_id": "326cdd7c26", "retrieved_docs": ["preference learning stage occurs after an initial stage of large-scale unsupervised pre-training on\na large text dataset. While the most straightforward approach to preference learning is supervised\nfine-tuning on human demonstrations of high quality responses, the most successful class of methods\nis reinforcement learning from human (or AI) feedback (RLHF/RLAIF; [ 12,2]). RLHF methods fit\na reward model to a dataset of human preferences and then use RL to optimize a language model\npolicy to produce responses assigned high reward without drifting excessively far from the original\nmodel. While RLHF produces models with impressive conversational and coding abilities, the RLHF\npipeline is considerably more complex than supervised learning, involving training multiple LMs and\nsampling from the LM policy in the loop of training, incurring significant computational costs.\nIn this paper, we show how to directly optimize a language model to adhere to human preferences,", "showing how increasing the guidance weight \u03b3increases\nthe importance of the prompt \u201cToday in France,\u201d.In recent years large language models have exhibited\nstrong generative capabilities to solve a diverse range of\ntasks [ 26,15,71]. \u201cPrompting\u201d is typically used to con-\ndition generation, with task instructions and context [ 64],\nor a small set of examples [ 15]. However, language gener-\nation, especially with smaller models, has been shown to\nstruggle with issues such as hallucination [ 49], degrada-\ntion [ 38] and meandering [ 76]. Various approaches have\nbeen proposed to address this, e.g.: instruction-finetuning\n[81,70] and reinforcement learning [ 56,4,6]. These tech-\nniques are expensive and their compute and data cost may\nnot be accessible to all users. In this paper we propose an\ninference time methodology which, as shown in Figure\n1, gives more importance to the user intent, expressed\nthrough the prompt. Our hypothesis in this paper is: fo-", "of the desired model behavior, which we use to \ufb01ne-tune GPT-3 using supervised\nlearning. We then collect a dataset of rankings of model outputs, which we use to\nfurther \ufb01ne-tune this supervised model using reinforcement learning from human\nfeedback. We call the resulting models InstructGPT . In human evaluations on\nour prompt distribution, outputs from the 1.3B parameter InstructGPT model are\npreferred to outputs from the 175B GPT-3, despite having 100x fewer parameters.\nMoreover, InstructGPT models show improvements in truthfulness and reductions\nin toxic output generation while having minimal performance regressions on public\nNLP datasets. Even though InstructGPT still makes simple mistakes, our results\nshow that \ufb01ne-tuning with human feedback is a promising direction for aligning\nlanguage models with human intent.\n1 Introduction\nLarge language models (LMs) can be \u201cprompted\u201d to perform a range of natural language process-", "(Applied Statistics) , 24(2):193\u2013202, 1975. doi: https://doi.org/10.2307/2346567.\n[31] A. Radford, J. Wu, R. Child, D. Luan, D. Amodei, and I. Sutskever. Language models are\nunsupervised multitask learners, 2019. Ms., OpenAI.\n[32] R. Ramamurthy, P. Ammanabrolu, K. Brantley, J. Hessel, R. Sifa, C. Bauckhage, H. Hajishirzi,\nand Y . Choi. Is reinforcement learning (not) for natural language processing: Benchmarks,\nbaselines, and building blocks for natural language policy optimization. In The Eleventh\nInternational Conference on Learning Representations , 2023. URL https://openreview.\nnet/forum?id=8aHzds2uUyB .\n[33] M. Ranzato, S. Chopra, M. Auli, and W. Zaremba. Sequence level training with recurrent neural\nnetworks. CoRR , abs/1511.06732, 2015.\n[34] D. Sadigh, A. D. Dragan, S. Sastry, and S. A. Seshia. Active preference-based learning of\nreward functions. In Robotics: Science and Systems (RSS) , 2017.", "[38] Irene Solaiman and Christy Dennison. Process for adapting language models to society (palms)\nwith values-targeted datasets. Advances in Neural Information Processing Systems , 34:5861\u2013\n5873, 2021.\n[39] Aarohi Srivastava, Abhinav Rastogi, Abhishek Rao, Abu Awal Md Shoeb, Abubakar Abid,\nAdam Fisch, Adam R. Brown, Adam Santoro, Aditya Gupta, Adri\u00e0 Garriga-Alonso, et al.\nBeyond the imitation game: Quantifying and extrapolating the capabilities of language models.\narXiv preprint arXiv:2206.04615 , 2022.\n[40] Zhiqing Sun, Yikang Shen, Hongxin Zhang, Qinhong Zhou, Zhenfang Chen, David Cox, Yiming\nYang, and Chuang Gan. Salmon: Self-alignment with principle-following reward models. arXiv\npreprint arXiv:2310.05910 , 2023.\n[41] Zhiqing Sun, Xuezhi Wang, Yi Tay, Yiming Yang, and Denny Zhou. Recitation-augmented\nlanguage models. In International Conference on Learning Representations , 2023. URL\nhttps://openreview.net/forum?id=-cqvvvb-NkI ."], "retrieved_docs_id": ["6baa286ac1", "08972157a7", "52732d78cc", "8ca57e0db3", "99d8d4129c"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How do Reflection tokens in the Self-RAG framework determine when to retrieve additional information?\n", "true_answer": "Reflection tokens in the Self-RAG framework can autonomously decide when to retrieve paragraphs or use a set threshold to trigger retrieval.", "source_doc": "RAG.pdf", "source_id": "2449b179e1", "retrieved_docs": ["probabilities. This approach is designed to handle situations\nwhere LLMs might need additional knowledge.\nSelf-RAG [Asai et al. , 2023b ]introduces an important in-\nnovation called Reflection tokens. These special tokens are\ngenerated to review the output and come in two types: Re-\ntrieve and Critic. The model can autonomously decide when\nto retrieve paragraphs or use a set threshold to trigger re-\ntrieval. When retrieval is needed, the generator processes\nmultiple paragraphs simultaneously, performing fragment-\nlevel beam search to obtain the best sequence. The scores for\neach subdivision are updated using Critic scores, and these\nweights can be adjusted during the inference process to cus-\ntomize the model\u2019s behavior. The Self-RAG framework also\nallows the LLM to autonomously determine whether recall\nis necessary, avoiding training additional classifiers or rely-\ning on NLI models. This enhances the model\u2019s ability to au-\ntonomously judge inputs and generate accurate answers.", "there has been increased attention on self-retrieval, which in-\nvolves mining the knowledge of LLMs themselves to enhance\ntheir performance.\nThe subsequent chapters of this paper are structured as fol-\nlows: Chapter 2 provides an introduction to the background\nof RAG.Chapter 3 introduces the mainstream paradigms of\nRAG.Chapter 4 analyzes the retriever in RAG.Chapter 5 fo-", "external knowledge, alleviates hallucination issues, identifies\ntimely information via retrieval technology, and enhances re-\nsponse accuracy. Additionally, by citing sources, RAG in-\ncreases transparency and user trust in model outputs. RAG\ncan also be customized based on specific domains by index-\ning relevant text corpora. RAG\u2019s development and charac-\nteristics are summarized into three paradigms: Naive RAG,\nAdvanced RAG, and Modular RAG, each with its models,\nmethods, and shortcomings. Naive RAG primarily involves\nthe \u2019retrieval-reading\u2019 process. Advanced RAG uses more\nrefined data processing, optimizes the knowledge base in-\ndexing, and introduces multiple or iterative retrievals. As\nexploration deepens, RAG integrates other techniques like\nfine-tuning, leading to the emergence of the Modular RAG\nparadigm, which enriches the RAG process with new mod-\nules and offers more flexibility.\nIn the subsequent chapters, we further analyze three key", "lows the decide-retrieve-reflect-read process, introduc-\ning a module for active judgment. This adaptive and\ndiverse approach allows for the dynamic organization of\nmodules within the Modular RAG framework.\n4 Retriever\nIn the context of RAG, the \u201dR\u201d stands for retrieval, serving\nthe role in the RAG pipeline of retrieving the top-k relevant\ndocuments from a vast knowledge base. However, crafting\na high-quality retriever is a non-trivial task. In this chapter,\nwe organize our discussions around three key questions: 1)\nHow to acquire accurate semantic representations? 2) How\nto match the semantic spaces of queries and documents? 3)\nHow to align the output of the retriever with the preferences\nof the Large Language Model ?\n4.1 How to acquire accurate semantic\nrepresentations?\nIn RAG, semantic space is the multidimensional space where\nquery and Document are mapped. When we perform re-\ntrieval, it is measured within the semantic space. If the se-", "Kendra, based on RAG thinking. Users can search in different\ncontent repositories through built-in connectors.\nThe development of the technical stack and RAG are mu-\ntually reinforcing. New technologies pose higher demands\n6https://flowiseai.com\n7https://github.com/weaviate/Verbaon the existing technical stack, while the optimization of the\ntechnical stack\u2019s functions further promotes the development\nof RAG technology. Overall, the technical stack of RAG\u2019s\ntoolchain has initially formed, and many enterprise-level ap-\nplications have gradually emerged, but an all-in-one platform\nstill needs to be refined.\n9 Conclusion\nThis paper thoroughly explores Retrieval-Augmented Gener-\nation (RAG), a technique that uses an external knowledge\nbase to supplement the context of Large Language Models\n(LLMs) and generate responses. Notably, RAG combines pa-\nrameterized knowledge from LLMs and non-parameterized\nexternal knowledge, alleviates hallucination issues, identifies"], "retrieved_docs_id": ["2449b179e1", "c3380c77fb", "123a2dcc44", "8fe8499442", "f3d56bbc09"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How can the occurrence of illusions in a language model due to retrieval of irrelevant data be prevented?\n", "true_answer": "By introducing an additional validation module after document retrieval to assess the relevance between the retrieved documents.", "source_doc": "RAG.pdf", "source_id": "8d0a82337c", "retrieved_docs": ["Based on powerful large language models, multimodal large language models demonstrate remark-\nable performance across various multimodal tasks. However, the phenomenon of hallucination\npresents a significant challenge to the practical applications of MLLMs, giving rise to undeniable\nconcerns about safety, reliability, and trustworthiness. In this comprehensive survey, we conducted\na thorough examination of hallucinations within multimodal large language models, focusing\non their underlying causes, evaluation metrics, benchmarks, and mitigation methods. Despite\nconsiderable progress, hallucination remains a complex and persistent concern that warrants ongo-\ning investigation. The challenge of hallucination in multimodal large language models remains\ncompelling, requiring continuous scrutiny and innovation. In light of these challenges, we have\noutlined several promising future directions in this burgeoning domain. Through navigating the", "merely means the model generated an output that\ncan neither be grounded nor contradicted by the\nsource content. This is still, to some degree, un-\ndesirable as the provided information cannot be\nverified. We illustrate intrinsic and extrinsic hallu-\ncinations in Fig. 8.\nHallucination [293, 458, 241]\nGenerated text that is fluent and natural but\nunfaithful to the source content (intrinsic)\nand/or under-determined (extrinsic).\nLiu et al. [328] attribute hallucinations com-\nmonly observed in LLMs to an architectural flaw in\nTransformer models while observing that recurrent\nneural networks perfectly solve their minimalistic\nsynthetic benchmarks, designed to isolate the is-sue of hallucination in the context of algorithmic\nreasoning. Here, we focus on ways to address hal-\nlucinations in LLMs without changing the model\narchitecture itself, including (i) supplying the LLM\nwith relevant sources ( retrieval augmentation ) or\n(ii) decoding strategies.", "emphasized by CFG. In a blind human evaluation we show 75% preference for GPT4All using CFG over the\nvanilla sampling;\n4.We provide interpretations for the impact that CFG on text generation both (1) qualitatively, by visualizing\nhow CFG is upweighting words more related to the prompt (our visualization, we note, can be an integral\npart of effective prompt engineering) and (2) quantitatively, by showing that CFG decreases entropy in the\nsampling distribution.\n2 Methodology\nAutoregressive language models are trained to generate plausible continuations of sequences of text. Given a sequence of\ntokens w1,\u00b7\u00b7\u00b7, wT, the model samples each subsequent token from the conditional probability distribution P\u03b8(w|wt\u2264T).\nIt is now typical for some or all of the initial tokens to be considered a prompt , which specifies information about the\ntask or how it is to be solved. In practice, prompts are syntactically and semantically distinct from the initial text to be\ncontinued.", "of these models had to be guided in order to be coherent [ 7] and focused [ 38]. And when larger, higher-performing\nmodels like GPT [ 62,15] began to show real-world use-cases, the recognition emerged of the need to control their\noutput [74] to guard against toxic content [34] and bias [30].\nA central thrust in recent NLP research been to address the above concerns, and approaches have been targeted at nearly\nevery step of training and querying models, from dataset curation [ 2] and training [ 40], to response-alignment [ 57] and\nprompt-identification [34].\nOur work aligns with efforts to control the output of language models by controlling the model\u2019s outputted vocabulary\ndistribution p(xn|x<n). Early efforts in this vein aimed at increasing coherence include now-standard techniques like\ntemperature-scaling [17], nucleus sampling [38] and heuristics (e.g. repetition penalties [31]).", "Specifically, we focus on disinformation and copyright as first-order concerns that are especially concerning\nwhen language models are accessible to malicious actors. These concerns foreground the dual use risks of\nsuch general-purpose technologies. Further, we extend our discussion of bias and toxicity with analytic\nassessments to supplement evaluations in the context of use-cases. Overall, our evaluation aims to build\nunderstanding on the practical utility of language models for society as well as the fundamental scientific\ncomponents that shape model behavior.\n5.1 Language\nTo measure a model\u2019s understanding of the English language, we evaluate it on two types of scenarios:\nlanguage modeling and minimal pairs.48Both approaches have extensive traditions in linguistics: the former\nhas been widely studied in incremental processing in psycholinguistics (Hale, 2001; Levy, 2008), where the"], "retrieved_docs_id": ["114f3dada8", "aa24958f00", "ce496e1ee1", "5cb47f1cc0", "f522730627"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How are LLMs used in the evaluation of RAG-based applications?\n", "true_answer": "LLMs, such as GPT-3.5 and GPT-4, are used as automatic evaluation tools for RAG-based applications, assessing their faithfulness, answer relevance, and context relevance. This method has been found to be effective and efficient in evaluating these applications.", "source_doc": "RAG.pdf", "source_id": "a05a21efce", "retrieved_docs": ["intensive tasks. By citing sources, users can verify\nthe accuracy of answers and increase trust in model\noutputs. It also facilitates knowledge updates\nand the introduction of domain-specific knowl-\nedge. RAG effectively combines the parameter-\nized knowledge of LLMs with non-parameterized\nexternal knowledge bases, making it one of the\nmost important methods for implementing large\nlanguage models. This paper outlines the develop-\nment paradigms of RAG in the era of LLMs, sum-\nmarizing three paradigms: Naive RAG, Advanced\nRAG, and Modular RAG. It then provides a sum-\nmary and organization of the three main compo-\nnents of RAG: retriever, generator, and augmenta-\ntion methods, along with key technologies in each\ncomponent. Furthermore, it discusses how to eval-\nuate the effectiveness of RAG models, introducing\ntwo evaluation methods for RAG, emphasizing key\nmetrics and abilities for evaluation, and presenting\nthe latest automatic evaluation framework. Finally,", "in retrieved information. Counterfactual robustness tests\ninclude questions that the LLM can answer directly, but\nthe related external documents contain factual errors.\n7.3 Evaluation Frameworks\nRecently, the LLM community has been exploring the use\nof \u201dLLMs as judge\u201d for automatic assessment, with many\nutilizing powerful LLMs (such as GPT-4) to evaluate their\nown LLM applications outputs. Practices by Databricks us-\ning GPT-3.5 and GPT-4 as LLM judges to assess their chatbot\napplications suggest that using LLMs as automatic evaluation\ntools is effective [Leng et al. , 2023 ]. They believe this method\ncan also efficiently and cost-effectively evaluate RAG-based\napplications.\nIn the field of RAG evaluation frameworks, RAGAS and\nARES are relatively new. The core focus of these evaluations\nis on three main metrics: Faithfulness of the answer, answer\nrelevance, and context relevance. Additionally, TruLens, an\nopen-source library proposed by the industry, also offers a", "tonomously judge inputs and generate accurate answers.\n7 RAG Evaluation\nIn exploring the development and optimization of RAG, ef-\nfectively evaluating its performance has emerged as a central\nissue. This chapter primarily discusses the methods of eval-\nuation, key metrics for RAG, the abilities it should possess,\nand some mainstream evaluation frameworks.\n7.1 Evaluation Methods\nThere are primarily two approaches to evaluating the ef-\nfectiveness of RAG: independent evaluation and end-to-endevaluation [Liu, 2023 ].\nIndependent Evaluation\nIndependent evaluation includes assessing the retrieval mod-\nule and the generation (read/synthesis) module.\n1.Retrieval Module\nA suite of metrics that measure the effectiveness of sys-\ntems (like search engines, recommendation systems, or\ninformation retrieval systems) in ranking items accord-\ning to queries or tasks are commonly used to evaluate\nthe performance of the RAG retrieval module. Exam-\nples include Hit Rate, MRR, NDCG, Precision, etc.", "open-source library proposed by the industry, also offers a\nsimilar evaluation mode. These frameworks all use LLMs as\njudges for evaluation. As TruLens is similar to RAGAS, this\nchapter will specifically introduce RAGAS and ARES.\nRAGAS\nThis framework considers the retrieval system\u2019s ability to\nidentify relevant and key context paragraphs, the LLM\u2019s abil-\nity to use these paragraphs faithfully, and the quality of\nthe generation itself. RAGAS is an evaluation framework\nbased on simple handwritten prompts, using these prompts\nto measure the three aspects of quality - answer faithfulness,\nanswer relevance, and context relevance - in a fully auto-\nmated manner. In the implementation and experimentation\nof this framework, all prompts are evaluated using the gpt-\n3.5-turbo-16k model, which is available through the OpenAI\nAPI[Eset al. , 2023 ].\nAlgorithm Principles\n1. Assessing Answer Faithfulness: Decompose the answer\ninto individual statements using an LLM and verify", "8.1.7 LLM for Evaluation\nWhile human evaluation can generally offer reliable quality\nassessment, it is also often hindered by high annotation\ncosts, significant time requirements, and annotation incon-\nsistencies [887]. In contrast, automatic evaluation can be\nemployed as a scalable alternative to human evaluation.\nTraditional automatic evaluations have relied on reference-\nbased metrics ( e.g., BLEU and ROUGE). Recently, with\nthe emergence of LLMs as general task solvers highlights\ntheir potential as automatic evaluators [647, 727], making it\npromising to conduct LLM based evaluation. In the follow-ing part, we will introduce the recent progress on LLM for\nevaluation, including evaluation formats, methods, meta-\nevaluation, and the remaining issues.\nEvaluation Formats. Depending on the type of evaluation\noutcome, the evaluation format can be categorized into\nscore-based evaluation and language-based evaluation . Score-\nbased evaluation employs measurable metrics to assign"], "retrieved_docs_id": ["4fffd3dc2b", "a05a21efce", "a580bf7e9b", "ffd5c8b41e", "abb959742b"], "reranker_type": "None", "search_type": "vector", "rr": 0.5, "hit": 1}, {"question": "How does the COG model select text fragments during the generation process?\n", "true_answer": "The COG model selects text fragments by utilizing efficient vector search tools to calculate meaningful context representations of text fragments and index them. At each time step, relevant text fragments are sought from the text collection instead of selecting from an independent set of options.", "source_doc": "RAG.pdf", "source_id": "bff4917f9e", "retrieved_docs": ["corporating a retrieval mechanism using the T5 architecture\n[Raffel et al. , 2020 ]in both the pre-training and fine-tuning\nstages. Prior to pre-training, it initializes the encoder-decoder\nLM backbone with a pre-trained T5, and initializes the dense\nretriever with a pre-trained Contriever. During the pre-\ntraining process, it refreshes the asynchronous index every\n1000 steps.\nCOG [Vaze et al. , 2021 ]is a text generation model that for-\nmalizes its generation process by gradually copying text frag-\nments (such as words or phrases) from an existing collection\nof text. Unlike traditional text generation models that select\nwords sequentially, COG utilizes efficient vector search tools\nto calculate meaningful context representations of text frag-\nments and index them. Consequently, the text generation task\nis decomposed into a series of copy and paste operations,\nwhere at each time step, relevant text fragments are sought\nfrom the text collection instead of selecting from an indepen-", "context limit through interactive reading,\u201d CoRR , vol.\nabs/2310.05029, 2023.\n[304] W. Zhou, Y. E. Jiang, P . Cui, T. Wang, Z. Xiao, Y. Hou,\nR. Cotterell, and M. Sachan, \u201cRecurrentgpt: Interac-\ntive generation of (arbitrarily) long text,\u201d CoRR , vol.\nabs/2305.13304, 2023.\n[305] C. Packer, V . Fang, S. G. Patil, K. Lin, S. Wooders, and\nJ. E. Gonzalez, \u201cMemgpt: Towards llms as operating\nsystems,\u201d CoRR , vol. abs/2310.08560, 2023.\n[306] P . Xu, W. Ping, X. Wu, L. McAfee, C. Zhu, Z. Liu,\nS. Subramanian, E. Bakhturina, M. Shoeybi, and", "Given the same prompt text, we visualize the generated text with OPT- 6.7B and LLaMA- 7B across\ndifferent methods, including the baseline model with full cache, our H2O, and the \"Local\" strategy.\nResults are reported in Figure 6 and 7. Even with less KV cache budget, our H2Ocan generate\nmore diverse content. Specifically, with the OPT- 6.7B, the full model generates some redundant\nworks, like \"a few years after the events of the first game\" while our H2Odescribes \"the game is\na first-person exploration game\". As a comparison, when all KV cache budget is assigned to the\nmost recent tokens, the model fails to generate meaningful text and only repeats the word \".\" and\n\",\". Similar observations can also be drawn from the results of LLaMA- 7B, in which the full model\nrepeatedly says \"so moving that\", \"so moved that\", and \"began to cry\" while our H2Odescribes both\nthe people and the environment.\nMoreover, We conducted a quantitative comparison via diversity metric(Self-BELU [ 93]). We", "from the text collection instead of selecting from an indepen-\ndent vocabulary. COG demonstrates superior performance\nto RETRO in various aspects, including question-answering,\ndomain adaptation, and expanded phrase indexing.\nOn the other hand, following the discovery of the scal-\ning law, there has been a rapid increase in model parameters,\nmaking autoregressive models the mainstream. Researchers\nare also exploring whether larger models can be pretrained\nusing the RAG approach. RETRO++ [Wang et al. , 2023a ], an", "G. Kurian, N. Patil, W. Wang, C. Young, J. Smith,\nJ. Riesa, A. Rudnick, O. Vinyals, G. Corrado,\nM. Hughes, and J. Dean, \u201cGoogle\u2019s neural machine\ntranslation system: Bridging the gap between human\nand machine translation,\u201d CoRR , vol. abs/1609.08144,\n2016.\n[312] R. Paulus, C. Xiong, and R. Socher, \u201cA deep rein-\nforced model for abstractive summarization,\u201d in ICLR\n(Poster) . OpenReview.net, 2018.\n[313] A. K. Vijayakumar, M. Cogswell, R. R. Selvaraju,\nQ. Sun, S. Lee, D. J. Crandall, and D. Batra, \u201cDiverse\nbeam search: Decoding diverse solutions from neural\nsequence models,\u201d CoRR , vol. abs/1610.02424, 2016.\n[314] A. Fan, M. Lewis, and Y. N. Dauphin, \u201cHierarchical\nneural story generation,\u201d in ACL (1) . Association for\nComputational Linguistics, 2018, pp. 889\u2013898.\n[315] J. Hewitt, C. D. Manning, and P . Liang, \u201cTrunca-\ntion sampling as language model desmoothing,\u201d in\nEMNLP (Findings) . Association for Computational\nLinguistics, 2022, pp. 3414\u20133427."], "retrieved_docs_id": ["bff4917f9e", "37f351111b", "aff46ab022", "c2dce2386a", "3b143b7d77"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "Which vision encoder, compared to pure vision models, tends to lose some visual details?\n", "true_answer": "CLIP has been shown to lose some visual details compared to pure vision models like DINO ViT.", "source_doc": "hallucination.pdf", "source_id": "3f64cf9b55", "retrieved_docs": ["to lose some visual details compared to pure vision models like DINO ViT [ 10]. Therefore, recent\nstudies have proposed complementing this information loss by incorporating visual features from\nother vision encoders. The work of [ 98] proposes mixing features from CLIP ViT and DINO ViT.\nSpecifically, it experimented with additive and interleaved features. Both settings show that there\nis a trade-off between the two types of features. A more dedicated mechanism is needed.\nConcurrently, a visual expert-based model proposed in [ 38] aims to mitigate the information\nloss caused by the CLIP image encoder. Instead of merely mixing features, this paper enhances\nthe visual perception ability of MLLMs by focusing on knowledge enhancement, relying on two\npivotal modules: multi-task encoders and the structural knowledge enhancement module. The multi-\ntask encoders are dedicated to integrating various types of latent visual information extracted by", "VL [ 2] has shown the effectiveness of gradually enlarging image resolution from 224\u00d7224to\n448\u00d7448. InternVL [ 2] scales up the vision encoder to 6 billion parameters, enabling processing of\nhigh-resolution images. Regarding hallucination, HallE-Switch [ 123] has investigated the impact\nof vision encoder resolution on its proposed CCEval benchmark. Among the three studied vision\nencoders (CLIP-ViT-L-112, CLIP-ViT-L-224, CLIP-ViT-L-336), higher resolution generally results\nin lower degrees of hallucination. These works indicate that scaling up vision resolution is a\nstraightforward yet effective solution.\n5.2.2 Versatile Vision Encoders. Several studies [ 38,49,98] have investigated vision encoders for\nMLLMs. Typically, the CLIP ViT image encoder is used as the vision encoder in most MLLMs\nthanks to its remarkable ability to extract semantic-rich features. However, CLIP has been shown\nto lose some visual details compared to pure vision models like DINO ViT [ 10]. Therefore, recent", "ment between the feature spaces of visual and text inputs. Since the vision encoder constitutes a\nrelatively minor portion of the MLLM parameters, the advantages of lightweight optimization are\nless pronounced compared to the language model. Therefore, efficient MLLMs generally continue\nto employ visual encoders that are widely used in large-scale MLLMs, as detailed in Table 1.\nMultiple Vision Encoders BRA VE[12] in Figure. 4 performs an extensive ablation of various vi-\nsion encoders with distinct inductive biases for tackling MLMM tasks. The results indicate that there\nisn\u2019t a single-encoder setup that consistently excels across different tasks, and encoders with diverse\nbiases can yield surprisingly similar results. Presumably, incorporating multiple vision encoders\ncontributes to capturing a wide range of visual representations, thereby enhancing the model\u2019s com-\nprehension of visual data. Cobra[13] integrates DINOv2[76] and SigLIP[75] as its vision backbone,", "supervises MLLMs with mask prediction loss using a state-of-the-art expert vision model, SAM [ 57],\nguiding MLLMs to focus on highly-related image content. With the additional supervision from\nthe mask prediction loss, MLLMs are encouraged to extract features that can better represent these\ncrucial instances, thus generating more accurate responses and mitigating vision hallucination. The\nintuitive idea of supervising MLLMs with grounding shows promising performance in mitigating\nhallucination.\nAnother line of work analyzes the training loss from the perspective of embedding space distri-\nbution. As introduced earlier, popular MLLMs typically project the encoded vision features into the\ninput space of a specific LLM. A recent work, HACL [ 52], argues that an ideal projection should\nblend the distribution of visual and textual embeddings. However, despite visual projection, a sig-\nnificant modality gap exists between textual and visual tokens, suggesting that the current learned", "Multi-view Input Directly employing high-resolution vision encoders for fine-grained percep-\ntion is prohibitively costly and does not align with practical usage requirements. Therefore, to\nutilize low-resolution vision encoders while enabling MLLM to perceive detailed information, a\ncommon approach is to input multi-view HR images, i.e., a global view: low-resolution images\nobtained through resizing, and a local view: image patches derived from splitting. For example,\n7"], "retrieved_docs_id": ["c20c82af54", "3f64cf9b55", "4ee780b19c", "c505f06d1a", "f8392fc0db"], "reranker_type": "None", "search_type": "vector", "rr": 0.5, "hit": 1}, {"question": "How many new tokens were added to the LLaMA2 tokenizer for chip design datasets?\n", "true_answer": "Approximately 9K new tokens were added to the LLaMA2 tokenizer for chip design datasets.", "source_doc": "ChipNemo.pdf", "source_id": "ac7c0c980b", "retrieved_docs": ["ChipNeMo: Domain-Adapted LLMs for Chip Design\nFigure 4: Domain-Adapted ChipNeMo Tokenizer Improvements.\n3.1. Domain-Adaptive Tokenization\nWe adapt the LLaMA2 tokenizer (containing 32K tokens) to\nchip design datasets using the previously outlined four-step\nprocess. Approximately 9K new tokens are added to the\nLLaMA2 tokenizer. The adapted tokenizers can improve\ntokenization efficiency by 1.6% to 3.3% across various chip\ndesign datasets as shown in Figure 4. We observe no obvious\nchanges to tokenizer efficiency on public data. Importantly,\nwe have not observed significant decline in the LLM\u2019s accu-\nracy on public benchmarks when using the domain-adapted\ntokenizers even prior to DAPT.\n3.2. Domain Adaptive Pretraining\nFigure 5: Chip Domain Benchmark Result for ChipNeMo.\nFigure 5 presents the outcomes for ChipNeMo models on\nthe AutoEval benchmark for chip design domain (detailed\nin Appendix A.5). Results on open domain academic bench-\nmark results are presented in Appendix A.6. Our research", "\u2022Armand Joulin, Edouard Grave, Guillaume Lample, and Timothee Lacroix, members of the original\nLlama team who helped get this work started.\n\u2022Drew Hamlin, Chantal Mora, and Aran Mun, who gave us some design input on the figures in the\npaper.\n\u2022Vijai Mohan for the discussions about RLHF that inspired our Figure 20, and his contribution to the\ninternal demo.\n\u2022Earlyreviewersofthispaper,whohelpedusimproveitsquality,includingMikeLewis,JoellePineau,\nLaurens van der Maaten, Jason Weston, and Omer Levy.\nA.2 Additional Details for Pretraining\nA.2.1 Architecture Changes Compared to Llama 1\nContext Length. We expand the context window for Llama 2 from 2048 tokens to 4096 tokens. The longer\ncontext window enables models to process more information, which is particularly useful for supporting\nlonger histories in chat applications, various summarization tasks, and understanding longer documents.\nTable 16 compares the performance of 2k and 4k context pretraining on long-context benchmarks. Both", "\u2022Armand Joulin, Edouard Grave, Guillaume Lample, and Timothee Lacroix, members of the original\nLlama team who helped get this work started.\n\u2022Drew Hamlin, Chantal Mora, and Aran Mun, who gave us some design input on the figures in the\npaper.\n\u2022Vijai Mohan for the discussions about RLHF that inspired our Figure 20, and his contribution to the\ninternal demo.\n\u2022Earlyreviewersofthispaper,whohelpedusimproveitsquality,includingMikeLewis,JoellePineau,\nLaurens van der Maaten, Jason Weston, and Omer Levy.\nA.2 Additional Details for Pretraining\nA.2.1 Architecture Changes Compared to Llama 1\nContext Length. We expand the context window for Llama 2 from 2048 tokens to 4096 tokens. The longer\ncontext window enables models to process more information, which is particularly useful for supporting\nlonger histories in chat applications, various summarization tasks, and understanding longer documents.\nTable 16 compares the performance of 2k and 4k context pretraining on long-context benchmarks. Both", "Training Data Params Context\nLengthGQA Tokens LR\nLlama 1See Touvron et al.\n(2023)7B 2k \u2717 1.0T 3.0\u00d710\u22124\n13B 2k \u2717 1.0T 3.0\u00d710\u22124\n33B 2k \u2717 1.4T 1.5\u00d710\u22124\n65B 2k \u2717 1.4T 1.5\u00d710\u22124\nLlama 2A new mix of publicly\navailable online data7B 4k \u2717 2.0T 3.0\u00d710\u22124\n13B 4k \u2717 2.0T 3.0\u00d710\u22124\n34B 4k \u2713 2.0T 1.5\u00d710\u22124\n70B 4k \u2713 2.0T 1.5\u00d710\u22124\nTable 1: Llama 2 family of models. Token counts refer to pretraining data only. All models are trained with\na global batch-size of 4M tokens. Bigger models \u2014 34B and 70B \u2014 use Grouped-Query Attention (GQA) for\nimproved inference scalability.\n0 250 500 750 1000 1250 1500 1750 2000\nProcessed Tokens (Billions)1.41.51.61.71.81.92.02.12.2Train PPLLlama-2\n7B\n13B\n34B\n70B\nFigure 5: Training Loss for Llama 2 models. We compare the training loss of the Llama 2 family of models.\nWe observe that after pretraining on 2T Tokens, the models still did not show any sign of saturation.\nTokenizer. Weusethesametokenizeras Llama 1;itemploysabytepairencoding(BPE)algorithm(Sennrich", "Training Data Params Context\nLengthGQA Tokens LR\nLlama 1See Touvron et al.\n(2023)7B 2k \u2717 1.0T 3.0\u00d710\u22124\n13B 2k \u2717 1.0T 3.0\u00d710\u22124\n33B 2k \u2717 1.4T 1.5\u00d710\u22124\n65B 2k \u2717 1.4T 1.5\u00d710\u22124\nLlama 2A new mix of publicly\navailable online data7B 4k \u2717 2.0T 3.0\u00d710\u22124\n13B 4k \u2717 2.0T 3.0\u00d710\u22124\n34B 4k \u2713 2.0T 1.5\u00d710\u22124\n70B 4k \u2713 2.0T 1.5\u00d710\u22124\nTable 1: Llama 2 family of models. Token counts refer to pretraining data only. All models are trained with\na global batch-size of 4M tokens. Bigger models \u2014 34B and 70B \u2014 use Grouped-Query Attention (GQA) for\nimproved inference scalability.\n0 250 500 750 1000 1250 1500 1750 2000\nProcessed Tokens (Billions)1.41.51.61.71.81.92.02.12.2Train PPLLlama-2\n7B\n13B\n34B\n70B\nFigure 5: Training Loss for Llama 2 models. We compare the training loss of the Llama 2 family of models.\nWe observe that after pretraining on 2T Tokens, the models still did not show any sign of saturation.\nTokenizer. Weusethesametokenizeras Llama 1;itemploysabytepairencoding(BPE)algorithm(Sennrich"], "retrieved_docs_id": ["ac7c0c980b", "15d2848c92", "15d2848c92", "2be6184d40", "2be6184d40"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "What are some evaluation metrics for the final response generated by the RAG model?\n", "true_answer": "Accuracy, EM, answer fidelity, and answer relevance are some evaluation metrics for the final response generated by the RAG model.", "source_doc": "RAG.pdf", "source_id": "b023f9e1c7", "retrieved_docs": ["tonomously judge inputs and generate accurate answers.\n7 RAG Evaluation\nIn exploring the development and optimization of RAG, ef-\nfectively evaluating its performance has emerged as a central\nissue. This chapter primarily discusses the methods of eval-\nuation, key metrics for RAG, the abilities it should possess,\nand some mainstream evaluation frameworks.\n7.1 Evaluation Methods\nThere are primarily two approaches to evaluating the ef-\nfectiveness of RAG: independent evaluation and end-to-endevaluation [Liu, 2023 ].\nIndependent Evaluation\nIndependent evaluation includes assessing the retrieval mod-\nule and the generation (read/synthesis) module.\n1.Retrieval Module\nA suite of metrics that measure the effectiveness of sys-\ntems (like search engines, recommendation systems, or\ninformation retrieval systems) in ranking items accord-\ning to queries or tasks are commonly used to evaluate\nthe performance of the RAG retrieval module. Exam-\nples include Hit Rate, MRR, NDCG, Precision, etc.", "and required more context (see Appendix A.8 for detailed\nexamples). This significantly contributes to the differencein retrieval quality between the categories.\nFigure 7: Human Evaluation of Different Models. Model Only\nrepresents results without RAG. RAG (hit)/(miss) only include\nquestions whose retrieved passages hit/miss their ideal context,\nRAG (avg) includes all questions. 7 point Likert scale.\nWe conducted evaluation of multiple ChipNeMo models\nand LLaMA2 models with and without RAG. The results\nwere then scored by human evaluators on a 7 point Likert\nscale and shown in Figure 7. We highlight the following:\n\u2022ChipNeMo-70B-Steer outperforms GPT-4 in all cate-\ngories, including both RAG misses and hits.\n\u2022ChipNeMo-70B-Steer outperforms similar sized\nLLaMA2-70b-Chat in model-only and RAG evalua-\ntions by 3.31 and 1.81, respectively.\nOur results indicate that RAG significantly boosts human\nscores. RAG improves ChipNeMo-70B-Steer, GPT-4, and", "Figure 1: A timeline of existing RAG research. The timeline was established mainly according to the release date.\ncuses on introducing the generator in RAG.Chapter 6 em-\nphasizes the introduction of the augmentation methods in\nRAG.Chapter 7 introduces the evaluation system of RAG.\nChapter 8 provides an outlook on the future development\ntrends of RAG. Finally, in Chapter 9, we summarize the main\ncontents of the survey.\n2 Background\nIn this chapter, we will introduce the definition of RAG, as\nwell as the comparison between RAG and other model opti-\nmization techniques, such as fine-tuning.\n2.1 Definition\nThe meaning of RAG has expanded in tandem with techno-\nlogical developments. In the era of Large Language Mod-\nels, the specific definition of RAG refers to the model, when\nanswering questions or generating text, first retrieving rele-\nvant information from a vast corpus of documents. Subse-\nquently, it utilizes this retrieved information to generate re-", "intensive tasks. By citing sources, users can verify\nthe accuracy of answers and increase trust in model\noutputs. It also facilitates knowledge updates\nand the introduction of domain-specific knowl-\nedge. RAG effectively combines the parameter-\nized knowledge of LLMs with non-parameterized\nexternal knowledge bases, making it one of the\nmost important methods for implementing large\nlanguage models. This paper outlines the develop-\nment paradigms of RAG in the era of LLMs, sum-\nmarizing three paradigms: Naive RAG, Advanced\nRAG, and Modular RAG. It then provides a sum-\nmary and organization of the three main compo-\nnents of RAG: retriever, generator, and augmenta-\ntion methods, along with key technologies in each\ncomponent. Furthermore, it discusses how to eval-\nuate the effectiveness of RAG models, introducing\ntwo evaluation methods for RAG, emphasizing key\nmetrics and abilities for evaluation, and presenting\nthe latest automatic evaluation framework. Finally,", "scores. RAG improves ChipNeMo-70B-Steer, GPT-4, and\nLLaMA2-70b-Chat by 0.56, 1.68, and 2.05, respectively.\nEven when RAG misses, scores are generally higher than\nwithout using retrieval. The inclusion of relevant in-domain\ncontext still led to improved performance, as retrieval is not\na strictly binary outcome. Furthermore, while ChipNeMo-\n70B-SFT outperforms GPT4 by a large margin through\ntraditional supervised fine-tuning, applying SteerLM meth-\nods (Wang et al., 2023) leads to further elevated chatbot\nratings. We refer readers to the complete evaluation results\nin Appendix A.9.\n3.6. EDA Script Generation\nIn order to evaluate our model on the EDA script generation\ntask, we created two different types of benchmarks. The first\nis a set of \u201cEasy\u201d and \u201cMedium\u201d difficulty tasks (1-4 line\nsolutions) that can be evaluated without human intervention\nby comparing with a golden response or comparing the\ngenerated output after code execution. The second set of"], "retrieved_docs_id": ["a580bf7e9b", "1ed1c2ae54", "7470fe30c9", "4fffd3dc2b", "af6e8c3fb2"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "Which models outperformed OpenAI's code-davinci-002 on Verilog questions?\n", "true_answer": "Thakur et al., 2023 showed that fine-tuned open-source LLMs (CodeGen) on Verilog datasets outperformed state-of-the-art OpenAI models such as code-davinci-002 on 17 Verilog questions.", "source_doc": "ChipNemo.pdf", "source_id": "cdf1ac39e3", "retrieved_docs": ["depends on both the model architecture and the hardware, see \u00a74.9: metrics-efficiency ) across\nall 30 models (Figure 24). For each family of models (e.g. different size variants of GPT-3), we\nfind that as models become larger, accuracy consistently improves but with higher training and\ninference cost.10Overall, we observe that only a subset of all models (across model families) are on\nthe accuracy-efficiency Pareto frontier for each scenario.\n8.Question answering. Across the 9 core question answering scenarios (\u00a73.3: questionAnswer-\ning), we observe significant heterogeneity in results, though text-davinci-002 is the most accurate\nmodel for all 9 scenarios.11In fact, for 6 of the 9 scenarios, there is no open model among the\nthree most accurate models, as generally they are text-davinci-002, Anthropic-LM v4-s3 (52B), and\nTNLG v2 (530B) in descending order of accuracy.\n9.Information retrieval. We consider the classic task of ranking candidate passages given a query", "into the behavior for individual examples, we see significant variation in behavior that is likely indicative\nof the spectrum of difficulty of questions. On code scenarios, we see consistent trends with code-davinci-\n002 consistently outperforming code-cushman-001 (12B) for both HumanEval andAPPS, sometimes by\nlarge margins (e.g. 10.% strict correctness vs. 2.6% on APPS). We note that we do not evaluate any of\ntext models on these code scenarios, though in some cases this may be sensible/desirable given the striking\ngenerality of model development, deployment, and validation/scrutiny. Conversely, while we evaluate the\ncode models for LSATandLegalSupport , we find achieve accuracies of 0%. Overall, we find text-davinci-\n002 and, especially, code-davinci-002 display very strong reasoning capabilities for many different forms of\nreasoning.\nMemorization & Copyright. To further explore the results for this targeted evaluation, see https:", "16.Reasoning. Forreasoning-intensivescenarios, wefindthatthecodemodels, especiallycode-davinci-\n002, consistently outperform the text models, even on synthetic reasoning scenarios posed in natural\nlanguage.20This gap is made clear in mathematical reasoning: for GSM8K , code-davinci-002\nachieves an accuracy of 52.1%, where the next best model is text-davinci-002 at 35.0% and no other\nmodel surpasses 16%.21Further, in addition to code-davinci-002, text-davinci-002 is much more\naccurate than other text models (e.g. 65.1% accuracy on synthetic reasoning in natural language,\nwhereas the next most accurate text model is OPT (175B) at 29.4% accuracy, and code-davinci-002\nhas an accuracy of 72.7%).\n17.Memorization of copyrighted/licensed material. We find that the likelihood of direct regur-\ngitation of long copyrighted sequences is somewhat uncommon, but it does become noticeable when\nlooking at popular books.22However, we do find the regurgitation risk clearly correlates with model", "(a) Response comparison\n(b) Relative response quality compared to\nChatGPT , where the results of other mod-\nels (except Alpaca-65 ) are taken from\nChiang et al. [8].\nFigure 5: Evaluation on Vicuna benchmark questions : assessed by GPT-4 .\nWe followed Chiang et al. [8]and utilized GPT-4 to rate chatbot responses based on helpfulness,\nrelevance, accuracy, and detail. Inspired by Vicuna11, we use two conversation examples as ICL\nto improve the response quality of Dromedary12. A Win/Tie/Lose comparison between the final\nversion of Dromedary and various baselines is illustrated in Figure 10. The comparison reveals that\nDromedary surpasses Text-Davinci-003 andAlpaca but falls short of ChatGPT and its distilled\nversion, Vicuna . Additionally, we present a comparison of relative performance with respect to\nChatGPT in Figure 5b.\n4.2.4 Discussions\nA New AI Alignment Paradigm Interestingly, in contrast to the prevailing alignment paradigm of", "evidence we are aware of in Appendix G.\n1.2 Empirical findings\nTo give a sense of the magnitude of our evaluation, we ran a total of 4,939 runs (i.e. evaluating a specific\nmodel on a specific scenario). This amounts to a total cost of 12,169,227,491 tokens and 17,431,479 queries\nacross all models, $38,001 for the commercial APIs, and about 19,500 GPU hours worth of compute for the\nopen models.\nHere is a summary of the high-level findings:\n1.The benefits of instruction-tuning. Across the core scenarios, we find that text-davinci-002\nperforms best on our accuracy, robustness, and fairness metrics, with Anthropic-LM v4-s3 (52B)\nbeing in the top 3 for all 3 metrics (despite being more than 10 \u00d7smaller in model scale compared\nto TNLG v2 (530B), which is the second most accurate and fair) as shown in Figure 26. Given\nthe very strong performance of both models, and that they are the only instruction-tuned models"], "retrieved_docs_id": ["c8042cdf69", "46b4467def", "ba9814c8b1", "095d0c526c", "2f46aa5de7"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How does providing optimal visual contexts reduce hallucinations in text generation?\n", "true_answer": "Providing optimal visual contexts eliminates over 84.5% of hallucinations in text generation, as shown in an oracle study.", "source_doc": "hallucination.pdf", "source_id": "31eefbd9eb", "retrieved_docs": ["Based on powerful large language models, multimodal large language models demonstrate remark-\nable performance across various multimodal tasks. However, the phenomenon of hallucination\npresents a significant challenge to the practical applications of MLLMs, giving rise to undeniable\nconcerns about safety, reliability, and trustworthiness. In this comprehensive survey, we conducted\na thorough examination of hallucinations within multimodal large language models, focusing\non their underlying causes, evaluation metrics, benchmarks, and mitigation methods. Despite\nconsiderable progress, hallucination remains a complex and persistent concern that warrants ongo-\ning investigation. The challenge of hallucination in multimodal large language models remains\ncompelling, requiring continuous scrutiny and innovation. In light of these challenges, we have\noutlined several promising future directions in this burgeoning domain. Through navigating the", "Hallucination of Multimodal Large Language Models: A Survey 19\nPreference Optimization (FDPO). FDPO uses fine-grained preferences from individual examples to\ndirectly reduce hallucinations in generated text by enhancing the model\u2019s ability to distinguish\nbetween accurate and inaccurate descriptions.\nLLaVA-RLHF [ 96] also try to involve human feedback to mitigate hallucination. It extends the\nRLHF paradigm from the text domain to the task of vision-language alignment, where human\nannotators were asked to compare two responses and pinpoint the hallucinated one. The MLLM is\ntrained to maximize the human reward simulated by an reward model. To address the potential\nissue of reward hacking ,i.e.,achieving high scores from the reward model does not necessarily lead\nto improvement in human judgements, it proposes an algorithm named Factually Augmented RLHF.\nThis algorithm calibrates the reward signals by augmenting them with additional information such\nas image captions.", "Hallucination of Multimodal Large Language Models: A Survey 23\nrecollection of its training documents, most of the time the result goes someplace useful. It\u2019s only\nwhen the dreams enter deemed factually incorrect territory that we label them as \u2019hallucinations\u2019.\nFrom this perspective, leveraging hallucination capabilities as a feature in downstream applications\npresents exciting opportunities for enhancing user experiences and enabling new use cases. As\nhumans are the end-users of these models, the primary goal is to enrich human user experiences.\nFuture research may switch the optimization objective from specific cross-modal benchmarks to\nhuman experience. For example, Some content may cause hallucinations but will not affect the\nuser experience, while some content may. Alternatively, integrating hallucination to inspire more\ncreative ideas in real-world applications could also be intriguing.\n6.6 Enhancing Interpretability and Trust", "Hallucination of Multimodal Large Language Models: A Survey 3\ncontrast, there are very few surveys on hallucination in the field of MLLMs. To the best of our\nknowledge, there is only one concurrent work [ 76], a short survey on the hallucination problem of\nLVLMs. However, our survey distinguishes itself in terms of both taxonomy and scope. We present a\nlayered and granular classification of hallucinations, as shown in Fig. 1, drawing a clearer landscape\nof this field. Additionally, our approach does not limit itself to specific model architectures as\nprescribed in the work of [ 76], but rather dissects the causes of hallucinations by tracing back to\nvarious affecting factors. We cover a larger range of literature both in terms of paper number and\ntaxonomy structure. Furthermore, our mitigation strategies are intricately linked to the underlying\ncauses, ensuring a cohesive and targeted approach.\nOrganization of this survey. In this paper, we present a comprehensive survey of the latest", "Another interesting study observes that the hallucination of MLLMs seems to be easily triggered\nby paragraph break \u2018\\n\\n\u2019 [ 36]. Based on this observation, this work proposes two simple methods\nto reduce hallucination by avoiding generating \u2018\\n\u2019 during generation. First, intuitively, users can\ndesign the prompt to instruct the model to output responses within one paragraph, avoiding \u2018\\n\u2019.\nBesides, the authors tried to alter the output logits during generation by manually lowering the\nprobability of generating \u2018\\n\u2019. Experimental results show that this simple strategy can alleviate\nhallucination on popular benchmarks.\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024."], "retrieved_docs_id": ["114f3dada8", "92e73c053a", "dfb6343eae", "33d47ad8cc", "3fc78f0ef0"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What is the learning rate used for training the ChipNeMo models?\n", "true_answer": "The learning rate used for training the ChipNeMo models is 5\u00b710\u22126.", "source_doc": "ChipNemo.pdf", "source_id": "7eb44773ae", "retrieved_docs": ["large adapter exhibiting a slight improvement.\n3.4. Training Cost\nAll models have undergone training using 128 A100 GPUs.\nWe estimate the costs associated with domain adaptive pre-\ntraining for ChipNeMo as illustrated in Table 1. It is worth\nnoting that DAPT accounts for less than 1.5% of the overall\n5", "ChipNeMo: Domain-Adapted LLMs for Chip Design\n2Domain -Adaptive\nPretraining\n24B tokens of chip \ndesign docs/code\nThousands GPU hrs\nModel\nAlignmen t\n56K/128K \n(SteerLM /SFT)  insts\n+ 1.4K task insts\n100+ GPU hrsFoundation Models\nLLaMA2 \n(7B, 13B, 70B) \nChipNeMo \nChat Models\n(7B, 13B, 70B)ChipNeMo \nFoundation Models\n(7B, 13B, 70B)Pretraining\nTrillions tokens of \ninternet data\n105 \u2013 106 GPU hrs\nFigure 1: ChipNeMo Training Flow\n2023)) fine-tuned on additional Verilog data can outperform\nstate-of-art OpenAI GPT-3.5 models. Customizing LLMs\nin this manner also avoids security risks associated with\nsending proprietary chip design data to third party LLMs\nvia APIs. However, it would be prohibitively expensive to\ntrain domain-specific models for every domain from scratch,\nsince this often requires millions of GPU training hours. To\ncost-effectively train domain-specific models, we instead\npropose to combine the following techniques: Domain-", "global batch size is set at 256, and a context window of 4096\ntokens is applied, resulting in an effective batch size of 1M\ntokens. The total number of training steps is set to 23,200,\nequating to roughly 1 epoch of the data blend.\nFigure 2: Smoothed Training Loss for ChipNeMo with Tokenizer\nAugmentation.\nFigure 2 illustrates the training loss of ChipNeMo under\nthe specified hyperparameters. We do observe spikes in the\ntraining loss. In contrast to the hypothesis in (Chowdhery\net al., 2022), we postulate that in our scenario, these spikes\ncan be attributed to \u201cbad data\u201d since these irregularities\nseem to consistently occur in similar training steps for the\nsame model, even across different model sizes. We chose\nnot to address this issue, as these anomalies did not appear\nto significantly impede subsequent training steps (with no\nnoticeable degradation in validation loss), possibly due to\n3", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ndomain-specific data improves the retriever hit rate\nby 30% over a pre-trained state-of-the-art retriever, in\nturn improving overall quality of RAG responses.\nThe paper is organized as follows. Section 2 outlines do-\nmain adaptation and training methods used including the\nadapted tokenizer, DAPT, model alignment, and RAG. Sec-\ntion 3 describes the experimental results including human\nevaluations for each application. Section 4 describes rel-\nevant LLM methods and other work targeting LLMs for\nchip design. Finally, detailed results along with additional\nmodel training details and examples of text generated by the\napplication use-cases are illustrated in the Appendix.\n2. ChipNeMo Domain Adaptation Methods\nChipNeMo implements multiple domain adaptation tech-\nniques to adapt LLMs to the chip design domain. These\ntechniques include domain-adaptive tokenization for chip\ndesign data, domain adaptive pretraining with large corpus", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ncost of pretraining a foundational model from scratch.\nModel Size Pretraining DAPT SFT\n7B 184,320 2,620 90\n13B 368,640 4,940 160\n70B 1,720,320 20,500 840\nTable 1: Training cost of LLaMA2 models in A100 GPU hours.\nPretraining cost from (Touvron et al., 2023).\n3.5. RAG and Engineering Assistant Chatbot\nWe created a benchmark to evaluate the performance of\ndesign chat assistance, which uses the RAG method. This\nbenchmark includes 88 questions in three categories: archi-\ntecture/design/verification specifications (Specs), testbench\nregression documentation (Testbench), and build infrastruc-\nture documentation (Build). For each question, we specify\nthe golden answer as well as the paragraphs in the design\ndocument that contains the relevant knowledge for the an-\nswer. These questions are created by designers manually\nbased on a set of design documents as the data store for\nretrieval. It includes about 1.8K documents, which were"], "retrieved_docs_id": ["d9ae12f819", "2079d05356", "1162f7259e", "df0b9868f2", "7313e64a59"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What is a potential consequence of insufficient data quality in building multimodal large language models (MLLMs)?\n", "true_answer": "Insufficient data quality could potentially lead to problematic cross-modal alignment, resulting in hallucinations.", "source_doc": "hallucination.pdf", "source_id": "77ce09f375", "retrieved_docs": ["Figure 2: Organization of efficient multimodal large language models advancements.\n\u2022 Training surveys the landscape of training methodologies that are pivotal in the devel-\nopment of efficient MLLMs. It addresses the challenges associated with the pre-training\nstage, instruction-tuning stage, and the overall training strategy for state-of-the-art results.\n\u2022 Data and Benchmarks evaluates the efficiency of datasets and benchmarks used in the\nevaluation of multimodal language models. It assesses the trade-offs between dataset size,\ncomplexity, and computational cost, while advocating for the development of benchmarks\nthat prioritize efficiency and relevance to real-world applications.\n\u2022 Application investigates the practical implications of efficient MLLMs in various do-\nmains, emphasizing the balance between performance and computational cost. By ad-\ndressing resource-intensive tasks such as high-resolution image understanding and medical\n3", "Efficient Multimodal Large Language Models:\nA Survey\nYizhang Jin1,2,*, Jian Li1,*, Yexin Liu3, Tianjun Gu4, Kai Wu1, Zhengkai Jiang1,\nMuyang He3, Bo Zhao3, Xin Tan4, Zhenye Gan1, Yabiao Wang1, Chengjie Wang1,\nLizhuang Ma2\n1Youtu Lab, Tencent,2SJTU,3BAAI,4ECNU\nAbstract\nIn the past year, Multimodal Large Language Models (MLLMs) have demon-\nstrated remarkable performance in tasks such as visual question answering, vi-\nsual understanding and reasoning. However, the extensive model size and high\ntraining and inference costs have hindered the widespread application of MLLMs\nin academia and industry. Thus, studying efficient and lightweight MLLMs\nhas enormous potential, especially in edge computing scenarios. In this survey,\nwe provide a comprehensive and systematic review of the current state of effi-\ncient MLLMs. Specifically, we summarize the timeline of representative effi-\ncient MLLMs, research state of efficient structures and strategies, and the appli-", "benchmarks employed to assess the performance of these models. The discussion highlights the\nimportance of diverse and high-quality datasets in achieving robust and accurate MLLMs, as well\nas the various strategies employed to generate and refine these datasets. Furthermore, we present a\ncomprehensive comparison of MLLM performance across established benchmarks, emphasizing the\nneed for a thorough evaluation to ensure the effectiveness of these models in real-world applications.\n6.1 Pre-Training Data\nPre-training data primarily serve two critical objectives: (1) promoting the integration of various\nmodalities and (2) conveying comprehensive knowledge. Large-scale image-caption pair datasets\nnaturally fulfill these requirements. Firstly, they predominantly originate from the internet, provid-\ning an extensive data volume with a broad knowledge coverage. Secondly, the direct alignment\nbetween the two modalities is beneficial for training modality projectors. However, captions in such", "modalities beyond text) and on other languages (especially as some of these models, most notably BLOOM (176B), GLM\n(130B), and YaLM (100B) are trained on sizable datasets in other languages). With that said, we expect that multimodal\nor multilingual approaches would be more appropriate to achieve reasonable performance for these tasks compared to these\nmodels, so we defer such evaluation to future work.\n34We emphasize that this does not mean we believe the other tasks are less important nor that they should not be evaluated\nfor in future work.\n35Wenotethatourinterpretationofwhatisuser-facingnamelyexcludestasksthataregenerallynotthesubjectofapplications\n(e.g. natural language inference) as well as many classical NLP tasks that served as intermediaries (Jurafsky & Martin, 2000)\nin traditional NLP pipelines (e.g. named entity recognition, part-of-speech tagging, syntactic parsing, information extraction).", "is a document and the output is its summary. So we can feed the input document into the language\nmodel and then produce the generated summary.\nDespite the successful applications in natural language processing, it is still struggling to natively use\nLLMs for multimodal data, such as image, and audio. Being a basic part of intelligence, multimodal\nperception is a necessity to achieve arti\ufb01cial general intelligence, in terms of knowledge acquisition\nand grounding to the real world. More importantly, unlocking multimodal input [ TMC+21,HSD+22,\nWBD+22,ADL+22,AHR+22,LLSH23 ] greatly widens the applications of language models to\nmore high-value areas, such as multimodal machine learning, document intelligence, and robotics.\nIn this work, we introduce KOSMOS -1, a Multimodal Large Language Model (MLLM) that can\nperceive general modalities, follow instructions (i.e., zero-shot learning), and learn in context (i.e.,"], "retrieved_docs_id": ["542e5c49da", "ac70fcc9f2", "8f79f68811", "12d06bb39b", "74bb21ad4f"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How does Quantformer reduce quantization error during training?\n", "true_answer": "Quantformer reduces quantization error during training by leveraging entropy information to maintain consistency in self-attention ranks and introducing a differentiable search mechanism to optimally group patch feature dimensions, reducing rounding and clipping inaccuracies.", "source_doc": "multimodal.pdf", "source_id": "900b3dde3f", "retrieved_docs": ["to quantized values, the quantization error is significantly reduced under certain conditions. This\ntechnique successfully modifies heavy-tailed activation distributions to fit a given quantizer.\nQuantization-Aware Training (QAT) integrates quantization into the training cycle. This in-\ntegration is particularly advantageous when scaling down to ultra-low bit precision, such as 4 bits\nor lower, where PTQ struggles with significant performance loss. For example, Quantformer [124]\nleverages entropy information to maintain consistency in self-attention ranks and introduces a dif-\nferentiable search mechanism to optimally group patch feature dimensions, reducing rounding and\nclipping inaccuracies. Q-ViT [126] incorporates a distillation token and Information Rectification\nModule (IRM) to counteract altered distributions in quantized attention modules. TerViT [127] and\nBit-shrinking [125] progressively reduce model bit-width while regulating sharpness to maintain", "each task\u2019s absolute degradation by the corresponding pre-quantization performance.\n4 Results and Discussion\nFor each experimental axis, we train the corresponding variants to a maximum of 75000 steps.\nBelow we present a breakdown of the degradation results and analysis for each experimental axis.\nAll variants with the exception of dropout=0.8 , had similar pre-quantization performance. This\nis important, as we are interested in comparing optimization choices that still result in models of\ncomparable quality, but differing sensitivities to post-training quantization. Refer to Appendix A.3\nfor the per-task breakdown of results.\nWeight Decay As can be seen in Figure 2a, we observe that a higher level of weight decay during\npre-training improves post-training quantization performance. We do not use gradient clipping\nin these experiments to isolate the impact of weight decay. A larger weight decay value ( 0.1vs", "performance drop (Frantar et al., 2022; Xiao et al., 2022). Zeng et al. (2022) hypothesize that the\nobserveddifferenceinweightdistributioncharacteristicsmaybeduetothedifferenceinoptimization\nchoices made during pre-training.\nIn this work, we seek to reconcile these observations. We posit that it is possible to optimize for a\nquantization friendly training recipe that suppresses large activation magnitude outliers. This leads\nto a distribution of activations and weights that are more amenable to simple INT8 quantization\nrecipes and does not necessitate the need for complex and inefficient mixed-precision computations.\nOur results show that we can introduce simple INT8 post-training quantization with negligible\nimpact on performance due to choices we make during the pre-training stage. As shown in Figure 1,\nacross 8 zero-shot downstream tasks, our models do not present any significant performance drop,\nhaving only 0.24% average degradation in a 52 billion parameter model.", "Figure 2: Comparing the error of pruning and quantization for a student-t distribution, simulating\nthe presence of significant outliers. We plot the results for different magnitudes of the outliers, as\nper the kurtosis on the x-axis. (left) the pruning error, which does not change under the presence of\nmore severe outliers. (middle) the quantization SNR, which is reduced greatly when outliers increase\n(right) the trade-off regions where quantization and pruning are better.\nan MSE measure. Both are often employed to analyze the sensitivity of neural network layers to\nquantization, and they are theoretically well-founded to correlate with network performance [ 38,45].\n3.1 Quantization error\nFor quantization, we consider symmetric uniform quantization, which is also called integer quan-\ntization. Given a bit-width band the scale \u03b4, the grid nodes are defined as qi=\u03b4i, i\u2208\n{\u22122b, . . . , 0,2b\u22121}. The quantization operation rounding-to-nearest Q(w)and the corresponding", "this dependence, we provide a tight lower bound on the output errors for quantization. For pruning\nwe provide a way to solve the problem exactly for moderate dimensionalities. This way, we can\nprovide a comparison that holds regardless of the algorithm used for each method.\n4.1 Post-training quantization\nWe set out to formulate a way by which we can get relatively tight bounds for comparison when\nquantizing a single layer with the MSE as the objective. The higher bound is simple to obtain by using\na solution with a heuristic quantization algorithm, but for the lower bound, we have to reformulate the\nproblem. The mean-squared error of the output activations of a quantized layer can be expressed as:\nmin\nwE(w) =\u2225X\u03b4w\u2212Xw orig\u22252\n2(4)\ns.t.w\u2208Zn,\nwmin\u2264wi\u2264wmax,\nwhere Xis the input data in an unfolded form, and worigare the floating point weights. The quantized\nweights are computed as the product of the quantization scale \u03b4, and the integer weights w.wmin"], "retrieved_docs_id": ["900b3dde3f", "4e4f29e6bf", "a9605c7507", "19d7216008", "a14d42001c"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "What is the score of LLaMA-2-Chat-7B in the InstructBLIP benchmark?\n", "true_answer": "The score of LLaMA-2-Chat-7B in the InstructBLIP benchmark is 58.8.", "source_doc": "multimodal.pdf", "source_id": "88e0397250", "retrieved_docs": ["approaches the code performance of Code-Llama 7B without sacrificing performance on non-code benchmarks.\nSize and Efficiency. We computed \u201cequivalent model sizes\u201d of the Llama 2 family, aiming to\nunderstand Mistral 7B models\u2019 efficiency in the cost-performance spectrum (see Figure 5). When\nevaluated on reasoning, comprehension, and STEM reasoning (specifically MMLU), Mistral 7B\nmirrored performance that one might expect from a Llama 2 model with more than 3x its size. On\nthe Knowledge benchmarks, Mistral 7B\u2019s performance achieves a lower compression rate of 1.9x,\nwhich is likely due to its limited parameter count that restricts the amount of knowledge it can store.\nEvaluation Differences. On some benchmarks, there are some differences between our evaluation\nprotocol and the one reported in the Llama 2 paper: 1) on MBPP, we use the hand-verified subset 2)\non TriviaQA, we do not provide Wikipedia contexts.\n4 Instruction Finetuning\nModelChatbot Arena\nELO RatingMT Bench", "Figure12: Humanevaluationresults forLlama 2-Chat modelscomparedtoopen-andclosed-sourcemodels\nacross ~4,000 helpfulness prompts with three raters per prompt.\nThe largest Llama 2-Chat model is competitive with ChatGPT. Llama 2-Chat 70B model has a win rate of\n36% and a tie rate of 31.5% relative to ChatGPT. Llama 2-Chat 70B model outperforms PaLM-bison chat\nmodel by a large percentage on our prompt set. More results and analysis is available in Section A.3.7.\nInter-Rater Reliability (IRR). In our human evaluations, three different annotators provided independent\nassessments for each model generation comparison. High IRR scores (closer to 1.0) are typically seen as\nbetter from a data quality perspective, however, context is important. Highly subjective tasks like evaluating\nthe overall helpfulness of LLM generations will usually have lower IRR scores than more objective labelling", "Figure12: Humanevaluationresults forLlama 2-Chat modelscomparedtoopen-andclosed-sourcemodels\nacross ~4,000 helpfulness prompts with three raters per prompt.\nThe largest Llama 2-Chat model is competitive with ChatGPT. Llama 2-Chat 70B model has a win rate of\n36% and a tie rate of 31.5% relative to ChatGPT. Llama 2-Chat 70B model outperforms PaLM-bison chat\nmodel by a large percentage on our prompt set. More results and analysis is available in Section A.3.7.\nInter-Rater Reliability (IRR). In our human evaluations, three different annotators provided independent\nassessments for each model generation comparison. High IRR scores (closer to 1.0) are typically seen as\nbetter from a data quality perspective, however, context is important. Highly subjective tasks like evaluating\nthe overall helpfulness of LLM generations will usually have lower IRR scores than more objective labelling", "on proprietary user-shared conversations from ShareGPT and is thus the result of distillation from\nOpenAI GPT models.\n5.2 Evaluation\nTable 5: MMLU 5-shot test results for different\nsizes of LLaMA finetuned on the corresponding\ndatasets using QLoRA.\nDataset 7B 13B 33B 65B\nLLaMA no tuning 35.1 46.9 57.8 63.4\nSelf-Instruct 36.4 33.3 53.0 56.7\nLongform 32.1 43.2 56.6 59.7\nChip2 34.5 41.6 53.6 59.8\nHH-RLHF 34.9 44.6 55.8 60.1\nUnnatural Instruct 41.9 48.1 57.3 61.3\nGuanaco (OASST1) 36.6 46.4 57.0 62.2\nAlpaca 38.8 47.8 57.3 62.5\nFLAN v2 44.5 51.4 59.2 63.9Following common practice, we use the MMLU (Mas-\nsively Multitask Language Understanding) benchmark\n[24] to measure performance on a range of language un-\nderstanding tasks. This is a multiple-choice benchmark\ncovering 57 tasks including elementary mathematics,\nUS history, computer science, law, and more. We report\n5-shot test accuracy.\nWe also test generative language capabilities through\nboth automated and human evaluations. This second", "Humanities STEM Social Sciences Other Average\nGPT-NeoX 20B 29.8 34.9 33.7 37.7 33.6\nGPT-3 175B 40.8 36.7 50.4 48.8 43.9\nGopher 280B 56.2 47.4 71.9 66.1 60.0\nChinchilla 70B 63.6 54.9 79.3 73.9 67.5\nPaLM8B 25.6 23.8 24.1 27.8 25.4\n62B 59.5 41.9 62.7 55.8 53.7\n540B 77.0 55.6 81.0 69.6 69.3\nLLaMA7B 34.0 30.5 38.3 38.1 35.1\n13B 45.0 35.8 53.8 53.3 46.9\n33B 55.8 46.0 66.7 63.4 57.8\n65B 61.8 51.7 72.9 67.4 63.4\nTable 9: Massive Multitask Language Understanding (MMLU). Five-shot accuracy.\nwe observe a lot of variance in performance,\nthat may indicate that this benchmark is not\nreliable. On WinoGrande, the performance does\nnot correlate as well with training perplexity:\nthe LLaMA-33B and LLaMA-65B have similar\nperformance during the training.\n4 Instruction Finetuning\nIn this section, we show that briefly finetuning on\ninstructions data rapidly leads to improvements\non MMLU. Although the non-finetuned version\nof LLaMA-65B is already able to follow basic in-"], "retrieved_docs_id": ["b7d8c4df51", "69a8c044aa", "69a8c044aa", "7eda03b09e", "1f3f19dd09"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "When was the first issue of Preprint published?\n", "true_answer": "The first issue of Preprint was published in April 2024.", "source_doc": "hallucination.pdf", "source_id": "6158839d4c", "retrieved_docs": ["Preprint, Vol. 1, No. 1, Article . Publication date: April 2024.", "employs an LLM to generate sentences based on the extracted keywords. Ultimately, the framework\nproduces a set of high-quality image-caption pairs. Experiment results show that the model trained\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024.", "preprint arXiv:1904.10509 , 2019.\nChoromanski, K., Likhosherstov, V ., Dohan, D., Song, X.,\nGane, A., Sarlos, T., Hawkins, P., Davis, J., Mohiuddin,\nA., Kaiser, L., et al. Rethinking attention with performers.\narXiv preprint arXiv:2009.14794 , 2020.\nChowdhery, A., Narang, S., Devlin, J., Bosma, M., Mishra,\nG., Roberts, A., Barham, P., Chung, H. W., Sutton, C.,\nGehrmann, S., et al. Palm: Scaling language modeling\nwith pathways. arXiv preprint arXiv:2204.02311 , 2022.\nClark, J. H., Garrette, D., Turc, I., and Wieting, J. Canine:\nPre-training an ef\ufb01cient tokenization-free encoder for\nlanguage representation. Transactions of the Association\nfor Computational Linguistics , 10:73\u201391, 2022.\nDai, Z., Yang, Z., Yang, Y ., Carbonell, J., Le, Q. V .,\nand Salakhutdinov, R. Transformer-xl: Attentive lan-\nguage models beyond a \ufb01xed-length context, 2019. URL\nhttps://arxiv.org/abs/1901.02860 .\nDidolkar, A., Gupta, K., Goyal, A., Gundavarapu, N. B.,\nLamb, A., Ke, N. R., and Bengio, Y . Temporal latent", "preprint arXiv:1906.08237 , 2019.\nJason Yosinski, Je\ufb00 Clune, Yoshua Bengio, and Hod Lipson. How transferable are features\nin deep neural networks? In Advances in neural information processing systems , 2014.\nAdams Wei Yu, David Dohan, Minh-Thang Luong, Rui Zhao, Kai Chen, Mohammad\nNorouzi, and Quoc V. Le. QAnet: Combining local convolution with global self-attention\nfor reading comprehension. arXiv preprint arXiv:1804.09541 , 2018.\nRowan Zellers, Ari Holtzman, Hannah Rashkin, Yonatan Bisk, Ali Farhadi, Franziska Roes-\nner, and Yejin Choi. Defending against neural fake news. arXiv preprint arXiv:1905.12616 ,\n2019.\nSheng Zhang, Xiaodong Liu, Jingjing Liu, Jianfeng Gao, Kevin Duh, and Benjamin\nVan Durme. ReCoRD: Bridging the gap between human and machine commonsense\nreading comprehension. arXiv preprint arXiv:1810.12885 , 2018.\nChen Zhu, Yu Cheng, Zhe Gan, Siqi Sun, Thomas Goldstein, and Jingjing Liu. Freelb: En-", "95\nabs/2206.14858, 2022.\n[204] T. Saier, J. Krause, and M. F \u00a8arber, \u201cunarxive 2022:\nAll arxiv publications pre-processed for nlp, includ-\ning structured full-text and citation network,\u201d arXiv\npreprint arXiv:2303.14957 , 2023.\n[205] H. A. Simon, \u201cExperiments with a heuristic compiler,\u201d\nJ. ACM , vol. 10, no. 4, pp. 493\u2013506, 1963.\n[206] Z. Manna and R. J. Waldinger, \u201cToward automatic\nprogram synthesis,\u201d Commun. ACM , vol. 14, no. 3, pp.\n151\u2013165, 1971.\n[207] Z. Feng, D. Guo, D. Tang, N. Duan, X. Feng, M. Gong,\nL. Shou, B. Qin, T. Liu, D. Jiang, and M. Zhou,\n\u201cCodebert: A pre-trained model for programming and\nnatural languages,\u201d in Findings of EMNLP , 2020.\n[208] J. Austin, A. Odena, M. I. Nye, M. Bosma,\nH. Michalewski, D. Dohan, E. Jiang, C. J. Cai, M. Terry,\nQ. V . Le, and C. Sutton, \u201cProgram synthesis with large\nlanguage models,\u201d CoRR , vol. abs/2108.07732, 2021.\n[209] S. Black, L. Gao, P . Wang, C. Leahy, and S. Bi-\nderman, \u201cGPT-Neo: Large Scale Autoregressive Lan-"], "retrieved_docs_id": ["6158839d4c", "f5c7517032", "71e8903239", "645a423c3a", "e144d5f70b"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How are the parameters of a pre-trained model updated during adapter-based tuning?\n", "true_answer": "During adapter-based tuning, only the adapter parameters are updated, while the pre-trained model\u2019s parameters remain fixed.", "source_doc": "multimodal.pdf", "source_id": "004ffc5dd9", "retrieved_docs": ["expressiveness and generalization capabilities. Adapter-based tuning introduces lightweight adapter\nmodules into the pre-trained model\u2019s architecture. These adapter modules, typically composed of\nfeed-forward neural networks with a small number of parameters, are inserted between the layers\nof the original model. During fine-tuning, only the adapter parameters are updated, while the pre-\ntrained model\u2019s parameters remain fixed. This method significantly reduces the number of trainable\nparameters, leading to faster training and inference times without compromising the model\u2019s per-\nformance. LLM-Adapters [154] presents a framework for integrating various adapters into large\nlanguage models, enabling parameter-efficient fine-tuning for diverse tasks. This framework en-\n16", "Raffel, Shazeer, Roberts, Lee, Narang, Matena, Zhou, Li and Liu\nFine-tuning method GLUE CNNDM SQuAD SGLUE EnDe EnFr EnRo\n\u22c6All parameters 83.28 19 .24 80 .88 71 .36 26 .98 39 .82 27 .65\nAdapter layers, d= 32 80 .52 15 .08 79 .32 60 .40 13 .84 17 .88 15 .54\nAdapter layers, d= 128 81 .51 16 .62 79 .47 63 .03 19 .83 27 .50 22 .63\nAdapter layers, d= 512 81 .54 17 .78 79 .18 64 .30 23 .45 33 .98 25 .81\nAdapter layers, d= 2048 81 .51 16 .62 79 .47 63 .03 19 .83 27 .50 22 .63\nGradual unfreezing 82.50 18 .95 79 .17 70.79 26.71 39 .02 26 .93\nTable 10: Comparison of di\ufb00erent alternative \ufb01ne-tuning methods that only update a subset\nof the model\u2019s parameters. For adapter layers, drefers to the inner dimensionality\nof the adapters.\n218steps. As such, we subdivide the \ufb01ne-tuning process into 12episodes of 218/12steps each\nand train from layers 12\u2212nto12in thenth episode. We note that Howard and Ruder\n(2018) suggested \ufb01ne-tuning an additional layer after each epoch of training. However, since", "focus on two alternative \ufb01ne-tuning approaches that update only a subset of the parameters\nof our encoder-decoder model.\nThe \ufb01rst, \u201cadapter layers\u201d (Houlsby et al., 2019; Bapna et al., 2019), is motivated by\nthe goal of keeping most of the original model \ufb01xed while \ufb01ne-tuning. Adapter layers are\nadditional dense-ReLU-dense blocks that are added after each of the preexisting feed-forward\nnetworks in each block of the Transformer. These new feed-forward networks are designed\nso that their output dimensionality matches their input. This allows them to be inserted\ninto the network with no additional changes to the structure or parameters. When \ufb01ne-\ntuning, only the adapter layer and layer normalization parameters are updated. The main\nhyperparameter of this approach is the inner dimensionality dof the feed-forward network,\nwhich changes the number of new parameters added to the model. We experiment with\nvarious values for d.", "(2018) suggested \ufb01ne-tuning an additional layer after each epoch of training. However, since\nour supervised data sets vary so much in size and since some of our downstream tasks are\nactually mixtures of many tasks (GLUE and SuperGLUE), we instead adopt the simpler\nstrategy of \ufb01ne-tuning an additional layer after every 218/12steps.\nA comparison of the performance of these \ufb01ne-tuning approaches is shown in Table 10.\nFor adapter layers, we report the performance using an inner dimensionality dof32,128,\n512,2048. Pursuant with past results (Houlsby et al., 2019; Bapna et al., 2019) we \ufb01nd that\nlower-resource tasks like SQuAD work well with a small value of dwhereas higher resource\ntasks require a large dimensionality to achieve reasonable performance. This suggests that\nadapter layers could be a promising technique for \ufb01ne-tuning on fewer parameters as long as\nthe dimensionality is scaled appropriately to the task size. Note that in our case we treat", "Radford et al. (a). Variants of it include learning just a subset of the parameters Devlin et al. (2019b);\nCollobert & Weston (2008), yet practitioners often retrain all of them to maximize the downstream\nperformance. However, the enormity of GPT-3 175B makes it challenging to perform \ufb01ne-tuning in\nthe usual way due to the large checkpoint it produces and the high hardware barrier to entry since it\nhas the same memory footprint as pre-training.\nParameter-Ef\ufb01cient Adaptation. Many have proposed inserting adapter layers between existing\nlayers in a neural network (Houlsby et al., 2019; Rebuf\ufb01 et al., 2017; Lin et al., 2020). Our method\nuses a similar bottleneck structure to impose a low-rank constraint on the weight updates. The\nkey functional difference is that our learned weights can be merged with the main weights during\ninference, thus not introducing any latency, which is not the case for the adapter layers (Section 3)."], "retrieved_docs_id": ["004ffc5dd9", "a7b1516ffb", "d8dc4b310a", "8af562422f", "48e53ebd1d"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "Which model outperforms several 13 billion parameter MLLMs in document understanding?\n", "true_answer": "TinyChart [37]", "source_doc": "multimodal.pdf", "source_id": "6b47636d3a", "retrieved_docs": ["Figure 2: Organization of efficient multimodal large language models advancements.\n\u2022 Training surveys the landscape of training methodologies that are pivotal in the devel-\nopment of efficient MLLMs. It addresses the challenges associated with the pre-training\nstage, instruction-tuning stage, and the overall training strategy for state-of-the-art results.\n\u2022 Data and Benchmarks evaluates the efficiency of datasets and benchmarks used in the\nevaluation of multimodal language models. It assesses the trade-offs between dataset size,\ncomplexity, and computational cost, while advocating for the development of benchmarks\nthat prioritize efficiency and relevance to real-world applications.\n\u2022 Application investigates the practical implications of efficient MLLMs in various do-\nmains, emphasizing the balance between performance and computational cost. By ad-\ndressing resource-intensive tasks such as high-resolution image understanding and medical\n3", "Efficient Multimodal Large Language Models:\nA Survey\nYizhang Jin1,2,*, Jian Li1,*, Yexin Liu3, Tianjun Gu4, Kai Wu1, Zhengkai Jiang1,\nMuyang He3, Bo Zhao3, Xin Tan4, Zhenye Gan1, Yabiao Wang1, Chengjie Wang1,\nLizhuang Ma2\n1Youtu Lab, Tencent,2SJTU,3BAAI,4ECNU\nAbstract\nIn the past year, Multimodal Large Language Models (MLLMs) have demon-\nstrated remarkable performance in tasks such as visual question answering, vi-\nsual understanding and reasoning. However, the extensive model size and high\ntraining and inference costs have hindered the widespread application of MLLMs\nin academia and industry. Thus, studying efficient and lightweight MLLMs\nhas enormous potential, especially in edge computing scenarios. In this survey,\nwe provide a comprehensive and systematic review of the current state of effi-\ncient MLLMs. Specifically, we summarize the timeline of representative effi-\ncient MLLMs, research state of efficient structures and strategies, and the appli-", "its selection is closely related to the lightweight nature of MLLM. In comparison to conventional\nMLLMs with parameter sizes ranging from 7 billion to tens of billions[87, 88], efficient MLLMs\ntypically employ language models with less than 3 billion parameters, such as phi2-2.7B[74] by\nMicrosoft and Gemma-2B[78] by Google. Phi-2 trained on special data recipes can match the per-\nformance of models 25 times larger trained on regular data. Phi-3-mini [86] can be easily deployed\nlocally on a modern phone and achieves a quality that seems on-par with models such as Mixtral\n8x7B [89] and GPT-3.5. In addition to utilizing pre-trained models, MobileVLM[20] downscales\nLLaMA[87] and trains from scratch using open-source datasets. The specific model scaling is illus-\ntrated in the Table.1 and Table.4.\n2.4 Vision Token Compression\nInitial research has underscored the potential of MLLMs across various tasks, including visual ques-", "benchmarks employed to assess the performance of these models. The discussion highlights the\nimportance of diverse and high-quality datasets in achieving robust and accurate MLLMs, as well\nas the various strategies employed to generate and refine these datasets. Furthermore, we present a\ncomprehensive comparison of MLLM performance across established benchmarks, emphasizing the\nneed for a thorough evaluation to ensure the effectiveness of these models in real-world applications.\n6.1 Pre-Training Data\nPre-training data primarily serve two critical objectives: (1) promoting the integration of various\nmodalities and (2) conveying comprehensive knowledge. Large-scale image-caption pair datasets\nnaturally fulfill these requirements. Firstly, they predominantly originate from the internet, provid-\ning an extensive data volume with a broad knowledge coverage. Secondly, the direct alignment\nbetween the two modalities is beneficial for training modality projectors. However, captions in such", "7.2 Document Understanding\nDocuments or charts serve as a crucial source of information, offering an intuitive visualization\nof data in various forms. They have become an indispensable part of information dissemination,\nbusiness decision-making, and academic research. However, current chart understanding models\nstill face two primary limitations: (1) The considerable number of parameters makes training and\ndeployment challenging. For instance, ChartLlama [196], a 13-billion-parameter model, is difficult\nto deploy on a single consumer-grade GPU. (2) These models struggle with efficiently encoding\nhigh-resolution images, as vision transformers tend to produce lengthy feature sequences.\nTo address the challenges of fine-grained visual perception and visual information compression for\ndocument-oriented MLLMs. TinyChart [37] outperforms several 13B MLLMs with Program-of-\nThoughts (PoT) learning and Visual Token Merging strategy while excelling in faster inference"], "retrieved_docs_id": ["542e5c49da", "ac70fcc9f2", "26327c579e", "8f79f68811", "6b47636d3a"], "reranker_type": "None", "search_type": "vector", "rr": 0.2, "hit": 1}, {"question": "How much computation does LLaV A-UHD use compared to previous models when supporting 6 times larger resolution images?\n", "true_answer": "LLaV A-UHD uses 94% of the inference computation compared to previous models when supporting 6 times larger resolution images.", "source_doc": "multimodal.pdf", "source_id": "986687f08e", "retrieved_docs": ["Token Processing Techniques designed to process lengthy visual token squence are critical in ef-\nficient MLLMs as they address the dual challenges of preserving fine-grained details and reducing\ncomputational complexity. LLaV A-UHD [35] presents a novel approach to manage the computa-\ntional burden associated with high-resolution images. It puts forward two key components: (1) a\ncompression module that further condenses image tokens from visual encoders, significantly re-\nducing the computational load, and (2) a spatial schema to organize slice tokens for LLMs. No-\ntably, LLaV A-UHD demonstrates its efficiency by supporting 6 times larger resolution images using\nonly 94% of the inference computation compared to previous models. Furthermore, the model\ncan be efficiently trained in academic settings, completing the process within 23 hours on 8 A100\nGPUs. LLaV A-PruMerge[41] and MADTP [42] propose an adaptive visual token reduction ap-", "Figure 6: Comparision of Phi[86] (from left to right: phi-1.5, phi-2, phi-3-mini, phi-3-small) versus\nLlama-2 [91] family of models(7B, 13B, 34B, 70B) that were trained on the same fixed data.\nLLaV A-UHD [35] proposes an image modularization strategy that divides native-resolution im-\nages into smaller variable-sized slices for efficient and extensible encoding. Inaddition, InternLM-\nXComposer2-4KHD [90] introduces a strategy that dynamically adjusts resolution with an automatic\nlayout arrangement, which not only maintains the original aspect ratios of images but also adaptively\nalters patch layouts and counts, thereby enhancing the efficiency of image information extraction.\nBy implementing an adaptive input strategy for images of varying resolutions, a balance between\nperceptual capability and efficiency can be achieved.\nToken Processing Techniques designed to process lengthy visual token squence are critical in ef-", "MEGABYTE matches the state-of-the-art performance of\nPerceiverAR whilst using only half the compute.\n6.3. Scaling to higher resolutions\nWe compare three transformer variants (vanilla, Per-\nceiverAR, MEGABYTE) to test scalability to long sequences\non increasingly large image resolutions. We use our own\nimplementations of these in the same framework and budget\nthe same amount of GPU hours and data to train each of\nthese model variants.\nMEGABYTE is able to handle all sequence lengths with a\nsingle forward pass of up to 1.2M tokens. We found nei-\nther the standard Transformer nor PerceiverAR could model\nsuch long sequences at a reasonable model size, so instead\nwe split images into segments of size 1024 and 12000 re-\nspectively. For Megabyte, we set patch size as 12 for Im-\nage64 and patch size as 192 for Image256 and Image640\ndatasets. Model sizes are adjusted to match overall training\nspeeds across models and we do not use any form of sliding", "following hyper-parameters: (1) Number of training images\nNI; (2) Number of patch tokens per image Np; (3) Num-\nber of experts in each transformer block E; (4) Capacity ra-\ntioC; (5) Number of experts selected in each transformer\nblockK, as we usually use a large \u03bb, we can assume few to-\nkens would be dropped when we are using Cslightly larger\nthan1.0. Then, we can approximate T\u2248NINpK\nE. Existing\nworks (Riquelme et al. 2021; Yang et al. 2021) have shown\nthat decreasing NI,Np,KandCcan induce a performance\ndrop. In the \ufb01rst set of experiments of this section, we scale\nthe number of experts in every transformer block Eto con-\ntrol the tokens fed into each expert on ImageNet-1K.\nResults are shown in Fig. 2. We observe that more experts\n(trainable parameters) lead to over\ufb01tting although more ex-\nperts mean stronger modeling capacity. Training accuracy is\nlower than testing accuracy because of data augmentation\nwe introduced in the Experimental Settings Section.", "ModelVision Encoder LLMVision-LLM ProjectorVariants Resolution Parameter Size Variants Parameter Size\nMobileVLM [20] CLIP ViT-L/14 [73] 336 0.3B MobileLLaMA[20] 2.7B LDP[20]\nLLaV A-Phi [21] CLIP ViT-L/14 [73] 336 0.3B Phi-2[74] 2.7B MLP\nImp-v1 [22] SigLIP [75] 384 0.4B Phi-2[74] 2.7B -\nTinyLLaV A [23] SigLIP-SO [75] 384 0.4B Phi-2[74] 2.7B MLP\nBunny [24] SigLIP-SO [75] 384 0.4B Phi-2[74] 2.7B MLP\nMobileVLM-v2-3B [17] CLIP ViT-L/14 [73] 336 0.3B MobileLLaMA[17] 2.7B LDPv2[17]\nMoE-LLaV A-3.6B [25] CLIP-Large [73] 384 - Phi-2[74] 2.7B MLP\nCobra [13]DINOv2 [76]\nSigLIP-SO [75]384 0.3B+0.4B Mamba-2.8b-Zephyr[77] 2.8B MLP\nMini-Gemini [26] CLIP-Large [73] 336 - Gemma[78] 2B MLP\nVary-toy [27] CLIP [73] 224 - Qwen[79] 1.8B -\nTinyGPT-V [28] EV A [80] 224/448 - Phi-2[74] 2.7B Q-Former [15]\nSPHINX-Tiny [14]DINOv2 [76]\nCLIP-ConvNeXt [81]448 - TinyLlama[82] 1.1B -\nALLaV A-Longer [29] CLIP-ViT-L/14 [73] 336 0.3B Phi-2[74] 2.7B -\nMM1-3B-MoE-Chat [30] CLIP DFN-ViT-H [83] 378 - - 3B\u2217C-Abstractor [19]"], "retrieved_docs_id": ["986687f08e", "c0bdc4830f", "705a34eae0", "7cc92dae90", "14f018b2c6"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does FaithScore evaluate free-form responses from MLLMs?\n", "true_answer": "FaithScore evaluates free-form responses from MLLMs by decomposing the response into elements, evaluating, and analyzing them in detail.", "source_doc": "hallucination.pdf", "source_id": "23d981a684", "retrieved_docs": ["and analyze the elements in detail. Specifically, it includes three steps: descriptive sub-sentence\nidentification, atomic fact generation, and fact verification. The evaluation metric involves fine-\ngrained object hallucination categories, including entity, count, color, relation, and other attributes.\nThe final computation of FaithScore is the ratio of hallucinated content.\nBingo [ 21]Bingo (Bias and Interference Challenges in Visual Language Models) is a benchmark\nspecifically designed for assessing and analyzing the limitations of current popular MLLMs, such as\nGPT-4V [ 83]. It comprises 190 failure instances, along with 131 success instances as a comparison.\nThis benchmark reveals that state-of-the-art MLLMs show the phenomenon of bias and interference.\nBias refers to the model\u2019s susceptibility to generating hallucinatory outputs on specific types of\nexamples, such as OCR bias, region bias, etc. Interference refers to scenarios in which the judgment", "HaELM [ 104]Most LLM-based evaluation benchmarks employ advanced ChatGPT or GPT-4\nmodels to assess the quality of the MLLM response. In contrast, the work of Hallucination Evaluation\nbased on Large Language Models (HaELM) proposes to train a specialized LLM for hallucination\ndetection. It collects a set of hallucination data generated by a wide range of MLLMs, simulates data\nusing ChatGPT, and trains an LLM based on LLaMA [ 99]. After that, the HaELM model becomes\nproficient in hallucination evaluation, leveraging reference descriptions of images as the basis of\nassessment.\nFaithScore [ 55]Considering the natural forms of interaction between humans and MLLMs,\nFaithScore aims to evaluate free-form responses to open-ended questions. Different from LLM-based\noverall assessment, FaithScore designs an automatic pipeline to decompose the response, evaluate,\nand analyze the elements in detail. Specifically, it includes three steps: descriptive sub-sentence", "results are taken from OpenAI [27]. On the right, the fraction of truthful and truthful*informative\nanswers, as scored by specially trained models via the OpenAI API. The results of GPT-3 and LLaMA\nare taken from Touvron et al. [44].\nTable 2: Multiple Choice (MC) accuracy on HHH Eval . The results of Anthropic-LM \u2019s Context\nDistillation (CD) and Preference Model (PM) are taken from Bai et al. [4].\nAnthropic-LMLLaMA-65BAlpaca-65BChatGPTDromedary-65B\nCD PM (reprod.) non-verbose final\nHarmless - - 0.71 0.76 0.95 0.91 0.91\nHelpful - - 0.83 0.85 0.85 0.86 0.85\nHonest - - 0.72 0.72 0.80 0.74 0.74\nOther - - 0.84 0.86 0.91 0.88 0.81\nOverall 0.77 0.86 0.77 0.79 0.87 0.85 0.83\nIn the Multiple-Choice (MC) task, models are tested on their ability to select true answers from sets\nof true and false (usually 2-7) reference answers9. We compute the likelihood of \"True\" or \"False\"\nindependently for each answer. The MC1 accuracy results are shown in Figure 4 (left). We can see", "manner. Traditional multimodal tasks often rely on a closed-\nended evaluation framework, where the assessment is based\non the exact match between the model\u2019s response and the\nground-truth answer. Examples include the VQA score [849]\nfor visual question answering tasks and the CIDEr [850]\nscore for captioning tasks. However, MLLMs generate re-\nsponses in an open-ended way, which may contain the\ncorrect answer but not exactly match the ground-truth per-\nfectly. This discrepancy can lead to the underestimation of\nthe model\u2019s performance in previous evaluation paradigms.\nTo address this issue, recent approaches have incorporated\nhumans or LLMs as evaluators [829]. For instance, MM-Bench [838] employs ChatGPT to align the model responses\nwith the most relevant option in a set of multiple-choice\nquestions. Similarly, LLaVA [851] utilizes GPT-4 for eval-\nuating MLLMs\u2019 output, where GPT-4 takes the generated\nimage captions and object bounding boxes as visual inputs", "from what appears in the document being summarized. Consequently, it is important to measure and\nimprove the faithfulness of these systems since unfaithful systems may be harmful by potentially spreading\nmisinformation, including dangerous, yet hard to detect errors, when deployed in real-world settings. We\nevaluate the LMs using recently proposed reference-free evaluation metrics that have been shown to get high\ncorrelations with human scores for faithfulness (Laban et al., 2022; Fabbri et al., 2022). We note recent\nwork has shown that some reference-free evaluation metrics may be mostly relying on spurious correlations\n(Durmus et al., 2022).\nDatasets. There is a growing collection of summarization datasets, including datasets that capture finer-\ngrained and more specific summarization functions (e.g. summarizing multiple documents or conditional\non a user query). Bommasani & Cardie (2020) show that there is significant diversity in summarization"], "retrieved_docs_id": ["db8870dfa6", "23d981a684", "0201f24f10", "c4a72ae7c0", "e99622852f"], "reranker_type": "None", "search_type": "vector", "rr": 0.5, "hit": 1}, {"question": "How does the length of the context window in RAG affect its performance?\n", "true_answer": "The performance of RAG's generation phase is constrained by the context window of LLMs. If the window is too short, it may not contain enough relevant information, and if it's too long, it might lead to information loss.", "source_doc": "RAG.pdf", "source_id": "6080afb1ff", "retrieved_docs": ["that require further investigation.\nFirstly, the issue of long context in RAG is a significant\nchallenge. As mentioned in the literature [Xuet al. , 2023c ],\nRAG\u2019s generation phase is constrained by the context win-\ndow of LLMs. If the window is too short, it may not contain\nenough relevant information; if it\u2019s too long, it might lead to\ninformation loss. Currently, expanding the context window\nof LLMs, even to the extent of limitless context, is a critical\ndirection in LLM development. However, once the context\nwindow constraint is removed, how RAG should adapt re-\nmains a noteworthy question.\nSecondly, the robustness of RAG is another important re-\nsearch focus. If irrelevant noise appears during retrieval, or\nif the retrieved content contradicts facts, it can significantly\nimpact RAG\u2019s effectiveness. This situation is figuratively\nreferred to as \u201dopening a book to a poisonous mushroom\u201d.", "and required more context (see Appendix A.8 for detailed\nexamples). This significantly contributes to the differencein retrieval quality between the categories.\nFigure 7: Human Evaluation of Different Models. Model Only\nrepresents results without RAG. RAG (hit)/(miss) only include\nquestions whose retrieved passages hit/miss their ideal context,\nRAG (avg) includes all questions. 7 point Likert scale.\nWe conducted evaluation of multiple ChipNeMo models\nand LLaMA2 models with and without RAG. The results\nwere then scored by human evaluators on a 7 point Likert\nscale and shown in Figure 7. We highlight the following:\n\u2022ChipNeMo-70B-Steer outperforms GPT-4 in all cate-\ngories, including both RAG misses and hits.\n\u2022ChipNeMo-70B-Steer outperforms similar sized\nLLaMA2-70b-Chat in model-only and RAG evalua-\ntions by 3.31 and 1.81, respectively.\nOur results indicate that RAG significantly boosts human\nscores. RAG improves ChipNeMo-70B-Steer, GPT-4, and", "challenging, and the augmentation process needs to balance\nthe value of each passage appropriately. The retrieved con-\ntent may also come from different writing styles or tones, and\nthe augmentation process needs to reconcile these differences\nto ensure output consistency. Lastly, generation models may\noverly rely on augmented information, resulting in output thatmerely repeats the retrieved content, without providing new\nvalue or synthesized information.\n3.2 Advanced RAG\nAdvanced RAG has made targeted improvements to over-\ncome the deficiencies of Naive RAG. In terms of the quality\nof retrieval generation, Advanced RAG has incorporated pre-\nretrieval and post-retrieval methods. To address the indexing\nissues encountered by Naive RAG, Advanced RAG has op-\ntimized indexing through methods such as sliding window,\nfine-grained segmentation, and metadata. Concurrently, it has\nput forward various methods to optimize the retrieval process.", "ple, different chunking models should be selected for longer\nor shorter content. Additionally, different embedding mod-\nels perform differently at different block sizes; for example,\nsentence-transformer is more suitable for single sentences,while text-embedding-ada-002 is better for blocks containing\n256 or 512 tokens. Furthermore, the length and complexity\nof the user\u2019s input question text, as well as the specific needs\nof your application such as semantic search or Q&A, will all\naffect the choice of chunking strategy. This might directly\ncorrelate with the token limits of your chosen LLM, and may\nrequire you to adjust the block size. In fact, accurate query\nresults are achieved by adaptively applying several chunking\nstrategies; there is no best, only most suitable.\nCurrent research in RAG employs diverse block optimiza-\ntion methods to improve retrieval efficiency and accuracy.\nTechniques such as sliding window technology implement", "depending on the needs of different tasks. If there is historical\ndialogue information, it can also be merged into the prompt\nfor multi-round dialogues.\nDrawbacks in Naive RAG\nThe Naive RAG confronts principal challenges in three ar-\neas: retrieval quality, response generation quality, and the\naugmentation process.\nRegarding retrieval quality, the issues are multifaceted.\nThe primary concern is low precision, where not all blocks\nwithin the retrieval set correlate with the query, leading to\npotential hallucination and mid-air drop issues. A secondary\nissue is low recall, which arises when not all relevant blocks\nare retrieved, thereby preventing the LLM from obtaining suf-\nficient context to synthesize an answer. Additionally, out-\ndated information presents another challenge, where data re-\ndundancy or out-of-date data can result in inaccurate retrieval\noutcomes.\nIn terms of response generation quality, the issues are\nequally diverse. Hallucination is a prominent issue where the"], "retrieved_docs_id": ["6080afb1ff", "1ed1c2ae54", "873e6df003", "20000f1ef4", "b66fd4b3d0"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "What is the focus of the analysis in the given context?\n", "true_answer": "The focus of the analysis in the given context is the unique origins of hallucinations in modern large-scale language models (MLLMs), spanning a spectrum of contributing factors from data, model, training, to the inference stage.", "source_doc": "hallucination.pdf", "source_id": "6da15b5bb7", "retrieved_docs": ["that can compete with the very best commercial models that exist today.\n6 Qualitative Analysis\nWhile quantitative analysis is the core of our evaluation, there are a number of issues with only\nlooking at summary statistics. Perhaps the largest is the problem of benchmark validity [ 36]\u2014whether\na benchmark truly tests what its name or description suggests is always at question, especially as we\ndiscover \u201cshortcuts\u201d to solve benchmarks that machine learning models sometimes exploit [ 22,46].\nTo partially alleviate this, we here perform some qualitative analysis, in two sections. First, in \u00a76.1\n10", "\u201dThe defense ministry has decided to hand over the recorder\nto the Interstate Aviation Committee, which is the main\ninvestigative body in the air crash,\u201d the statement said.\nThe search for the plane\u2019s black boxes is being hampered by\nstrong winds and rough seas. Investigators have launched a\ncriminal probe into the crash, which of\ufb01cials said was likely\ncaused by a technical fault.\nRussian President Vladimir Putin declared Wednesday a\nday of mourning for the victims.\nD. Further Scaling Analysis\nIn this section we study the effect of number of attention\nheads on the scaling results. We also present strong scaling\nresults for our 1.2 billion parameter model.\nD.1. Attention Heads and Scaling\nThis section studies the effect of attention heads on model\nparallel scaling. To this end, we consider the 8.3 billion\nparameter con\ufb01guration with 8-way model parallelism and\nvary the number of heads from 16 to 32. The results are\npresented in Table 7. As the number of attention heads", "a few locations are clearly attended more than others.\nFinally, as we have discussed in section 3.3, the attention score can be decomposed into four intuitive\nterms. Here, we want to further investigate how these four terms contribute to the overall attention trend\nin Fig. 5. Since the term (c)represents the global content bias, i.e., the prior importance of each word\nregardless of the context, we will leave it out and focus on the terms (a),(b)and(d). So, for each term,\nwe take the Softmax w.r.t. the memory span and average the resulted distribution of all tokens in the\nvalidation set. The results are visualized in Fig. 7:\n\u2022Since term (a)is fully content-based addressing, when averaging over all target words, the result is\nessentially uniform over the entire context, except for a few very close words, which are likely to be\nsemantically similar to the target word.\n\u2022The overall trend of term (b)highly resembles that of the entire attention distribution in Fig. 5. It", "describe, evaluation serves multiple functions and the relevant function can depend on the stakeholder (e.g.\nresearchers have different evaluation needs from policymakers). While the preceding evaluation provides\nclarity on the practical utility of existing models, it is less effective at providing fine-grained scientific insight\non primitives of interest. To address this, we supplement the evaluation with a deeper analysis of these\nprimitives.\nAkin to how we explored the structure latent in the space of scenarios systematically, we identify further\nstructure in designating a set of components that help determine the benefits and harms of a language model.\nOn the side of capabilities, we consider the canonical primitives of language, knowledge, and reasoning. On\nthe side of harms, the space of harms of language models is more nascent, so we follow the recent taxonomies\nof Bommasani et al. (2021, \u00a75), Weidinger et al. (2022), Bender et al. (2021) and Rauh et al. (2022).", "suggests that the global trend of focusing on the nearby context is largely contributed by this content-\ndependent positional bias.\n\u2022The overall trend of term (d)is also focusing more on nearby words. However, compared to the trend\nof term (b), it is clearly \ufb02atter and biases towards a longer context."], "retrieved_docs_id": ["0cfc65afd7", "f26a2495cc", "4fa9964baf", "6f6c735c77", "e8db9c0070"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How does iterative retrieval improve the robustness of answer generation in large language models?\n", "true_answer": "Iterative retrieval improves robustness by regularly collecting documents based on the original query and generated text, providing additional materials for large language models. The robustness is further enhanced by providing additional references in multiple iterative retrievals.", "source_doc": "RAG.pdf", "source_id": "f24827ee1d", "retrieved_docs": ["50 documents instead of 20 retrieved documents\nonly marginally improves performance ( \u223c1.5% for\nGPT-3.5-Turbo and \u223c1% for claude-1.3).\nOur analysis provides a better understanding of\nhow language models use their input context and\nintroduces new evaluation protocols for future long-\ncontext models; to claim that a language model can\nrobustly use information within long input con-\ntexts, it is necessary to show that its performance\nis minimally affected by the position of the rele-\nvant information in the input context (e.g., minimal\ndifference in best- and worst-case performance).\nTo facilitate further work on understanding and\nimproving how language models use their input\ncontext, we release our code and evaluation data.1\n2 Multi-Document Question Answering\nOur goal is to better understand how language mod-\nels use their input context. To this end, we analyze\nmodel performance on multi-document question\nanswering, which requires models to find relevant", "Retrieval-Augmented Generation for Large Language Models: A Survey\nYunfan Gao1,Yun Xiong2,Xinyu Gao2,Kangxiang Jia2,Jinliu Pan2,Yuxi Bi3,Yi\nDai1,Jiawei Sun1and Haofen Wang1,3\u2217\n1Shanghai Research Institute for Intelligent Autonomous Systems, Tongji University\n2Shanghai Key Laboratory of Data Science, School of Computer Science, Fudan University\n3College of Design and Innovation,Tongji University\ngaoyunfan1602@gmail.com\nAbstract\nLarge language models (LLMs) demonstrate pow-\nerful capabilities, but they still face challenges in\npractical applications, such as hallucinations, slow\nknowledge updates, and lack of transparency in\nanswers. Retrieval-Augmented Generation (RAG)\nrefers to the retrieval of relevant information from\nexternal knowledge bases before answering ques-\ntions with LLMs. RAG has been demonstrated\nto significantly enhance answer accuracy, reduce\nmodel hallucination, particularly for knowledge-\nintensive tasks. By citing sources, users can verify", "contexts, but we perform a case study with open-\ndomain question answering on NaturalQuestions-\nOpen to better understand this trade-off in existing\nlanguage models.\nWe use language models in a standard retriever-\nreader setup. A retrieval system (Contriever, fine-\ntuned on MS-MARCO) takes an input query from\nNaturalQuestions-Open and returns the kdocu-\nments from Wikipedia with the highest relevance\nscore. To condition language models on these re-\ntrieved documents, we simply include them in the\nprompt. We evaluate retriever recall and reader\naccuracy (whether any of the annotated answers\nappear in the predicted output) as a function of the\nnumber of retrieved documents k. We use a subset\nof NaturalQuestions-Open where the long answer\nis a paragraph (as opposed to a table or a list).\nFigure 11 presents retriever recall and open-", "provide enough information about whether the produced answer would contradict.\nRetrieval-augmented language model pre-training\n(REALM) [ 186] inserts retrieved documents\ninto the pre-training examples. While Guu et al.\n[186] designed REALM for extractive tasks\nsuch as question-answering, Lewis et al. [304]\npropose retrieval-augmented generation (RAG), a\nlanguage generation framework using retrievers\nfor knowledge-intensive tasks that humans could\nnot solve without access to an external knowledge\nsource. Yogatama et al. [646] propose the adaptive\nSemiparametric Language Models architecture,\nwhich incorporates the current local context, a\nshort-term memory that caches earlier-computed\nhidden states, and a long-term memory based on a\nkey-value store of (hidden-state, output) tuples. To\nequip a retrieval-augmented LLM with few-shot\nabilities that were before only emergent in LLMs\nwith many more parameters, Izacard et al. [236]\npropose a KL-divergence loss term for retrieval", "pp. 2206\u20132240.\n[658] S. Xu, L. Pang, H. Shen, X. Cheng, and T.-S. Chua,\n\u201cSearch-in-the-chain: Towards accurate, credible and\ntraceable large language models for knowledge-\nintensive tasks,\u201d CoRR , vol. abs/2304.14732, 2023.\n[659] B. Peng, M. Galley, P . He, H. Cheng, Y. Xie, Y. Hu,\nQ. Huang, L. Liden, Z. Yu, W. Chen, and J. Gao,\n\u201cCheck your facts and try again: Improving large\nlanguage models with external knowledge and auto-\nmated feedback,\u201d CoRR , vol. abs/2302.12813, 2023.\n[660] Z. Jiang, F. F. Xu, L. Gao, Z. Sun, Q. Liu, J. Dwivedi-\nYu, Y. Yang, J. Callan, and G. Neubig, \u201cActive retrieval\naugmented generation,\u201d CoRR , vol. abs/2305.06983,\n2023.\n[661] L. Huang, W. Yu, W. Ma, W. Zhong, Z. Feng, H. Wang,\nQ. Chen, W. Peng, X. Feng, B. Qin, and T. Liu, \u201cA sur-\nvey on hallucination in large language models: Prin-\nciples, taxonomy, challenges, and open questions,\u201d\nCoRR , vol. abs/2311.05232, 2023.\n[662] Y. Li, Y. Du, K. Zhou, J. Wang, W. X. Zhao, and"], "retrieved_docs_id": ["b410d0d2f3", "af911eac69", "3d4e4c3f8a", "f7770d2394", "058f03bb53"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How does post-training quantization reduce the precision of ViT models?\n", "true_answer": "Post-training quantization compresses trained ViT models by converting their parameters from high-precision floating-point numbers to lower-precision fixed-point numbers, such as 8-bit integers.", "source_doc": "multimodal.pdf", "source_id": "354a427ccf", "retrieved_docs": ["performance drop (Frantar et al., 2022; Xiao et al., 2022). Zeng et al. (2022) hypothesize that the\nobserveddifferenceinweightdistributioncharacteristicsmaybeduetothedifferenceinoptimization\nchoices made during pre-training.\nIn this work, we seek to reconcile these observations. We posit that it is possible to optimize for a\nquantization friendly training recipe that suppresses large activation magnitude outliers. This leads\nto a distribution of activations and weights that are more amenable to simple INT8 quantization\nrecipes and does not necessitate the need for complex and inefficient mixed-precision computations.\nOur results show that we can introduce simple INT8 post-training quantization with negligible\nimpact on performance due to choices we make during the pre-training stage. As shown in Figure 1,\nacross 8 zero-shot downstream tasks, our models do not present any significant performance drop,\nhaving only 0.24% average degradation in a 52 billion parameter model.", "improved performance for the ViT student model.\n3.4 Quantization\nViT quantization is the process of reducing the precision of numerical representations in ViT models,\ntypically transitioning from floating-point to fixed-point arithmetic [140]. This reduction in preci-\nsion aims to decrease memory usage, computational complexity, and energy consumption while\npreserving model accuracy to an acceptable level. Current research can be mainly categorized into\npost-training quantization, quantization-aware training, and hardware-aware quantization.\nPost-Training Quantization (PTQ) compresses trained ViT models by converting their param-\neters from high-precision floating-point numbers to lower-precision fixed-point numbers, such as\n8-bit integers. For example, Liu et al. [141] introduced a ranking loss method to identify opti-\nmal low-bit quantization intervals for weights and inputs, ensuring the functionality of the attention", "each task\u2019s absolute degradation by the corresponding pre-quantization performance.\n4 Results and Discussion\nFor each experimental axis, we train the corresponding variants to a maximum of 75000 steps.\nBelow we present a breakdown of the degradation results and analysis for each experimental axis.\nAll variants with the exception of dropout=0.8 , had similar pre-quantization performance. This\nis important, as we are interested in comparing optimization choices that still result in models of\ncomparable quality, but differing sensitivities to post-training quantization. Refer to Appendix A.3\nfor the per-task breakdown of results.\nWeight Decay As can be seen in Figure 2a, we observe that a higher level of weight decay during\npre-training improves post-training quantization performance. We do not use gradient clipping\nin these experiments to isolate the impact of weight decay. A larger weight decay value ( 0.1vs", "We use the model definition for ViT-S/16 and the training pipeline from PyTorch Image models\nlibrary [ 64]. All training is done on resolution 224\u00d7224and16\u00d716patches. For data augmentation,\nwe use RandAugment [ 10], Mixup [ 73], CutMix [ 70], random image cropping [ 56], horizontal flip,\nlabel smoothing \u03b5= 0.1, color jitter 0.4, and random (between bilinear and bicubic) interpolation\nduring training.\nWe train with a batch size of 512 for 300 epochs, using AdamW optimizer and the L2 weight decay\nof 0.03. We use the cosine learning rate schedule, warming up from 10\u22126to the maximum value of\n10\u22123over the first 20 epochs, followed by a LR decay by a factor of 10 every 30 epochs, until it\nreaches the minimum value of 10\u22125.\nC.4 Quantization settings\nWeights In all cases, we use symmetric uniform quantization of weights. We use min-max weight\nquantization for all models except the OPT model, for which we found the MSE estimator to perform\nbetter in all cases.", "produce negative values.\nSummary (QAT). QAT has been shown to work\ndespite the coarse approximation of STE. However, the\nmain disadvantage of QAT is the computational cost of\nre-training the NN model. This re-training may need\nto be performed for several hundred epochs to recover\naccuracy, especially for low-bit precision quantization. If\na quantized model is going to be deployed for an extended\nperiod, and if ef\ufb01ciency and accuracy are especially\nimportant, then this investment in re-training is likely\nto be worth it. However, this is not always the case, as\nsome models have a relatively short lifetime. Next, we\nnext discuss an alternative approach that does not have\nthis overhead.\n2) Post-Training Quantization: An alternative to the\nexpensive QAT method is Post-Training Quantization\n(PTQ) which performs the quantization and the adjust-\nments of the weights, without any \ufb01ne-tuning [ 11,24,40,\n60,61,68,69,89,108,142,148,174,182,223,281]."], "retrieved_docs_id": ["a9605c7507", "354a427ccf", "4e4f29e6bf", "5845d07b17", "94a6ffe197"], "reranker_type": "None", "search_type": "vector", "rr": 0.5, "hit": 1}, {"question": "How does REALM model the pre-training process?\n", "true_answer": "REALM models the pre-training process as a retrieve-then-predict process, where the language model pre-trains by predicting masked tokens based on masked sentences, modeling P(x|y).", "source_doc": "RAG.pdf", "source_id": "6240233238", "retrieved_docs": ["As a knowledge-intensive task, RAG employs different tech-\nnical approaches during the language model training\u2019s pre-\ntraining, fine-tuning, and inference stages.\nPre-training Stage\nSince the emergence of pre-trained models, researchers have\ndelved into enhancing the performance of Pre-trained Lan-\nguage Models (PTMs) in open-domain Question Answering\n(QA) through retrieval methods at the pre-training stage. Rec-\nognizing and expanding implicit knowledge in pre-trained\nmodels can be challenging. REALM [Arora et al. , 2023 ]in-\ntroduces a more modular and interpretable knowledge em-\nbedding approach. Following the Masked Language Model\n(MLM) paradigm, REALM models both pre-training and\nfine-tuning as a retrieve-then-predict process, where the lan-\nguage model pre-trains by predicting masked tokens ybased\non masked sentences x, modeling P(x|y).\nRETRO [Borgeaud et al. , 2022 ]leverages retrieval aug-\nmentation for pre-training a self-regressive language model,", "of data for pre-training LLMs. To determine both settings, a\npractical way is to first train several small language models\nwith multiple candidate plans and then select a good plan\namong them [59]. Overall, it is more difficult to find a\nsuitable data curriculum. In practice, one can monitor the\nperformance of intermediate model checkpoints on specific\nevaluation benchmarks, and dynamically tune the data mix-\nture and distribution during pre-training. In this process, it\nis also useful to explore the potential relations between data\nsources and model abilities to instruct the design of data\ncurriculum.\n4.2 Architecture\nIn this section, we review the architecture design of LLMs,\ni.e.,mainstream architecture, pre-training objective, and de-\ntailed configuration. Table 5 presents the model cards of\nseveral representative LLMs with public details.\n4.2.1 Typical Architectures\nDue to the excellent parallelizability and capacity, the Trans-", "Pre-training/\ufb01ne-tuning has become a popular\nparadigm for solving many tasks in natural lan-\nguage processing (NLP) (Devlin et al., 2018; Liu\net al., 2019; Brown et al., 2020) and Computer Vi-\nsion (Simonyan and Zisserman, 2014; He et al.,\n2016; Howard et al., 2019; Bochkovskiy et al.,\n1github.com/huawei-noah/KD-NLP/tree/main/DyLoRA2020; Chen et al., 2020; Dosovitskiy et al., 2020).\npretrained models (PMs) such as pretrained lan-\nguage models (PLMs) (Devlin et al., 2018; Brown\net al., 2020), and pretrained visual-language mod-\nels (Lu et al., 2019; Li et al., 2019; Su et al., 2019;\nXia et al., 2021) have advanced a lot in recent years.\nWith the ever-growing size of these pretrained mod-\nels, \ufb01ne-tuning them on downstream tasks becomes\nmore expensive. Moreover, as the ratio of the num-\nber of parameters of models with respect to the\nlabeled data increases, the \ufb01ne-tuning process will\nbe more prone to over\ufb01tting (Karimi Mahabadi\net al., 2021). There are two categories of solutions:", "cluster. In practice, it is very challenging to pre-train capable\nLLMs, due to the huge compute consumption and the\nsensitivity to data quality and training tricks [78, 93]. Thus,\nit becomes particularly important to develop systemic, eco-\nnomical pre-training approaches for optimizing LLMs, e.g.,\npredictable scaling [46] and proxy model training [59]. More\ntraining recipes or principles should be investigated and\nshared to reduce the potential risk of degradation or failure\nin large-scale model optimization. Although increasingly\nmore model checkpoints and cleaned datasets have been\nreleased, there still lacks reproducible work on pre-training\ndata preparation ( e.g., detailed cleaning strategies) and data\nscheduling ( e.g., data mixture and curriculum). Since it is\nvery costly to pre-train a LLM from scratch, it is important\nto design suitable mechanisms for continually pre-training\nor fine-tuning the LLM based on publicly available model", "the model scale, instruction tuning demonstrates consistent\nimprovements in various model architectures, pre-training"], "retrieved_docs_id": ["6240233238", "57073057c9", "3c072f09a9", "c7e653937f", "f5e4c115a7"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does SURGE minimize the semantic similarity between documents and queries?\n", "true_answer": "SURGE minimizes the semantic similarity between documents and queries by updating the generator and retriever during the fine-tuning phase, which leverages relevant background knowledge.", "source_doc": "RAG.pdf", "source_id": "977e0e1405", "retrieved_docs": ["formation to the edges of the prompt is a straightfor-\nward idea. This concept has been implemented in frame-\nworks such as LlamaIndex, LangChain, and HayStack\n[Blagojevi, 2023 ]. For instance, Diversity Ranker pri-\noritizes reordering based on document diversity, while\nLostInTheMiddleRanker alternates placing the best doc-\nument at the beginning and end of the context window.\nSimultaneously, addressing the challenge of interpreting\nvector-based simulated searches for semantic similarity,\napproaches like cohereAI rerank [Cohere, 2023 ], bge-\nrerank5, or LongLLMLingua [Jiang et al. , 2023a ]recal-\nculate the semantic similarity between relevant text and\nquery.\n\u2022Prompt Compression Research indicates that noise\nin retrieved documents adversely affects RAG perfor-\nmance. In post-processing, the emphasis lies in com-\npressing irrelevant context, highlighting pivotal para-\ngraphs, and reducing the overall context length. Ap-\nproaches such as Selective Context [Litman et al. , 2020 ]", "swers given a retrieval-enhanced directive. It updates the gen-\nerator and retriever to minimize the semantic similarity be-\ntween documents and queries, effectively leveraging relevant\nbackground knowledge.\nAdditionally, SUGRE [Kang et al. , 2023 ]introduces the\nconcept of contrastive learning. It conducts end-to-end fine-\ntuning of both retriever and generator, ensuring highly de-\ntailed text generation and retrieved subgraphs. Using a\ncontext-aware subgraph retriever based on Graph Neural Net-\nworks (GNN), SURGE extracts relevant knowledge from a\nknowledge graph corresponding to an ongoing conversation.\nThis ensures the generated responses faithfully reflect the re-\ntrieved knowledge. SURGE employs an invariant yet efficient\ngraph encoder and a graph-text contrastive learning objective\nfor this purpose.\nIn summary, the enhancement methods during the fine-\ntuning phase exhibit several characteristics. Firstly, fine-\ntuning both LLM and retriever allows better adaptation", "the semantic space of the user\u2019s query and documents is very\nnecessary. This section introduces two key technologies to\nachieve this goal.\nQuery Rewrite\nThe most intuitive way to align the semantics of\nquery and document is to rewrite the query. As\nmentioned in Query2Doc [Wang et al. , 2023b ]and ITER-\nRETGEN [Shao et al. , 2023 ], the inherent capabilities of\nlarge language models are utilized to generate a pseudo-\ndocument by guiding it, and then the original query is\nmerged with this pseudo-document to form a new query.\nIn HyDE [Gao et al. , 2022 ], query vectors are established\nthrough the use of text indicators, using these indicators to\ngenerate a \u2019hypothetical\u2019 document that is relevant, yet may\nnot truly exist, it only needs to capture the relevant pattern.\nRRR [Maet al. , 2023a ]introduced a new framework that in-\nverts the order of retrieval and reading, focusing on query\nrewriting. This method generates a query using a large lan-", "as dates and purposes used for filtering. Adding\nmetadata like chapters and subsections of refer-\nences could also be beneficial for improving re-\ntrieval. When we divide the index into numerous\nchunks, retrieval efficiency becomes a concern. Fil-\ntering through metadata first can enhance efficiency\nand relevance.\n4.Alignment Optimization: This strategy primarily\naddresses alignment issues and differences between\ndocuments. The alignment concept involves intro-\nducing hypothetical questions , creating questions\nwhich are suitable to answer with each document,\nand embedding (or replacing) these questions with\nthe documents. This helps address alignment prob-\nlems and discrepancies between documents.\n5.Mixed Retrieval: The advantage of this strategy\nlies in leveraging the strengths of different retrieval\ntechnologies. Intelligently combining various tech-\nniques, including keyword-based search, semantic\nsearch, and vector search, adapts to different query", "lows the decide-retrieve-reflect-read process, introduc-\ning a module for active judgment. This adaptive and\ndiverse approach allows for the dynamic organization of\nmodules within the Modular RAG framework.\n4 Retriever\nIn the context of RAG, the \u201dR\u201d stands for retrieval, serving\nthe role in the RAG pipeline of retrieving the top-k relevant\ndocuments from a vast knowledge base. However, crafting\na high-quality retriever is a non-trivial task. In this chapter,\nwe organize our discussions around three key questions: 1)\nHow to acquire accurate semantic representations? 2) How\nto match the semantic spaces of queries and documents? 3)\nHow to align the output of the retriever with the preferences\nof the Large Language Model ?\n4.1 How to acquire accurate semantic\nrepresentations?\nIn RAG, semantic space is the multidimensional space where\nquery and Document are mapped. When we perform re-\ntrieval, it is measured within the semantic space. If the se-"], "retrieved_docs_id": ["e2c2dc1d50", "977e0e1405", "71a4057422", "9cdcf53e15", "8fe8499442"], "reranker_type": "None", "search_type": "vector", "rr": 0.5, "hit": 1}, {"question": "How does NoisyQuant reduce quantization error?\n", "true_answer": "NoisyQuant reduces quantization error by adding a fixed Uniform noisy bias to quantized values.", "source_doc": "multimodal.pdf", "source_id": "b9d5e110ca", "retrieved_docs": ["Figure 2: Comparing the error of pruning and quantization for a student-t distribution, simulating\nthe presence of significant outliers. We plot the results for different magnitudes of the outliers, as\nper the kurtosis on the x-axis. (left) the pruning error, which does not change under the presence of\nmore severe outliers. (middle) the quantization SNR, which is reduced greatly when outliers increase\n(right) the trade-off regions where quantization and pruning are better.\nan MSE measure. Both are often employed to analyze the sensitivity of neural network layers to\nquantization, and they are theoretically well-founded to correlate with network performance [ 38,45].\n3.1 Quantization error\nFor quantization, we consider symmetric uniform quantization, which is also called integer quan-\ntization. Given a bit-width band the scale \u03b4, the grid nodes are defined as qi=\u03b4i, i\u2208\n{\u22122b, . . . , 0,2b\u22121}. The quantization operation rounding-to-nearest Q(w)and the corresponding", "them by a Kronecker product of random orthogonal matrices. We denote \u201cincoherence processing\u201d\nas both the pre- and post- processing steps of our procedure. Incoherence processing can be viewed\nas a form of outlier suppression across the weights and the activation space.\nWe complement our method with a theoretical analysis\u2014the first for a quantization algorithm that\nscales to LLM-sized models\u2014which analyzes the role of incoherence and shows that our quantization\nprocedure is optimal within a general class of rounding methods. Interestingly, we find that QuIP\nwithout incoherence processing yields a more efficient implementation of an earlier algorithm,\nOPTQ [8]; our paper thus also provides the first theoretical analysis for that method.\nEmpirically, we find that incoherence processing greatly improves the quantization of large models,\nespecially at higher compression rates, and yields the first LLM quantization method that produces", "showing how appropriately modeling outliers is critical to effective quantization.\nMulti-billion Scale Transformer Quantization. There are two methods that were developed in\nparallel to ours: nuQmm (Park et al., 2022) and ZeroQuant (Yao et al., 2022). Both use the same\nquantization scheme: group-w2ise quantization, which has even \ufb01ner quantization normalization\nconstant granularity than vector-wise quantization. This scheme offers higher quantization precision\nbut also requires custom CUDA kernels. Both nuQmm and ZeroQuant aim to accelerate inference\nand reduce the memory footprint while we focus on preserving predictive performance under an\n8-bit memory footprint. The largest models that nuQmm and ZeroQuant evaluate are 2.7B and 20B\nparameter transformers, respectively. ZeroQuant achieves zero-degradation performance for 8-bit\nquantization of a 20B model. We show that our method allows for zero-degradation quantization", "efficiency [ 4,8,22,31,33,34]. Our key insight is that quantization can be most effective when weight\nand proxy Hessian matrices are incoherent \u2014that the weights themselves are even in magnitude,\nand the directions in which it is important to have good rounding accuracy are not too large in any\none coordinate. Intuitively, incoherence can be thought of as a principled form of outlier reduction,\nwhich makes it easier to adaptively round the weights to a finite set of compressed values. We use\nthis intuition to develop theoretically sound two-bit quantization algorithms that scale to LLM-sized\nmodels.\nSpecifically, we introduce quantization with incoherence processing (QuIP), a new method motivated\nby the above insight. QuIP consists of two steps: (1) an adaptive rounding [ 20] procedure, which\nminimizes a quadratic proxy objective \u2113(\u02c6W) = tr(( \u02c6W\u2212W)H(\u02c6W\u2212W)T)of the error between the\noriginal weights Wand the quantized weights \u02c6Wusing an estimate of the Hessian H; (2) efficient pre-", "and symmetric quantization is mostly employed for the weights. In all our experiments, we use a\nquantization range estimator minimizing the mean-squared error on weights by grid search [46].\n3 Comparison on statistical distributions\nBefore diving into comparison results, we first describe theoretically what the quantization error\nand pruning error are. Looking at this with a theoretical lens helps with understanding the later\nexperimental difference between the two methods. We start off by describing and analyzing both\nmethods on simple data distributions.\nIn order to compare the error of pruning and quantization, we will frequently use the signal-to-noise\nratio measure defined in the log scale: SNR dB= 10 log10\u0000\nE\u0002\nW2\u0003\n/E\u0002\n(W\u2212F(W))2\u0003\u0001\n, where\nF(W)is the quantization or pruning function. This measure is the same as a scaled logarithm of\n2"], "retrieved_docs_id": ["19d7216008", "a6684aba1d", "219286a7af", "22ac0714ae", "de15032b1a"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How is the ChipNeMo chat model aligned with queries in the chip design domain?\n", "true_answer": "The ChipNeMo chat model is aligned with queries in the chip design domain by using a general-purpose chat instruction dataset and a small amount of domain-specific instruction datasets. This alignment is further improved by adding a small amount of task-specific instruction data.", "source_doc": "ChipNemo.pdf", "source_id": "411c489c58", "retrieved_docs": ["We use largely publicly available general-purpose chat in-\nstruction datasets for multi-turn chat together with a small\namount of domain-specific instruction datasets to perform\nalignment on the ChipNeMo foundation model, which pro-\nduces the ChipNeMo chat model. We observe that align-\nment with a general purpose chat instruction dataset is\nadequate to align the ChipNeMo foundation models with\nqueries in the chip design domain. We also added a small\namount of task-specific instruction data, which further im-\nproves the alignment. We trained multiple ChipNeMo foun-\ndation and chat models based on variants of LLaMA2 mod-\nels used as the base foundation model.\nTo improve performance on the engineering assistant chat-\nbot application, we also leverage Retrieval Augmented Gen-\neration (RAG). RAG is an open-book approach for giving\nLLMs precise context for user queries. It retrieves rele-\nvant in-domain knowledge from its data store to augment", "fine-tuning and also masked the attribute labels and trained\non ChipNeMo models for 2 epochs. We refer readers to\nAppendix A.4 for details on the alignment datasets and A.7\non implementations details.\nWe also experimented with DAPT directly on a chat aligned\nmodel, such as the LLaMA2-Chat model. We found that\nDAPT significantly degraded the model\u2019s alignment, mak-\ning the resulting model useless for downstream tasks.\n2.4. Domain-Adapted Retrieval Model\nIt is well known that LLMs can generate inaccurate text,\nso-called hallucination (Ji et al., 2023). Although the phe-\nnomenon is not completely understood, we still must miti-\ngatehallucinations since they are particularly problematic\nin an engineering assistant chatbot context, where accu-\nracy is critical. Our proposal is to leverage the retrieval\naugmented generation (RAG) method. RAG tries to re-trieve relevant passages from a database to be included in\nthe prompt together with the question, which grounds the", "niques: domain-adaptive tokenization, domain-\nadaptive continued pretraining, model alignment\nwith domain-specific instructions, and domain-\nadapted retrieval models. We evaluate these\nmethods on three selected LLM applications for\nchip design: an engineering assistant chatbot,\nEDA script generation, and bug summarization\nand analysis. Our evaluations demonstrate that\ndomain-adaptive pretraining of language models,\ncan lead to superior performance in domain re-\nlated downstream tasks compared to their base\nLLaMA2 counterparts, without degradations in\ngeneric capabilities. In particular, our largest\nmodel, ChipNeMo-70B, outperforms the highly\ncapable GPT-4 on two of our use cases, namely en-\ngineering assistant chatbot and EDA scripts gener-\nation, while exhibiting competitive performance\non bug summarization and analysis. These re-\nsults underscore the potential of domain-specific\ncustomization for enhancing the effectiveness of\nlarge language models in specialized applications.", "ChipNeMo: Domain-Adapted LLMs for Chip Design\nMingjie Liu* 1Teodor-Dumitru Ene* 1Robert Kirby* 1Chris Cheng* 1Nathaniel Pinckney* 1\nRongjian Liang* 1Jonah Alben1Himyanshu Anand1Sanmitra Banerjee1Ismet Bayraktaroglu1\nBonita Bhaskaran1Bryan Catanzaro1Arjun Chaudhuri1Sharon Clay1Bill Dally1Laura Dang1\nParikshit Deshpande1Siddhanth Dhodhi1Sameer Halepete1Eric Hill1Jiashang Hu1Sumit Jain1\nAnkit Jindal1Brucek Khailany1George Kokai1Kishor Kunal1Xiaowei Li1Charley Lind1Hao Liu1\nStuart Oberman1Sujeet Omar1Ghasem Pasandi1Sreedhar Pratty1Jonathan Raiman1Ambar Sarkar1\nZhengjiang Shao1Hanfei Sun1Pratik P Suthar1Varun Tej1Walker Turner1Kaizhe Xu1Haoxing Ren1\nAbstract\nChipNeMo aims to explore the applications of\nlarge language models (LLMs) for industrial chip\ndesign. Instead of directly deploying off-the-\nshelf commercial or open-source LLMs, we in-\nstead adopt the following domain adaptation tech-\nniques: domain-adaptive tokenization, domain-\nadaptive continued pretraining, model alignment", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ndomain-specific data improves the retriever hit rate\nby 30% over a pre-trained state-of-the-art retriever, in\nturn improving overall quality of RAG responses.\nThe paper is organized as follows. Section 2 outlines do-\nmain adaptation and training methods used including the\nadapted tokenizer, DAPT, model alignment, and RAG. Sec-\ntion 3 describes the experimental results including human\nevaluations for each application. Section 4 describes rel-\nevant LLM methods and other work targeting LLMs for\nchip design. Finally, detailed results along with additional\nmodel training details and examples of text generated by the\napplication use-cases are illustrated in the Appendix.\n2. ChipNeMo Domain Adaptation Methods\nChipNeMo implements multiple domain adaptation tech-\nniques to adapt LLMs to the chip design domain. These\ntechniques include domain-adaptive tokenization for chip\ndesign data, domain adaptive pretraining with large corpus"], "retrieved_docs_id": ["411c489c58", "aec87069e2", "a6c3d05123", "36c5c0c7f1", "df0b9868f2"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How do large language models (LLMs) fail when dealing with real-world production environments?\n", "true_answer": "LLMs may fail to provide accurate answers when the information sought extends beyond the model\u2019s training data or requires the latest data. This limitation poses challenges when deploying generative artificial intelligence in real-world production environments.", "source_doc": "RAG.pdf", "source_id": "b40c0db2f1", "retrieved_docs": ["maintaining user privacy and data security are crucial con-\nsiderations when applying LLMs to real-world scenarios.\n9 C ONCLUSION AND FUTURE DIRECTIONS\nIn this survey, we have reviewed the recent progress of large\nlanguage models (LLMs), and introduced the key concepts,\nfindings, and techniques for understanding and utilizing\nLLMs. We focus on the large-sized models ( i.e.,having a size\nlarger than 10B) while excluding the contents of early pre-\ntrained language models ( e.g., BERT and GPT-2) that have\nbeen well covered in the existing literature. In particular,our survey has discussed four important aspects of LLMs,\ni.e.,pre-training, adaptation, utilization, and evaluation. For\neach aspect, we highlight the techniques or findings that are\nkey to the success of LLMs. Furthermore, we also summa-\nrize the available resources for developing LLMs and dis-\ncuss important implementation guidelines for reproducing\nLLMs. This survey tries to cover the most recent literature", "LLM-Pruner: On the Structural Pruning\nof Large Language Models\nXinyin Ma Gongfan Fang Xinchao Wang\u2217\nNational University of Singapore\nmaxinyin@u.nus.edu, gongfan@u.nus.edu, xinchao@nus.edu.sg\nAbstract\nLarge language models (LLMs) have shown remarkable capabilities in language un-\nderstanding and generation. However, such impressive capability typically comes\nwith a substantial model size, which presents significant challenges in both the\ndeployment, inference, and training stages. With LLM being a general-purpose\ntask solver, we explore its compression in a task-agnostic manner, which aims to\npreserve the multi-task solving and language generation ability of the original LLM.\nOne challenge to achieving this is the enormous size of the training corpus of LLM,\nwhich makes both data transfer and model post-training over-burdensome. Thus,\nwe tackle the compression of LLMs within the bound of two constraints: being task-", "which the model responses are presented to\nGPT-4arerandomlyswappedtoalleviatebias.\n1 Introduction\nLarge Language Models (LLMs) have shown great promise as highly capable AI assistants that excel in\ncomplex reasoning tasks requiring expert knowledge across a wide range of fields, including in specialized\ndomains such as programming and creative writing. They enable interaction with humans through intuitive\nchat interfaces, which has led to rapid and widespread adoption among the general public.\nThe capabilities of LLMs are remarkable considering the seemingly straightforward nature of the training\nmethodology. Auto-regressive transformers are pretrained on an extensive corpus of self-supervised data,\nfollowed by alignment with human preferences via techniques such as Reinforcement Learning with Human\nFeedback (RLHF). Although the training methodology is simple, high computational requirements have", "which the model responses are presented to\nGPT-4arerandomlyswappedtoalleviatebias.\n1 Introduction\nLarge Language Models (LLMs) have shown great promise as highly capable AI assistants that excel in\ncomplex reasoning tasks requiring expert knowledge across a wide range of fields, including in specialized\ndomains such as programming and creative writing. They enable interaction with humans through intuitive\nchat interfaces, which has led to rapid and widespread adoption among the general public.\nThe capabilities of LLMs are remarkable considering the seemingly straightforward nature of the training\nmethodology. Auto-regressive transformers are pretrained on an extensive corpus of self-supervised data,\nfollowed by alignment with human preferences via techniques such as Reinforcement Learning with Human\nFeedback (RLHF). Although the training methodology is simple, high computational requirements have", "workings of LLMs.\n6.Human performance on a task isn\u2019t an upper\nbound on LLM performance.\n7.LLMs need not express the values of their\ncreators nor the values encoded in web text.\n8.Brief interactions with LLMs are often mis-\nleading.\nIntroduction\nLarge language models (LLMs, e.g. GPT-3, PALM,\nLLaMA, and GPT-4; Brown et al., 2020; Chowdhery et al.,\n2022; Touvron et al., 2023; OpenAI, 2023b) and products\nbuilt on them, such as ChatGPT, have recently prompted\nan enormous amount of attention from journalists, (Klein,\n2023; Perrigo, 2023; Oliver, 2023), policymakers (J & C,\n2023; Bartz, 2023; Lieu, 2023), and scholars from many\n1New York University2Anthropic, PBC. Correspondence to:\nSamuel R. Bowman <bowman@nyu.edu >.\ufb01elds (Chan, 2022; Lund & Wang, 2023; Choi et al., 2023;\nBiswas, 2023). This technology de\ufb01es expectations in many\nways, though, and it can be easy for brief discussions of it\nto leave out important points.\nThis paper presents eight potentially surprising claims that"], "retrieved_docs_id": ["3ba0afeccb", "45d34e3817", "dfa8d53d52", "dfa8d53d52", "3de6c8318d"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What is the process of creating an index for a language model?\n", "true_answer": "The process involves data cleaning and extraction, converting file formats into plain text, dividing the text into smaller chunks, encoding the text into vectors through a language model, and requiring high inference speed for the embedding models.", "source_doc": "RAG.pdf", "source_id": "58f1dd1f89", "retrieved_docs": ["is also summarized as a \u201cRetrieve\u201d-\u201cRead\u201d framework\n[Maet al. , 2023a ].\nIndexing\nThe pipeline for obtaining data from the source and building\nan index for it generally occurs in an offline state. Specifi-\ncally, the construction of a data index involves the following\nsteps:1.Data Indexing: This involves cleaning and extracting the\noriginal data, converting different file formats such as PDF,\nHTML, Word, Markdown, etc., into plain text.\n2.Chunking: This involves dividing the loaded text into\nsmaller chunks. This is necessary because language mod-\nels typically have a limit on the amount of context they can\nhandle, so it is necessary to create as small text chunks as\npossible.\n3. Embedding and Creating Index: This is the process of\nencoding text into vectors through a language model. The re-\nsulting vectors will be used in the subsequent retrieval process\nto calculate the similarity between the vector and the problem\nvector.The embedding models require a high inference speed.", "consists of a list of instances, each with an input and a set of references.\n2 Preliminaries\nWe introduce the basic primitives (scenario, adaptation, metric) required to evaluate a language model\n(Figure 5). With these primitives, we then provide a roadmap for how we holistically evaluate language\nmodels.\n2.1 Scenarios\nA scenario instantiates a desired use case for a language model. Useful language models are performant on a\nvariety of scenarios: scenarios are whatwe want models to do. While practical use cases for language models\ninvolve other factors, we operationalize scenarios through a list of instances , divided into a training set and\none or more testsets. Each instance consists of (i) an input(a string) and (ii) a list of references . Each\nreference is a string annotated with properties relevant for evaluation (e.g. is it correct or acceptable?). See\nFigure 6 for an example scenario.\n2.2 Adaptation", "(a) Query=\u201dLanguage Model\u201d\n/uni00000015/uni00000013/uni00000014/uni0000001b /uni00000015/uni00000013/uni00000014/uni0000001c /uni00000015/uni00000013/uni00000015/uni00000013 /uni00000015/uni00000013/uni00000015/uni00000014 /uni00000015/uni00000013/uni00000015/uni00000015 /uni00000015/uni00000013/uni00000015/uni00000016\n/uni00000037/uni0000004c/uni00000050/uni00000048/uni00000013/uni00000015/uni00000013/uni00000013/uni00000013/uni00000017/uni00000013/uni00000013/uni00000013/uni00000019/uni00000013/uni00000013/uni00000013/uni0000001b/uni00000013/uni00000013/uni00000013/uni00000014/uni00000013/uni00000013/uni00000013/uni00000013\n/uni0000002a/uni00000033/uni00000037/uni00000010/uni00000014", "D., Narang, S., Mishra, G., Yu, A., Zhao, V ., Huang, Y ., Dai, A., Yu, H., Petrov, S., Chi, E. H., Dean, J., Devlin,\nJ., Roberts, A., Zhou, D., Le, Q. V ., and Wei, J. Scaling instruction-\ufb01netuned language models. arXiv preprint\narXiv:2210.11416 , 2022. URL https://arxiv.org/abs/2210.11416 .\nClark, J. H., Choi, E., Collins, M., Garrette, D., Kwiatkowski, T., Nikolaev, V ., and Palomaki, J. TyDiQA: A\nbenchmark for information-seeking question answering in typologically diverse languages. TACL , 2020. URL\nhttps://aclanthology.org/2020.tacl-1.30 .\n32", "for this model are based on https://github.com/yandex/YaLM-100B .\nJ Adaptation\nHere we provide the full details on how we adapt language models to fully concretize what we mean by 5-shot\nprompting.\nJ.1 Formatting test instances\nLanguage modeling. Forlanguage modeling scenarios, the prompt is simply the input and there is no\nreference. Since documents in language modeling datasets are longer than the window size of the models\nwe study, we tokenize documents using each model\u2019s corresponding tokenizer and chunk the resulting token\nsequences according to the model\u2019s window size. Following Gao et al. (2021a), we compute the perplexity\nmetrics of each document separately and maximize the amount of context for each prediction by using as\nmany tokens from the previous chunk as conditioning tokens as possible.\nTruncation. As we describe for language modeling scenarios, it is possible that test instances for any"], "retrieved_docs_id": ["58f1dd1f89", "2acc9cbc46", "19d31cfd61", "719df65d20", "7400686f9c"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does the ChipNeMo-70B model perform compared to GPT-4 in engineering assistant chatbot and EDA scripts generation?\n", "true_answer": "The ChipNeMo-70B model outperforms the GPT-4 on two use cases, namely engineering assistant chatbot and EDA scripts generation.", "source_doc": "ChipNemo.pdf", "source_id": "a6c3d05123", "retrieved_docs": ["processor with GPT-4 and GPT-3.5. Their findings showed\nthat although GPT-4 produced relatively high-quality codes,\nit still does not perform well enough at understanding and\nfixing the errors. ChipEDA (He et al., 2023) proposed to use\nLLMs to generate EDA tools scripts. It also demonstrated\nthat fine-tuned LLaMA2 70B model outperforms GPT-4\nmodel on this task.\n5. Conclusions\nWe explored domain-adapted approaches to improve LLM\nperformance for industrial chip design tasks. Our results\nshow that domain-adaptive pretrained models, such as the\n7B, 13B, and 70B variants of ChipNeMo, achieve simi-\nlar or better results than their base LLaMA2 models with\nonly 1.5% additional pretraining compute cost. Our largest\ntrained model, ChipNeMo-70B, also surpasses the much\nmore powerful GPT-4 on two of our use cases, engineering\nassistant chatbot and EDA scripts generation, while show-\ning competitive performance on bug summarization and\nanalysis. Our future work will focus on further improving", "uations, more than 70% correctness on the generation\nof simple EDA scripts, and expert evaluation ratings\nabove 5 on a 7 point scale for summarizations and\nassignment identification tasks.\n\u2022 Domain-adapted ChipNeMo models dramatically out-\nperforms all vanilla LLMs evaluated on both multiple-\nchoice domain-specific AutoEval benchmarks and hu-\nman evaluations for applications.\n\u2022Using the SteerLM alignment method (Dong et al.,\n2023) over traditional SFT improves human evaluation\nscores for the engineering assistant chatbot by 0.62\npoints on a 7 point Likert scale.\n\u2022SFT on an additional 1.4Kdomain-specific instruc-\ntions significantly improves the model\u2019s proficiency at\ngenerating correct EDA tool scripts by 18%.\n\u2022Domain-adaptive tokenization reduce domain data to-\nken count by up to 3.3%without hurting effectiveness\non applications.\n\u2022Fine-tuning our ChipNeMo retrieval model with\n2", "a model is calculated as a percentage of the score that ChatGPT achieved. Note this relative score\ncan be higher than 100% if the model achieves a higher absolute score than ChatGPT. We find a\nsignificant ordering effect with GPT-4 increasing the score of the response occurring earlier in the\nprompt. To control for such effects, we recommend reporting the mean score over both orders.\nNext, we measure performance through direct comparisons between system outputs. We simplify\nthe rating scheme to a three-class labeling problem that accounts for ties. We prompt GPT-4 to\npick the best response or declare a tie and provide an explanation. We conduct these head-to-head\ncomparisons on all permutations of pairs of systems on both the Vicuna and OA benchmarks.\nHuman Evaluation While recent work indicates generative models can be effectively employed\nfor system evaluations [ 19], the reliability GPT-4 ratings to assess chatbot performance is, to our", "scores. RAG improves ChipNeMo-70B-Steer, GPT-4, and\nLLaMA2-70b-Chat by 0.56, 1.68, and 2.05, respectively.\nEven when RAG misses, scores are generally higher than\nwithout using retrieval. The inclusion of relevant in-domain\ncontext still led to improved performance, as retrieval is not\na strictly binary outcome. Furthermore, while ChipNeMo-\n70B-SFT outperforms GPT4 by a large margin through\ntraditional supervised fine-tuning, applying SteerLM meth-\nods (Wang et al., 2023) leads to further elevated chatbot\nratings. We refer readers to the complete evaluation results\nin Appendix A.9.\n3.6. EDA Script Generation\nIn order to evaluate our model on the EDA script generation\ntask, we created two different types of benchmarks. The first\nis a set of \u201cEasy\u201d and \u201cMedium\u201d difficulty tasks (1-4 line\nsolutions) that can be evaluated without human intervention\nby comparing with a golden response or comparing the\ngenerated output after code execution. The second set of", "results on automated \u201ceasy\u201d and \u201cmedium\u201d benchmarks\nwhere we check for fully accurate code. For \u201cHard\u201d bench-\nmarks in Figure 9 we check for partial correctness of the\ncode, which is evaluated by a human user on a 0-10 scale.\nChipNeMo-70B-Steer performs significantly better than off-\nthe-shelf GPT-4 and LLaMA2-70B-Chat model.\nFigure 8: EDA Script Generation Evaluation Results, Pass@5\nAs seen in Figure 8, models like GPT-4 and LLaMA2-70B-\nChat have close to zero accuracy for the Python tool where\nthe domain knowledge related to APIs of the tool are neces-\nsary. This shows the importance of DAPT. Without DAPT,\nthe model had little to no understanding of the underlying\nAPIs and performed poorly on both automatic and human\nevaluated benchmarks. Our aligned model further improved\nthe results of DAPT because our domain instructional data\nhelps guide the model to present the final script in the most\nuseful manner. An ablation study on inclusion of domain"], "retrieved_docs_id": ["e6b9ba907a", "c7d05c4b43", "4837050bfa", "af6e8c3fb2", "cf9d13203d"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How is LLM performance used in reinforcement learning for a rewriter module?\n", "true_answer": "LLM performance is used as a reward in reinforcement learning for a rewriter module, allowing the rewriter to adjust retrieval queries and improve the downstream task performance of the reader.", "source_doc": "RAG.pdf", "source_id": "79cd640612", "retrieved_docs": ["and Prefix-tuning (Li & Liang, 2021), provide solutions for tuning LLMs with limited resources.\nHowever, these methods do not offer a practical solution for full parameter fine-tuning, which has\nbeen acknowledged as a more powerful approach than parameter-efficient fine-tuning (Ding et al.,\n2022; Sun et al., 2023). In this work, we aim to explore techniques for accomplishing full parameter\nfine-tuning in resource-limited scenarios.\nWe analyze the four aspects of memory usage in LLMs, namely activation, optimizer states, gradient\ntensor and parameters, and optimize the training process in three folds: 1) We rethink the functional-\nity of an optimizer from an algorithmic perspective and find that SGD is a good replacement in terms\nof fine-tuning full parameter for LLMs. This allows us to remove the entire part of optimizer states\nsince SGD does not store any intermediate state (Sec-3.1). 2) Our proposed optimizer, LOMO as il-", "Retrieve-Read process, utilizing LLM performance as a\nreward in reinforcement learning for a rewritter module.\nThis allows the rewritter to adjust retrieval queries, im-\nproving the downstream task performance of the reader.\nSimilarly, modules can be selectively replaced in ap-\nproaches like Generate-Read [Yuet al. , 2022 ], where the\nLLM generation module replaces the retrieval module.", "igate alignment issues. PRCA [Yang et al. , 2023b ]lever-\naged reinforcement learning to train a context adapter\ndriven by LLM rewards, positioned between the re-\ntriever and generator. It optimizes the retrieved in-\nformation by maximizing rewards in the reinforcement\nlearning phase within the labeled autoregressive pol-\nicy. AAR [Yuet al. , 2023b ]proposed a universal plu-\ngin that learns LM preferences from known-source\nLLMs to assist unknown or non-co-finetuned LLMs.\nRRR [Maet al. , 2023a ]designed a module for rewriting\nqueries based on reinforcement learning to align queries\nwith documents in the corpus.\n\u2022Validation Module: In real-world scenarios, it is notalways guaranteed that the retrieved information is reli-\nable. Retrieving irrelevant data may lead to the occur-\nrence of illusions in LLM. Therefore, an additional val-\nidation module can be introduced after retrieving docu-\nments to assess the relevance between the retrieved doc-", "data formatting of instruction tuning in Section 5.1.1,\nthe empirical analysis for instruction tuning in Sec-\ntion 5.1.4, parameter-efficient model adaptation in\nSection 5.3 and memory-efficient adaptation in Sec-\ntion 5.4;\n\u2013Section 6: add latest discussion about the underlying\nmechanism of ICL 6.2.3, planning for complex task\nsolving in Section 6.4;\n\u2013Section 7: update Table 14 for representative datasets\nfor evaluating advanced abilities of LLMs, and em-\npirical ability evaluation in Section 7.4;\n\u2013Section 6.1.1: add prompt design;\n\u2013Section 8: add the discussions on applications of\nLLMs in finance and scientific research domains;\n\u2022Update on September 10, 2023 (major revision):\n\u2013Claim the copyrights of the figures and tables in this\npaper.\n\u2013Add latest LLMs, techniques and their descriptions in\nSection 3, Section 4, Section 5, Section 6 and Section 7;\n\u2013Section 4: add latest discussion about the decoding\nstrategy in Section 4.2.5;\n\u2013Section 5: add latest discussion about the practical", "and values. Second, identifying an optimal eviction policy that maintains generation accuracy is a\ncombinatorial problem1. Finally, even if an optimal policy can be brute-forced, it is infeasible for\ndeployment on real-world applications.\nFortunately, our preliminary exploration has yielded intriguing observations about the empirical\nproperties of LLMs. These findings pave the way for the potential design of an efficient KV cache .\nSparsity for small cache size : We observe that even when trained densely, the attention matrices of\nLLMs are over 95% sparse at inference time (shown in Figure 2). This holds for a wide range of\npre-trained LLMs. Therefore, only 5% of the KV cache is sufficient for decoding the same output\ntoken at each generation step, which suggests it may be possible to have up to a 20 \u00d7reduction in\nKV cache size without an accuracy drop.\nHeavy-Hitters for low miss rate : We discover that the accumulated attention scores of all tokens"], "retrieved_docs_id": ["da9c2daba5", "79cd640612", "8d0a82337c", "835d15c086", "f244b9d013"], "reranker_type": "None", "search_type": "vector", "rr": 0.5, "hit": 1}, {"question": "How does IRCoT use retrieval in its thought chain?\n", "true_answer": "IRCoT retrieves documents for each generated sentence, introducing retrieval at every step of the thought chain.", "source_doc": "RAG.pdf", "source_id": "89c7fd1852", "retrieved_docs": ["models for complementing with each other in solving com-\nplex cases of classic NLP tasks [772]. Another promising di-\nrection is to conduct human-machine collaborative research\n(e.g., conversational translation [768]) on NLP tasks, sinceLLMs can effectively understand human instructions and\nmake meaningful responses.\n8.1.2 LLM for Information Retrieval\nThe goal of information retrieval (IR) systems is to assist\nusers in discovering ideal information resources (typically\ndocuments) and mitigating the information overload issue.\nTypically, contemporary IR systems adopt a retrieve-then-\nrerank pipeline framework [54]. Within this framework,\nthe retriever initially retrieves relevant information from a\nlarge-scale corpus, and the reranker subsequently performs\nmulti-stage ranking procedure to acquire the most relevant\ninformation [773]. Since the advent of LLMs has significant\nimpact on the way of information access, we discuss how\nit advances the development of IR from two main aspects,", "ITER-RETGEN [Shao et al. , 2023 ]collaboratively utilizes\n\u201dretrieval-enhanced generation\u201d and \u201dgeneration-enhanced\nretrieval\u201d for tasks requiring reproduction of information.\nThat is, the model uses the content needed to complete the\ntask to respond to the input task, and these target contents\nserve as the information context for retrieving more relevant\nknowledge. This helps to generate better responses in another\niteration.\nIRCoT [Trivedi et al. , 2022 ]also explores retrieving docu-\nments for each generated sentence, introducing retrieval at\nevery step of the thought chain. It uses CoT to guide the re-\ntrieval and uses the retrieval results to improve CoT, ensuring\nsemantic completeness.\nAdaptive Retrieval\nIndeed, the RAG methods described in the previous two\nsections follow a passive approach where retrieval is prior-", "Recite-Read [Sunet al. , 2022 ]transforms external re-\ntrieval into retrieval from model weights, initially hav-\ning LLM memorize task-relevant information and gener-\nate output for handling knowledge-intensive natural lan-\nguage processing tasks.\n\u2022Adjusting the Flow between Modules In the realm of\nadjusting the flow between modules, there is an empha-\nsis on enhancing interaction between language models\nand retrieval models. DSP [Khattab et al. , 2022 ]intro-\nduces the Demonstrate-Search-predict framework, treat-\ning the context learning system as an explicit program\nrather than a terminal task prompt to address knowledge-\nintensive tasks. ITER-RETGEN [Shao et al. , 2023 ]\nutilizes generated content to guide retrieval, itera-\ntively performing \u201cretrieval-enhanced generation\u201d and\n\u201cgeneration-enhanced retrieval\u201d in a Retrieve-Read-\nRetrieve-Read flow. Self-RAG [Asai et al. , 2023b ]fol-\nlows the decide-retrieve-reflect-read process, introduc-", "phase to capture key semantic meanings. In the later\nstages of this process, larger blocks with more contex-\ntual information are provided to the language model\n(LM). This two-step retrieval method helps strike a bal-\nance between efficiency and contextually rich responses.\n\u2022StepBack-prompt: Integrated into the RAG process,\nthe StepBack-prompt approach [Zheng et al. , 2023 ]en-\ncourages LLM to step back from specific instances and\nengage in reasoning about the underlying general con-\ncepts or principles. Experimental findings indicate a sig-\nnificant performance improvement in various challeng-\ning, inference-intensive tasks with the incorporation of\nbackward prompts, showcasing its natural adaptability\nto RAG. The retrieval-enhancing steps can be applied in\nboth the generation of answers to backward prompts and\nthe final question-answering process.\n\u2022Subqueries: Various query strategies can be employed in\ndifferent scenarios, including using query engines pro-", "the retrieval performance, several studies also propose an\niterative reading-then-reasoning framework, enabling the\nLLM to interact with the KG multiple times and acquire the\nrequired knowledge in a more accurate way [458]. For the\nsecond issue ( i.e.,utilizing retrieved knowledge), a straight-\nforward approach is to serialize the retrieved subgraph\nand craft specific prompts to include it as the input of\nLLMs [471, 651]. However, due to the loss of structured\ninformation in knowledge serialization, LLMs cannot fully\ncapture the structural semantics conveyed by original KGs.\nTo address this issue, several model-based approaches train\na specialized language model ( e.g., T5) to transform the\nsubgraph into the natural language text [867]. To guarantee\nthe transformation accuracy, it relies on sufficient training\npairs (often unsupervised constructed) [868] and excellent\nmodel capability [869].\nSynergy-Augmented LLM. To solve complex tasks ( e.g.,"], "retrieved_docs_id": ["f738db1ca0", "89c7fd1852", "dfac20a7d8", "ad03b3dcc5", "fb5c13b0e4"], "reranker_type": "None", "search_type": "vector", "rr": 0.5, "hit": 1}, {"question": "How is the IT stage typically conducted in the context of Multi-Task Language Model Learning?\n", "true_answer": "The IT stage is typically conducted within the paradigm of Supervised Fine-Tuning (SFT).", "source_doc": "multimodal.pdf", "source_id": "0806fe2e1a", "retrieved_docs": ["LLMs. This survey tries to cover the most recent literature\nabout LLMs and provides a good reference resource on this\ntopic for both researchers and engineers.\nNext, we summarize the discussions of this survey, and\nintroduce the challenges and future directions for LLMs, in\nthe following aspects.\nBasics and Principles. Instead of training on specific task\ngoals, LLMs learn from unsupervised pre-training on large-\nscale text data. This is quite different from previous multi-\ntask learning approaches, which aim to extend the training\ntasks as possible to achieve sufficient generalization. Thus,\nit is essential to reveal the basic principles or elements that\nestablish the foundation of the abilities of LLMs. Although\nthe basic idea of language models is intuitive, it is still chal-\nlenging to formally explain why LLMs trained by simple\nlanguage modeling objectives ( e.g., next token prediction)\ncan become capable of solving various real-world tasks.", "regardless of their method of procurement. If a language\nmodel is able to do this it will be, in effect, performing\nunsupervised multitask learning. We test whether this is the\ncase by analyzing the performance of language models in a\nzero-shot setting on a wide variety of tasks.\n2.1. Training Dataset\nMost prior work trained language models on a single do-\nmain of text, such as news articles (Jozefowicz et al., 2016),\nWikipedia (Merity et al., 2016), or \ufb01ction books (Kiros\net al., 2015). Our approach motivates building as large and\ndiverse a dataset as possible in order to collect natural lan-\nguage demonstrations of tasks in as varied of domains and\ncontexts as possible.\nA promising source of diverse and nearly unlimited text is\nweb scrapes such as Common Crawl. While these archives\nare many orders of magnitude larger than current language\nmodeling datasets, they have signi\ufb01cant data quality issues.\nTrinh & Le (2018) used Common Crawl in their work on", "Language Models are Unsupervised Multitask Learners\nAlec Radford*1Jeffrey Wu*1Rewon Child1David Luan1Dario Amodei**1Ilya Sutskever**1\nAbstract\nNatural language processing tasks, such as ques-\ntion answering, machine translation, reading com-\nprehension, and summarization, are typically\napproached with supervised learning on task-\nspeci\ufb01c datasets. We demonstrate that language\nmodels begin to learn these tasks without any ex-\nplicit supervision when trained on a new dataset\nof millions of webpages called WebText. When\nconditioned on a document plus questions, the an-\nswers generated by the language model reach 55\nF1 on the CoQA dataset - matching or exceeding\nthe performance of 3 out of 4 baseline systems\nwithout using the 127,000+ training examples.\nThe capacity of the language model is essential\nto the success of zero-shot task transfer and in-\ncreasing it improves performance in a log-linear\nfashion across tasks. Our largest model, GPT-2,\nis a 1.5B parameter Transformer that achieves", "One potential route towards addressing these issues is meta-learning1\u2013 which in the context of language models means\nthe model develops a broad set of skills and pattern recognition abilities at training time, and then uses those abilities\nat inference time to rapidly adapt to or recognize the desired task (illustrated in Figure 1.1). Recent work [ RWC+19]\nattempts to do this via what we call \u201cin-context learning\u201d, using the text input of a pretrained language model as a form\nof task speci\ufb01cation: the model is conditioned on a natural language instruction and/or a few demonstrations of the task\nand is then expected to complete further instances of the task simply by predicting what comes next.\nWhile it has shown some initial promise, this approach still achieves results far inferior to \ufb01ne-tuning \u2013 for example\n[RWC+19] achieves only 4% on Natural Questions, and even its 55 F1 CoQa result is now more than 35 points behind", "multi-task \ufb01ne-tuning rather than for in-context learning without weight updates.\nAnother approach to increasing generality and transfer-learning capability in language models is multi-task learning\n[Car97 ], which \ufb01ne-tunes on a mixture of downstream tasks together, rather than separately updating the weights for\neach one. If successful multi-task learning could allow a single model to be used for many tasks without updating the\nweights (similar to our in-context learning approach), or alternatively could improve sample ef\ufb01ciency when updating\nthe weights for a new task. Multi-task learning has shown some promising initial results [ LGH+15,LSP+18] and\nmulti-stage \ufb01ne-tuning has recently become a standardized part of SOTA results on some datasets [ PFB18 ] and pushed\nthe boundaries on certain tasks [ KKS+20], but is still limited by the need to manually curate collections of datasets and"], "retrieved_docs_id": ["8b22e588d8", "55526158a3", "5981cc3258", "aa33f94ed2", "4e6d19e6c4"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What is the computational complexity of State Space Models (SSMs) during inference?\n", "true_answer": "State Space Models (SSMs) offer near-linear computational complexity during inference.", "source_doc": "multimodal.pdf", "source_id": "bb2e9ee3f0", "retrieved_docs": ["Figure 13: The elements(left) block(middle) and architecture(right) in RWKV [151].\nThis approach parallelizes computations during training and maintains constant computational and\nmemory complexity during inference.\nState Space Models (SSMs) [152] can be formulated as a type of RNN for efficient autoregressive\ninference and have emerged as a promising alternative to attention mechanisms, offering near-linear\ncomputational complexity compared to the quadratic complexity of attention. SSMs are formulated\nas x\u2019(t) = Ax(t) + Bu(t), y(t) = Cx(t) + Du(t), mapping a single-dimension input signal u(t) to an N-\ndimension latent state x(t) before projecting it to a single-dimension output signal y(t), with A, B, C,\nand D being parameters learned by gradient descent [152]. Several techniques have been proposed\nto enhance SSMs, such as the Structured State Space sequence model (S4) [152], which refines\nSSMs by conditioning matrix A with a low-rank correction, and the Diagonal State Space (DSS)", "sequence length requires /u1D442./u1D435/u1D43F/u1D437/u1D441 )time and memory; this is the root of the fundamental e\ufb03ciency bottleneck\naddressed in Section 3.3.\nGeneral State Space Models. We note that the term state space model has a very broad meaning which simply\nrepresents the notion of any recurrent process with a latent state. It has been used to refer to many disparate\nconcepts in di\ufb00erent disciplines, including Markov decision processes (MDP) (reinforcement learning (Hafner\net al. 2020)), dynamic causal modeling (DCM) (computational neuroscience (Friston, Harrison, and Penny 2003)),\nKalman \ufb01lters (controls (Kalman 1960)), hidden Markov models (HMM) and linear dynamical systems (LDS)\n(machine learning), and recurrent (and sometimes convolutional) models at large (deep learning).\nThroughout this entire paper we use the term \u201cSSM\u201d to refer exclusively to the class of structured SSMs or S4", "SSMs by conditioning matrix A with a low-rank correction, and the Diagonal State Space (DSS)\nmodel [153], which proposes fully diagonal parameterization of state spaces for greater efficiency.\nH3 stacks two SSMs to interact with their output and input projection, bridging the gap between\nSSMs and attention while adapting to modern hardware. Mamba [77], a selective state space model,\nhas been introduced as a strong competitor to the Transformer architecture in large language models.\nMamba incorporates a selection mechanism to eliminate irrelevant data and develops a hardware-\naware parallel algorithm for recurrent operation. This results in competitive performance compared\nto LLMs of the same capacity, with faster inference speeds that scale linearly with time and con-\nstant memory usage. In conclusion, State Space Models offer significant potential as an alternative\nto attention mechanisms by providing near-linear computational complexity and effectively captur-", "insufficient for length generalization in the context\nof reasoning tasks. Instead, they propose combin-\ning in-context learning and scratchpad/chain-of-\nthought reasoning to enable LLMs to generalize to\nunseen sequence lengths in- and out-of-distribution,\nwith performance scaling with model size. The au-\nthors report that fine-tuning can further improve\nmodel performance dependent on the task perfor-\nmance of the baseline.\nTransformer Alternatives While Transformers\nare the dominant paradigm in LLMs today due to\ntheir strong performance, several more efficient\nalternative architectures exist. One line of work\ntries to replace the attention mechanism using state\nspace models (SSMs), which offer near-linear com-\nputational complexity w.r.t. the sequence length.\nDao et al. [108] investigate the weaknesses of state\nspace models (SSMs) in language modeling and\nfind that existing approaches struggle with recall-\ning previous tokens and comparing tokens in the", "ProjectDiscretize\ud835\udc65!\u210e!\"#\u210e!\ud835\udc66!\ud835\udc34\ud835\udc36!\ud835\udc35!Selection MechanismGPU SRAMGPU HBM\u2206!Selective State Space ModelwithHardware-aware State ExpansionFigure 1: ( Overview .) Structured SSMs independently map each channel (e.g. /u1D437= 5) of an input xto output /u1D466through a higher\ndimensional latent state /uni210E(e.g./u1D441= 4). Prior SSMs avoid materializing this large e\ufb00ective state ( /u1D437/u1D441, times batch size /u1D435and sequence\nlength /u1D43F) through clever alternate computation paths requiring time-invariance: the .\u2206,A,B,C)parameters are constant across\ntime. Our selection mechanism adds back input-dependent dynamics, which also requires a careful hardware-aware algorithm to\nonly materialize the expanded states in more e\ufb03cient levels of the GPU memory hierarchy.\n2 State Space Models\nStructured state space sequence models (S4) are a recent class of sequence models for deep learning that are"], "retrieved_docs_id": ["bb2e9ee3f0", "79e095312d", "85b5cac71b", "9e5f877b03", "ac9544cf55"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How did the domain-adapted retrieval model perform compared to Sentence Transformer and e5small unsupervised in the Specs category?\n", "true_answer": "The domain-adapted model performed 2x better than the original e5small unsupervised model and 30% better than the sentence transformer in the Specs category.", "source_doc": "ChipNemo.pdf", "source_id": "79a9ff88c8", "retrieved_docs": ["retrieval. It includes about 1.8K documents, which were\nsegmented into 67K passages, each about 512 characters.\nFirst, we compare our domain adapted retrieval model with\nSentence Transformer (Reimers & Gurevych, 2019) and\ne5small unsupervised (Wang et al., 2022) on each category.\nEach model fetches its top 8 passages from the data store.\nAs shown in Figure 6, our domain-adapted model performed\n2x better than the original e5small unsupervised model and\n30% better than sentence transformer.\nFigure 6: Retrieval Model Accuracy Comparison\nThe queries in the Specs category are derived directly from\npassages in the documents, so their answers are often nicely\ncontained in a concise passage and clearly address the query.\nOn the other hand, the queries of the Testbench and Build\ncategories are not directly derived from passages, so their\nanswers were often not as apparent in the fetched passages\nand required more context (see Appendix A.8 for detailed", "determination, and text classi\ufb01cation, improving the state of the art on 9 of the 12 datasets we\nstudy. Using unsupervised (pre-)training to boost performance on discriminative tasks has long\nbeen an important goal of Machine Learning research. Our work suggests that achieving signi\ufb01cant\nperformance gains is indeed possible, and offers hints as to what models (Transformers) and data sets\n(text with long range dependencies) work best with this approach. We hope that this will help enable\nnew research into unsupervised learning, for both natural language understanding and other domains,\nfurther improving our understanding of how and when unsupervised learning works.\nReferences\n[1] S. Arora, Y . Liang, and T. Ma. A simple but tough-to-beat baseline for sentence embeddings. 2016.\n8", "vant in-domain knowledge from its data store to augment\nthe response generation given a user query. This method\nshows significant improvement in grounding the model to\nthe context of a particular question. Crucially we observed\nsignificant improvements in retrieval hit rate when finetun-\ning a pretrained retrieval model with domain data. This led\nto even further improvements in model quality.\nOur results show that domain-adaptive pretraining was the\nprimary technique driving enhanced performance in domain-\nspecific tasks. We highlight the following contributions and\nfindings for adapting LLMs to the chip design domain:\n\u2022We demonstrate domain-adapted LLM effectiveness on\nthree use-cases: an engineering assistant chatbot, EDA\ntool script generation, and bug summarization and anal-\nysis. We achieve a score of 6.0 on a 7 point Likert scale\nfor engineering assistant chatbot based on expert eval-\nuations, more than 70% correctness on the generation", "Table 1: A list of the different tasks and datasets used in our experiments.\nTask Datasets\nNatural language inference SNLI [5], MultiNLI [66], Question NLI [64], RTE [4], SciTail [25]\nQuestion Answering RACE [30], Story Cloze [40]\nSentence similarity MSR Paraphrase Corpus [14], Quora Question Pairs [9], STS Benchmark [6]\nClassi\ufb01cation Stanford Sentiment Treebank-2 [54], CoLA [65]\nbut is shuf\ufb02ed at a sentence level - destroying long-range structure. Our language model achieves a\nvery low token level perplexity of 18.4 on this corpus.\nModel speci\ufb01cations Our model largely follows the original transformer work [ 62]. We trained a\n12-layer decoder-only transformer with masked self-attention heads (768 dimensional states and 12\nattention heads). For the position-wise feed-forward networks, we used 3072 dimensional inner states.\nWe used the Adam optimization scheme [ 27] with a max learning rate of 2.5e-4. The learning rate", "the prompt together with the question, which grounds the\nLLM to produce more accurate answers. We find that using\na domain adapted language model for RAG significantly\nimproves answer quality on our domain specific questions.\nAlso, we find that fine-tuning an off-the-shelf unsupervised\npre-trained dense retrieval model with a modest amount\nof domain specific training data significantly improves re-\ntrieval accuracy. Our domain-adapted RAG implementation\ndiagram is illustrated on Figure 3.\nFigure 3: RAG Implementation Variations\nWe created our domain adapted retrieval model by fine-\ntuning the e5small unsupervised model (Wang et al., 2022)\nwith 3000 domain specific auto-generated samples using the\nTevatron framework (Gao et al., 2022). We refer readers to\nthe details on the sample generation and training process in\nAppendix A.8.\nEven with the significant gains that come with fine-tuning a\nretrieval model, the fact remains that retrieval still struggles"], "retrieved_docs_id": ["79a9ff88c8", "7648bde015", "28f0897bcb", "f3ec3a526d", "ad55562468"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "What is a significant challenge in the practical application of multimodal large language models?\n", "true_answer": "The phenomenon of hallucination is a significant challenge in the practical application of multimodal large language models.", "source_doc": "hallucination.pdf", "source_id": "114f3dada8", "retrieved_docs": ["Figure 2: Organization of efficient multimodal large language models advancements.\n\u2022 Training surveys the landscape of training methodologies that are pivotal in the devel-\nopment of efficient MLLMs. It addresses the challenges associated with the pre-training\nstage, instruction-tuning stage, and the overall training strategy for state-of-the-art results.\n\u2022 Data and Benchmarks evaluates the efficiency of datasets and benchmarks used in the\nevaluation of multimodal language models. It assesses the trade-offs between dataset size,\ncomplexity, and computational cost, while advocating for the development of benchmarks\nthat prioritize efficiency and relevance to real-world applications.\n\u2022 Application investigates the practical implications of efficient MLLMs in various do-\nmains, emphasizing the balance between performance and computational cost. By ad-\ndressing resource-intensive tasks such as high-resolution image understanding and medical\n3", "Efficient Multimodal Large Language Models:\nA Survey\nYizhang Jin1,2,*, Jian Li1,*, Yexin Liu3, Tianjun Gu4, Kai Wu1, Zhengkai Jiang1,\nMuyang He3, Bo Zhao3, Xin Tan4, Zhenye Gan1, Yabiao Wang1, Chengjie Wang1,\nLizhuang Ma2\n1Youtu Lab, Tencent,2SJTU,3BAAI,4ECNU\nAbstract\nIn the past year, Multimodal Large Language Models (MLLMs) have demon-\nstrated remarkable performance in tasks such as visual question answering, vi-\nsual understanding and reasoning. However, the extensive model size and high\ntraining and inference costs have hindered the widespread application of MLLMs\nin academia and industry. Thus, studying efficient and lightweight MLLMs\nhas enormous potential, especially in edge computing scenarios. In this survey,\nwe provide a comprehensive and systematic review of the current state of effi-\ncient MLLMs. Specifically, we summarize the timeline of representative effi-\ncient MLLMs, research state of efficient structures and strategies, and the appli-", "Challenges and Applications of Large Language Models\nJean Kaddour\u03b1,\u2020,\u2217, Joshua Harris\u03b2,\u2217, Maximilian Mozes\u03b1,\nHerbie Bradley\u03b3,\u03b4,\u03f5, Roberta Raileanu\u03b6, and Robert McHardy\u03b7,\u2217\n\u03b1University College London\u03b2UK Health Security Agency\u03b3EleutherAI\n\u03b4University of Cambridge\u03f5Stability AI\u03b6Meta AI Research\u03b7InstaDeep\nAbstract\nLarge Language Models (LLMs) went from\nnon-existent to ubiquitous in the machine learn-\ning discourse within a few years. Due to the\nfast pace of the field, it is difficult to identify\nthe remaining challenges and already fruitful\napplication areas. In this paper, we aim to es-\ntablish a systematic set of open problems and\napplication successes so that ML researchers\ncan comprehend the field\u2019s current state more\nquickly and become productive.\nContents\n1 Introduction 1\n2 Challenges 2\n2.1 Unfathomable Datasets . . . . . . 2\n2.2 Tokenizer-Reliance . . . . . . . . 4\n2.3 High Pre-Training Costs . . . . . 6\n2.4 Fine-Tuning Overhead . . . . . . 10\n2.5 High Inference Latency . . . . . . 11", "multimodal corpora achieve promising results across a wide range of language tasks and multimodal\ntasks. We show that going from LLMs to MLLMs enables new capabilities and opportunities. In\nthe future, we would like to scale up KOSMOS -1in terms of model size [ MWH+22,WMH+22,\nCDH+22], and integrate the speech [ WCW+23] capability into KOSMOS -1. In addition, KOSMOS -1\ncan be used as a uni\ufb01ed interface for multimodal learning, e.g., enabling using instructions and\nexamples to control text-to-image generation.\nReferences\n[ADL+22]Jean-Baptiste Alayrac, Jeff Donahue, Pauline Luc, Antoine Miech, Iain Barr, Yana\nHasson, Karel Lenc, Arthur Mensch, Katherine Millican, Malcolm Reynolds, Roman\nRing, Eliza Rutherford, Serkan Cabi, Tengda Han, Zhitao Gong, Sina Samangooei, Mar-\nianne Monteiro, Jacob Menick, Sebastian Borgeaud, Andrew Brock, Aida Nematzadeh,\nSahand Sharifzadeh, Mikolaj Binkowski, Ricardo Barreira, Oriol Vinyals, Andrew", "is a document and the output is its summary. So we can feed the input document into the language\nmodel and then produce the generated summary.\nDespite the successful applications in natural language processing, it is still struggling to natively use\nLLMs for multimodal data, such as image, and audio. Being a basic part of intelligence, multimodal\nperception is a necessity to achieve arti\ufb01cial general intelligence, in terms of knowledge acquisition\nand grounding to the real world. More importantly, unlocking multimodal input [ TMC+21,HSD+22,\nWBD+22,ADL+22,AHR+22,LLSH23 ] greatly widens the applications of language models to\nmore high-value areas, such as multimodal machine learning, document intelligence, and robotics.\nIn this work, we introduce KOSMOS -1, a Multimodal Large Language Model (MLLM) that can\nperceive general modalities, follow instructions (i.e., zero-shot learning), and learn in context (i.e.,"], "retrieved_docs_id": ["542e5c49da", "ac70fcc9f2", "bf695e58cf", "38ef64d2f1", "74bb21ad4f"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How do large language models (LLMs) decide when to search for relevant queries?\n", "true_answer": "LLMs decide to search for a relevant query when they think it is necessary.", "source_doc": "RAG.pdf", "source_id": "8d605d7952", "retrieved_docs": ["maintaining user privacy and data security are crucial con-\nsiderations when applying LLMs to real-world scenarios.\n9 C ONCLUSION AND FUTURE DIRECTIONS\nIn this survey, we have reviewed the recent progress of large\nlanguage models (LLMs), and introduced the key concepts,\nfindings, and techniques for understanding and utilizing\nLLMs. We focus on the large-sized models ( i.e.,having a size\nlarger than 10B) while excluding the contents of early pre-\ntrained language models ( e.g., BERT and GPT-2) that have\nbeen well covered in the existing literature. In particular,our survey has discussed four important aspects of LLMs,\ni.e.,pre-training, adaptation, utilization, and evaluation. For\neach aspect, we highlight the techniques or findings that are\nkey to the success of LLMs. Furthermore, we also summa-\nrize the available resources for developing LLMs and dis-\ncuss important implementation guidelines for reproducing\nLLMs. This survey tries to cover the most recent literature", "the query. As a solution, LLM can be utilized to rewrite the\nquery for enhancing the understanding of the query intent\nand incorporating additional knowledge into the query\nthrough well-designed instructions. The rewritten query\ncan take the form of an improved version of the original\nquery [791], a document in the corpus that related to the\nquery [792], or an expansion of the query that concatenated\nwith a pseudo generated document [793]. In addition, docu-\nments can also be expanded with queries that are generated\nbased on the original documents using LLMs for context\nextension [794].\nRemaining Issues. In this part, we further discuss several\nimportant issues to apply LLMs to improve IR systems.\nFirst, though LLMs are capable of being as general-purpose\ntask solvers, they are not directly well suited for existing\nIR systems: they require high overhead for inference [774,\n782], have limitations in modeling long texts or document", "Lost in the Middle: How Language Models Use Long Contexts\nNelson F. Liu1\u2217Kevin Lin2John Hewitt1Ashwin Paranjape3\nMichele Bevilacqua3Fabio Petroni3Percy Liang1\n1Stanford University2University of California, Berkeley3Samaya AI\nnfliu@cs.stanford.edu\nAbstract\nWhile recent language models have the abil-\nity to take long contexts as input, relatively\nlittle is known about how well they use\nlonger context. We analyze the performance\nof language models on two tasks that require\nidentifying relevant information in their in-\nput contexts: multi-document question an-\nswering and key-value retrieval. We find that\nperformance can degrade significantly when\nchanging the position of relevant informa-\ntion, indicating that current language models\ndo not robustly make use of information in\nlong input contexts. In particular, we observe\nthat performance is often highest when rele-\nvant information occurs at the beginning or\nend of the input context, and significantly", "models must retrieve from the middle of the input context.\nplaced at the start of the input context, LongChat-\n13B (16K) tends to generate code to retrieve the\nkey, rather than outputting the value directly.\n4Why Are Language Models Not Robust\nto Changes in the Position of Relevant\nInformation?\nOur multi-document question answering and key-\nvalue retrieval results show that language models\nstruggle to robustly access and use information in\nlong input contexts, since performance degrades\nsignificantly when changing the position of rele-\nvant information. To better understand why, we per-\nform some preliminary investigations into the role\nof model architecture (decoder-only vs. encoder-\ndecoder), query-aware contextualization, and in-\nstruction fine-tuning.\n4.1 Effect of Model Architecture\nThe open models we evaluated are all decoder-only\nmodels\u2014at each timestep, they may only attend\nto prior tokens. To better understand the poten-\ntial effects of model architecture on how language", "782], have limitations in modeling long texts or document\nlists [778], and need special adaptation ( e.g., instruction\ntuning) to perform the text ranking task [795]. Therefore,\nmore systematic approaches to adapt LLMs for modern IR\nsystems should be investigated, to leverage their benefits\nand meanwhile overcome these limitations. Secondly, the\nadvent of LLMs sheds lights on the development of new\ninformation seeking ways ( e.g., New Bing). It is meaningful\nto explore how to reshape the architecture and paradigm\nof IR by integrating the LLMs\u2019 capacities and the merits\nof existing IR systems [796]. Thirdly, existing work mainlyfocuses on text retrieval tasks, lacking a comprehensive\nconsideration of multimodal information sources. As will\nbe discussed in Section 8.1.4, multimodal large language\nmodels [797] are also widely studied, making it feasible to\ndevelop more powerful multimedia retrieval systems.\n8.1.3 LLM for Recommender Systems"], "retrieved_docs_id": ["3ba0afeccb", "de435e084d", "2cb4685da4", "91a4302548", "549ce86f3c"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What is one potential application of large language models in GPU ASIC and Architecture design?\n", "true_answer": "One potential application of large language models in GPU ASIC and Architecture design is as an engineering assistant chatbot that understands internal hardware terminology and can assist engineers with their tasks.", "source_doc": "ChipNemo.pdf", "source_id": "f23b3625e0", "retrieved_docs": ["on a GPU, there is no need for communicating updated\nparameter values in this formulation.\nWe present further details about the hybrid model and data\nparallelism and handling random number generation in Ap-\npendix B for reference. In summary, our approach as de-\nscribed above is simple to implement, requiring only a few\nextra all-reduce operations added to the forward and back-\nward pass. It does not require a compiler, and is orthogonal\nand complementary to the pipeline model parallelism advo-\ncated by approaches such as (Huang et al., 2018).4. Setup\nPretrained language understanding models are central tasks\nin natural language processing and language understanding.\nThere are several formulations of language modeling. In\nthis work we focus on GPT-2 (Radford et al., 2019), a left-\nto-right generative transformer based language model, and\nBERT (Devlin et al., 2018), a bi-directional transformer\nmodel based on language model masking. We explain our", "each needing to access the entire model consisting of hundreds\nof billions of parameters. Therefore, the inference process\nis fundamentally constrained by the GPU\u2019s memory capac-\nity. This limitation is particularly acute in local deployments\nwhere the processing of individual requests (often just one at\na time) [6] leaves minimal opportunity for parallel processing.\nExisting approaches to such memory issues include model\ncompression and of\ufb02oading. Compression techniques like\nquantization [12,46], distillation [48], and pruning [23] reduce\nthe model size. However, even deeply compressed models\nremain too large for consumer-grade GPUs. For instance, an\nOPT-66B model with 4-bit precision demands approximately\n40GB of memory just to load its parameters [20], exceed-\ning the capacity of even high-end GPUs like the NVIDIA\nRTX 4090. Model of\ufb02oading, which partitions the model be-\ntween GPU and CPU at the Transformer layer level [3,14,37].", "Megatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism\nTable 7. Effect of number of attention heads on scaling on 8.3\nbillion of parameters with 8-way model parallelism.\nAttention heads Hidden size per head Scaling Ef\ufb01ciency\n16 192 82%\n24 128 80%\n32 96 77%\nTable 8. Speedup obtained for the 1.2 billion parameters model\nusing model parallelism while keeping the batch size constant.\n# of GPUs 1 2 4 8\nSpeedup 1.0 1.64 2.34 2.98\nsingle GPU, but it can also accelerate the training of smaller\nmodels without increasing the batch size. To measure this\nacceleration we train a model with a \ufb01xed 1.2 billion parame-\nters. We use a \ufb01xed batch size of 8 samples per iteration and\nincrease the number of GPUs using model parallelism. The\nresults are listed in Table 8. Using two GPUs makes training\n64% faster. Above that we see diminishing returns as the\nper-GPU computation decreases and the memory bandwidth\nand communication overheads begin to dominate.", "[25] D. Narayanan, M. Shoeybi, J. Casper, P. LeGresley, M. Patwary, V . Korthikanti, D. Vainbrand,\nP. Kashinkunti, J. Bernauer, B. Catanzaro, A. Phanishayee, and M. Zaharia. Efficient large-scale\nlanguage model training on gpu clusters using megatron-lm. In Proceedings of the International\nConference for High Performance Computing, Networking, Storage and Analysis , SC \u201921, New\nYork, NY , USA, 2021. Association for Computing Machinery. ISBN 9781450384421. doi:\n10.1145/3458817.3476209. URL https://doi.org/10.1145/3458817.3476209 .\n[26] L. Ouyang, J. Wu, X. Jiang, D. Almeida, C. Wainwright, P. Mishkin, C. Zhang, S. Agarwal,\nK. Slama, A. Ray, J. Schulman, J. Hilton, F. Kelton, L. Miller, M. Simens, A. Askell, P. Welinder,\nP. F. Christiano, J. Leike, and R. Lowe. Training language models to follow instructions with\nhuman feedback. In S. Koyejo, S. Mohamed, A. Agarwal, D. Belgrave, K. Cho, and A. Oh,\neditors, Advances in Neural Information Processing Systems , volume 35, pages 27730\u201327744.", "in native PyTorch. We illustrate this approach\nby converging transformer based models up to\n8.3 billion parameters using 512 GPUs. We sus-\ntain 15.1 PetaFLOPs across the entire applica-\ntion with 76% scaling ef\ufb01ciency when compared\nto a strong single GPU baseline that sustains 39\nTeraFLOPs, which is 30% of peak FLOPs. To\ndemonstrate that large language models can fur-\nther advance the state of the art (SOTA), we train\nan 8.3 billion parameter transformer language\nmodel similar to GPT-2 and a 3.9 billion parame-\nter model similar to BERT. We show that careful\nattention to the placement of layer normalization\nin BERT-like models is critical to achieving in-\ncreased performance as the model size grows. Us-\ning the GPT-2 model we achieve SOTA results\non the WikiText103 (10.8 compared to SOTA per-\nplexity of 15.8) and LAMBADA (66.5% com-\npared to SOTA accuracy of 63.2%) datasets. Our\nBERT model achieves SOTA results on the RACE\ndataset (90.9% compared to SOTA accuracy of\n89.4%)."], "retrieved_docs_id": ["340e70d67f", "5c35ca0edb", "be3bd91cd9", "7d7f8b95fd", "6ceaba2d4a"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What are the two types of evaluation instances in VHTest?\n", "true_answer": "The two types of evaluation instances in VHTest are \"open-ended question\" (OEQ) and \"yes/no question\" (YNQ).", "source_doc": "hallucination.pdf", "source_id": "8ef8344de6", "retrieved_docs": ["tonomously judge inputs and generate accurate answers.\n7 RAG Evaluation\nIn exploring the development and optimization of RAG, ef-\nfectively evaluating its performance has emerged as a central\nissue. This chapter primarily discusses the methods of eval-\nuation, key metrics for RAG, the abilities it should possess,\nand some mainstream evaluation frameworks.\n7.1 Evaluation Methods\nThere are primarily two approaches to evaluating the ef-\nfectiveness of RAG: independent evaluation and end-to-endevaluation [Liu, 2023 ].\nIndependent Evaluation\nIndependent evaluation includes assessing the retrieval mod-\nule and the generation (read/synthesis) module.\n1.Retrieval Module\nA suite of metrics that measure the effectiveness of sys-\ntems (like search engines, recommendation systems, or\ninformation retrieval systems) in ranking items accord-\ning to queries or tasks are commonly used to evaluate\nthe performance of the RAG retrieval module. Exam-\nples include Hit Rate, MRR, NDCG, Precision, etc.", "thermore, it can evolve into a multi-turn interaction frame-\nwork, where LLM-based evaluators provide natural lan-\nguage feedback to existing solutions from task solvers [891].\nThis framework evaluates the ability of LLMs to leverage\nlanguage feedback for refining self-generated solutions.\nEvaluation Methods. A common method for LLM-based\nevaluation involves prompting LLMs with specific instruc-\ntions. To further improve the quality of LLM-based eval-\nuation, recent work proposes to prompt LLMs with varied\ncontexts to generate diverse evaluation feedback. These con-\ntexts vary in aspects such as the candidate order [647, 727],\nevaluation perspectives [892, 893] ( e.g., relevance, clarity,\noriginality), and evaluation explanation [647]. The gener-\nated multiple evaluation feedbacks are then aggregated to\nproduce a final evaluation result, which makes the evalua-\ntion process less prone to biases from individual feedback\nand allows for a more thorough evaluation by covering", "VHTest [ 46]VHTest categorizes visual properties of objects in an image into 1) individual\nproperties, such as existence, shape, color, orientation, and OCR; and 2) group properties, which\nemerge from comparisons across multiple objects, such as relative size, relative position, and\ncounting. Based on such categorization, the authors further defined 8 visual hallucination modes,\nproviding a very detailed evaluation of hallucination in MLLMs. Furthermore, the collected 1,200\nevaluation instances are divided into two versions: \"open-ended question\" (OEQ) and \"yes/no\nquestion\" (YNQ). Such design enables this benchmark to evaluate both generative and discriminative\ntasks.\nComparison of mainstream models We compare the mainstream MLLMs on some represen-\ntative benchmarks, providing a holistic overview of their performance from different dimensions.\nThe results are shown in Table 2 for generative tasks and Table 3 for discriminative tasks. We", "8.1.7 LLM for Evaluation\nWhile human evaluation can generally offer reliable quality\nassessment, it is also often hindered by high annotation\ncosts, significant time requirements, and annotation incon-\nsistencies [887]. In contrast, automatic evaluation can be\nemployed as a scalable alternative to human evaluation.\nTraditional automatic evaluations have relied on reference-\nbased metrics ( e.g., BLEU and ROUGE). Recently, with\nthe emergence of LLMs as general task solvers highlights\ntheir potential as automatic evaluators [647, 727], making it\npromising to conduct LLM based evaluation. In the follow-ing part, we will introduce the recent progress on LLM for\nevaluation, including evaluation formats, methods, meta-\nevaluation, and the remaining issues.\nEvaluation Formats. Depending on the type of evaluation\noutcome, the evaluation format can be categorized into\nscore-based evaluation and language-based evaluation . Score-\nbased evaluation employs measurable metrics to assign", "Results for natural language understanding tasks\nare shown in Tables 2 and 3, while results for\nHendrycks tasks are found in ???????? .\nAll evaluations had version 0 in the Evaluation\nHarness. This information is reported in the output\nof the Evaluation Harness and should be used for\nensuring reproducibility of these results, even as\nthe task implementations themselves may change\nto \ufb01x bugs."], "retrieved_docs_id": ["a580bf7e9b", "a730d879eb", "8ef8344de6", "abb959742b", "99ffaf8162"], "reranker_type": "None", "search_type": "vector", "rr": 0.3333333333333333, "hit": 1}, {"question": "What is the name of the state-of-the-art proprietary chat model?\n", "true_answer": "GPT-4", "source_doc": "ChipNemo.pdf", "source_id": "8f6b70d3f1", "retrieved_docs": ["5.3 Guanaco: QL ORA trained on OASST1 is a State-of-the-art Chatbot\nBased on our automated and human evaluations, we find that the top QLORAtuned model, Guanaco\n65B, which we finetune on a variant of OASST1, is the best-performing open-source chatbot model\nand offers performance competitive to ChatGPT. When compared to GPT-4, Guanaco 65B and 33B\nhave an expected win probability of 30%, based on Elo rating from human annotators system-level\npairwise comparisons - the highest reported to date.\nThe Vicuna benchmark [ 10] results relative to ChatGPT are shown in Table 6. We find that Guanaco\n65B is the best-performing model after GPT-4, achieving 99.3% performance relative to ChatGPT.\nGuanaco 33B has more parameters than the Vicuna 13B model, but uses only 4-bit precision for its\nweights and is thus much more memory efficient at 21 GB vs 26 GB, providing a three percentage\npoints of improvement over Vicuna 13B. Furthermore, Guanaco 7B easily fits on modern phones at a", "[50] Canwen Xu, Daya Guo, Nan Duan, and Julian McAuley. Baize: An open-source chat model\nwith parameter-efficient tuning on self-chat data. arXiv preprint arXiv:2304.01196 , 2023.\n[51] Shunyu Yao, Jeffrey Zhao, Dian Yu, Nan Du, Izhak Shafran, Karthik Narasimhan, and Yuan Cao.\nReact: Synergizing reasoning and acting in language models. arXiv preprint arXiv:2210.03629 ,\n2022.\n[52] Susan Zhang, Stephen Roller, Naman Goyal, Mikel Artetxe, Moya Chen, Shuohui Chen,\nChristopher Dewan, Mona Diab, Xian Li, Xi Victoria Lin, et al. OPT: Open pre-trained\ntransformer language models. arXiv preprint arXiv:2205.01068 , 2022.\n13", "Technology . Springer, 2022, pp. 137\u2013162.\n[137] R. Taori, I. Gulrajani, T. Zhang, Y. Dubois, X. Li,\nC. Guestrin, P . Liang, and T. B. Hashimoto, \u201cStan-\nford alpaca: An instruction-following llama model,\u201d\nhttps://github.com/tatsu-lab/stanford alpaca, 2023.\n[138] W.-L. Chiang, Z. Li, Z. Lin, Y. Sheng, Z. Wu, H. Zhang,\nL. Zheng, S. Zhuang, Y. Zhuang, J. E. Gonzalez,\nI. Stoica, and E. P . Xing, \u201cVicuna: An open-source\nchatbot impressing gpt-4 with 90%* chatgpt quality,\u201d\n2023. [Online]. Available: https://vicuna.lmsys.org\n[139] 2023. [Online]. Available: https://github.com/\nnebuly-ai/nebullvm/tree/main/apps/accelerate/\nchatllama\n[140] Y. You, \u201cColossalchat: An open-source\nsolution for cloning chatgpt with a complete\nrlhf pipeline,\u201d 2023. [Online]. Available:\nhttps://medium.com/@yangyou berkeley/\ncolossalchat-an-open-source-solution-for-cloning-\nchatgpt-with-a-complete-rlhf-pipeline-5edf08fb538b\n[141] G. Penedo, Q. Malartic, D. Hesslow, R. Cojocaru,", "}} </s> ... <s >[ INST ] {{ user_msg_N }} [/ INST ] {{ model_answer_N }} </s>\nFine-tuning was performed on the same hardware and software configuration used for Language Adaptation based\non Huggingface Python Library [ 27], using the SFTTrainer over the Leonardo HPC infrastructure. We set the maximum\ntextual content length to 2048 (such as the original chat LLaMA 2-Chat model) and 15k training steps (i.e., a standard\nvalue of 3 epochs). The final models obtained are the following:\n\u2022LLaMAntino-2-7b-chat-hf-ITA\n\u2022LLaMAntino-2-7b-chat-hf-ITA-Ultra\n\u2022LLaMAntino-2-13b-chat-hf-ITA\n\u2022LLaMAntino-2-13b-chat-hf-ITA-Ultra\nIn the future, we aim to be able to release the 70B parameters version, also. In the following snap, it is possible to\nfind a conversation conducted with our LLaMAntino-2-13b-chat-hf-ITA-Ultra model.\n1User : Ciao ! Sono Marco . Oggi sono un po 'triste . Puoi raccontarmi una storia ?", "tools to compensate for the deficiencies of LLMs [80, 81].\nFor example, LLMs can utilize the calculator for accurate\ncomputation [80] and employ search engines to retrieve\nunknown information [81]. More recently, ChatGPT has\nenabled the mechanism of using external plugins (existing\nor newly created apps)12, which are by analogy with the\n\u201ceyes and ears \u201d of LLMs. Such a mechanism can broadly\nexpand the scope of capacities for LLMs.\nIn addition, many other factors ( e.g., the upgrade of\nhardware) also contribute to the success of LLMs. Currently,\nwe limit our discussion to the major technical approaches\nand key findings for developing LLMs.\n2.2 Technical Evolution of GPT-series Models\nDue to the excellent capacity in communicating with hu-\nmans, ChatGPT has ignited the excitement of the AI com-\nmunity since its release. ChatGPT is developed based on the\npowerful GPT model with specially optimized conversation\ncapacities. Considering the ever-growing interest in Chat-"], "retrieved_docs_id": ["646d2aa195", "37f31bb995", "da5c822076", "21226ef7e8", "562c27324d"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How does the proposed decoding method for MLLMs address the issue of over-trust?\n", "true_answer": "The proposed decoding method for MLLMs addresses the issue of over-trust by introducing a penalty term on the model logits during the beam-search decoding process to mitigate the over-trust issue.", "source_doc": "hallucination.pdf", "source_id": "4f752eeea2", "retrieved_docs": ["are closely tied to the knowledge aggregation patterns manifested in the self-attention matrix,\ni.e.,MLLMs tend to generate new tokens by focusing on a few summary tokens rather than all\nthe previous tokens. Such a partial over-trust inclination results in neglecting image tokens and\ndescribing the image content with hallucination. Based on this observation, a decoding method for\nMLLMs grounded in an Over-trust Penalty and a Retrospection- Allocation strategy is proposed.\nFirst, a penalty term on the model logits is introduced during the MLLM beam-search decoding\nprocess to mitigate the over-trust issue. Additionally, to handle the hard cases that cannot be\naddressed by the penalty term, a more aggressive strategy called the rollback strategy is proposed\nto retrospect the presence of summary tokens in the previously generated tokens and reallocate\nthe token selection if necessary.\nAnother interesting study observes that the hallucination of MLLMs seems to be easily triggered", "Figure 1: The timeline of efficient MLLMs.\ninference constitutes the major portion of resource consumption in mllm. Consider a typical scenario\nwhere the model input consists of an image with dimensions of 336\u00d7336pixels and a text prompt\nwith a length of 40 tokens, performing inference with LLaV A-1.5 and a Vicuna-13B LLM backbone\nrequires 18.2T FLOPS and 41.6G of memory usage. The resource-intensive nature of large-scale\nmodels has also sparked concerns about democratization and privacy protection, considering that the\ncurrent mainstream MLLMs, represented by GPT-4V and Gemini, are controlled by a few dominant\ncorporations and operate in the cloud. As demonstrated in the aforementioned experiments, even for\nopen-source MLLMs, high requirements for computation resources make it challenging to run them\non edge devices. This further exacerbates the challenges associated with ensuring equitable access\nand preserving user privacy.", "images. In addition, Resampler [ ADL+22] is used as an attentive pooling mechanism to reduce the\nnumber of image embeddings.\n2.2 Multimodal Large Language Models (MLLMs)\nAfter obtaining the embeddings of an input sequence, we feed them into the Transformer-based\ndecoder. The left-to-right causal model processes the sequence in an auto-regressive manner, which\nproduces the next token by conditioning on past timesteps. The causal masking is used to mask\nout future information. A softmax classi\ufb01er upon Transformer is used to generate tokens over the\nvocabulary.\nMLLMs serve as general-purpose interfaces [ HSD+22] that can perform interactions with both\nnatural language and multimodal input. The framework is \ufb02exible to handle various data types,\nas long as we can represent input as vectors. MLLMs combine the best of two worlds. First, the\nlanguage models naturally inherit the capabilities of in-context learning and instruction following.", "and preserving user privacy.\nIn light of these challenges, there has been growing attention on the study of efficient MLLMs.\nThe primary objective of these endeavors is to decrease the resource consumption of MLLMs\nand broaden their applicability while minimizing performance degradation. Research on efficient\nMLLMs began with replacing large language models with lightweight counterparts and performing\ntypical visual instruction tuning. Subsequent studies further enhanced capabilities and expanded\nuse cases in the following ways: (1) lighter architectures were introduced with an emphasis on ef-\nficiency, aiming to reduce the number of parameters or computational complexity[25, 13, 18]; (2)\nmore specialized components were developed, focusing on efficiency optimizations tailored to ad-\nvanced architectures or imbuing specific properties, such as locality[19, 17, 12]; and (3) support\nfor resource-sensitive tasks was provided, with some works employing visual token compression", "the inputs and targets as described in Section 3.2.1.\n3.2.4. Results\nThe scores achieved by each of the architectures we compare are shown in Table 2. For\nall tasks, the encoder-decoder architecture with the denoising objective performed best.\nThis variant has the highest parameter count ( 2P) but the same computational cost as the\nP-parameter decoder-only models. Surprisingly, we found that sharing parameters across the\nencoder and decoder performed nearly as well. In contrast, halving the number of layers in\nthe encoder and decoder stacks signi\ufb01cantly hurt performance. Concurrent work (Lan et al.,\n2019) also found that sharing parameters across Transformer blocks can be an e\ufb00ective means\nof lowering the total parameter count without sacri\ufb01cing much performance. XLNet also\nbears some resemblance to the shared encoder-decoder approach with a denoising objective\n(Yang et al., 2019). We also note that the shared parameter encoder-decoder outperforms"], "retrieved_docs_id": ["4f752eeea2", "37128cb48f", "5107b7792e", "04b6ebc53f", "be665c14e5"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does Cait enhance model compression in Vision Transformers?\n", "true_answer": "Cait enhances model compression in Vision Transformers by introducing asymmetric token merging to integrate neighboring tokens efficiently and preserving the spatial structure, along with consistent dynamic channel pruning for uniform pruning of unimportant channels.", "source_doc": "multimodal.pdf", "source_id": "28380a85e1", "retrieved_docs": ["Table 8: The impact of clipped softmax hyperparameters on ViT-S/16.\nWe investigate the effect of different values of the clipped softmax stretch parameters applied to the\nvision transformer and present the results in Table 8. To speed up training, for this experiment we\ntrained ViT for 150 epochs instead of the usual 300 epochs. For this experiment, we did not apply\nLayerNorm after the patch embeddings.\nWe found similar observations compared to BERT. Specifically, most of the improvement happens\nwhen we use \u03b3 <0(clipping at zero) whereas using \u03b6 >1(clipping at one) yields similar results\nto the vanilla softmax and combining both \u03b3 <0and\u03b6 >1yields similar results compared to just\nclipping at zero.\nB.6 Fine-tuning experiment\nMethod FP16 ppl. \u2193Max inf norm Avg. Kurtosis\nVanilla fine-tuning 29.46 79.3 2086\nFine-tuning w/ Gated attention 29.18 50.9 665\nTable 9: OPT-1.3B fine-tuning results with vanilla softmax and gated attention. We report the causal", "Instead of achieving SoTA performance, the goal of this\npaper is to show that our parameter deployment frame-\nwork can improve the transformer backbone with less train-\nable parameters. Therefore, we employ LAMB instead of\nAdamW for more general and typical experiments. For MoE\nbased models ( i.e., ViT-MoE and WideNet), we set the\nweight of load balance loss \u03bbas 0.01. Without special in-\nstructions, we use 4 experts in total and Top 2 experts se-\nlected in each transformer block. The capacity ratio Cis\nset as 1.2 for a trade-off between accuracy and speed. We\npretrain our models on 256 TPUv3 cores. According to re-\ncent work (Zhai et al. 2021), different types of the prediction\nhead have no signi\ufb01cant difference on ImageNet\u2019s few-shot\nperformance. We also verify this conclusion on training Im-\nageNet from scratch. In this work, for ViT, we use the typical\ntoken head, which means we insert [CLS] token at the start\nof patch tokens and use it to classify the image. For MoE", "in computer vision applications. However, as ViT models have grown in size, the number of train-\nable parameters and operations has also increased, impacting their deployment and performance.\nAdditionally, the computational and memory cost of self-attention grows quadratically with image\nresolution. Referring to the paper [95], this survey aims to explore the most efficient vision encoding\nmethodologies that may be used for efficient MLLMs.\nEfficient VisionCompact Architecture (\u00a73.1)Architecture Design MethodsReformer[96], EfficientFormer[97],\nEfficientFormerV2[98]\nArchitecture Search MethodsAutoformer [99], NASViT [100],\nTF-TAS [101], UniNet [102]\nOptimization of Attention\nMechanisms MethodsPatchMerger [103], DynamicViT [104],\nSepvit [105]\nPruning (\u00a73.2)Unstructured Pruning Cap [106], Cait [107]\nStructured PruningWDPruning [108], X-Pruner [109],\nVTP[110], PS-ViT[111]\nHybrid Pruning SPViT [112], ViT-Slim [113]", "low rank bias in Figures 12, 13, 15, 17 and 19. In these experiments we use off-the-shelf vision\ntransformers (ViT) [ DBK+20] trained on popular vision benchmarks, as well as off-the-shelf GPT-2\ntrained on a popular language benchmark. We use no weight decay or dropout in our experiments.\nAll models were initialized using the default initialization scale.\nB.1 SGD-trained transformers\nCIFAR-10/100 We trained a 6-layer ViT with 8 heads per layer, embedding dimension 512, head\ndimension 128, and MLP dimension 512 and patch-size 4 for 500 epochs on CIFAR10/CIFAR100\nwith SGD and learning rate 3e-1 and warmup. See Figures 12 and 13. Each run took 2 hours on\none A100 GPU.\n0 10000 20000 30000 40000 50000\nIteration1.01.52.02.53.03.54.04.55.0Stable rankLayer 0\nWQWT\nK\nWVWT\nO\n0 10000 20000 30000 40000 50000\nIteration1.01.52.02.53.03.54.04.55.0Stable rankLayer 1\nWQWT\nK\nWVWT\nO\n0 10000 20000 30000 40000 50000\nIteration1.01.52.02.53.03.54.04.55.0Stable rankLayer 2\nWQWT\nK\nWVWT\nO", "\u2022We show that standard 8-bit post-training\nquantization techniques lead to a signi\ufb01cant\nperformance degradation for transformer en-\ncoder models.\n\u2022We conduct a systematic study to identify\nthe underlying reason that precludes ef\ufb01cient\ntransformer quantization. We \ufb01nd that the\nmain bottleneck is a considerable mismatch\nbetween the different dynamic ranges of acti-\nvation tensors in the residual connections. Fur-\nther analysis shows that these activation ten-\nsors contain structured outliers that facilitate\nspeci\ufb01c attention patterns in deeper encoder\nlayers, such as attending to the special [SEP]\ntoken. We highlight that this issue is inherent\nto many architectures and pre-training objec-\ntives.\n\u2022Based on these \ufb01ndings, we propose a set of\nsolutions with different trade-offs to overcome\nthe dynamic range problem, including tech-\nniques based on post-training, mixed preci-\nsion, and quantization-aware training. In par-\nticular, we introduce a new per-embedding-"], "retrieved_docs_id": ["92993a6dce", "11b3541f30", "20b3b3179f", "b678599b0c", "0e9fa61966"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What type of information is often inaccurately described by multimodal large language models (MLLMs) in images?\n", "true_answer": "MLLMs often inaccurately describe the attributes of objects in images, such as color, shape, material, content, counting, action, etc.", "source_doc": "hallucination.pdf", "source_id": "f2b3e09bb2", "retrieved_docs": ["Figure 2: Organization of efficient multimodal large language models advancements.\n\u2022 Training surveys the landscape of training methodologies that are pivotal in the devel-\nopment of efficient MLLMs. It addresses the challenges associated with the pre-training\nstage, instruction-tuning stage, and the overall training strategy for state-of-the-art results.\n\u2022 Data and Benchmarks evaluates the efficiency of datasets and benchmarks used in the\nevaluation of multimodal language models. It assesses the trade-offs between dataset size,\ncomplexity, and computational cost, while advocating for the development of benchmarks\nthat prioritize efficiency and relevance to real-world applications.\n\u2022 Application investigates the practical implications of efficient MLLMs in various do-\nmains, emphasizing the balance between performance and computational cost. By ad-\ndressing resource-intensive tasks such as high-resolution image understanding and medical\n3", "benchmarks employed to assess the performance of these models. The discussion highlights the\nimportance of diverse and high-quality datasets in achieving robust and accurate MLLMs, as well\nas the various strategies employed to generate and refine these datasets. Furthermore, we present a\ncomprehensive comparison of MLLM performance across established benchmarks, emphasizing the\nneed for a thorough evaluation to ensure the effectiveness of these models in real-world applications.\n6.1 Pre-Training Data\nPre-training data primarily serve two critical objectives: (1) promoting the integration of various\nmodalities and (2) conveying comprehensive knowledge. Large-scale image-caption pair datasets\nnaturally fulfill these requirements. Firstly, they predominantly originate from the internet, provid-\ning an extensive data volume with a broad knowledge coverage. Secondly, the direct alignment\nbetween the two modalities is beneficial for training modality projectors. However, captions in such", "2 Bai, et al.\n1 INTRODUCTION\nRecently, the emergence of large language models (LLMs) [ 29,81,85,99,132] has dominated a wide\nrange of tasks in natural language processing (NLP), achieving unprecedented progress in language\nunderstanding [ 39,47], generation [ 128,140] and reasoning [ 20,58,87,107,115]. Leveraging\nthe capabilities of robust LLMs, multimodal large language models (MLLMs) [ 22,75,111,138],\nsometimes referred to as large vision-language models (LVLMs), are attracting increasing attention.\nMLLMs show promising ability in multimodal tasks, such as image captioning [ 66], visual question\nanswering [ 22,75], etc. However, there is a concerning trend associated with the rapid advancement\nin MLLMs. These models exhibit an inclination to generate hallucinations [ 69,76,137], resulting in\nseemingly plausible yet factually spurious content.\nThe problem of hallucination originates from LLMs themselves. In the NLP community, the", "\u2022 At present, efficient MLLMs face challenges in processing extended-context multimodal\ninformation, and they are typically limited to accepting single images. This constrains the\nadvancement of more sophisticated models capable of handling an increased number of\nmultimodal tokens. Such models would be beneficial for applications like comprehending\nlengthy videos and analyzing extensive documents that incorporate a mix of images and\ntext, creating more versatile and powerful systems.\n\u2022 The predominant efficient MLLMs mainly support dual input modalities - images and texts,\nand a singular output modality - text. However, the tangible world encompasses a more\nextensive array of modalities. By expanding the scope of efficient MLLMs to accommodate\n23", "Hallucination of Multimodal Large Language Models: A Survey 5\nVision InputVision ModelLLMImageVideo\u2026CLIP DINO-v2Linear\u2026LLaMAVicunaChatGLMFuyuDecodingGreedyBeam SearchSamplingText InputInstruction\u2026TokenizerBPE SentencePiece\u2026\nFig. 2. Popular architecture of multimodal large language model.\nintegration of human feedback into the training loop has demonstrated effectiveness in enhancing\nthe alignment of LLMs.\n2.2 Multimodal Large Language Models\nMLLMs [ 22,75,111,138] typically refers to a series of models that enable LLMs to perceive and\ncomprehend data from various modalities. Among them, vision+LLM is particularly prominent,\nowing to the extensive research on vision-language models (VLMs) [ 51,88,116] prior to LLMs. As a\nresult, MLLMs are sometimes referred to as vision-LLMs (VLLMs) or large vision language models\n(LVLMs). The goal of MLLMs is to activate the visual capabilities of LLMs, enabling them to \"see\""], "retrieved_docs_id": ["542e5c49da", "8f79f68811", "da0a465b6c", "a1bd2d5193", "f49f3b54ce"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "Which company offers a low-code AI solution for implementing various RAG applications?\n", "true_answer": "Flowise AI", "source_doc": "RAG.pdf", "source_id": "9ff21c1039", "retrieved_docs": ["quickly with the popularity of ChatGPT. They both offer a\nrich set of RAG-related APIs, gradually becoming one of\nthe indispensable technologies in the era of large models.\nMeanwhile, new types of technical stacks are constantly be-\ning developed. Although they do not offer as many features\nas LangChain and LLamaIndex, they focus more on their\nunique characteristics. For example, Flowise AI6emphasizes\nlow-code, allowing users to implement various AI applica-\ntions represented by RAG without writing code, simply by\ndragging and dropping. Other emerging technologies include\nHayStack, Meltno, and Cohere Coral.\nIn addition to AI-native frameworks, traditional software\nor cloud service providers have also expanded their service\nrange. For instance, Verba7, provided by the vector database\ncompany Weaviate, focuses on personal assistants. Amazon\noffers its users the intelligent enterprise search service tool\nKendra, based on RAG thinking. Users can search in different", "providing an effective solution to the incomplete and insuf-\nficient knowledge problem inherent in purely parameterized\nmodels.\nThe paper systematically reviews and analyzes the current\nresearch approaches and future development paths of RAG,\nsummarizing them into three main paradigms: Naive RAG,\nAdvanced RAG, and Modular RAG. Subsequently, the paper\nprovides a consolidated summary of the three core compo-\nnents: Retrieval, Augmented, and Generation, highlighting\nthe improvement directions and current technological char-\nacteristics of RAG. In the section on augmentation methods,the current work is organized into three aspects: the augmen-\ntation stages of RAG, augmentation data sources, and aug-\nmentation process. Furthermore, the paper summarizes the\nevaluation system, applicable scenarios, and other relevant\ncontent related to RAG. Through this article, readers gain a\nmore comprehensive and systematic understanding of large\nmodels and retrieval-Augmented generation. They become", "Kendra, based on RAG thinking. Users can search in different\ncontent repositories through built-in connectors.\nThe development of the technical stack and RAG are mu-\ntually reinforcing. New technologies pose higher demands\n6https://flowiseai.com\n7https://github.com/weaviate/Verbaon the existing technical stack, while the optimization of the\ntechnical stack\u2019s functions further promotes the development\nof RAG technology. Overall, the technical stack of RAG\u2019s\ntoolchain has initially formed, and many enterprise-level ap-\nplications have gradually emerged, but an all-in-one platform\nstill needs to be refined.\n9 Conclusion\nThis paper thoroughly explores Retrieval-Augmented Gener-\nation (RAG), a technique that uses an external knowledge\nbase to supplement the context of Large Language Models\n(LLMs) and generate responses. Notably, RAG combines pa-\nrameterized knowledge from LLMs and non-parameterized\nexternal knowledge, alleviates hallucination issues, identifies", "Bard, etc.) and open-source (Vicuna (Chiang et al., 2023),\nLLaMA2 (Touvron et al., 2023), etc.) large language mod-\nels (LLM) provide an unprecedented opportunity to help\nautomate these language-related chip design tasks. Indeed,\nearly academic research (Thakur et al., 2023; Blocklove\net al., 2023; He et al., 2023) has explored applications of\nLLMs for generating Register Transfer Level (RTL) code\nthat can perform simple tasks in small design modules as\nwell as generating scripts for EDA tools.\nWe believe that LLMs have the potential to help chip de-\nsign productivity by using generative AI to automate many\nlanguage-related chip design tasks such as code generation,\nresponses to engineering questions via a natural language\ninterface, analysis and report generation, and bug triage. In\nthis study, we focus on three specific LLM applications: an\nengineering assistant chatbot for GPU ASIC and Architec-\nture design engineers, which understands internal hardware", "and industry, and a remarkable progress is the launch of ChatGPT (a powerful AI chatbot developed based on LLMs), which has\nattracted widespread attention from society. The technical evolution of LLMs has been making an important impact on the entire AI\ncommunity, which would revolutionize the way how we develop and use AI algorithms. Considering this rapid technical progress, in this\nsurvey, we review the recent advances of LLMs by introducing the background, key findings, and mainstream techniques. In particular,\nwe focus on four major aspects of LLMs, namely pre-training, adaptation tuning, utilization, and capacity evaluation. Furthermore, we\nalso summarize the available resources for developing LLMs and discuss the remaining issues for future directions. This survey provides\nan up-to-date review of the literature on LLMs, which can be a useful resource for both researchers and engineers."], "retrieved_docs_id": ["9ff21c1039", "1bd400d39e", "f3d56bbc09", "f23b3625e0", "6097ca12dc"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "What are the three core metrics primarily focused on in the latest evaluation frameworks like RAGAS and ARES?\n", "true_answer": "Faithfulness of the answer, Answer Relevance, and Context Relevance.", "source_doc": "RAG.pdf", "source_id": "57b75e5528", "retrieved_docs": ["evaluation metrics. Additionally, the latest evalu-\nation frameworks like RAGAS [Eset al. , 2023 ]and\nARES [Saad-Falcon et al. , 2023 ]also involve RAG eval-\nuation metrics. Summarizing these works, three core metrics\nare primarily focused on: Faithfulness of the answer, Answer\nRelevance, and Context Relevance.\n1.Faithfulness\nThis metric emphasizes that the answers generated by\nthe model must remain true to the given context, ensur-\ning that the answers are consistent with the context infor-\nmation and do not deviate or contradict it. This aspect of\nevaluation is vital for addressing illusions in large mod-\nels.\n2.Answer Relevance\nThis metric stresses that the generated answers need to\nbe directly related to the posed question.\n3.Context Relevance\nThis metric demands that the retrieved contextual infor-\nmation be as accurate and targeted as possible, avoid-\ning irrelevant content. After all, processing long texts\nis costly for LLMs, and too much irrelevant information", "ARES\nARES aims to automatically evaluate the performance of\nRAG systems in three aspects: Context Relevance, Answer\nFaithfulness, and Answer Relevance. These evaluation met-\nrics are similar to those in RAGAS. However, RAGAS, being\na newer evaluation framework based on simple handwritten\nprompts, has limited adaptability to new RAG evaluation set-\ntings, which is one of the significances of the ARES work.\nFurthermore, as demonstrated in its assessments, ARES per-\nforms significantly lower than RAGAS.\nARES reduces the cost of evaluation by using a small\namount of manually annotated data and synthetic data,\nand utilizes Predictive-Driven Reasoning (PDR) to provide\nstatistical confidence intervals, enhancing the accuracy of\nevaluation [Saad-Falcon et al. , 2023 ].\nAlgorithm Principles\n1. Generating Synthetic Dataset: ARES initially generates\nsynthetic questions and answers from documents in the\ntarget corpus using a language model to create positive\nand negative samples.", "tonomously judge inputs and generate accurate answers.\n7 RAG Evaluation\nIn exploring the development and optimization of RAG, ef-\nfectively evaluating its performance has emerged as a central\nissue. This chapter primarily discusses the methods of eval-\nuation, key metrics for RAG, the abilities it should possess,\nand some mainstream evaluation frameworks.\n7.1 Evaluation Methods\nThere are primarily two approaches to evaluating the ef-\nfectiveness of RAG: independent evaluation and end-to-endevaluation [Liu, 2023 ].\nIndependent Evaluation\nIndependent evaluation includes assessing the retrieval mod-\nule and the generation (read/synthesis) module.\n1.Retrieval Module\nA suite of metrics that measure the effectiveness of sys-\ntems (like search engines, recommendation systems, or\ninformation retrieval systems) in ranking items accord-\ning to queries or tasks are commonly used to evaluate\nthe performance of the RAG retrieval module. Exam-\nples include Hit Rate, MRR, NDCG, Precision, etc.", "ous downstream tasks and with different retrievers may yield\ndivergent results. However, some academic and engineering\npractices have focused on general evaluation metrics for RAG\nand the abilities required for its effective use. This section\nprimarily introduces key metrics for evaluating RAG\u2019s effec-\ntiveness and essential abilities for assessing its performance.\nKey Metrics\nRecent OpenAI report [Jarvis and Allard, 2023 ]have\nmentioned various techniques for optimizing large\nlanguage models (LLMs), including RAG and its", "ways. Consistent with our second element of holistic evaluation, we ensure our benchmark attains dense\nmulti-metric measurement: of the 112 possible (core scenario, metric) pairs, we measure 98 (87.5%) as shown\nin Table 4.\n3We use the term coreto indicate that for this set of scenarios, we measure a range of metrics/desiderata. The term coreis\nnot meant to suggest that any specific scenario in this set is more fundamental than scenarios outside the set.\n3"], "retrieved_docs_id": ["57b75e5528", "1b1cdfdd79", "a580bf7e9b", "8e161396f8", "491d36f10b"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "What is the reduction in parameters achieved by LDPv2 compared to the original LDP in CNN-based MobileVLMv2?\n", "true_answer": "LDPv2 achieves a 99.8% reduction in parameters compared to the original LDP in CNN-based MobileVLMv2.", "source_doc": "multimodal.pdf", "source_id": "f4853839e9", "retrieved_docs": ["cross-attention, while image features are unfolded and concatenated with Q to serve as K and V in\ncross-attention. By this means, the transformer output at the corresponding positions of the learn-\nable latent queries is taken as the aggregated representation of visual features, thereby standardizing\nvariable-length video frame features into fixed-size features. MEQ-Former in BRA VE [12] designs\na multi-encoder querying transformer to amalgamate features from multiple frozen vision encoders\ninto a versatile representation that can be directly inputted into a frozen language model.\nCNN-based MobileVLMv2[17] proposes LDPv2, a new projector consisting of three parts: fea-\nture transformation, token reduction, and positional information enhancement. By using point-wise\nconvolution layers, average pooling, and a PEG module with a skip connection, LDPv2 achieves\nbetter efficiency, a 99.8% reduction in parameters, and slightly faster processing compared to the\noriginal LDP[20].", "key-value pair in each prompt, highlighting performance gaps between di\ufb00erent approaches.\nTable A.1: ( Hyperparameter settings for reasoning and in-context learning tasks.) .\nOptimizer AdamW\nOptimizer momentum \u03b21,\u03b22= 0.9,0.98\nBase learning rate 0.0005\nWeight decay 0.1\nDropout None\nBatch size 32\nTraining epochs 200\nNum samples 2000\nLearning rate schedule cosine decay\nWarmup epochs 10\nWarmup schedule linear\nNumber of layers 2\nWidth 64\nLong convolution comparisons: We compare di\ufb00erent convolution parametrizations, embedding them\nin an order 2Hyenaoperator. All convolutions are applied separately to input channels (referred to as\nsingle-input single-output (SISO) in signal processing, or depthwise in other machine learning contexts).\n\u2022Conv1d: Explicit convolutions (regular convolution layers with \ufb01xed \ufb01lter size). We use a \ufb01xed \ufb01lter size\nof64, to match parameters of the other approaches.\n18", "In MLP-Mixer, we study the sparse behavior of the Linear module, whereas, in Vision Transformer, we\nmainly focus on sparsifying attention. All models are \ufb01rst sparsi\ufb01ed to around 10%of the original dense\ncompute. Then we compare their NTK kernels with their original dense kernel. We run three random seeds\nto eliminate noise, i.e., three di\ufb00erent initializations for each pair of con\ufb01gurations. We report the mean\nrelative di\ufb00erence between the kernels with respect to the norm of the dense kernel.\nL.4 Transfer Learning Experiments\nWe conduct extended experiments to test the generalization of our pretrained sparse models on downstream\ntasks. Speci\ufb01cally, we \ufb01netune Pixel\ufb02y pretrained model (ImageNet) on CIFAR-10 and show that it get\n99.03% accuracy compared to 98.77% on our pretrained dense ViT-B/16 model. In addition, we see more\nthan 2\u00d7speed up on downstream task \ufb01ne-tuning process as well.\nL.5 Microbenchmarking", "(EAS) module[52] proposes a novel parameter and computation-efficient tuning method for MLLMs\nto retain the high performance and reduce both parameter and computation expenditures on down-\nstream tasks. MemVP [53] argues that this transfer learning paradigm still exhibits inefficiency\nsince it significantly increases the input length of the language models. Visual prompts in MemVP\nare concatenated with the weights of Feed Forward Networks for visual knowledge injection to re-\nduce the training time and inference latency of the finetuned MLLMs and surpass the performance\nof previous PEFT methods.\n6 Data and Benchmarks\nIn this section, we provide an overview of the data and benchmarks used for training and evaluating\nefficient MLLMs. We discuss the significance of pre-training data, instruction-tuning data, and the\n19", "Table 8: The impact of clipped softmax hyperparameters on ViT-S/16.\nWe investigate the effect of different values of the clipped softmax stretch parameters applied to the\nvision transformer and present the results in Table 8. To speed up training, for this experiment we\ntrained ViT for 150 epochs instead of the usual 300 epochs. For this experiment, we did not apply\nLayerNorm after the patch embeddings.\nWe found similar observations compared to BERT. Specifically, most of the improvement happens\nwhen we use \u03b3 <0(clipping at zero) whereas using \u03b6 >1(clipping at one) yields similar results\nto the vanilla softmax and combining both \u03b3 <0and\u03b6 >1yields similar results compared to just\nclipping at zero.\nB.6 Fine-tuning experiment\nMethod FP16 ppl. \u2193Max inf norm Avg. Kurtosis\nVanilla fine-tuning 29.46 79.3 2086\nFine-tuning w/ Gated attention 29.18 50.9 665\nTable 9: OPT-1.3B fine-tuning results with vanilla softmax and gated attention. We report the causal"], "retrieved_docs_id": ["f4853839e9", "521e2dc923", "ae0df8236b", "100e4a1fcc", "92993a6dce"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does RAG increase trust in its output?\n", "true_answer": "By citing sources, RAG allows users to verify the accuracy of the answers, which increases trust in its output.", "source_doc": "RAG.pdf", "source_id": "62ff7bd487", "retrieved_docs": ["maintains the timeliness and accuracy of responses.\n\u2022 Transparency is an advantage of RAG. By citing\nsources, users can verify the accuracy of the answers,\nincreasing trust in the model\u2019s output.\n\u2022 RAG has customization capabilities. Models can be tai-\nlored to different domains by indexing relevant textual\ncorpora, providing knowledge support for specific fields.\n\u2022 In terms of security and privacy management, RAG,\nwith its built-in roles and security controls in the\ndatabase, can better control data usage. In contrast, fine-\ntuned models may lack clear management of who can\naccess which data.\n\u2022 RAG is more scalable. It can handle large-scale datasets\nwithout the need to update all parameters and create\ntraining sets, making it more economically efficient.\n\u2022 Lastly, results produced by RAG are more trustworthy.\nRAG selects deterministic results from the latest data,\nwhile fine-tuned models may exhibit hallucinations and\ninaccuracies when dealing with dynamic data, lacking", "external knowledge, alleviates hallucination issues, identifies\ntimely information via retrieval technology, and enhances re-\nsponse accuracy. Additionally, by citing sources, RAG in-\ncreases transparency and user trust in model outputs. RAG\ncan also be customized based on specific domains by index-\ning relevant text corpora. RAG\u2019s development and charac-\nteristics are summarized into three paradigms: Naive RAG,\nAdvanced RAG, and Modular RAG, each with its models,\nmethods, and shortcomings. Naive RAG primarily involves\nthe \u2019retrieval-reading\u2019 process. Advanced RAG uses more\nrefined data processing, optimizes the knowledge base in-\ndexing, and introduces multiple or iterative retrievals. As\nexploration deepens, RAG integrates other techniques like\nfine-tuning, leading to the emergence of the Modular RAG\nparadigm, which enriches the RAG process with new mod-\nules and offers more flexibility.\nIn the subsequent chapters, we further analyze three key", "challenging, and the augmentation process needs to balance\nthe value of each passage appropriately. The retrieved con-\ntent may also come from different writing styles or tones, and\nthe augmentation process needs to reconcile these differences\nto ensure output consistency. Lastly, generation models may\noverly rely on augmented information, resulting in output thatmerely repeats the retrieved content, without providing new\nvalue or synthesized information.\n3.2 Advanced RAG\nAdvanced RAG has made targeted improvements to over-\ncome the deficiencies of Naive RAG. In terms of the quality\nof retrieval generation, Advanced RAG has incorporated pre-\nretrieval and post-retrieval methods. To address the indexing\nissues encountered by Naive RAG, Advanced RAG has op-\ntimized indexing through methods such as sliding window,\nfine-grained segmentation, and metadata. Concurrently, it has\nput forward various methods to optimize the retrieval process.", "there has been increased attention on self-retrieval, which in-\nvolves mining the knowledge of LLMs themselves to enhance\ntheir performance.\nThe subsequent chapters of this paper are structured as fol-\nlows: Chapter 2 provides an introduction to the background\nof RAG.Chapter 3 introduces the mainstream paradigms of\nRAG.Chapter 4 analyzes the retriever in RAG.Chapter 5 fo-", "Figure 1: A timeline of existing RAG research. The timeline was established mainly according to the release date.\ncuses on introducing the generator in RAG.Chapter 6 em-\nphasizes the introduction of the augmentation methods in\nRAG.Chapter 7 introduces the evaluation system of RAG.\nChapter 8 provides an outlook on the future development\ntrends of RAG. Finally, in Chapter 9, we summarize the main\ncontents of the survey.\n2 Background\nIn this chapter, we will introduce the definition of RAG, as\nwell as the comparison between RAG and other model opti-\nmization techniques, such as fine-tuning.\n2.1 Definition\nThe meaning of RAG has expanded in tandem with techno-\nlogical developments. In the era of Large Language Mod-\nels, the specific definition of RAG refers to the model, when\nanswering questions or generating text, first retrieving rele-\nvant information from a vast corpus of documents. Subse-\nquently, it utilizes this retrieved information to generate re-"], "retrieved_docs_id": ["62ff7bd487", "123a2dcc44", "873e6df003", "c3380c77fb", "7470fe30c9"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "What is a lightweight vision model designed for vision and language tasks?\n", "true_answer": "ViTamin [11]", "source_doc": "multimodal.pdf", "source_id": "18b9cdbf0e", "retrieved_docs": ["for resource-sensitive tasks was provided, with some works employing visual token compression\nto boost efficiency, enabling the transfer of MLLM capabilities to resource-intensive tasks such as\nhigh-resolution image and video understanding[35, 39, 14, 40].\nIn this survey, we aim to present an exhaustive organization of the recent advancements in the rapidly\nevolving field of efficient MLLMs, as depicted in Figure.2. We organize the literature in a taxonomy\nconsisting of six primary categories, encompassing various aspects of efficient MLLMs, including\narchitecture ,efficient vision ,efficient LLMs ,training ,data and benchmarks , and applications .\n\u2022 Architecture focuses on the MLLM framework developed by efficient techniques to reduce\nthe computational cost. The architecture is composed of multiple modality-based funda-\nmental models, exhibits characteristics distinct from single-modal models, thus promoting\nthe development of novel technologies.", "A. Hu, P . Shi, Y. Shi, C. Li, Y. Xu, H. Chen, J. Tian,\nQ. Qi, J. Zhang, and F. Huang, \u201cmplug-owl: Mod-\nularization empowers large language models with\nmultimodality,\u201d CoRR , vol. abs/2304.14178, 2023.\n[830] J. Bai, S. Bai, S. Yang, S. Wang, S. Tan, P . Wang, J. Lin,\nC. Zhou, and J. Zhou, \u201cQwen-vl: A frontier large\nvision-language model with versatile abilities,\u201d CoRR ,\nvol. abs/2308.12966, 2023.\n[831] H. Liu, C. Li, Y. Li, and Y. J. Lee, \u201cImproved\nbaselines with visual instruction tuning,\u201d CoRR , vol.\nabs/2310.03744, 2023.\n[832] P . Zhang, X. Dong, B. Wang, Y. Cao, C. Xu, L. Ouyang,\nZ. Zhao, S. Ding, S. Zhang, H. Duan, W. Zhang,\nH. Yan, X. Zhang, W. Li, J. Li, K. Chen, C. He,\nX. Zhang, Y. Qiao, D. Lin, and J. Wang, \u201cInternlm-\nxcomposer: A vision-language large model for ad-\nvanced text-image comprehension and composition,\u201d\nCoRR , vol. abs/2309.15112, 2023.\n[833] K. Chen, Z. Zhang, W. Zeng, R. Zhang, F. Zhu, and\nR. Zhao, \u201cShikra: Unleashing multimodal llm\u2019s ref-", "Perception-language tasks\nCOCO Caption [LMB+14] Image captioning CIDEr, etc. \u0013 \u0013\nFlicker30k [YLHH14] Image captioning CIDEr, etc. \u0013 \u0013\nVQAv2 [GKSS+17] Visual question answering VQA acc. \u0013 \u0013\nVizWiz [GLS+18] Visual question answering VQA acc. \u0013 \u0013\nWebSRC [CZC+21] Web page question answering F1 score \u0013\nVision tasks\nImageNet [DDS+09] Zero-shot image classi\ufb01cation Top-1 acc. \u0013\nCUB [WBW+11] Zero-shot image classi\ufb01cation with descriptions Accuracy \u0013\nTable 1: We evaluate the capabilities of KOSMOS -1on language, perception-language, and vision\ntasks under both zero- and few-shot learning settings.\n1 Introduction: From LLMs to MLLMs\nLarge language models (LLMs) have successfully served as a general-purpose interface across various\nnatural language tasks [ BMR+20]. The LLM-based interface can be adapted to a task as long as we\nare able to transform the input and output into texts. For example, the input of the summarization task", "[VLZP15] Ramakrishna Vedantam, C Lawrence Zitnick, and Devi Parikh. Cider: Consensus-based\nimage description evaluation. In CVPR , pages 4566\u20134575, 2015.\n[WBD+22]Wenhui Wang, Hangbo Bao, Li Dong, Johan Bjorck, Zhiliang Peng, Qiang Liu, Kriti\nAggarwal, Owais Mohammed, Saksham Singhal, Subhojit Som, and Furu Wei. Image\nas a foreign language: BEiT pretraining for all vision and vision-language tasks. ArXiv ,\nabs/2208.10442, 2022.\n[WBW+11]Catherine Wah, Steve Branson, Peter Welinder, Pietro Perona, and Serge J. Belongie.\nThe caltech-ucsd birds-200-2011 dataset. 2011.\n[WCW+23]Chengyi Wang, Sanyuan Chen, Yu Wu, Zi-Hua Zhang, Long Zhou, Shujie Liu, Zhuo\nChen, Yanqing Liu, Huaming Wang, Jinyu Li, Lei He, Sheng Zhao, and Furu Wei.\nNeural codec language models are zero-shot text to speech synthesizers. ArXiv ,\nabs/2301.02111, 2023.\n[WDC+23]Weizhi Wang, Li Dong, Hao Cheng, Haoyu Song, Xiaodong Liu, Xifeng Yan, Jian-\nfeng Gao, and Furu Wei. Visually-augmented language modeling. In International", "Further, it supports a number of language models such as\nGPT-2 and LLaMA, and also covers several representative\nvision Transformer models ( e.g.,ViT and Swin Transformer).\nAs discussed in Section 5.3.1, there have been a large\nnumber of efficient tuning methods proposed in the existing\nliterature. However, most of these approaches are tested\non small-sized pre-trained language models, instead of the\nLLMs. So far, there still lacks a thorough investigation on\nthe effect of different efficient tuning methods on large-sized\nlanguage models at different settings or tasks.\n5.4 Memory-Efficient Model Adaptation\nDue to the huge number of model parameters, LLMs take a\nsignificant memory footprint for inference, making it very\ncostly to be deployed in real-world applications. In this\nsection, we discuss how to reduce the memory footprint\nof LLMs via a popular model compression approach ( i.e.,\nmodel quantization), so that large-sized LLMs can be used"], "retrieved_docs_id": ["cd55ca1477", "3d9acf0ed0", "4c8f867655", "e4285a7bd9", "0df03879ce"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How well did the domain-adapted LLM perform for the engineering assistant chatbot based on expert evaluations?\n", "true_answer": "The domain-adapted LLM achieved a score of 6.0 on a 7-point Likert scale for the engineering assistant chatbot based on expert evaluations.", "source_doc": "ChipNemo.pdf", "source_id": "28f0897bcb", "retrieved_docs": ["vant in-domain knowledge from its data store to augment\nthe response generation given a user query. This method\nshows significant improvement in grounding the model to\nthe context of a particular question. Crucially we observed\nsignificant improvements in retrieval hit rate when finetun-\ning a pretrained retrieval model with domain data. This led\nto even further improvements in model quality.\nOur results show that domain-adaptive pretraining was the\nprimary technique driving enhanced performance in domain-\nspecific tasks. We highlight the following contributions and\nfindings for adapting LLMs to the chip design domain:\n\u2022We demonstrate domain-adapted LLM effectiveness on\nthree use-cases: an engineering assistant chatbot, EDA\ntool script generation, and bug summarization and anal-\nysis. We achieve a score of 6.0 on a 7 point Likert scale\nfor engineering assistant chatbot based on expert eval-\nuations, more than 70% correctness on the generation", "and industry, and a remarkable progress is the launch of ChatGPT (a powerful AI chatbot developed based on LLMs), which has\nattracted widespread attention from society. The technical evolution of LLMs has been making an important impact on the entire AI\ncommunity, which would revolutionize the way how we develop and use AI algorithms. Considering this rapid technical progress, in this\nsurvey, we review the recent advances of LLMs by introducing the background, key findings, and mainstream techniques. In particular,\nwe focus on four major aspects of LLMs, namely pre-training, adaptation tuning, utilization, and capacity evaluation. Furthermore, we\nalso summarize the available resources for developing LLMs and discuss the remaining issues for future directions. This survey provides\nan up-to-date review of the literature on LLMs, which can be a useful resource for both researchers and engineers.", "niques: domain-adaptive tokenization, domain-\nadaptive continued pretraining, model alignment\nwith domain-specific instructions, and domain-\nadapted retrieval models. We evaluate these\nmethods on three selected LLM applications for\nchip design: an engineering assistant chatbot,\nEDA script generation, and bug summarization\nand analysis. Our evaluations demonstrate that\ndomain-adaptive pretraining of language models,\ncan lead to superior performance in domain re-\nlated downstream tasks compared to their base\nLLaMA2 counterparts, without degradations in\ngeneric capabilities. In particular, our largest\nmodel, ChipNeMo-70B, outperforms the highly\ncapable GPT-4 on two of our use cases, namely en-\ngineering assistant chatbot and EDA scripts gener-\nation, while exhibiting competitive performance\non bug summarization and analysis. These re-\nsults underscore the potential of domain-specific\ncustomization for enhancing the effectiveness of\nlarge language models in specialized applications.", "We use largely publicly available general-purpose chat in-\nstruction datasets for multi-turn chat together with a small\namount of domain-specific instruction datasets to perform\nalignment on the ChipNeMo foundation model, which pro-\nduces the ChipNeMo chat model. We observe that align-\nment with a general purpose chat instruction dataset is\nadequate to align the ChipNeMo foundation models with\nqueries in the chip design domain. We also added a small\namount of task-specific instruction data, which further im-\nproves the alignment. We trained multiple ChipNeMo foun-\ndation and chat models based on variants of LLaMA2 mod-\nels used as the base foundation model.\nTo improve performance on the engineering assistant chat-\nbot application, we also leverage Retrieval Augmented Gen-\neration (RAG). RAG is an open-book approach for giving\nLLMs precise context for user queries. It retrieves rele-\nvant in-domain knowledge from its data store to augment", "in Fig. 1 into three broader categories \u201cDesign\u201d,\n\u201cBehavior\u201d, and \u201cScience\u201d. To provide answers\nfor (2), we explore the fields of chatbots, compu-\ntational biology, computer programming, creative\nwork, knowledge work, law, medicine, reasoning,\nrobotics, and the social sciences.\nThis paper is an opinionated review and assumes\nfamiliarity with LLMs and how they work (we refer\nto more introductory works in Sec. 4). Further, we\nfocus on models trained on text data. We target a\ntechnical researcher audience and do not discuss\npolitical, philosophical, or moral perspectives on\nLLMs.\n2 Challenges\nChallenge\nThis box highlights a challenge.\n2.1 Unfathomable Datasets\nScaling the amount of pre-training data has been\none of the major drivers to equip LLMs with\ngeneral-purpose capabilities [ 256]. The size of\npre-training datasets quickly outgrew the number\nof documents most human teams could manually\nquality-check. Instead, most data collection proce-"], "retrieved_docs_id": ["28f0897bcb", "6097ca12dc", "a6c3d05123", "411c489c58", "fdd47df0c0"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "Which model outperforms GPT-4 in all categories, including both RAG misses and hits, according to the human evaluation?\n", "true_answer": "ChipNeMo-70B-Steer outperforms GPT-4 in all categories, including both RAG misses and hits, according to the human evaluation.", "source_doc": "ChipNemo.pdf", "source_id": "1ed1c2ae54", "retrieved_docs": ["and required more context (see Appendix A.8 for detailed\nexamples). This significantly contributes to the differencein retrieval quality between the categories.\nFigure 7: Human Evaluation of Different Models. Model Only\nrepresents results without RAG. RAG (hit)/(miss) only include\nquestions whose retrieved passages hit/miss their ideal context,\nRAG (avg) includes all questions. 7 point Likert scale.\nWe conducted evaluation of multiple ChipNeMo models\nand LLaMA2 models with and without RAG. The results\nwere then scored by human evaluators on a 7 point Likert\nscale and shown in Figure 7. We highlight the following:\n\u2022ChipNeMo-70B-Steer outperforms GPT-4 in all cate-\ngories, including both RAG misses and hits.\n\u2022ChipNeMo-70B-Steer outperforms similar sized\nLLaMA2-70b-Chat in model-only and RAG evalua-\ntions by 3.31 and 1.81, respectively.\nOur results indicate that RAG significantly boosts human\nscores. RAG improves ChipNeMo-70B-Steer, GPT-4, and", "tasks, the LLMs that have been pre-trained on the code\ncorpus show superior performance.\n\u2022Human-level test benchmarks aim to evaluate the compre-\nhensive ability of LLMs with questions designed for testing\nhumans, such as AGIEval [708], MMCU [709], M3KE [710],\nC-Eval [711] and Xiezhi [712]. These benchmarks encompass\na wide range of domains, difficulty levels, and languages\nto provide a comprehensive evaluation of LLMs\u2019 general\ncapabilities. Compared to publicly available models, models\noffering API services ( e.g.,GPT-4, ChatGPT, Claude) demon-\nstrate superior performance compared to publicly avail-\nable models on these evaluation benchmarks. As the best-\nperforming model in evaluations, GPT-4 surpasses average\nhuman performance in AGIEval [708]. However, it still lags\nbehind the top human performance on these challenging\nbenchmarks. Hence, there remains ample room for further\nenhancements in the overall abilities of LLMs, particularly\nfor publicly accessible models.", "scores. RAG improves ChipNeMo-70B-Steer, GPT-4, and\nLLaMA2-70b-Chat by 0.56, 1.68, and 2.05, respectively.\nEven when RAG misses, scores are generally higher than\nwithout using retrieval. The inclusion of relevant in-domain\ncontext still led to improved performance, as retrieval is not\na strictly binary outcome. Furthermore, while ChipNeMo-\n70B-SFT outperforms GPT4 by a large margin through\ntraditional supervised fine-tuning, applying SteerLM meth-\nods (Wang et al., 2023) leads to further elevated chatbot\nratings. We refer readers to the complete evaluation results\nin Appendix A.9.\n3.6. EDA Script Generation\nIn order to evaluate our model on the EDA script generation\ntask, we created two different types of benchmarks. The first\nis a set of \u201cEasy\u201d and \u201cMedium\u201d difficulty tasks (1-4 line\nsolutions) that can be evaluated without human intervention\nby comparing with a golden response or comparing the\ngenerated output after code execution. The second set of", "a model is calculated as a percentage of the score that ChatGPT achieved. Note this relative score\ncan be higher than 100% if the model achieves a higher absolute score than ChatGPT. We find a\nsignificant ordering effect with GPT-4 increasing the score of the response occurring earlier in the\nprompt. To control for such effects, we recommend reporting the mean score over both orders.\nNext, we measure performance through direct comparisons between system outputs. We simplify\nthe rating scheme to a three-class labeling problem that accounts for ties. We prompt GPT-4 to\npick the best response or declare a tie and provide an explanation. We conduct these head-to-head\ncomparisons on all permutations of pairs of systems on both the Vicuna and OA benchmarks.\nHuman Evaluation While recent work indicates generative models can be effectively employed\nfor system evaluations [ 19], the reliability GPT-4 ratings to assess chatbot performance is, to our", "tasks we \ufb01nd relatively smooth scaling with model capacity in all three settings; one notable pattern is that the gap\nbetween zero-, one-, and few-shot performance often grows with model capacity, perhaps suggesting that larger models\nare more pro\ufb01cient meta-learners.\nFinally, given the broad spectrum of capabilities displayed by GPT-3, we discuss concerns about bias, fairness, and\nbroader societal impacts, and attempt a preliminary analysis of GPT-3\u2019s characteristics in this regard.\nThe remainder of this paper is organized as follows. In Section 2, we describe our approach and methods for training\nGPT-3 and evaluating it. Section 3 presents results on the full range of tasks in the zero-, one- and few-shot settings.\nSection 4 addresses questions of data contamination (train-test overlap). Section 5 discusses limitations of GPT-3.\nSection 6 discusses broader impacts. Section 7 reviews related work and Section 8 concludes.\n2 Approach"], "retrieved_docs_id": ["1ed1c2ae54", "78b5fb08ad", "af6e8c3fb2", "4837050bfa", "48e99e85eb"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does SUGRE embed relevant information from a knowledge graph?\n", "true_answer": "SUGRE embeds relevant subgraphs retrieved from the knowledge graph using Graph Neural Networks (GNN).", "source_doc": "RAG.pdf", "source_id": "812e372c75", "retrieved_docs": ["formation of the preceding blocks (C1, . . . , C i\u22121)and the\nretrieval information of N(Ci\u22121)through cross-attention to\nguide the generation of the next block Ci. To maintain causal-\nity, the autoregressive generation of the i-th block Cican only\nuse the nearest neighbor of the previous block N(Ci\u22121)and\nnotN(Ci).\nAugmented with Structured Data\nStructured data sources like Knowledge Graphs (KG) are\ngradually integrated into the paradigm of RAG. Verified KGs\ncan offer higher-quality context, reducing the likelihood of\nmodel hallucinations.\nRET-LLM [Modarressi et al. , 2023 ]constructs a per-\nsonalized knowledge graph memory by extracting\nrelation triples from past dialogues for future use.\nSUGRE [Kang et al. , 2023 ]embeds relevant subgraphs\nretrieved from the knowledge graph using Graph Neural\nNetworks (GNN) to prevent the model from generating\ncontextually irrelevant replies. SUGRE [Kang et al. , 2023 ]\nemploys a graph encoding method that reflects the graph", "employs a graph encoding method that reflects the graph\nstructure into PTMs\u2019 representation space and utilizes a\nmulti-modal contrastive learning objective between graph-\ntext modes to ensure consistency between retrieved facts\nand generated text. KnowledgeGPT [Wang et al. , 2023c ]\ngenerates search queries for Knowledge Bases (KB) in code\nformat and includes predefined KB operation functions.\nApart from retrieval, KnowledgeGPT also offers the ca-\npability to store knowledge in a personalized knowledge\nbase to meet individual user needs. These structured data\nsources provide RAG with richer knowledge and context,\ncontributing to improved model performance.\nLLM Generated Content RAG\nObserving that the auxiliary information recalled by RAG\nis not always effective and may even have negative effects,\nsome studies have expanded the paradigm of RAG by delving\ndeeper into the internal knowledge of LLM. This approach\nutilizes the content generated by LLM itself for retrieval, aim-", "lacking a comprehensive consideration of alignment criteria.\nMore efforts should be made to promote the research of\nsafety and alignment for MLLMs.\n8.1.5 KG-Enhanced LLM\nDespite the excellent capacities, LLMs often suffer from\nchallenges on knowledge-intensive tasks, such as the po-\ntential to generate hallucinated content [602] and the lack of\ndomain-specific knowledge [861]. As a promising solution,\nknowledge graphs (KGs), which store enormous knowledge\nin the triple format, i.e.,\u27e8head entity, relation, tail entity\u27e9, can\nbe utilized to enhance the task performance of LLMs by pro-\nviding precise and necessary knowledge. Generally, knowl-\nedge enhanced approaches can be expanded into otherforms of structured data ( e.g., tables and databases) [862],\nwhile we limit our discussion to the integration of KG for\nimproving LLMs, which are detailed in two aspects, namely\nretrieval-augmented LLM and synergy-augmented LLM.\nRetrieval-Augmented LLM. Due to the huge amount of", "the retrieval performance, several studies also propose an\niterative reading-then-reasoning framework, enabling the\nLLM to interact with the KG multiple times and acquire the\nrequired knowledge in a more accurate way [458]. For the\nsecond issue ( i.e.,utilizing retrieved knowledge), a straight-\nforward approach is to serialize the retrieved subgraph\nand craft specific prompts to include it as the input of\nLLMs [471, 651]. However, due to the loss of structured\ninformation in knowledge serialization, LLMs cannot fully\ncapture the structural semantics conveyed by original KGs.\nTo address this issue, several model-based approaches train\na specialized language model ( e.g., T5) to transform the\nsubgraph into the natural language text [867]. To guarantee\nthe transformation accuracy, it relies on sufficient training\npairs (often unsupervised constructed) [868] and excellent\nmodel capability [869].\nSynergy-Augmented LLM. To solve complex tasks ( e.g.,", "reasoning methods in traditional NLP tasks, such as deducing logical\nrules from the knowledge graphs in KBQA."], "retrieved_docs_id": ["812e372c75", "4c3ac6cb2e", "f918d33875", "fb5c13b0e4", "36451be56b"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How can multi-view low-resolution vision encoders capture detailed information for MLLM?\n", "true_answer": "By inputting multi-view high-resolution images, specifically a global view (low-resolution images from resizing) and a local view (image patches from splitting).", "source_doc": "multimodal.pdf", "source_id": "f8392fc0db", "retrieved_docs": ["Multi-view Input Directly employing high-resolution vision encoders for fine-grained percep-\ntion is prohibitively costly and does not align with practical usage requirements. Therefore, to\nutilize low-resolution vision encoders while enabling MLLM to perceive detailed information, a\ncommon approach is to input multi-view HR images, i.e., a global view: low-resolution images\nobtained through resizing, and a local view: image patches derived from splitting. For example,\n7", "for resource-sensitive tasks was provided, with some works employing visual token compression\nto boost efficiency, enabling the transfer of MLLM capabilities to resource-intensive tasks such as\nhigh-resolution image and video understanding[35, 39, 14, 40].\nIn this survey, we aim to present an exhaustive organization of the recent advancements in the rapidly\nevolving field of efficient MLLMs, as depicted in Figure.2. We organize the literature in a taxonomy\nconsisting of six primary categories, encompassing various aspects of efficient MLLMs, including\narchitecture ,efficient vision ,efficient LLMs ,training ,data and benchmarks , and applications .\n\u2022 Architecture focuses on the MLLM framework developed by efficient techniques to reduce\nthe computational cost. The architecture is composed of multiple modality-based funda-\nmental models, exhibits characteristics distinct from single-modal models, thus promoting\nthe development of novel technologies.", "tion answering and image captioning. However, MLLMs face considerable challenges in tasks ne-\ncessitating intricate recognition, including crowd counting and OCR of small characters. A direct\napproach to address these challenges involves increasing the image resolution, practically, the num-\nber of visual tokens. This strategy, nonetheless, imposes a substantial computational burden on\nMLLMs, primarily due to the quadratic scaling of computational costs with the number of input to-\nkens in the Transformer architecture. Motivated by this challenge, vision token compression, aimed\nto reduce the prohibitive computation budget caused by numerous tokens, has become an essential\naspect of efficient MLLMs. We will explore this topic through several key techniques, including\nmulti-view input, token processing, multi-scale information fusion, vision expert agents and video-\nspecific methods.\nMulti-view Input Directly employing high-resolution vision encoders for fine-grained percep-", "ment between the feature spaces of visual and text inputs. Since the vision encoder constitutes a\nrelatively minor portion of the MLLM parameters, the advantages of lightweight optimization are\nless pronounced compared to the language model. Therefore, efficient MLLMs generally continue\nto employ visual encoders that are widely used in large-scale MLLMs, as detailed in Table 1.\nMultiple Vision Encoders BRA VE[12] in Figure. 4 performs an extensive ablation of various vi-\nsion encoders with distinct inductive biases for tackling MLMM tasks. The results indicate that there\nisn\u2019t a single-encoder setup that consistently excels across different tasks, and encoders with diverse\nbiases can yield surprisingly similar results. Presumably, incorporating multiple vision encoders\ncontributes to capturing a wide range of visual representations, thereby enhancing the model\u2019s com-\nprehension of visual data. Cobra[13] integrates DINOv2[76] and SigLIP[75] as its vision backbone,", "task encoders are dedicated to integrating various types of latent visual information extracted by\nmultiple visual encoders. Additionally, the structural knowledge enhancement module is designed\nto utilize visual tools, such as OCR tools and object detectors, to extract prior knowledge from\nvisual inputs.\nFollowing the approach of the structural knowledge enhancement module in [ 38], another line\nof research investigates the utilization of vision tool models to enhance the perception of MLLMs.\nVCoder [ 49] utilizes additional perception formats, such as segmentation masks and depth maps,\nto enhance the object identification ability of the MLLM. Another work [ 54] ensembles additional\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024."], "retrieved_docs_id": ["f8392fc0db", "cd55ca1477", "8beea9b82e", "4ee780b19c", "c461600dc0"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does the vision encoder modify the input image in a mathematical formula?\n", "true_answer": "The vision encoder compresses the original image (X) into more compact patch features (Zv) using the formula Zv=g(Xv).", "source_doc": "multimodal.pdf", "source_id": "11ffce909a", "retrieved_docs": ["Taking the input image Xvas input, the vision encoder compresses the original image into more\ncompact patch features Zv, as represented by the following formula:\nZv=g(Xv). (1)\n4", "to lose some visual details compared to pure vision models like DINO ViT [ 10]. Therefore, recent\nstudies have proposed complementing this information loss by incorporating visual features from\nother vision encoders. The work of [ 98] proposes mixing features from CLIP ViT and DINO ViT.\nSpecifically, it experimented with additive and interleaved features. Both settings show that there\nis a trade-off between the two types of features. A more dedicated mechanism is needed.\nConcurrently, a visual expert-based model proposed in [ 38] aims to mitigate the information\nloss caused by the CLIP image encoder. Instead of merely mixing features, this paper enhances\nthe visual perception ability of MLLMs by focusing on knowledge enhancement, relying on two\npivotal modules: multi-task encoders and the structural knowledge enhancement module. The multi-\ntask encoders are dedicated to integrating various types of latent visual information extracted by", "VL [ 2] has shown the effectiveness of gradually enlarging image resolution from 224\u00d7224to\n448\u00d7448. InternVL [ 2] scales up the vision encoder to 6 billion parameters, enabling processing of\nhigh-resolution images. Regarding hallucination, HallE-Switch [ 123] has investigated the impact\nof vision encoder resolution on its proposed CCEval benchmark. Among the three studied vision\nencoders (CLIP-ViT-L-112, CLIP-ViT-L-224, CLIP-ViT-L-336), higher resolution generally results\nin lower degrees of hallucination. These works indicate that scaling up vision resolution is a\nstraightforward yet effective solution.\n5.2.2 Versatile Vision Encoders. Several studies [ 38,49,98] have investigated vision encoders for\nMLLMs. Typically, the CLIP ViT image encoder is used as the vision encoder in most MLLMs\nthanks to its remarkable ability to extract semantic-rich features. However, CLIP has been shown\nto lose some visual details compared to pure vision models like DINO ViT [ 10]. Therefore, recent", "ment between the feature spaces of visual and text inputs. Since the vision encoder constitutes a\nrelatively minor portion of the MLLM parameters, the advantages of lightweight optimization are\nless pronounced compared to the language model. Therefore, efficient MLLMs generally continue\nto employ visual encoders that are widely used in large-scale MLLMs, as detailed in Table 1.\nMultiple Vision Encoders BRA VE[12] in Figure. 4 performs an extensive ablation of various vi-\nsion encoders with distinct inductive biases for tackling MLMM tasks. The results indicate that there\nisn\u2019t a single-encoder setup that consistently excels across different tasks, and encoders with diverse\nbiases can yield surprisingly similar results. Presumably, incorporating multiple vision encoders\ncontributes to capturing a wide range of visual representations, thereby enhancing the model\u2019s com-\nprehension of visual data. Cobra[13] integrates DINOv2[76] and SigLIP[75] as its vision backbone,", "Figure 4: BRA VE [12] concatenates features from K different Vision Encoders in a sequence-wise\nmanner. These concatenated features are then reduced by the MEQ-Former.\navoids the high cost of training an end-to-end multimodal model from scratch and effectively lever-\nages the capabilities of pre-trained language and vision models.\nMLP-based As outlined in [7, 54], the vision-language projector is typically realized using a\nstraightforward, learnable Linear Projector or a Multi-Layer Perceptron (MLP), i.e., several linear\nprojectors interleaved with non-linear activation functions, as illustrated in Table.1.\nAttention-based BLIP2 [15] introduces Q-Former, a lightweight transformer, which employs a\nset of learnable query vectors to extract visual features from a frozen vision model. Perceiver\nResampler, proposed by Flamingo[16], contemplates the use of learnable latent queries as Q in\ncross-attention, while image features are unfolded and concatenated with Q to serve as K and V in"], "retrieved_docs_id": ["11ffce909a", "c20c82af54", "3f64cf9b55", "4ee780b19c", "1fea51e26c"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does Vid2Seq improve language model prediction?\n", "true_answer": "Vid2Seq improves language model prediction by introducing special time markings, enabling it to predict event boundaries and text descriptions seamlessly.", "source_doc": "RAG.pdf", "source_id": "535efdce62", "retrieved_docs": ["iand\nv\u2032\niare initialized similar to the weights of a feedforward sublayer.\nFor character level language modeling, we set the model dimension to d= 512 , and the number of\nheads to 8. Our small (large) models have 18(36) all-attention layers, N= 1024 (2048 ) persistent\nvectors and a dropout rate of 0.3(0.4) applied to attention weights. The adaptive span has the same\nhyperparameters as Sukhbaatar et al. [39] with a maximum span of 8192 , except the loss coef\ufb01cient\nis set to 10\u22127. We use Adagrad [ 11] with a learning rate of 0.07. We clip individual gradients with a\nnorm larger than 0.03[31]. We warmup the learning rate linearly for 32k timesteps [ 40]. A training\nbatch consists of 64samples, each with 512consecutive tokens. When the loss on validation stops\ndecreasing, we divide the learning rate by 10for an additional 20-30k steps. Training large models\ntakes about a day on 64V100 GPUs.\nFor word level language modeling, we use a model with d= 512 and36layers, each with 8heads", "fairseq: A fast, extensible toolkit for sequence modeling. arXiv preprint arXiv:1904.01038 .\nOtt, M., Edunov, S., Grangier, D., and Auli, M. (2018). Scaling neural machine translation. arXiv\npreprint arXiv:1806.00187 .\n12", "accuracy for VQAv2/VizWiz.\nTable 14 shows the experimental results. Language-only instruction tuning boosts our model\u2019s\nperformance by 1.9 points on Flickr30k, 4.3 points on VQAv2, and 1.3 points on VizWiz. Our experi-\nments show that language-only instruction tuning can signi\ufb01cantly improve the model\u2019s instruction-\nfollowing capabilities across modalities. The results also indicate that our model can transfer the\ninstruction-following capability from language to other modalities.\n16", "Damoc, Aurelia Guy, Simon Osindero, Karen Simonyan, Erich Elsen, Jack W. Rae, Oriol\nVinyals, and Laurent Sifre. Training compute-optimal large language models. arXiv\npreprint arXiv:2203.15556 , 2022.\n52", "QuIP: 2-Bit Quantization of\nLarge Language Models With Guarantees\nJerry Chee\nCornell University\njerrychee@cs.cornell.eduYaohui Cai\nCornell University\nyc2632@cornell.edu\nVolodymyr Kuleshov\nCornell University\nkuleshov@cornell.eduChristopher De Sa\nCornell University\ncdesa@cs.cornell.edu\nAbstract\nThis work studies post-training parameter quantization in large language models\n(LLMs). We introduce quantization with incoherence processing (QuIP), a new\nmethod based on the insight that quantization benefits from incoherent weight\nand Hessian matrices, i.e., from the weights being even in magnitude and the\ndirections in which it is important to round them accurately being unaligned with\nthe coordinate axes. QuIP consists of two steps: (1) an adaptive rounding procedure\nminimizing a quadratic proxy objective; (2) efficient pre- and post-processing that\nensures weight and Hessian incoherence via multiplication by random orthogonal"], "retrieved_docs_id": ["cded4ceba4", "49d46e5827", "a1656af7b2", "3d1c309d39", "163e19bdc8"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What is an example of a method for mitigating data-related hallucinations in NLP?\n", "true_answer": "Introducing negative data, such as LRV-Instruction, is an example of a method for mitigating data-related hallucinations in NLP.", "source_doc": "hallucination.pdf", "source_id": "19a4c2c778", "retrieved_docs": ["Hallucination of Multimodal Large Language Models: A Survey 3\ncontrast, there are very few surveys on hallucination in the field of MLLMs. To the best of our\nknowledge, there is only one concurrent work [ 76], a short survey on the hallucination problem of\nLVLMs. However, our survey distinguishes itself in terms of both taxonomy and scope. We present a\nlayered and granular classification of hallucinations, as shown in Fig. 1, drawing a clearer landscape\nof this field. Additionally, our approach does not limit itself to specific model architectures as\nprescribed in the work of [ 76], but rather dissects the causes of hallucinations by tracing back to\nvarious affecting factors. We cover a larger range of literature both in terms of paper number and\ntaxonomy structure. Furthermore, our mitigation strategies are intricately linked to the underlying\ncauses, ensuring a cohesive and targeted approach.\nOrganization of this survey. In this paper, we present a comprehensive survey of the latest", "Based on powerful large language models, multimodal large language models demonstrate remark-\nable performance across various multimodal tasks. However, the phenomenon of hallucination\npresents a significant challenge to the practical applications of MLLMs, giving rise to undeniable\nconcerns about safety, reliability, and trustworthiness. In this comprehensive survey, we conducted\na thorough examination of hallucinations within multimodal large language models, focusing\non their underlying causes, evaluation metrics, benchmarks, and mitigation methods. Despite\nconsiderable progress, hallucination remains a complex and persistent concern that warrants ongo-\ning investigation. The challenge of hallucination in multimodal large language models remains\ncompelling, requiring continuous scrutiny and innovation. In light of these challenges, we have\noutlined several promising future directions in this burgeoning domain. Through navigating the", "MLLMs. Based on the detection result, the hallucinated content can be eliminated. Secondly, this\nwork observes that long-tail distribution and object co-occurrence in the training data are two\nprimary factors of hallucination. Thus, a counterfactual visual instruction generation strategy is\nproposed to expand the dataset. Using the proposed methods, the instruction tuning data can be\nbalanced and experience reduced hallucination. MLLMs trained on the calibrated dataset are shown\nto be less prone to hallucination.\nReCaption [ 105]This work proposes a framework called ReCaption to rewrite the text captions\nof existing image-text pairs in datasets. The framework comprises two steps: 1) keyword extraction,\nwhich extracts verbs, nouns, and adjectives from the caption; and 2) caption generation, which\nemploys an LLM to generate sentences based on the extracted keywords. Ultimately, the framework", "Data quality relevant to hallucinations can be further categorized into the following three facets.\n\u2022Noisy data. As mentioned in the definition section, training MLLMs involves two stages. The\npre-training stage employs image-text pairs crawled from the web, which contain inaccurate,\nmisaligned, or corrupted data samples. The noisy data would limit the cross-modal feature\nalignment [ 117,120], which serves as the foundation of MLLMs. As for the instruction tuning\ndata, prevalent methods, such as LLaVA [ 75], utilize the advanced GPT-4 [ 82] model to\ngenerate instructions. However, ChatGPT is a language model that cannot interpret visual\ncontent, leading to the risk of noisy data. Moreover, language models themselves suffer\nfrom the issue of hallucination [ 44], further increasing the risk. LLaVA-1.5 [ 74] adds human\nannotated QA data into instruction following and shows improved results, revealing the\neffect of noisy data.", "Organization of this survey. In this paper, we present a comprehensive survey of the latest\ndevelopments regarding hallucinations in MLLMs. The survey is organized as follows: We begin by\nproviding sufficient context and defining concepts related to LLMs, MLLMs, hallucination, etc. Next,\nwe delve into an in-depth analysis of the factors contributing to hallucinations in MLLMs. Following\nthis, we present a set of metrics and benchmarks employed for evaluating hallucinations in MLLMs.\nWe then elaborate on a range of approaches designed to mitigate hallucinations in MLLMs. Finally,\nwe delve into the challenges and open questions that frame the current limitations and future\nprospects of this field, offering insights and delineating potential pathways for forthcoming research.\n2 DEFINITIONS\n2.1 Large Language Models\nBefore moving to multimodal large language models, it is essential to introduce the concept of large"], "retrieved_docs_id": ["33d47ad8cc", "114f3dada8", "294848c460", "dcdb797076", "e1b4ac9436"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How does Woodpecker, an early attempt on hallucination detection and correction, identify and correct hallucinations?\n", "true_answer": "Woodpecker identifies and corrects hallucinations by extracting key concepts from the generated text and validating them using visual content. It then detects and corrects any hallucinated concepts by asking questions around the extracted concepts.", "source_doc": "hallucination.pdf", "source_id": "b4dda01e19", "retrieved_docs": ["Hallucination of Multimodal Large Language Models: A Survey 21\n5.4.2 Post-hoc Correction. Post-hoc correction refers to first allowing the MLLM to generate a text\nresponse and then identifying and eliminating hallucinating content, resulting in less hallucinated\noutput. This is usually achieved by grounding on visual content [ 114], pre-trained revisior [ 137],\nand self-revision [63].\nWoodpecker [ 114] is an early attempt on hallucination detection and correction. Similar to how\na woodpecker heals trees, Woodpecker picks out and corrects hallucinations from the generated\ntext. The key idea of Woodpecker is to extract key concepts from the generated text and validate\nthem using visual content. Subsequently, the hallucinated concepts can be detected and corrected\naccordingly. Specifically, it consists of five stages: 1) Key concept extraction identifies the main objects\nmentioned in the generated sentences; 2) Question formulation asks questions around the extracted", "in real-world applications. This problem has attracted increasing attention, prompting efforts to detect\nand mitigate such inaccuracies. We review recent advances in identifying, evaluating, and mitigating these\nhallucinations, offering a detailed overview of the underlying causes, evaluation benchmarks, metrics, and\nstrategies developed to address this issue. Additionally, we analyze the current challenges and limitations,\nformulating open questions that delineate potential pathways for future research. By drawing the granular\nclassification and landscapes of hallucination causes, evaluation benchmarks, and mitigation methods, this\nsurvey aims to deepen the understanding of hallucinations in MLLMs and inspire further advancements in\nthe field. Through our thorough and in-depth review, we contribute to the ongoing dialogue on enhancing the\nrobustness and reliability of MLLMs, providing valuable insights and resources for researchers and practitioners", "mentioned in the generated sentences; 2) Question formulation asks questions around the extracted\nobjects; 3) Visual knowledge validation answers the formulated questions via expert models; 4)\nVisual claim generation converts the above Question-Answer (QA) pairs into a visual knowledge\nbase; 5) Hallucination correction modifies the hallucinations and adds the corresponding evidence\nunder the guidance of the visual knowledge base. Woodpecker is a training-free method, where\neach component can be implemented using either hand-crafted rules or off-the-shelf pre-trained\nmodels.\nAnother line of work rectifies the generated text using a dedicatedly trained revisor model.\nSpecifically, inspired by denoising autoencoders [ 101], which are designed to reconstruct clean data\nfrom corrupted input, LURE [ 137] employs a hallucination revisor that aims to transform potentially\nhallucinatory descriptions into accurate ones. To train such a revisor model, a dataset has been", "MiniGPT-4 (13B) [138] 13B 15.9 76.7 - - - - -\nmPLUG-Owl2 [112] 7B 10.6 84.0 47.30 - - - -\nLLaVA-1.5 (7B) [74] 7B 8.6 82.9 - - - 44.6 46.4\nLLaVA-1.5 (13B) [74] 13B - - 46.94 0.8566 0.9425 - -\nCogVLM [106] 7B 7.9 86.1 - - - - -\nQwen-VL-Chat [2] 7B - - 39.15 - - - -\nOpen-Flamingo [1] 9B - - 38.44 - - - -\nLRV-Instruction [73] - - - 42.78 - - - -\n5 HALLUCINATION MITIGATION\nIn this section, we present a comprehensive review of contemporary methods aimed at mitigating\nhallucinations in MLLMs. Based on the properties and perspectives of these methods, we sys-\ntematically categorize them into four groups. Specifically, we investigate approaches addressing\nhallucination from Data, Model, Training, and Inference.\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024.", "outlined several promising future directions in this burgeoning domain. Through navigating the\nintricate landscape of hallucinations, we aim for this survey to serve as a foundational resource\nfor addressing the complexities of hallucination phenomena in MLLMs. We envision this survey\nempowering researchers and practitioners to dedicate efforts to advancing research and developing\nrobust solutions in this vital area of study.\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024."], "retrieved_docs_id": ["b4dda01e19", "c7f1da1e07", "ceeab98980", "e515c37930", "fe498b26d7"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "Which model outperforms GPT-4 in generating EDA tools scripts and as an engineering assistant chatbot?\n", "true_answer": "The fine-tuned LLaMA2 70B model, as demonstrated by ChipEDA (He et al., 2023), outperforms the GPT-4 model on these tasks.", "source_doc": "ChipNemo.pdf", "source_id": "e6b9ba907a", "retrieved_docs": ["uations, more than 70% correctness on the generation\nof simple EDA scripts, and expert evaluation ratings\nabove 5 on a 7 point scale for summarizations and\nassignment identification tasks.\n\u2022 Domain-adapted ChipNeMo models dramatically out-\nperforms all vanilla LLMs evaluated on both multiple-\nchoice domain-specific AutoEval benchmarks and hu-\nman evaluations for applications.\n\u2022Using the SteerLM alignment method (Dong et al.,\n2023) over traditional SFT improves human evaluation\nscores for the engineering assistant chatbot by 0.62\npoints on a 7 point Likert scale.\n\u2022SFT on an additional 1.4Kdomain-specific instruc-\ntions significantly improves the model\u2019s proficiency at\ngenerating correct EDA tool scripts by 18%.\n\u2022Domain-adaptive tokenization reduce domain data to-\nken count by up to 3.3%without hurting effectiveness\non applications.\n\u2022Fine-tuning our ChipNeMo retrieval model with\n2", "processor with GPT-4 and GPT-3.5. Their findings showed\nthat although GPT-4 produced relatively high-quality codes,\nit still does not perform well enough at understanding and\nfixing the errors. ChipEDA (He et al., 2023) proposed to use\nLLMs to generate EDA tools scripts. It also demonstrated\nthat fine-tuned LLaMA2 70B model outperforms GPT-4\nmodel on this task.\n5. Conclusions\nWe explored domain-adapted approaches to improve LLM\nperformance for industrial chip design tasks. Our results\nshow that domain-adaptive pretrained models, such as the\n7B, 13B, and 70B variants of ChipNeMo, achieve simi-\nlar or better results than their base LLaMA2 models with\nonly 1.5% additional pretraining compute cost. Our largest\ntrained model, ChipNeMo-70B, also surpasses the much\nmore powerful GPT-4 on two of our use cases, engineering\nassistant chatbot and EDA scripts generation, while show-\ning competitive performance on bug summarization and\nanalysis. Our future work will focus on further improving", "a model is calculated as a percentage of the score that ChatGPT achieved. Note this relative score\ncan be higher than 100% if the model achieves a higher absolute score than ChatGPT. We find a\nsignificant ordering effect with GPT-4 increasing the score of the response occurring earlier in the\nprompt. To control for such effects, we recommend reporting the mean score over both orders.\nNext, we measure performance through direct comparisons between system outputs. We simplify\nthe rating scheme to a three-class labeling problem that accounts for ties. We prompt GPT-4 to\npick the best response or declare a tie and provide an explanation. We conduct these head-to-head\ncomparisons on all permutations of pairs of systems on both the Vicuna and OA benchmarks.\nHuman Evaluation While recent work indicates generative models can be effectively employed\nfor system evaluations [ 19], the reliability GPT-4 ratings to assess chatbot performance is, to our", "raters and GPT-4 for evaluation. We use tournament-style benchmarking where models compete\nagainst each other in matches to produce the best response for a given prompt. The winner of a\nmatch is judged by either GPT-4 or human annotators. The tournament results are aggregated into\nElo scores [ 16,17] which determine the ranking of chatbot performance. We find that GPT-4 and\nhuman evaluations largely agree on the rank of model performance in the tournaments, but we also\nfind there are instances of strong disagreement. As such, we highlight that model-based evaluation\nwhile providing a cheap alternative to human-annotation also has its uncertainties.\nWe augment our chatbot benchmark results with a qualitative analysis of Guanaco models. Our analy-\nsis highlights success and failure cases that were not captured by the quantitative benchmarks.\nWe release all model generations with human and GPT-4 annotations to facilitate further study. We", "5.3 Guanaco: QL ORA trained on OASST1 is a State-of-the-art Chatbot\nBased on our automated and human evaluations, we find that the top QLORAtuned model, Guanaco\n65B, which we finetune on a variant of OASST1, is the best-performing open-source chatbot model\nand offers performance competitive to ChatGPT. When compared to GPT-4, Guanaco 65B and 33B\nhave an expected win probability of 30%, based on Elo rating from human annotators system-level\npairwise comparisons - the highest reported to date.\nThe Vicuna benchmark [ 10] results relative to ChatGPT are shown in Table 6. We find that Guanaco\n65B is the best-performing model after GPT-4, achieving 99.3% performance relative to ChatGPT.\nGuanaco 33B has more parameters than the Vicuna 13B model, but uses only 4-bit precision for its\nweights and is thus much more memory efficient at 21 GB vs 26 GB, providing a three percentage\npoints of improvement over Vicuna 13B. Furthermore, Guanaco 7B easily fits on modern phones at a"], "retrieved_docs_id": ["c7d05c4b43", "e6b9ba907a", "4837050bfa", "b849cf1a9b", "646d2aa195"], "reranker_type": "None", "search_type": "vector", "rr": 0.5, "hit": 1}, {"question": "What issue do large language models (LLMs) face that affects their reliability in knowledge-intensive tasks?\n", "true_answer": "LLMs like ChatGPT often struggle with hallucinations, knowledge updates, and data-related issues, which can affect their performance in tasks requiring access to a vast amount of knowledge, such as open-domain question answering and common-sense reasoning.", "source_doc": "RAG.pdf", "source_id": "ee184b2a82", "retrieved_docs": ["and application, along with analysis on\naspects that influence the outcome of IT (e.g.,\ngeneration of instruction outputs, size of the\ninstruction dataset, etc). We also review the\npotential pitfalls of IT along with criticism\nagainst it, along with efforts pointing out\ncurrent deficiencies of existing strategies and\nsuggest some avenues for fruitful research.\n1 Introduction\nThe field of large language models (LLMs)\nhas witnessed remarkable progress in recent\nyears. LLMs such as GPT-3 (Brown et al.,\n2020b), PaLM (Chowdhery et al., 2022), and\nLLaMA (Touvron et al., 2023a) have demonstrated\nimpressive capabilities across a wide range of\nnatural language tasks (Zhao et al., 2021; Wang\net al., 2022b, 2023a; Wan et al., 2023; Sun et al.,\n2023c; Wei et al., 2023; Li et al., 2023a; Gao et al.,\n2023a; Yao et al., 2023; Yang et al., 2022a; Qian\net al., 2022; Lee et al., 2022; Yang et al., 2022b;\nGao et al., 2023b; Ning et al., 2023; Liu et al.,\n\u2660Zhejiang University,\u2663Shannon.AI,\u25b2Nanyang", "LLMs. This survey tries to cover the most recent literature\nabout LLMs and provides a good reference resource on this\ntopic for both researchers and engineers.\nNext, we summarize the discussions of this survey, and\nintroduce the challenges and future directions for LLMs, in\nthe following aspects.\nBasics and Principles. Instead of training on specific task\ngoals, LLMs learn from unsupervised pre-training on large-\nscale text data. This is quite different from previous multi-\ntask learning approaches, which aim to extend the training\ntasks as possible to achieve sufficient generalization. Thus,\nit is essential to reveal the basic principles or elements that\nestablish the foundation of the abilities of LLMs. Although\nthe basic idea of language models is intuitive, it is still chal-\nlenging to formally explain why LLMs trained by simple\nlanguage modeling objectives ( e.g., next token prediction)\ncan become capable of solving various real-world tasks.", "workings of LLMs.\n6.Human performance on a task isn\u2019t an upper\nbound on LLM performance.\n7.LLMs need not express the values of their\ncreators nor the values encoded in web text.\n8.Brief interactions with LLMs are often mis-\nleading.\nIntroduction\nLarge language models (LLMs, e.g. GPT-3, PALM,\nLLaMA, and GPT-4; Brown et al., 2020; Chowdhery et al.,\n2022; Touvron et al., 2023; OpenAI, 2023b) and products\nbuilt on them, such as ChatGPT, have recently prompted\nan enormous amount of attention from journalists, (Klein,\n2023; Perrigo, 2023; Oliver, 2023), policymakers (J & C,\n2023; Bartz, 2023; Lieu, 2023), and scholars from many\n1New York University2Anthropic, PBC. Correspondence to:\nSamuel R. Bowman <bowman@nyu.edu >.\ufb01elds (Chan, 2022; Lund & Wang, 2023; Choi et al., 2023;\nBiswas, 2023). This technology de\ufb01es expectations in many\nways, though, and it can be easy for brief discussions of it\nto leave out important points.\nThis paper presents eight potentially surprising claims that", "maintaining user privacy and data security are crucial con-\nsiderations when applying LLMs to real-world scenarios.\n9 C ONCLUSION AND FUTURE DIRECTIONS\nIn this survey, we have reviewed the recent progress of large\nlanguage models (LLMs), and introduced the key concepts,\nfindings, and techniques for understanding and utilizing\nLLMs. We focus on the large-sized models ( i.e.,having a size\nlarger than 10B) while excluding the contents of early pre-\ntrained language models ( e.g., BERT and GPT-2) that have\nbeen well covered in the existing literature. In particular,our survey has discussed four important aspects of LLMs,\ni.e.,pre-training, adaptation, utilization, and evaluation. For\neach aspect, we highlight the techniques or findings that are\nkey to the success of LLMs. Furthermore, we also summa-\nrize the available resources for developing LLMs and dis-\ncuss important implementation guidelines for reproducing\nLLMs. This survey tries to cover the most recent literature", "open-source language models are limited to the model sizes.\nWe will continually update this part by including the results\nof larger versions of these models, and also call for the\nsupport of computational resources for more experiments.\n8 A PPLICATIONS\nIn this section, we briefly review the recent progress on the\napplications of LLMs in two aspects, namely the impact to\nresearch community and representative domains. Figure 18\nshows a content organization of this section48.\n8.1 LLM for Research Community\nAs LLMs have revolutionized the way how we develop\nAI algorithms, it poses significant impact on the research\ncommunity. In this part, we briefly review the advances that\nled by LLMs for several representative research directions.\n8.1.1 LLM for Classic NLP Tasks\nAs pre-trained language models ( e.g.,BERT) have originated\nin the field of NLP , the technical advances of language\nmodels has an important impact on the research of NLP . In"], "retrieved_docs_id": ["ef8b65a87b", "8b22e588d8", "3de6c8318d", "3ba0afeccb", "2ba0c4040a"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "Which area of application has potential for efficient Multimodal Large Language Models?\n", "true_answer": "Efficient Multimodal Large Language Models have potential for widespread application in academia and industry, especially in edge computing scenarios.", "source_doc": "multimodal.pdf", "source_id": "ac70fcc9f2", "retrieved_docs": ["Figure 2: Organization of efficient multimodal large language models advancements.\n\u2022 Training surveys the landscape of training methodologies that are pivotal in the devel-\nopment of efficient MLLMs. It addresses the challenges associated with the pre-training\nstage, instruction-tuning stage, and the overall training strategy for state-of-the-art results.\n\u2022 Data and Benchmarks evaluates the efficiency of datasets and benchmarks used in the\nevaluation of multimodal language models. It assesses the trade-offs between dataset size,\ncomplexity, and computational cost, while advocating for the development of benchmarks\nthat prioritize efficiency and relevance to real-world applications.\n\u2022 Application investigates the practical implications of efficient MLLMs in various do-\nmains, emphasizing the balance between performance and computational cost. By ad-\ndressing resource-intensive tasks such as high-resolution image understanding and medical\n3", "Efficient Multimodal Large Language Models:\nA Survey\nYizhang Jin1,2,*, Jian Li1,*, Yexin Liu3, Tianjun Gu4, Kai Wu1, Zhengkai Jiang1,\nMuyang He3, Bo Zhao3, Xin Tan4, Zhenye Gan1, Yabiao Wang1, Chengjie Wang1,\nLizhuang Ma2\n1Youtu Lab, Tencent,2SJTU,3BAAI,4ECNU\nAbstract\nIn the past year, Multimodal Large Language Models (MLLMs) have demon-\nstrated remarkable performance in tasks such as visual question answering, vi-\nsual understanding and reasoning. However, the extensive model size and high\ntraining and inference costs have hindered the widespread application of MLLMs\nin academia and industry. Thus, studying efficient and lightweight MLLMs\nhas enormous potential, especially in edge computing scenarios. In this survey,\nwe provide a comprehensive and systematic review of the current state of effi-\ncient MLLMs. Specifically, we summarize the timeline of representative effi-\ncient MLLMs, research state of efficient structures and strategies, and the appli-", "multimodal corpora achieve promising results across a wide range of language tasks and multimodal\ntasks. We show that going from LLMs to MLLMs enables new capabilities and opportunities. In\nthe future, we would like to scale up KOSMOS -1in terms of model size [ MWH+22,WMH+22,\nCDH+22], and integrate the speech [ WCW+23] capability into KOSMOS -1. In addition, KOSMOS -1\ncan be used as a uni\ufb01ed interface for multimodal learning, e.g., enabling using instructions and\nexamples to control text-to-image generation.\nReferences\n[ADL+22]Jean-Baptiste Alayrac, Jeff Donahue, Pauline Luc, Antoine Miech, Iain Barr, Yana\nHasson, Karel Lenc, Arthur Mensch, Katherine Millican, Malcolm Reynolds, Roman\nRing, Eliza Rutherford, Serkan Cabi, Tengda Han, Zhitao Gong, Sina Samangooei, Mar-\nianne Monteiro, Jacob Menick, Sebastian Borgeaud, Andrew Brock, Aida Nematzadeh,\nSahand Sharifzadeh, Mikolaj Binkowski, Ricardo Barreira, Oriol Vinyals, Andrew", "Challenges and Applications of Large Language Models\nJean Kaddour\u03b1,\u2020,\u2217, Joshua Harris\u03b2,\u2217, Maximilian Mozes\u03b1,\nHerbie Bradley\u03b3,\u03b4,\u03f5, Roberta Raileanu\u03b6, and Robert McHardy\u03b7,\u2217\n\u03b1University College London\u03b2UK Health Security Agency\u03b3EleutherAI\n\u03b4University of Cambridge\u03f5Stability AI\u03b6Meta AI Research\u03b7InstaDeep\nAbstract\nLarge Language Models (LLMs) went from\nnon-existent to ubiquitous in the machine learn-\ning discourse within a few years. Due to the\nfast pace of the field, it is difficult to identify\nthe remaining challenges and already fruitful\napplication areas. In this paper, we aim to es-\ntablish a systematic set of open problems and\napplication successes so that ML researchers\ncan comprehend the field\u2019s current state more\nquickly and become productive.\nContents\n1 Introduction 1\n2 Challenges 2\n2.1 Unfathomable Datasets . . . . . . 2\n2.2 Tokenizer-Reliance . . . . . . . . 4\n2.3 High Pre-Training Costs . . . . . 6\n2.4 Fine-Tuning Overhead . . . . . . 10\n2.5 High Inference Latency . . . . . . 11", "is a document and the output is its summary. So we can feed the input document into the language\nmodel and then produce the generated summary.\nDespite the successful applications in natural language processing, it is still struggling to natively use\nLLMs for multimodal data, such as image, and audio. Being a basic part of intelligence, multimodal\nperception is a necessity to achieve arti\ufb01cial general intelligence, in terms of knowledge acquisition\nand grounding to the real world. More importantly, unlocking multimodal input [ TMC+21,HSD+22,\nWBD+22,ADL+22,AHR+22,LLSH23 ] greatly widens the applications of language models to\nmore high-value areas, such as multimodal machine learning, document intelligence, and robotics.\nIn this work, we introduce KOSMOS -1, a Multimodal Large Language Model (MLLM) that can\nperceive general modalities, follow instructions (i.e., zero-shot learning), and learn in context (i.e.,"], "retrieved_docs_id": ["542e5c49da", "ac70fcc9f2", "38ef64d2f1", "bf695e58cf", "74bb21ad4f"], "reranker_type": "None", "search_type": "vector", "rr": 0.5, "hit": 1}, {"question": "How much does RAG improve the scores of ChipNeMo-70B-Steer, GPT-4, and LLaMA2-70b-Chat?\n", "true_answer": "RAG improves ChipNeMo-70B-Steer by 0.56, GPT-4 by 1.68, and LLaMA2-70b-Chat by 2.05.", "source_doc": "ChipNemo.pdf", "source_id": "af6e8c3fb2", "retrieved_docs": ["scores. RAG improves ChipNeMo-70B-Steer, GPT-4, and\nLLaMA2-70b-Chat by 0.56, 1.68, and 2.05, respectively.\nEven when RAG misses, scores are generally higher than\nwithout using retrieval. The inclusion of relevant in-domain\ncontext still led to improved performance, as retrieval is not\na strictly binary outcome. Furthermore, while ChipNeMo-\n70B-SFT outperforms GPT4 by a large margin through\ntraditional supervised fine-tuning, applying SteerLM meth-\nods (Wang et al., 2023) leads to further elevated chatbot\nratings. We refer readers to the complete evaluation results\nin Appendix A.9.\n3.6. EDA Script Generation\nIn order to evaluate our model on the EDA script generation\ntask, we created two different types of benchmarks. The first\nis a set of \u201cEasy\u201d and \u201cMedium\u201d difficulty tasks (1-4 line\nsolutions) that can be evaluated without human intervention\nby comparing with a golden response or comparing the\ngenerated output after code execution. The second set of", "and required more context (see Appendix A.8 for detailed\nexamples). This significantly contributes to the differencein retrieval quality between the categories.\nFigure 7: Human Evaluation of Different Models. Model Only\nrepresents results without RAG. RAG (hit)/(miss) only include\nquestions whose retrieved passages hit/miss their ideal context,\nRAG (avg) includes all questions. 7 point Likert scale.\nWe conducted evaluation of multiple ChipNeMo models\nand LLaMA2 models with and without RAG. The results\nwere then scored by human evaluators on a 7 point Likert\nscale and shown in Figure 7. We highlight the following:\n\u2022ChipNeMo-70B-Steer outperforms GPT-4 in all cate-\ngories, including both RAG misses and hits.\n\u2022ChipNeMo-70B-Steer outperforms similar sized\nLLaMA2-70b-Chat in model-only and RAG evalua-\ntions by 3.31 and 1.81, respectively.\nOur results indicate that RAG significantly boosts human\nscores. RAG improves ChipNeMo-70B-Steer, GPT-4, and", "ChipNeMo: Domain-Adapted LLMs for Chip Design\ncost of pretraining a foundational model from scratch.\nModel Size Pretraining DAPT SFT\n7B 184,320 2,620 90\n13B 368,640 4,940 160\n70B 1,720,320 20,500 840\nTable 1: Training cost of LLaMA2 models in A100 GPU hours.\nPretraining cost from (Touvron et al., 2023).\n3.5. RAG and Engineering Assistant Chatbot\nWe created a benchmark to evaluate the performance of\ndesign chat assistance, which uses the RAG method. This\nbenchmark includes 88 questions in three categories: archi-\ntecture/design/verification specifications (Specs), testbench\nregression documentation (Testbench), and build infrastruc-\nture documentation (Build). For each question, we specify\nthe golden answer as well as the paragraphs in the design\ndocument that contains the relevant knowledge for the an-\nswer. These questions are created by designers manually\nbased on a set of design documents as the data store for\nretrieval. It includes about 1.8K documents, which were", "Humanities STEM Social Sciences Other Average\nGPT-NeoX 20B 29.8 34.9 33.7 37.7 33.6\nGPT-3 175B 40.8 36.7 50.4 48.8 43.9\nGopher 280B 56.2 47.4 71.9 66.1 60.0\nChinchilla 70B 63.6 54.9 79.3 73.9 67.5\nPaLM8B 25.6 23.8 24.1 27.8 25.4\n62B 59.5 41.9 62.7 55.8 53.7\n540B 77.0 55.6 81.0 69.6 69.3\nLLaMA7B 34.0 30.5 38.3 38.1 35.1\n13B 45.0 35.8 53.8 53.3 46.9\n33B 55.8 46.0 66.7 63.4 57.8\n65B 61.8 51.7 72.9 67.4 63.4\nTable 9: Massive Multitask Language Understanding (MMLU). Five-shot accuracy.\nwe observe a lot of variance in performance,\nthat may indicate that this benchmark is not\nreliable. On WinoGrande, the performance does\nnot correlate as well with training perplexity:\nthe LLaMA-33B and LLaMA-65B have similar\nperformance during the training.\n4 Instruction Finetuning\nIn this section, we show that briefly finetuning on\ninstructions data rapidly leads to improvements\non MMLU. Although the non-finetuned version\nof LLaMA-65B is already able to follow basic in-", "LLaMA 2 70B GPT-3.5 Mixtral 8x7B\nMMLU\n(MCQ in 57 subjects)69.9% 70.0% 70.6%\nHellaSwag\n(10-shot)87.1% 85.5% 86.7%\nARC Challenge\n(25-shot)85.1% 85.2% 85.8%\nWinoGrande\n(5-shot)83.2% 81.6% 81.2%\nMBPP\n(pass@1)49.8% 52.2% 60.7%\nGSM-8K\n(5-shot)53.6% 57.1% 58.4%\nMT Bench\n(for Instruct Models)6.86 8.32 8.30\nTable 3: Comparison of Mixtral with Llama 2 70B and GPT-3.5. Mixtral outperforms or matches Llama 2\n70B and GPT-3.5 performance on most metrics.\nEvaluation Differences. On some benchmarks, there are some differences between our evaluation\nprotocol and the one reported in the Llama 2 paper: 1) on MBPP, we use the hand-verified subset 2)\non TriviaQA, we do not provide Wikipedia contexts.\n3.1 Multilingual benchmarks\nCompared to Mistral 7B, we significantly upsample the proportion of multilingual data during\npretraining. The extra capacity allows Mixtral to perform well on multilingual benchmarks while"], "retrieved_docs_id": ["af6e8c3fb2", "1ed1c2ae54", "7313e64a59", "1f3f19dd09", "415dec152e"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does Flare decide when to retrieve references during text generation?\n", "true_answer": "Flare decides to retrieve references based on the probability of the generated text. When the probability of a term falls below a predefined threshold, Flare's information retrieval system retrieves references and removes terms with lower probabilities.", "source_doc": "RAG.pdf", "source_id": "b844a74991", "retrieved_docs": ["kens (e.g., kNN-LM [Khandelwal et al. , 2019 ]), phrases (e.g.,\nNPM [Leeet al. , 2020 ], COG [Vaze et al. , 2021 ]), and docu-\nment paragraphs. Finer-grained retrieval units can often bet-\nter handle rare patterns and out-of-domain scenarios but come\nwith an increase in retrieval costs.\nAt the word level, FLARE employs an active retrieval strat-\negy, conducting retrieval only when the LM generates low-\nprobability words. The method involves generating a tempo-\nrary next sentence for retrieval of relevant documents, then\nre-generating the next sentence under the condition of the re-\ntrieved documents to predict subsequent sentences.\nAt the chunk level, RETRO uses the previous chunk to re-\ntrieve the nearest neighboring chunk and integrates this infor-\nmation with the contextual information of the previous chunk\nto guide the generation of the next chunk. RETRO achieves\nthis by retrieving the nearest neighboring block N(Ci\u22121)\nfrom the retrieval database, then fusing the contextual in-", "they can decide to search for a relevant query to collect the\nnecessary materials, similar to the tool call of the agent.\nWebGPT [Nakano et al. , 2021 ]employs a reinforcement\nlearning framework to automatically train the GPT-3 model\nto use a search engine for text generation. It uses special to-\nkens to perform actions, including querying on a search en-\ngine, scrolling rankings, and citing references. This allows\nGPT-3 to leverage a search engine for text generation.\nFlare [Jiang et al. , 2023b ], on the other hand, automates the\ntiming of retrieval and addresses the cost of periodic docu-\nment retrieval based on the probability of the generated text.\nIt uses probability as an indicator of LLMs\u2019 confidence during\nthe generation process. When the probability of a term falls\nbelow a predefined threshold, the information retrieval sys-\ntem would retrieve references and removes terms with lower\nprobabilities. This approach is designed to handle situations", "(up to millions of samples), filtering, and clustering\nof candidate solutions generated by AlphaCode to\nselect the final submissions.\nHowever, whilst these existing code-generation\nLLMs have achieved impressive results, a criti-\ncal current constraint in applying LLMs to code\ngeneration is the inability to fit the full code base\nand dependencies within the context window. To\ndeal with this constraint, a few frameworks have\nbeen proposed to retrieve relevant information or\nabstract the relevant information into an API defi-\nnition.\nLong-Range Dependencies [ 660,504]\nLong-range dependencies across a code\nrepository usually cannot be regarded be-\ncause of limited context lengths (Sec. 2.6).\nZhang et al. [660] introduce RepoCoder, a\nretrieval-based framework for repository-level code\ncompletion that allows an LLM to consider the\nbroader context of the repository. A multi-step\nretrieval-augmented generation approach is taken,\nwhere the initial code generated is then used to re-", "context limit through interactive reading,\u201d CoRR , vol.\nabs/2310.05029, 2023.\n[304] W. Zhou, Y. E. Jiang, P . Cui, T. Wang, Z. Xiao, Y. Hou,\nR. Cotterell, and M. Sachan, \u201cRecurrentgpt: Interac-\ntive generation of (arbitrarily) long text,\u201d CoRR , vol.\nabs/2305.13304, 2023.\n[305] C. Packer, V . Fang, S. G. Patil, K. Lin, S. Wooders, and\nJ. E. Gonzalez, \u201cMemgpt: Towards llms as operating\nsystems,\u201d CoRR , vol. abs/2310.08560, 2023.\n[306] P . Xu, W. Ping, X. Wu, L. McAfee, C. Zhu, Z. Liu,\nS. Subramanian, E. Bakhturina, M. Shoeybi, and", "corporating a retrieval mechanism using the T5 architecture\n[Raffel et al. , 2020 ]in both the pre-training and fine-tuning\nstages. Prior to pre-training, it initializes the encoder-decoder\nLM backbone with a pre-trained T5, and initializes the dense\nretriever with a pre-trained Contriever. During the pre-\ntraining process, it refreshes the asynchronous index every\n1000 steps.\nCOG [Vaze et al. , 2021 ]is a text generation model that for-\nmalizes its generation process by gradually copying text frag-\nments (such as words or phrases) from an existing collection\nof text. Unlike traditional text generation models that select\nwords sequentially, COG utilizes efficient vector search tools\nto calculate meaningful context representations of text frag-\nments and index them. Consequently, the text generation task\nis decomposed into a series of copy and paste operations,\nwhere at each time step, relevant text fragments are sought\nfrom the text collection instead of selecting from an indepen-"], "retrieved_docs_id": ["92f5901d31", "b844a74991", "5c21f0d3d2", "37f351111b", "bff4917f9e"], "reranker_type": "None", "search_type": "vector", "rr": 0.5, "hit": 1}, {"question": "What is the role of GShard in MoE?\n", "true_answer": "GShard is a module composed of a set of lightweight annotation APIs and XLA compiler extensions that offers an elegant way to express various parallel computation patterns while making minimal changes to existing model code, enabling scaling of multi-lingual neural machine translation in MoE.", "source_doc": "multimodal.pdf", "source_id": "a7d187c571", "retrieved_docs": ["x, respectively. We can then write the output as\ny=Pn\ni=1G(x)iEi(x). Wherever G(x)i= 0,\nwe do not need to compute Ei(x), thereby saving\ncompute during inference. Lepikhin et al. [298]\nscale up an SG-MoE model to 600B parameters\nby proposing GShard , a model parallelism method\nthat extends the XLA [ 468] compiler. While SG-\nMoE selects the top- kexperts with k > 1, the\nSwitch Transformer (ST) [ 145] architecture uses\nk= 1experts, which reduces routing computation\nand communication across experts (which may be\nlocated on different accelerators). ST empirically\noutperformed a strongly tuned T5 model with up to\n7x pre-training speedups. Lewis et al. [302] notice\nthat the learned routers can result in unbalanced\nassignments across experts. To ensure balanced\nrouting, they formulate a linear assignment prob-\nlem that maximizes token-expert affinities while\nequally distributing the number of tokens across\nexperts. Yu et al. [653] propose sMLP , an MoE", "FFN sub-blocks by MoE layers while GShard replaces every other block, and that GShard uses a\nmore elaborate gating strategy for the second expert assigned to each token.\n3 Results\nWe compare Mixtral to Llama, and re-run all benchmarks with our own evaluation pipeline for fair\ncomparison. We measure performance on a wide variety of tasks categorized as follow:\n\u2022Commonsense Reasoning (0-shot): Hellaswag [ 32], Winogrande [ 26], PIQA [ 3], SIQA [ 27],\nOpenbookQA [22], ARC-Easy, ARC-Challenge [8], CommonsenseQA [30]\n\u2022World Knowledge (5-shot): NaturalQuestions [20], TriviaQA [19]\n\u2022Reading Comprehension (0-shot): BoolQ [7], QuAC [5]\n\u2022Math: GSM8K [9] (8-shot) with maj@8 and MATH [17] (4-shot) with maj@4\n\u2022Code: Humaneval [4] (0-shot) and MBPP [1] (3-shot)\n\u2022Popular aggregated results: MMLU [ 16] (5-shot), BBH [ 29] (3-shot), and AGI Eval [ 34]\n(3-5-shot, English multiple-choice questions only)", "model. During the inference phase, given an input, all experts are ranked, and the most relevant\nones are selected for computation. This approach considerably reduces the amount of computa-\ntion, as only a subset of experts is involved in the calculation.By distributing computational tasks\namong different experts, MoE achieves more efficient utilization of computational resources during\nboth training and inference phases. In MoE, each expert has its own set of parameters; however,\nthese parameters are shared during the training process. This parameter-sharing strategy reduces\nthe overall number of parameters in the model, consequently lowering storage and computational\ncosts. GShard [149] is a module composed of a set of lightweight annotation APIs and XLA com-\npiler extensions, which offers an elegant way to express various parallel computation patterns while\nmaking minimal changes to existing model code. It enables us to scale multi-lingual neural machine", "layer\u2019s execution, tokens meant to be processed by a specific expert are routed to the corresponding\nGPU for processing, and the expert\u2019s output is returned to the original token location. Note that EP\nintroduces challenges in load balancing, as it is essential to distribute the workload evenly across the\nGPUs to prevent overloading individual GPUs or hitting computational bottlenecks.\nIn a Transformer model, the MoE layer is applied independently per token and replaces the\nfeed-forward (FFN) sub-block of the transformer block. For Mixtral we use the same SwiGLU\narchitecture as the expert function Ei(x)and set K= 2. This means each token is routed to two\nSwiGLU sub-blocks with different sets of weights. Taking this all together, the output yfor an input\ntoken xis computed as:\ny=n\u22121X\ni=0Softmax (Top2 (x\u00b7Wg))i\u00b7SwiGLU i(x).\nThis formulation is similar to the GShard architecture [ 21], with the exceptions that we replace all", "form semi-structured pruning, enabling n:m spar-\nsity [ 228,680] and achieving the corresponding\nspeed-ups on recent GPUs [369].\nMixture-of-Experts architectures typically con-\nsist of a set of experts (modules) , each with unique\nweights, and a router (orgating ) network, which\ndetermines which expert module processes an in-\nput. MoE models decrease inference time by not\nusing all experts at once but only activating a sub-\nset of them. Further, they can reduce communica-\ntion across devices in model-distributed settings by\nplacing each expert on a separate accelerator; only\nthe accelerators hosting the router and the relevant\nexpert model must communicate. Shazeer et al.\n[495] propose one of the first MoE layers embed-\nded within a language model, which they refer to\nassparsely-gated MoEs (SG-MoEs). They denote\nbyG(x)andEi(x)the gating network output and\nthei-th expert network output for a given input\nx, respectively. We can then write the output as\ny=Pn"], "retrieved_docs_id": ["add767b444", "481b718aab", "a7d187c571", "db00f64555", "1768ccf6cf"], "reranker_type": "None", "search_type": "vector", "rr": 0.3333333333333333, "hit": 1}, {"question": "What is the main difference in hallucination research between LLMs and MLLMs?\n", "true_answer": "The main difference is that hallucination research in LLMs typically focuses on discrepancies between generated content and real-world facts or user instructions, while research in MLLMs mainly focuses on cross-modal inconsistency between generated text response and provided visual content.", "source_doc": "hallucination.pdf", "source_id": "ce4c90f626", "retrieved_docs": ["offer valuable insights that deepen understanding of the opportunities and challenges associated\nwith hallucinations in MLLMs. This exploration not only enhances our understanding of the limita-\ntions of current MLLMs but also offers essential guidance for future research and the development\nof more robust and trustworthy MLLMs.\nComparison with existing surveys. In pursuit of reliable generative AI, hallucination stands\nout as a major challenge, leading to a series of survey papers on its recent advancements. For pure\nLLMs, there are several surveys [ 44,129], describing the landscape of hallucination in LLMs. In\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024.", "Organization of this survey. In this paper, we present a comprehensive survey of the latest\ndevelopments regarding hallucinations in MLLMs. The survey is organized as follows: We begin by\nproviding sufficient context and defining concepts related to LLMs, MLLMs, hallucination, etc. Next,\nwe delve into an in-depth analysis of the factors contributing to hallucinations in MLLMs. Following\nthis, we present a set of metrics and benchmarks employed for evaluating hallucinations in MLLMs.\nWe then elaborate on a range of approaches designed to mitigate hallucinations in MLLMs. Finally,\nwe delve into the challenges and open questions that frame the current limitations and future\nprospects of this field, offering insights and delineating potential pathways for forthcoming research.\n2 DEFINITIONS\n2.1 Large Language Models\nBefore moving to multimodal large language models, it is essential to introduce the concept of large", "event, etc., as independent hallucination categories; however, in this work, we include them into\nattribute category.\nAs numerous studies exist on the underlying causes of hallucinations in LLMs, the unique chal-\nlenges posed by cutting-edge MLLMs warrant an in-depth investigation. Our analysis specifically\ntargets the unique origins of hallucinations in MLLMs, spanning a spectrum of contributing factors\nfrom data, model, training, to the inference stage. In addition, we provide a comprehensive overview\nof benchmarks and metrics designed specifically for evaluating hallucinations in MLLMs. Then,\nwe review and discuss recent works tailored to mitigate the problem of hallucination from the\nviewpoints of the identified causes.\nThrough our comprehensive survey, we aim to contribute to advancing the field of MLLMs and\noffer valuable insights that deepen understanding of the opportunities and challenges associated", "may be built on an incorrect foundation.\n6.5 Reframing Hallucination as a Feature\nRecently, discussions on social media [ 56] have suggested that hallucination can be regarded as\nan inherent feature of LLMs and MLLMs. The models are like dream machines. Human users\ndirect their dreams with prompts. The prompts start the dream, and based on the model\u2019s hazy\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024.", "The problem of hallucination originates from LLMs themselves. In the NLP community, the\nhallucination problem is empirically categorized into two types [ 44]: 1) factuality hallucination\nemphasizes the discrepancy between generated content and verifiable real-world facts, typically\nmanifesting as factual inconsistency or fabrication; 2) faithfulness hallucination refers to the di-\nvergence of generated content from user instructions or the context provided by the input, as\nwell as self-consistency within generated content. In contrast to pure LLMs, research efforts of\nhallucination in MLLMs mainly focus on the discrepancy between generated text response and\nprovided visual content [69,76,137],i.e., cross-modal inconsistency. This difference suggests that\nstudies in LLMs cannot be seemingly transferred to MLLMs. Therefore, there is a growing need to\ncomprehensively survey recent advancements in MLLMs\u2019 hallucination phenomena to inspire new\nideas and foster the field\u2019s development."], "retrieved_docs_id": ["76835931c1", "e1b4ac9436", "6da15b5bb7", "f565d0de3b", "ce4c90f626"], "reranker_type": "None", "search_type": "vector", "rr": 0.2, "hit": 1}, {"question": "What is the issue associated with the rapid advancement of multimodal large language models?\n", "true_answer": "These models, also known as large vision-language models, have a tendency to generate hallucinations, producing seemingly plausible but factually inaccurate content.", "source_doc": "hallucination.pdf", "source_id": "da0a465b6c", "retrieved_docs": ["Figure 2: Organization of efficient multimodal large language models advancements.\n\u2022 Training surveys the landscape of training methodologies that are pivotal in the devel-\nopment of efficient MLLMs. It addresses the challenges associated with the pre-training\nstage, instruction-tuning stage, and the overall training strategy for state-of-the-art results.\n\u2022 Data and Benchmarks evaluates the efficiency of datasets and benchmarks used in the\nevaluation of multimodal language models. It assesses the trade-offs between dataset size,\ncomplexity, and computational cost, while advocating for the development of benchmarks\nthat prioritize efficiency and relevance to real-world applications.\n\u2022 Application investigates the practical implications of efficient MLLMs in various do-\nmains, emphasizing the balance between performance and computational cost. By ad-\ndressing resource-intensive tasks such as high-resolution image understanding and medical\n3", "Efficient Multimodal Large Language Models:\nA Survey\nYizhang Jin1,2,*, Jian Li1,*, Yexin Liu3, Tianjun Gu4, Kai Wu1, Zhengkai Jiang1,\nMuyang He3, Bo Zhao3, Xin Tan4, Zhenye Gan1, Yabiao Wang1, Chengjie Wang1,\nLizhuang Ma2\n1Youtu Lab, Tencent,2SJTU,3BAAI,4ECNU\nAbstract\nIn the past year, Multimodal Large Language Models (MLLMs) have demon-\nstrated remarkable performance in tasks such as visual question answering, vi-\nsual understanding and reasoning. However, the extensive model size and high\ntraining and inference costs have hindered the widespread application of MLLMs\nin academia and industry. Thus, studying efficient and lightweight MLLMs\nhas enormous potential, especially in edge computing scenarios. In this survey,\nwe provide a comprehensive and systematic review of the current state of effi-\ncient MLLMs. Specifically, we summarize the timeline of representative effi-\ncient MLLMs, research state of efficient structures and strategies, and the appli-", "2 Bai, et al.\n1 INTRODUCTION\nRecently, the emergence of large language models (LLMs) [ 29,81,85,99,132] has dominated a wide\nrange of tasks in natural language processing (NLP), achieving unprecedented progress in language\nunderstanding [ 39,47], generation [ 128,140] and reasoning [ 20,58,87,107,115]. Leveraging\nthe capabilities of robust LLMs, multimodal large language models (MLLMs) [ 22,75,111,138],\nsometimes referred to as large vision-language models (LVLMs), are attracting increasing attention.\nMLLMs show promising ability in multimodal tasks, such as image captioning [ 66], visual question\nanswering [ 22,75], etc. However, there is a concerning trend associated with the rapid advancement\nin MLLMs. These models exhibit an inclination to generate hallucinations [ 69,76,137], resulting in\nseemingly plausible yet factually spurious content.\nThe problem of hallucination originates from LLMs themselves. In the NLP community, the", "language models rapidly became the substrate for almost all modeling work, especially with the advent\nof open infrastructure through Hugging Face Transformers (Wolf et al., 2019) and models developed for\nlanguages beyond English (e.g. multilingual-BERT, XLM; Devlin et al., 2019; Conneau & Lample, 2019).\nSince then, we have seen a proliferation of different organizations building language models, often through\nconceptually similar means, with a rapid growth in scale and resource-intensivity. Notably, some of the\nmodels (e.g. TNLG v2 (530B)) we benchmark 1000 \u00d7larger than ELMo and BERT. These models can\ncost millions of dollars to train, requiring extensive systems-level optimizations and dedicated large-scale\ncompute (Narayanan et al., 2021). These changes have also translated from research to deployment: language\nmodels are directly exposed as commercial APIs or are integrated into ubiquitous products (see Bommasani", "Challenges and Applications of Large Language Models\nJean Kaddour\u03b1,\u2020,\u2217, Joshua Harris\u03b2,\u2217, Maximilian Mozes\u03b1,\nHerbie Bradley\u03b3,\u03b4,\u03f5, Roberta Raileanu\u03b6, and Robert McHardy\u03b7,\u2217\n\u03b1University College London\u03b2UK Health Security Agency\u03b3EleutherAI\n\u03b4University of Cambridge\u03f5Stability AI\u03b6Meta AI Research\u03b7InstaDeep\nAbstract\nLarge Language Models (LLMs) went from\nnon-existent to ubiquitous in the machine learn-\ning discourse within a few years. Due to the\nfast pace of the field, it is difficult to identify\nthe remaining challenges and already fruitful\napplication areas. In this paper, we aim to es-\ntablish a systematic set of open problems and\napplication successes so that ML researchers\ncan comprehend the field\u2019s current state more\nquickly and become productive.\nContents\n1 Introduction 1\n2 Challenges 2\n2.1 Unfathomable Datasets . . . . . . 2\n2.2 Tokenizer-Reliance . . . . . . . . 4\n2.3 High Pre-Training Costs . . . . . 6\n2.4 Fine-Tuning Overhead . . . . . . 10\n2.5 High Inference Latency . . . . . . 11"], "retrieved_docs_id": ["542e5c49da", "ac70fcc9f2", "da0a465b6c", "6530171a7b", "bf695e58cf"], "reranker_type": "None", "search_type": "vector", "rr": 0.3333333333333333, "hit": 1}, {"question": "How does HyDE generate a hypothetical document relevant to the query?\n", "true_answer": "HyDE generates a hypothetical document relevant to the query by establishing query vectors through the use of text indicators and using these indicators to generate a document that captures the relevant pattern, even if it may not truly exist.", "source_doc": "RAG.pdf", "source_id": "71a4057422", "retrieved_docs": ["different scenarios, including using query engines pro-\nvided by frameworks like LlamaIndex, employing tree\nqueries, utilizing vector queries, or employing the most\nbasic sequential querying of chunks.\u2022HyDE: This approach is grounded on the assumption\nthat the generated answers may be closer in the embed-\nding space than a direct query. Utilizing LLM, HyDE\ngenerates a hypothetical document (answer) in response\nto a query, embeds the document, and employs this em-\nbedding to retrieve real documents similar to the hypo-\nthetical one. In contrast to seeking embedding similarity\nbased on the query, this method emphasizes the embed-\nding similarity from answer to answer. However, it may\nnot consistently yield favorable results, particularly in\ninstances where the language model is unfamiliar with\nthe discussed topic, potentially leading to an increased\ngeneration of error-prone instances.\nModular RAG\nThe modular RAG structure breaks away from the traditional", "information retrieval process, providing more effective and\naccurate inputs for subsequent LLM processing.\n5.2 How to Optimize a Generator to Adapt Input\nData?\nIn the RAG model, the optimization of the generator is a cru-\ncial component of the architecture. The generator\u2019s task is\nto take the retrieved information and generate relevant text,\nthereby providing the final output of the model. The goal of\noptimizing the generator is to ensure that the generated text is\nboth natural and effectively utilizes the retrieved documents,\nin order to better satisfy the user\u2019s query needs.\nIn typical Large Language Model (LLM) generation tasks,\nthe input is usually a query. In RAG, the main difference\nlies in the fact that the input includes not only a query\nbut also various documents retrieved by the retriever (struc-\ntured/unstructured). The introduction of additional informa-\ntion may have a significant impact on the model\u2019s understand-", "tion may have a significant impact on the model\u2019s understand-\ning, especially for smaller models. In such scenarios, fine-\ntuning the model to adapt to the input of query + retrieved\ndocuments becomes particularly important. Specifically, be-\nfore providing the input to the fine-tuned model, there is usu-\nally post-retrieval processing of the documents retrieved by\nthe retriever. It is essential to note that the method of fine-\ntuning the generator in RAG is essentially similar to the gen-\neral fine-tuning approach for LLMs. Here, we will brieflyintroduce some representative works, including data (format-\nted/unformatted) and optimization functions.\nGeneral Optimization Process\nRefers to the training data containing pairs of (input, output),\naiming to train the model\u2019s ability to generate output y given\ninput x. In the work of Self-mem [Cheng et al. , 2023b ], a\nrelatively classical training process is employed. Given in-\nput x, relevant documents z are retrieved (selecting Top-1", "the semantic space of the user\u2019s query and documents is very\nnecessary. This section introduces two key technologies to\nachieve this goal.\nQuery Rewrite\nThe most intuitive way to align the semantics of\nquery and document is to rewrite the query. As\nmentioned in Query2Doc [Wang et al. , 2023b ]and ITER-\nRETGEN [Shao et al. , 2023 ], the inherent capabilities of\nlarge language models are utilized to generate a pseudo-\ndocument by guiding it, and then the original query is\nmerged with this pseudo-document to form a new query.\nIn HyDE [Gao et al. , 2022 ], query vectors are established\nthrough the use of text indicators, using these indicators to\ngenerate a \u2019hypothetical\u2019 document that is relevant, yet may\nnot truly exist, it only needs to capture the relevant pattern.\nRRR [Maet al. , 2023a ]introduced a new framework that in-\nverts the order of retrieval and reading, focusing on query\nrewriting. This method generates a query using a large lan-", "question step by step as: Step 1 - Decompose the question into several sub-questions, \u00b7 \u00b7 \u00b7\u201d2\u20dd\nC2. If you want LLMs to provide the score for a text, it is necessary to provide a detailed description about the\nscoring standard with examples as reference.1\u20dd\nC3. When LLMs generate text according to some context ( e.g., making recommendations according to purchase history),\ninstructing them with the explanation about the generated result conditioned on context is helpful to improve the quality\nof the generated text.2\u20dd\nC4. An approach similar to tree-of-thoughts but can be done in one prompt :e.g., Imagine three different experts are answering\nthis question. All experts will write down one step of their thinking, then share it with the group of experts. Then all experts will go on\nto the next step, etc. If any expert realizes they\u2019re wrong at any point then they leave. The question is2\u20dd"], "retrieved_docs_id": ["d96393bb4b", "7fabdba415", "5e50b58781", "71a4057422", "0128ddc5b8"], "reranker_type": "None", "search_type": "vector", "rr": 0.25, "hit": 1}, {"question": "What is a model that tailors for medical applications and significantly lowers parameter demands?\n", "true_answer": "MoE-TinyMed [64]", "source_doc": "multimodal.pdf", "source_id": "51c7c3d212", "retrieved_docs": ["paradigm in biomedicine, achieving state-of-the-art results on many applications, including medical\nquestion answering [194] and medical image classification [195]. Recently, multimodal generative\nAI has emerged as an exciting frontier in the biomedical domain, expanding the application scope\nfrom single-modality to multi-modality, such as VQA and radiology report generation.\nThe mixture of Expert Tuning has effectively enhanced the performance of general MLLMs with\nfewer parameters, yet its application in resource-limited medical settings has not been fully explored.\nMoE-TinyMed [64] is a model tailored for medical applications that significantly lower parameter\ndemands. LLaV A-Rad [63] is a state-of-the-art tool that demonstrates rapid performance on a sin-\ngle V100 GPU in private settings, making it highly applicable for real-world clinical scenarios. It\nemploys a modular approach, integrating unimodal pre-trained models and emphasizing the training", "Optimal Training Hyperparameter tuning is an\nexpensive process, and is often infeasible to do\nat full scale for multi-billion parameter models.\nDue to the aforementioned limitations, we opted\nto choose hyperparameters based on a mixture of\nexperiments at smaller scales and by interpolating\nparameters appropriate for our model size based\non previously published work (Brown et al., 2020).\nHowever, several aspects of both our model ar-\nchitecture [Section 2.1] and training setup, includ-\ning the data [Section 3.1] and the tokenizer [Sec-tion 3.2], diverge signi\ufb01cantly from Brown et al.\n(2020). As such, it is almost certainly the case\nthat the hyperparameters used for our model are no\nlonger optimal, and potentially never were.\nLack of Coding Evaluations Many of the de-\nsign choices we made during the development of\nthis model were oriented towards improving per-\nformance on coding tasks. However, we underes-\ntimated the dif\ufb01culty and cost of existing coding", "seen relatively little adoption (Narang et al., 2021); adopting some of these recommended\npractices could yield a significantly better model. We take a middle ground and focus on\nmodel families that have been shown to scale well, and that have reasonable support in\npublicly available tools and codebases. We ablate components and hyperparameters of the\nmodels, seeking to make the best use of our final compute budget.\nExperimental Design for Ablations One of the main draws of LLMs has been their\nability to perform tasks in a \u201czero/few-shot\u201d way: large enough models can perform novel\ntasks simply from in-context instructions and examples (Radford et al., 2019), without ded-\n16.github.com/bigscience-workshop/promptsource\n14", "on sufficiently large models (typically containing 10B or\nmore parameters [33]) but not on small models. Moreover,", "number of single training runs, and the lack of suf-\nficient experimental coverage can severely inhibit\nscientific understanding of what makes an LLM\nperform well. While this issue is not unique to\nLLMs, they tend to be larger in the number of\nparameters\u2014and therefore compute requirements,\nfeedback loop times, and training costs\u2014than mod-\nels in most other fields.\nCurse of (Design) Dimensionality\nCommon design spaces of LLM experi-\nments are high-dimensional.\nOne possible way forward is to encourage the\ncommunity to use techniques like Bayesian opti-\nmization (BO) with dimensionality reduction [ 594,\n374], where we use a non-linear feature mapping to\nmap the input (the hyper-parameter configuration)\nonto a lower dimensional manifold followed by a\nBO procedure to optimize the underlying black-\nbox function (the LLM with respect to the hyper-\nparameters). Another suitable tool to explore the\ndesign space efficiently can be treatment effect es-"], "retrieved_docs_id": ["51c7c3d212", "eb34454e1f", "89d315a0af", "098dc7c198", "ec6ec438c3"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How can increasing the scale of data affect bias in a model?\n", "true_answer": "Increasing the scale of data can alleviate the effect of bias in a model, but it cannot fully resolve it due to the long-tail distribution of the real world.", "source_doc": "hallucination.pdf", "source_id": "44cf8ffcb0", "retrieved_docs": ["J. Rao, S. Narang, V . Q. Tran et al. 2022. Scaling laws\nvs model architectures: How does inductive bias influence\nscaling?\n67", "from small models could also apply to large models. For\ninstance, small proxy models can be trained to find the\noptimal schedule of the data mixture for large models [59].\nSecondly, the training of large-scale models takes a long\ntime, often suffering from issues such as training loss spike,\nand scaling law can be employed to monitor the training\nstatus of LLMs, e.g.,identifying abnormal performance at an\nearly time. Despite that scaling law characterizes a smooth\ntrend of performance increase (or loss decrease), it also\nindicates that diminishing returns7might occur as model\nscaling. An empirical study [58] from the OpenAI team\nhas shown that representation quality or semantic content\ncan still effectively improve even if approaching the point\nof diminishing returns ( i.e., approaching the irreducible\nloss) [58]. This finding suggests that training large models\nare promising for improving the performance of down-\nstream tasks. To further explore scaling effect, a potential", "\u2022Increasing the diversity of data sources. Recent studies\nhave empirically shown that training on excessive data\nabout a certain domain would degrade the generalization\ncapability of LLMs on other domains [35, 64]. In contrast,\nincreasing the data source heterogeneity ( e.g., including\ndiverse data sources) is critical for improving the down-\nstream performance of LLMs [212, 229, 230]. To further\nexamine the effect of different data sources, some studies\nhave conducted ablation experiments by removing each\ndata source one by one, and pre-train LLMs with specially\ncurated datasets [212]. It has been shown that dropping data\nsources with high heterogeneity ( e.g., webpages) impacts\nLLM\u2019s abilities more severely than dropping sources with\nlow heterogeneity ( e.g., academic corpus).\n\u2022Optimizing data mixtures. In addition to manually set-\nting the data mixtures, several studies have proposed to\noptimize the data mixtures for improving the model pre-", "and data distributions between different SFT\nabilities, the impact of data ratio is minimal .\nHowever, when there is some degree of similari-\nties, the data ratio can lead to noticeable perfor-\nmance fluctuations.\nQ2: Under extremely limited general data re-\nsources, does the ratio of specialized data have\nan impact on the model\u2019s performance? We\nfurther explore the impact of different ratios of\nspecialized data when the model has just acquired\na certain level of general human-aligning ability\n(k= 1/64). The bottom 3 graphs of Figure 4\npresent comparative experiments between two set-\ntings. We observe that regardless of whether the\ndata amount for general capabilities is abundant\n(k= 1) or scarce ( k= 1/64), the performance on\nMT-Bench shows no significant fluctuations with\nvarying proportions of specialized data. Further-\nmore, in mathematical reasoning, 1/64 general data\nsetup exhibited a scaling trend that is almost iden-\ntical to the full general data setup. However, for", "efforts. Due to these observations, we hope that the metrics we proposed and evaluated in this\nSection will help further discussion about useful proxy metrics for guiding pre-training optimization\nchoices to improve robustness to quantization.\n6 Related Work\nChallenges of Quantization at Scale Recently, there have been several studies to characterize\nthe emergence of outliers at scale, and relate this to the difficulties in post-training quantization\nof both weights and activations (Dettmers et al., 2022; Wei et al., 2022b; Puccetti et al., 2022).\nDettmers et al. (2022) depict a phenomenon of emerging outliers by observing that large outlier\ndimensions systematically emerge at a certain scale (6.7B parameters) which hamper quantization\nattempts. Extreme outliers at scale was also empirically confirmed in follow-up works (Zeng et al.,\n2022; Xiao et al., 2022). The causes of outliers have also been the subject of recent work. Puccetti"], "retrieved_docs_id": ["8ece96af77", "e95f9c7721", "99b58f7ffa", "9c30eb9b32", "00f6422340"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What is the challenge faced by MLLMs in tasks requiring intricate recognition?\n", "true_answer": "MLLMs face challenges in tasks like crowd counting and OCR of small characters, which require detailed recognition.", "source_doc": "multimodal.pdf", "source_id": "8beea9b82e", "retrieved_docs": ["and preserving user privacy.\nIn light of these challenges, there has been growing attention on the study of efficient MLLMs.\nThe primary objective of these endeavors is to decrease the resource consumption of MLLMs\nand broaden their applicability while minimizing performance degradation. Research on efficient\nMLLMs began with replacing large language models with lightweight counterparts and performing\ntypical visual instruction tuning. Subsequent studies further enhanced capabilities and expanded\nuse cases in the following ways: (1) lighter architectures were introduced with an emphasis on ef-\nficiency, aiming to reduce the number of parameters or computational complexity[25, 13, 18]; (2)\nmore specialized components were developed, focusing on efficiency optimizations tailored to ad-\nvanced architectures or imbuing specific properties, such as locality[19, 17, 12]; and (3) support\nfor resource-sensitive tasks was provided, with some works employing visual token compression", "\u2022 At present, efficient MLLMs face challenges in processing extended-context multimodal\ninformation, and they are typically limited to accepting single images. This constrains the\nadvancement of more sophisticated models capable of handling an increased number of\nmultimodal tokens. Such models would be beneficial for applications like comprehending\nlengthy videos and analyzing extensive documents that incorporate a mix of images and\ntext, creating more versatile and powerful systems.\n\u2022 The predominant efficient MLLMs mainly support dual input modalities - images and texts,\nand a singular output modality - text. However, the tangible world encompasses a more\nextensive array of modalities. By expanding the scope of efficient MLLMs to accommodate\n23", "for resource-sensitive tasks was provided, with some works employing visual token compression\nto boost efficiency, enabling the transfer of MLLM capabilities to resource-intensive tasks such as\nhigh-resolution image and video understanding[35, 39, 14, 40].\nIn this survey, we aim to present an exhaustive organization of the recent advancements in the rapidly\nevolving field of efficient MLLMs, as depicted in Figure.2. We organize the literature in a taxonomy\nconsisting of six primary categories, encompassing various aspects of efficient MLLMs, including\narchitecture ,efficient vision ,efficient LLMs ,training ,data and benchmarks , and applications .\n\u2022 Architecture focuses on the MLLM framework developed by efficient techniques to reduce\nthe computational cost. The architecture is composed of multiple modality-based funda-\nmental models, exhibits characteristics distinct from single-modal models, thus promoting\nthe development of novel technologies.", "solving abilities of MLLMs. Generally, the input of vi-\nsual instruction tuning consists of an image and a task\ndescription, and the task is to generate a corresponding\n49. In existing work, large vision language models (LVLMs) [662] are\nalso used to term such bimodal models that are developed based on\nLLMs. We use the naming of MLLMs in this part due to its wide use in\nexisting literature.", "ing images from public sources with manually-collected\ntext instructions for perception and cognition evaluations.\nMMBench [838] transforms these instructions into multiple-\nchoice questions and introduces CircularEval to ensure\nevaluation consistency. SEED-Bench [854] further considers\ntemporal understanding tasks and enlarges the evaluation\nscale to 19K multiple-choice questions with the assistance of\nLLMs. MM-Vet [855] presents more complex tasks to assess\nthe integrated multimodal capabilities of MLLMs. It starts\nby defining six essential multimodal abilities and then cre-\nates intricate questions by combining multiple abilities. In\nsummary, the above benchmarks collectively contribute to\nthe comprehensive evaluation and improved development\nof MLLMs.\nKey Points for Improving MLLMs. To develop capable\nMLLMs, we continue to discuss three key points to improve\nthe model capacities, from the perspectives of instruction\ndata, training strategy, and safety and alignment."], "retrieved_docs_id": ["04b6ebc53f", "a1bd2d5193", "cd55ca1477", "7bf62771bf", "df8870e586"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How does Mixture of Experts (MoE) decompose a large-scale model?\n", "true_answer": "MoE decomposes a large-scale model into several smaller models, each focusing on learning a specific part of the input data.", "source_doc": "multimodal.pdf", "source_id": "811840a2cd", "retrieved_docs": ["resentative LLMs based on prefix decoders include GLM-\n130B [93] and U-PaLM [118].\nMixture-of-Experts. For the above three types of archi-\ntectures, we can further extend them via the mixture-of-\nexperts (MoE) scaling, in which a subset of neural network\nweights for each input are sparsely activated, e.g., Switch\nTransformer [25] and GLaM [112]. The major merit is that\nMoE is a flexible way to scale up the model parameter while\nmaintaining a constant computational cost [25]. It has been\nshown that substantial performance improvement can be\nobserved by increasing either the number of experts or the\ntotal parameter size [246]. Despite the merits, training large\nMoE models may suffer from instability issues due to the\ncomplex, hard-switching nature of the routing operation.\nTo enhance the training stability of MoE-based language\nmodels, techniques such as selectively using high-precision\ntensors in the routing module or initializing the model with", "Under review as a conference paper at ICLR 2017\nWhile the introduced technique is generic, in this paper we focus on language modeling and machine\ntranslation tasks, which are known to bene\ufb01t from very large models. In particular, we apply a MoE\nconvolutionally between stacked LSTM layers (Hochreiter & Schmidhuber, 1997), as in Figure 1.\nThe MoE is called once for each position in the text, selecting a potentially different combination\nof experts at each position. The different experts tend to become highly specialized based on syntax\nand semantics (see Appendix E Table 9). On both language modeling and machine translation\nbenchmarks, we improve on best published results at a fraction of the computational cost.\n1.3 R ELATED WORK ON MIXTURES OF EXPERTS\nSince its introduction more than two decades ago (Jacobs et al., 1991; Jordan & Jacobs, 1994),\nthe mixture-of-experts approach has been the subject of much research. Different types of expert", "The Mixture-of-Experts (MoE) layer consists of a set of n\u201cexpert networks\" E1,\u00b7\u00b7\u00b7,En, and a\n\u201cgating network\" Gwhose output is a sparse n-dimensional vector. Figure 1 shows an overview\nof the MoE module. The experts are themselves neural networks, each with their own parameters.\nAlthough in principle we only require that the experts accept the same sized inputs and produce the\nsame-sized outputs, in our initial investigations in this paper, we restrict ourselves to the case where\nthe models are feed-forward networks with identical architectures, but with separate parameters.\nLet us denote by G(x)andEi(x)the output of the gating network and the output of the i-th expert\nnetwork for a given input x. The output yof the MoE module can be written as follows:\ny=n\u2211\ni=1G(x)iEi(x) (1)\nWe save computation based on the sparsity of the output of G(x). WhereverG(x)i= 0, we need not\ncomputeEi(x). In our experiments, we have up to thousands of experts, but only need to evaluate", "Eigen et al. (2013) introduce the idea of using multiple MoEs with their own gating networks as\nparts of a deep model. It is intuitive that the latter approach is more powerful, since complex prob-\nlems may contain many sub-problems each requiring different experts. They also allude in their\nconclusion to the potential to introduce sparsity, turning MoEs into a vehicle for computational\ncomputation.\nOur work builds on this use of MoEs as a general purpose neural network component. While Eigen\net al. (2013) uses two stacked MoEs allowing for two sets of gating decisions, our convolutional\napplication of the MoE allows for different gating decisions at each position in the text. We also\nrealize sparse gating and demonstrate its use as a practical way to massively increase model capacity.\n2 T HESTRUCTURE OF THE MIXTURE -OF-EXPERTS LAYER\nThe Mixture-of-Experts (MoE) layer consists of a set of n\u201cexpert networks\" E1,\u00b7\u00b7\u00b7,En, and a", "into a high-dimensional space, where task-related information can be more readily captured. In\nthis new space, each word in the text sequence is represented as a high-dimensional vector, and the\ndistances between these vectors serve to measure their similarities. Low-Rank [147] aims to decom-\npose a high-dimensional matrix into the product of two lower-dimensional matrices. Consequently,\nby calculating the inverses of these two lower-dimensional matrices, an approximate inverse of the\nattention matrix can be obtained, thereby significantly reducing computational complexity.\n4.2 Framework\nMixture of Experts The core idea behind MoE [89] is to decompose a large-scale model into sev-\neral smaller models, each of which focuses on learning a specific part of the input data. During the\ntraining process, each expert is assigned a weight that determines its importance within the overall\nmodel. During the inference phase, given an input, all experts are ranked, and the most relevant"], "retrieved_docs_id": ["3c084f5868", "00ef434257", "906a8625a5", "80fa5987ac", "811840a2cd"], "reranker_type": "None", "search_type": "vector", "rr": 0.2, "hit": 1}, {"question": "What is the name of the concurrent work that also uses preference-based reinforcement learning to improve the faithfulness of MLLMs?\n", "true_answer": "Silkie [68]", "source_doc": "hallucination.pdf", "source_id": "0b66cff7c9", "retrieved_docs": ["samples) and hallucinatory descriptions (negative samples). HA-DPO then trains the model using\nthese sample pairs, enabling it to distinguish between accurate and hallucinatory descriptions. This\ngoal is achieved through direction preference optimization (DPO), which optimizes a specific loss\nfunction designed to maximize the model\u2019s preference for positive samples while minimizing its\npreference for negative samples.\nA concurrent work, Silkie [ 68], introduces a similar approach of utilizing preference-based\nreinforcement learning to enhance the faithfulness of MLLMs. Specifically, it emphasizes the\nconcept of reinforcement learning from AI feedback (RLAIF) by distilling preferences from a more\nrobust MLLM, i.e., GPT-4V [ 83]. Responses are first generated by models from 12 MLLMs, and then\nassessed by GPT-4V. The constructed dataset, termed as VLFeedback, contains preferences distilled\nfrom GPT-4V and is utilized to train other MLLMs through direct preference optimization.", "from GPT-4V and is utilized to train other MLLMs through direct preference optimization.\nA more recent work, POVID [136], challenges the assumption underlying previous DPO-based\nmethods. These methods rely on the traditional preference data generation process in LLMs, where\nboth preferred and dispreferred responses may potentially be incorrect. Therefore, this work pro-\nposes the Preference Optimization in VLLM with AI-Generated Dispreferences (POVID) framework,\naiming to exclusively generate dispreferred feedback data using AI models. The dispreferred data\nis generated by: 1) utilizing GPT-4V to introduce plausible hallucinations into the answer, and\n2) provoking inherent hallucination by introducing noise into MLLMs. In the DPO optimization\nframework, the ground-truth multimodal instructions serves as the preferred answers.\nReinforcement Learning from Human Feedback (RLHF). HalDetect [ 32] first introduces the M-", "offline preference-annotated action pairs [ 47]. Similarly, preference-based RL (PbRL) learns from\nbinary preferences generated by an unknown \u2018scoring\u2019 function rather than rewards [9, 35]. Various\nalgorithms for PbRL exist, including methods that can reuse off-policy preference data, but generally\ninvolve first explicitly estimating the latent scoring function (i.e. the reward model) and subsequently\noptimizing it [ 16,9,12,34,19]. We instead present a single stage policy learning approach that\ndirectly optimizes a policy to satisfy preferences.\n3 Preliminaries\nWe review the RLHF pipeline in Ziegler et al. (and later [ 38,1,26]). It usually includes three phases:\n1) supervised fine-tuning (SFT); 2) preference sampling and reward learning and 3) RL optimization.\nSFT: RLHF typically begins by fine-tuning a pre-trained LM with supervised learning on high-quality\ndata for the downstream task(s) of interest (dialogue, summarization, etc.), to obtain a model \u03c0SFT.", "preference learning stage occurs after an initial stage of large-scale unsupervised pre-training on\na large text dataset. While the most straightforward approach to preference learning is supervised\nfine-tuning on human demonstrations of high quality responses, the most successful class of methods\nis reinforcement learning from human (or AI) feedback (RLHF/RLAIF; [ 12,2]). RLHF methods fit\na reward model to a dataset of human preferences and then use RL to optimize a language model\npolicy to produce responses assigned high reward without drifting excessively far from the original\nmodel. While RLHF produces models with impressive conversational and coding abilities, the RLHF\npipeline is considerably more complex than supervised learning, involving training multiple LMs and\nsampling from the LM policy in the loop of training, incurring significant computational costs.\nIn this paper, we show how to directly optimize a language model to adhere to human preferences,", "as image captions.\nSimilarly, RLHF-V [ 119] also employs the RLHF paradigm to enhance the pre-trained MLLM.\nSpecifically, this work emphasizes two improvements: 1) at the data level, it proposes to collect\nhuman feedback in the form of fine-grained segment-level corrections, providing a clear, dense,\nand fine-grained human preference. 2) at the method level, it proposes dense direct preference\noptimization (DDPO) that directly optimizes the policy model against dense and fine-grained\nsegment-level preference.\nAnother similar work, ViGoR [ 110], also designs a fine-grained reward model to update pre-\ntrained MLLMs, aiming to improve visual grounding and reduce hallucination. The reward modeling\nin this work encompasses both human preferences and automatic metrics. Specifically, it collects\nhuman judgment and preferences for the responses generated by MLLMs by asking crowd-workers\nto provide fine-grained feedback at the sentence level. The collected human preference data is"], "retrieved_docs_id": ["0b66cff7c9", "4ed1c08405", "847192cd9b", "6baa286ac1", "9da785fedf"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How can the CHAIR metric be affected in the context of MLLMs?\n", "true_answer": "The CHAIR metric can be affected by the instruction designs and the length of generated captions in the context of MLLMs.", "source_doc": "hallucination.pdf", "source_id": "84a3c00c17", "retrieved_docs": ["MHaluBench [13] arXiv\u201924 Feb. MSCOCO [70] 1,860 Gen Acc/P/R/F \u2713 \u2713 \u2717 T2I\nVHTest [46] arXiv\u201924 Feb. MSCOCO [70] 1,200 Dis & Gen Acc \u2713 \u2713 \u2717 \u2713\nHal-Eavl [53] arXiv\u201924 Feb.MSCOCO [70] &\nLAION [92]10,000 Dis & GenAcc/P/R/F &\nLLM Assessment\u2713 \u2713 \u2713 Obj. Event\n(denoted as CHAIR \ud835\udc60):\nCHAIR \ud835\udc56=|{hallucinated objects }|\n|{all objects mentioned }|,\nCHAIR \ud835\udc60=|{sentences with hallucinated object }|\n|{all sentences}|.\nIn the paper of CHAIR [ 90], the range of objects is restricted to the 80 MSCOCO objects. Sentence\ntokenization and synonyms mapping are applied to determine whether a generated sentence\ncontains hallucinated objects. Ground-truth caption and object segmentations both serve as ground-\ntruth objects in the computation. In the MLLM era, this metric is still widely used for assessing the\nresponse of MLLMs.\nPOPE [ 69]. When used in MLLMs, the work of [ 69] argues that the CHAIR metric can be\naffected by the instruction designs and the length of generated captions. Therefore, it proposes a", "tokens. The issue of \u2019losing attention\u2019 would also lead to the model\u2019s output response being\nirrelevant to the visual content.\n4 HALLUCINATION METRICS AND BENCHMARKS\nIn this section, we present a comprehensive overview of existing hallucination metrics and bench-\nmarks, which are designed to assess the extent of hallucinations generated by existing cutting-edge\nMLLMs. Currently, the primary focus of these benchmarks is on evaluating the object hallucination\nof MLLM-generated content. Tab. 1 illustrates a summary of related benchmarks.\nCHAIR [ 90]. As one of the early works, the metric of CHAIR was proposed to evaluate ob-\nject hallucination in the traditional image captioning task. This is achieved by computing what\nproportion of words generated are actually in the image according to the ground truth sentences\nand object segmentations. The computation of the CHAIR metric is straightforward and easy", "and object segmentations. The computation of the CHAIR metric is straightforward and easy\nto understand. The metric has two variants: per-instance (denoted as CHAIR \ud835\udc56) and per-sentence\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024.", "10 Bai, et al.\nTable 1. Summary of most relevant benchmarks and metrics of object hallucination in MLLMs. The order is\nbased on chronological order on arxiv. In the metric column, Acc/P/R/F1 denotes Accuracy/Precision/Recall/F1-\nScore.\nBenchmark VenueUnderlying\nData SourceSizeTask\nTypeMetricHallucination Type\nCategory Attribute Relation Others\nCHAIR [90] EMNLP\u201918 MSCOCO [70] 5,000 Gen CHAIR \u2713 \u2717 \u2717 \u2717\nPOPE [69] EMNLP\u201923 MSCOCO [70] 3,000 Dis Acc/P/R/F1 \u2713 \u2717 \u2717 \u2717\nMME [113] arXiv\u201923 Jun MSCOCO [70] 1457 Dis Acc/Score \u2713 \u2713 \u2717 \u2713\nCIEM [42] NeurIPS-W\u201923 MSCOCO [70] 78120 Dis Acc \u2713 \u2717 \u2717 \u2717\nM-HalDetect [32] arXiv\u201923 Aug. MSCOCO [70] 4,000 Dis Reward Model Score \u2713 \u2717 \u2717 \u2717\nMMHal-Bench [96] arXiv\u201923 Sep. Open-Images [61] 96 Gen LLM Assessment \u2713 \u2717 \u2717 \u2713\nGAVIE [73] ICLR\u201924 Visual-Genome [59] 1,000 Gen LLM Assessment Not Explicitly Stated\nNOPE [77] arXiv\u201923 Oct. Open-Images [61] 36,000 Dis Acc/METEOR [3] \u2713 \u2717 \u2717 \u2717\nHaELM [104] arXiv\u201923 Oct. MSCOCO [70] 5,000 Gen LLM Assessment Not Explicitly Stated", "OpenCHAIR [ 5]The traditional CHAIR metric relies on the closed list of 80 objects in the\nMS-COCO dataset, limiting its application. To measure object hallucination in the open-vocabulary\nsettings, OpenCHAIR expands CHAIR by relaxing the strong reliance on the closed vocabulary.\nThe \u2019open-vocabulary\u2019 manifests in two ways. Firstly, when building the benchmark, it organizes a\ndataset consisting of synthetic images with corresponding captions, which include diverse, open-\nvocabulary objects using a text-to-image diffusion model. Secondly, during computing the metric,\nCHAIR checks if words or their synonyms (as given by fixed vocabulary lists) are found in ground-\ntruth annotations. In contrast, OpenCHAIR extracts concrete objects from a predicted caption and\nidentifies hallucinated objects from this list by querying an LLM. Similar to CHAIR, the final metric\ncomputation is based on the hallucination rate."], "retrieved_docs_id": ["84a3c00c17", "52c95dc6e8", "7168b77a46", "8705831e19", "c7d602443c"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "Why is parametric knowledge not updated dynamically in this model?\n", "true_answer": "The model parameters cannot be updated dynamically, making the parametric knowledge susceptible to becoming outdated over time.", "source_doc": "RAG.pdf", "source_id": "9ebdac13a1", "retrieved_docs": ["and more specific knowledge. Secondly, since the model\nparameters cannot be updated dynamically, the parametric\nknowledge is susceptible to becoming outdated over time.\nLastly, an expansion in parameters leads to increased com-arXiv:2312.10997v1  [cs.CL]  18 Dec 2023", "play distinct roles. Parametric knowledge is acquired through\ntraining LLMs and stored in the neural network weights, rep-\nresenting the model\u2019s understanding and generalization of\nthe training data, forming the foundation for generated re-\nsponses. Non-parametric knowledge, on the other hand, re-\nsides in external knowledge sources such as vector databases,\nnot encoded directly into the model but treated as updatable\nsupplementary information. Non-parametric knowledge em-\npowers LLMs to access and leverage the latest or domain-\nspecific information, enhancing the accuracy and relevance\nof responses.\nPurely parameterized language models (LLMs) store their\nworld knowledge, which is acquired from vast corpora, in\nthe parameters of the model. Nevertheless, such models have\ntheir limitations. Firstly, it is difficult to retain all the knowl-\nedge from the training corpus, especially for less common\nand more specific knowledge. Secondly, since the model", "[Tur20 ]. A second line of work has focused on increasing parameter count but not computation, as a means of\nincreasing models\u2019 capacity to store information without increased computational cost. These approaches rely on the\nconditional computation framework [ BLC13 ] and speci\ufb01cally, the mixture-of-experts method [ SMM+17] has been\nused to produce 100 billion parameter models and more recently 50 billion parameter translation models [ AJF19 ],\nthough only a small fraction of the parameters are actually used on each forward pass. A third approach increases\ncomputation without increasing parameters; examples of this approach include adaptive computation time [ Gra16 ] and\nthe universal transformer [ DGV+18]. Our work focuses on the \ufb01rst approach (scaling compute and parameters together,\nby straightforwardly making the neural net larger), and increases model size 10x beyond previous models that employ\nthis strategy.", "to be still at a superficial level. In addition, existing studies\nalso explore editing parameters of language models to up-\ndate intrinsic knowledge [669\u2013671]. Nevertheless, previous\nwork [672] has shown that several parameter editing meth-\nods perform not well on LLMs, though they can improve\nthe performance of small language models. Therefore, it\nis still difficult to directly amend intrinsic knowledge or\ninject specific knowledge into LLMs, which remains an\nopen research problem [672]. Recently, a useful framework\nEasyEdit [673] has been released to facilitate the research of\nknowledge editing for LLMs.\nKnowledge Recency\nThe parametric knowledge of LLMs is hard to be\nupdated in a timely manner. Augmenting LLMs\nwith external knowledge sources is a practical\napproach to tackling the issue. However, how\nto effectively update knowledge within LLMs\nremains an open research problem.\n7.1.3 Complex Reasoning\nComplex reasoning refers to the ability of understanding", "5:A,B/uni2236./u1D671,/u1D67B,/u1D673,/u1D67D)} /u1D5BD/u1D5C2/u1D5CC/u1D5BC/u1D5CBe/u1D5CD/u1D5C2/u1D5D3e .\u2206,A,B)\n6:/u1D466} /u1D5B2/u1D5B2/u1D5AC .A,B,C).x)\n.Time-varying : recurrence ( scan) only\n7:return /u1D466\nAlgorithms 1and2illustrates the main selection mechanism that we use. The main di\ufb00erence is simply making\nseveral parameters \u2206,B,Cfunctions of the input, along with the associated changes to tensor shapes throughout.\nIn particular, we highlight that these parameters now have a length dimension /u1D43F, meaning that the model has\nchanged from time-invariant to time-varying. (Note that shape annotations were described in Section 2). This\nloses the equivalence to convolutions (3)with implications for its e\ufb03ciency, discussed next."], "retrieved_docs_id": ["9ebdac13a1", "fc82ce8e28", "4e7f40ec9a", "66aa6c0fd1", "70f0b25ba0"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "Which model outperforms both GPT-4V and Med-PaLM in terms of efficiency and effectiveness?\n", "true_answer": "LLaV A-Rad", "source_doc": "multimodal.pdf", "source_id": "0da5fa4a36", "retrieved_docs": ["employs a modular approach, integrating unimodal pre-trained models and emphasizing the training\nof lightweight adapters. As a result, LLaV A-Rad outperforms larger models such as GPT-4V and\nMed-PaLM in terms of standard metrics, showcasing its superior efficiency and effectiveness.\n22", "LLaMA-13B outperforms GPT-3 on most bench-\nmarks, despite being 10 \u00d7smaller. We believe that\nthis model will help democratize the access and\nstudy of LLMs, since it can be run on a single GPU.\nAt the higher-end of the scale, our 65B-parameter\nmodel is also competitive with the best large lan-\nguage models such as Chinchilla or PaLM-540B.\nUnlike Chinchilla, PaLM, or GPT-3, we only\nuse publicly available data, making our work com-\npatible with open-sourcing, while most existing\nmodels rely on data which is either not publicly\navailable or undocumented (e.g. \u201cBooks \u2013 2TB\u201d or\n\u201cSocial media conversations\u201d). There exist some\nexceptions, notably OPT (Zhang et al., 2022),\nGPT-NeoX (Black et al., 2022), BLOOM (Scao\net al., 2022) and GLM (Zeng et al., 2022), but none\nthat are competitive with PaLM-62B or Chinchilla.\nIn the rest of this paper, we present an overview\nof the modifications we made to the transformer\narchitecture (Vaswani et al., 2017), as well as our", "LLaMA-13B outperforms GPT-3 on most bench-\nmarks, despite being 10 \u00d7smaller. We believe that\nthis model will help democratize the access and\nstudy of LLMs, since it can be run on a single GPU.\nAt the higher-end of the scale, our 65B-parameter\nmodel is also competitive with the best large lan-\nguage models such as Chinchilla or PaLM-540B.\nUnlike Chinchilla, PaLM, or GPT-3, we only\nuse publicly available data, making our work com-\npatible with open-sourcing, while most existing\nmodels rely on data which is either not publicly\navailable or undocumented (e.g. \u201cBooks \u2013 2TB\u201d or\n\u201cSocial media conversations\u201d). There exist some\nexceptions, notably OPT (Zhang et al., 2022),\nGPT-NeoX (Black et al., 2022), BLOOM (Scao\net al., 2022) and GLM (Zeng et al., 2022), but none\nthat are competitive with PaLM-62B or Chinchilla.\nIn the rest of this paper, we present an overview\nof the modi\ufb01cations we made to the transformer\narchitecture (Vaswani et al., 2017), as well as our", "2022) on almost all benchmarks. There is still a large gap in performance between Llama 2 70B and GPT-4\nand PaLM-2-L.\nWe also analysed the potential data contamination and share the details in Section A.6.\nBenchmark (shots) GPT-3.5 GPT-4 PaLM PaLM-2-L Llama 2\nMMLU (5-shot) 70.0 86.4 69.3 78.3 68.9\nTriviaQA (1-shot) \u2013 \u2013 81.4 86.1 85.0\nNatural Questions (1-shot) \u2013 \u2013 29.3 37.5 33.0\nGSM8K (8-shot) 57.1 92.0 56.5 80.7 56.8\nHumanEval (0-shot) 48.1 67.0 26.2 \u2013 29.9\nBIG-Bench Hard (3-shot) \u2013 \u2013 52.3 65.7 51.2\nTable 4: Comparison to closed-source models on academic benchmarks. Results for GPT-3.5 and GPT-4\nare from OpenAI (2023). Results for the PaLM model are from Chowdhery et al. (2022). Results for the\nPaLM-2-L are from Anil et al. (2023).\n3 Fine-tuning\nLlama 2-Chat is the result of several months of research and iterative applications of alignment techniques,\nincluding both instruction tuning and RLHF, requiring significant computational and annotation resources.", "2022) on almost all benchmarks. There is still a large gap in performance between Llama 2 70B and GPT-4\nand PaLM-2-L.\nWe also analysed the potential data contamination and share the details in Section A.6.\nBenchmark (shots) GPT-3.5 GPT-4 PaLM PaLM-2-L Llama 2\nMMLU (5-shot) 70.0 86.4 69.3 78.3 68.9\nTriviaQA (1-shot) \u2013 \u2013 81.4 86.1 85.0\nNatural Questions (1-shot) \u2013 \u2013 29.3 37.5 33.0\nGSM8K (8-shot) 57.1 92.0 56.5 80.7 56.8\nHumanEval (0-shot) 48.1 67.0 26.2 \u2013 29.9\nBIG-Bench Hard (3-shot) \u2013 \u2013 52.3 65.7 51.2\nTable 4: Comparison to closed-source models on academic benchmarks. Results for GPT-3.5 and GPT-4\nare from OpenAI (2023). Results for the PaLM model are from Chowdhery et al. (2022). Results for the\nPaLM-2-L are from Anil et al. (2023).\n3 Fine-tuning\nLlama 2-Chat is the result of several months of research and iterative applications of alignment techniques,\nincluding both instruction tuning and RLHF, requiring significant computational and annotation resources."], "retrieved_docs_id": ["0da5fa4a36", "acbecf1628", "acbecf1628", "fc490f221d", "fc490f221d"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "What is the only concurrent survey on the hallucination problem in Multimodal Large Language Models (MLLMs)?\n", "true_answer": "The only concurrent survey on the hallucination problem in MLLMs is a short survey on the hallucination problem of LVLMs, as mentioned in the context.", "source_doc": "hallucination.pdf", "source_id": "33d47ad8cc", "retrieved_docs": ["Based on powerful large language models, multimodal large language models demonstrate remark-\nable performance across various multimodal tasks. However, the phenomenon of hallucination\npresents a significant challenge to the practical applications of MLLMs, giving rise to undeniable\nconcerns about safety, reliability, and trustworthiness. In this comprehensive survey, we conducted\na thorough examination of hallucinations within multimodal large language models, focusing\non their underlying causes, evaluation metrics, benchmarks, and mitigation methods. Despite\nconsiderable progress, hallucination remains a complex and persistent concern that warrants ongo-\ning investigation. The challenge of hallucination in multimodal large language models remains\ncompelling, requiring continuous scrutiny and innovation. In light of these challenges, we have\noutlined several promising future directions in this burgeoning domain. Through navigating the", "Hallucination of Multimodal Large Language Models: A Survey 3\ncontrast, there are very few surveys on hallucination in the field of MLLMs. To the best of our\nknowledge, there is only one concurrent work [ 76], a short survey on the hallucination problem of\nLVLMs. However, our survey distinguishes itself in terms of both taxonomy and scope. We present a\nlayered and granular classification of hallucinations, as shown in Fig. 1, drawing a clearer landscape\nof this field. Additionally, our approach does not limit itself to specific model architectures as\nprescribed in the work of [ 76], but rather dissects the causes of hallucinations by tracing back to\nvarious affecting factors. We cover a larger range of literature both in terms of paper number and\ntaxonomy structure. Furthermore, our mitigation strategies are intricately linked to the underlying\ncauses, ensuring a cohesive and targeted approach.\nOrganization of this survey. In this paper, we present a comprehensive survey of the latest", "Hallucination of Multimodal Large Language Models: A\nSurvey\nZECHEN BAI, Show Lab, National University of Singapore, Singapore\nPICHAO WANG, Amazon Prime Video, USA\nTIANJUN XIAO, AWS Shanghai AI Lab, China\nTONG HE, AWS Shanghai AI Lab, China\nZONGBO HAN, Show Lab, National University of Singapore, Singapore\nZHENG ZHANG, AWS Shanghai AI Lab, China\nMIKE ZHENG SHOU\u2217,Show Lab, National University of Singapore, Singapore\nThis survey presents a comprehensive analysis of the phenomenon of hallucination in multimodal large\nlanguage models (MLLMs), also known as Large Vision-Language Models (LVLMs), which have demonstrated\nsignificant advancements and remarkable abilities in multimodal tasks. Despite these promising developments,\nMLLMs often generate outputs that are inconsistent with the visual content, a challenge known as hallucination,\nwhich poses substantial obstacles to their practical deployment and raises concerns regarding their reliability", "Organization of this survey. In this paper, we present a comprehensive survey of the latest\ndevelopments regarding hallucinations in MLLMs. The survey is organized as follows: We begin by\nproviding sufficient context and defining concepts related to LLMs, MLLMs, hallucination, etc. Next,\nwe delve into an in-depth analysis of the factors contributing to hallucinations in MLLMs. Following\nthis, we present a set of metrics and benchmarks employed for evaluating hallucinations in MLLMs.\nWe then elaborate on a range of approaches designed to mitigate hallucinations in MLLMs. Finally,\nwe delve into the challenges and open questions that frame the current limitations and future\nprospects of this field, offering insights and delineating potential pathways for forthcoming research.\n2 DEFINITIONS\n2.1 Large Language Models\nBefore moving to multimodal large language models, it is essential to introduce the concept of large", "Hallucination of Multimodal Large Language Models: A Survey 19\nPreference Optimization (FDPO). FDPO uses fine-grained preferences from individual examples to\ndirectly reduce hallucinations in generated text by enhancing the model\u2019s ability to distinguish\nbetween accurate and inaccurate descriptions.\nLLaVA-RLHF [ 96] also try to involve human feedback to mitigate hallucination. It extends the\nRLHF paradigm from the text domain to the task of vision-language alignment, where human\nannotators were asked to compare two responses and pinpoint the hallucinated one. The MLLM is\ntrained to maximize the human reward simulated by an reward model. To address the potential\nissue of reward hacking ,i.e.,achieving high scores from the reward model does not necessarily lead\nto improvement in human judgements, it proposes an algorithm named Factually Augmented RLHF.\nThis algorithm calibrates the reward signals by augmenting them with additional information such\nas image captions."], "retrieved_docs_id": ["114f3dada8", "33d47ad8cc", "72dc971633", "e1b4ac9436", "92e73c053a"], "reranker_type": "None", "search_type": "vector", "rr": 0.5, "hit": 1}, {"question": "What is a technique for efficiently encoding images of varying resolutions?\n", "true_answer": "LLaVA A-UHD [35] proposes an image modularization strategy that divides native-resolution images into smaller variable-sized slices for efficient and extensible encoding.", "source_doc": "multimodal.pdf", "source_id": "c0bdc4830f", "retrieved_docs": ["Token Processing Techniques designed to process lengthy visual token squence are critical in ef-\nficient MLLMs as they address the dual challenges of preserving fine-grained details and reducing\ncomputational complexity. LLaV A-UHD [35] presents a novel approach to manage the computa-\ntional burden associated with high-resolution images. It puts forward two key components: (1) a\ncompression module that further condenses image tokens from visual encoders, significantly re-\nducing the computational load, and (2) a spatial schema to organize slice tokens for LLMs. No-\ntably, LLaV A-UHD demonstrates its efficiency by supporting 6 times larger resolution images using\nonly 94% of the inference computation compared to previous models. Furthermore, the model\ncan be efficiently trained in academic settings, completing the process within 23 hours on 8 A100\nGPUs. LLaV A-PruMerge[41] and MADTP [42] propose an adaptive visual token reduction ap-", "Figure 6: Comparision of Phi[86] (from left to right: phi-1.5, phi-2, phi-3-mini, phi-3-small) versus\nLlama-2 [91] family of models(7B, 13B, 34B, 70B) that were trained on the same fixed data.\nLLaV A-UHD [35] proposes an image modularization strategy that divides native-resolution im-\nages into smaller variable-sized slices for efficient and extensible encoding. Inaddition, InternLM-\nXComposer2-4KHD [90] introduces a strategy that dynamically adjusts resolution with an automatic\nlayout arrangement, which not only maintains the original aspect ratios of images but also adaptively\nalters patch layouts and counts, thereby enhancing the efficiency of image information extraction.\nBy implementing an adaptive input strategy for images of varying resolutions, a balance between\nperceptual capability and efficiency can be achieved.\nToken Processing Techniques designed to process lengthy visual token squence are critical in ef-", "resolution and the computation overhead.\nSummary (Quantization Granularity). Channelwise\nquantization is currently the standard method used for\nquantizing convolutional kernels. It enables the practi-\ntioner to adjust the clipping range for each individual ker-\nnel with negligible overhead. In contrast, sub-channelwise\nquantization may result in signi\ufb01cant overhead and is not\ncurrently the standard choice (we also refer interested\nreader to [ 68] for tradeoffs associated with these design\nchoices).\nF . Non-Uniform Quantization\nSome work in the literature has also explored non-\nuniform quantization [ 25,38,62,74,79,99,118,125,\n153,159,179,189,190,238,248,256,264,266,276,\n284], where quantization steps as well as quantization\nlevels are allowed to be non-uniformly spaced. The formal\nde\ufb01nition of non-uniform quantization is shown in Eq. 6,\nwhereXirepresents the discrete quantization levels and\n\u2206ithe quantization steps (thresholds):\nQ(r) =Xi,ifr\u2208[\u2206i,\u2206i+1). (6)", "Multi-view Input Directly employing high-resolution vision encoders for fine-grained percep-\ntion is prohibitively costly and does not align with practical usage requirements. Therefore, to\nutilize low-resolution vision encoders while enabling MLLM to perceive detailed information, a\ncommon approach is to input multi-view HR images, i.e., a global view: low-resolution images\nobtained through resizing, and a local view: image patches derived from splitting. For example,\n7", "tion answering and image captioning. However, MLLMs face considerable challenges in tasks ne-\ncessitating intricate recognition, including crowd counting and OCR of small characters. A direct\napproach to address these challenges involves increasing the image resolution, practically, the num-\nber of visual tokens. This strategy, nonetheless, imposes a substantial computational burden on\nMLLMs, primarily due to the quadratic scaling of computational costs with the number of input to-\nkens in the Transformer architecture. Motivated by this challenge, vision token compression, aimed\nto reduce the prohibitive computation budget caused by numerous tokens, has become an essential\naspect of efficient MLLMs. We will explore this topic through several key techniques, including\nmulti-view input, token processing, multi-scale information fusion, vision expert agents and video-\nspecific methods.\nMulti-view Input Directly employing high-resolution vision encoders for fine-grained percep-"], "retrieved_docs_id": ["986687f08e", "c0bdc4830f", "7f107a165f", "f8392fc0db", "8beea9b82e"], "reranker_type": "None", "search_type": "vector", "rr": 0.5, "hit": 1}, {"question": "What model is used to evaluate all prompts in the RAGAS framework?\n", "true_answer": "The gpt-3.5-turbo-16k model, which is available through the OpenAI API, is used to evaluate all prompts in the RAGAS framework.", "source_doc": "RAG.pdf", "source_id": "ffd5c8b41e", "retrieved_docs": ["open-source library proposed by the industry, also offers a\nsimilar evaluation mode. These frameworks all use LLMs as\njudges for evaluation. As TruLens is similar to RAGAS, this\nchapter will specifically introduce RAGAS and ARES.\nRAGAS\nThis framework considers the retrieval system\u2019s ability to\nidentify relevant and key context paragraphs, the LLM\u2019s abil-\nity to use these paragraphs faithfully, and the quality of\nthe generation itself. RAGAS is an evaluation framework\nbased on simple handwritten prompts, using these prompts\nto measure the three aspects of quality - answer faithfulness,\nanswer relevance, and context relevance - in a fully auto-\nmated manner. In the implementation and experimentation\nof this framework, all prompts are evaluated using the gpt-\n3.5-turbo-16k model, which is available through the OpenAI\nAPI[Eset al. , 2023 ].\nAlgorithm Principles\n1. Assessing Answer Faithfulness: Decompose the answer\ninto individual statements using an LLM and verify", "ARES\nARES aims to automatically evaluate the performance of\nRAG systems in three aspects: Context Relevance, Answer\nFaithfulness, and Answer Relevance. These evaluation met-\nrics are similar to those in RAGAS. However, RAGAS, being\na newer evaluation framework based on simple handwritten\nprompts, has limited adaptability to new RAG evaluation set-\ntings, which is one of the significances of the ARES work.\nFurthermore, as demonstrated in its assessments, ARES per-\nforms significantly lower than RAGAS.\nARES reduces the cost of evaluation by using a small\namount of manually annotated data and synthetic data,\nand utilizes Predictive-Driven Reasoning (PDR) to provide\nstatistical confidence intervals, enhancing the accuracy of\nevaluation [Saad-Falcon et al. , 2023 ].\nAlgorithm Principles\n1. Generating Synthetic Dataset: ARES initially generates\nsynthetic questions and answers from documents in the\ntarget corpus using a language model to create positive\nand negative samples.", "intensive tasks. By citing sources, users can verify\nthe accuracy of answers and increase trust in model\noutputs. It also facilitates knowledge updates\nand the introduction of domain-specific knowl-\nedge. RAG effectively combines the parameter-\nized knowledge of LLMs with non-parameterized\nexternal knowledge bases, making it one of the\nmost important methods for implementing large\nlanguage models. This paper outlines the develop-\nment paradigms of RAG in the era of LLMs, sum-\nmarizing three paradigms: Naive RAG, Advanced\nRAG, and Modular RAG. It then provides a sum-\nmary and organization of the three main compo-\nnents of RAG: retriever, generator, and augmenta-\ntion methods, along with key technologies in each\ncomponent. Furthermore, it discusses how to eval-\nuate the effectiveness of RAG models, introducing\ntwo evaluation methods for RAG, emphasizing key\nmetrics and abilities for evaluation, and presenting\nthe latest automatic evaluation framework. Finally,", "com/RUCAIBox/LLMSurvey/tree/main/Prompts.\nEmpirical Analysis. We further conduct empirical studies\nto present the impact of prompts on task performance. To\nconduct the experiments, we select a variety of tasks that\nspan language generation, knowledge utilization, complex\nreasoning, structure data generation, and information re-\ntrieval. For each task, we manually write a prompt that\nfollows general guidelines introduced above. Note that the\ntested prompts may not be the optimal for these tasks,\nsince they mainly aim to help readers understand how to\nwrite an effective prompt for solving different tasks. Also,\nwe add a simplified prompt as the comparison for most\ntasks. Following the experimental settings in Section 7.4, we\nexamine the 3-shot performance of ChatGPT on complex\nreasoning tasks (Colored Objects and GSM8k), and zero-\nshot performance on other tasks. We report the experimental\nresults in Table 17, where we also include the supervised", "Published in Transactions on Machine Learning Research (08/2023)\nwith Bach et al. (2022) introducing a repository for prompts.61Since we more broadly view language models\nasinterfaces , we treat prompts as user behavior rather than explicitly optimizing prompts (Shin et al., 2020;\nZhou et al., 2022). Moving forward, we further expect that it may be desirable for language models to\nbeinteroperable meaning different models should be standardized such that they all work well for similar\nuser prompting behavior. We provide initial evidence of how model performance varies in the exact string\nformatting of the inputs in \u00a78.2: prompting-analysis .\nAdaptation strategy. For many scenarios (e.g. language modeling, text summarization), the way to\ninteract with a language model may appear clear. However, in the case of multiple choice classification, each\ninstance has several answer choices as references (usually with one marked as correct). This structure affords"], "retrieved_docs_id": ["ffd5c8b41e", "1b1cdfdd79", "4fffd3dc2b", "d5ac8f71f2", "9c523f4504"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does IBD compute a more reliable next-token probability distribution?\n", "true_answer": "IBD calculates a more reliable next-token probability distribution by contrasting the predictions of the original model with those of an image-biased model.", "source_doc": "hallucination.pdf", "source_id": "9a2cc490f3", "retrieved_docs": ["decoding probability distribution is calibrated using the reference (distorted) distribution.\nFollowing the same idea of contrastive decoding, IBD [ 139] proposes an image-biased decoding\nstrategy. Specifically, IBD involves computing a more reliable next-token probability distribution\nby contrasting the predictions of the original model with those of an image-biased model, which\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024.", "2 3 4 5 6 7 8 9\n0.40.60.81.01.2\n\u03c4\u03bb\n(a)\u03c4and\u03bbparameters relationship\n2 3 4 5 6 7 8 9\n2345678# of selected tokens\n\u03c4# of selected tokens\n(b)\u03c4and # of selected tokens relationship\n2 3 4 5 6 7 8 9\n# of selected tokens0.00.20.40.60.8Probabilities=3\n=5\n=7\n=9\nProbabilities\n# of selected tokens\n(c) Distribution of # selected tokens over varying \u03c4\nFigure 12: Behavior of GD when selecting multiple tokens.\nvia GD and setting the rank limit to m=d. Observing both subfigures, we note that a larger nnecessitates a larger m\nfor attention weights KQ\u22a4to accurately converge to the SVM solution (Figure 10(lower)). Meanwhile, performances\nremain consistent across varying Tvalues (Figure 10(upper)). This observation further validates Lemma 1. Furthermore,\nthe results demonstrate that Wconverges directionally towards Wmm\n\u22c6,\u03b1as long as m\u2273n, thereby confirming the assertion\nin our Theorem 7.\nBehavior of GD with nonlinear nonconvex prediction head and multi-token compositions (Figure 11). To better", "identically distributed (IID) pattern and tokens exhibit IID isotropic distributions, we posit that d\u2273(T+n)log(T+n)\nwill su ffice. More generally, the extent of required overparameterization will be contingent on the covariance of tokens\n[BLLT20, MNS+21] and the distribution characteristics of input sequences [WT22].\nAssumption B.2stipulates that non-optimal tokens possess identical scores which constitutes a relatively stringent\nassumption that we will subsequently relax. Under Assumption B, we establish that optimization problems (W-ERM)\nand (KQ-ERM) lack stationary points, and when trained using GD, the norm of parameters will diverge.\nTheorem 3 Suppose Assumption A on the loss function \u2113and Assumption B on the tokens hold. Then,\n\u2022There is no W\u2208Rd\u00d7dsatisfying\u2207L(W)=0.\n\u2022Algorithm W-GD with the step size \u03b7\u2264O(1/LW)and any starting point W(0)satisfies lim k\u2192\u221e\u2225\u2207L(W(k))\u2225F=0,\nandlim k\u2192\u221e\u2225W(k)\u2225F=\u221e.", "Fedus, Zoph and Shazeer\nTokensExpert 1 Expert 2 Expert 3\nRouter\nProbabilities0.1\n0.7\n0.20.7\n0.2\n0.10.5\n0.3\n0.20.8\n0.1\n0.10.3\n0.1\n0.60.7\n0.1\n0.2Route token to\nhighest probabilityStage-1Route token to\nsecond highest\nprobability if not\nroutedStage-2\nFigure 11: Diagram of the No-Token-Left-Behind Routing . Stage 1 is equivalent to Switch\nrouting where tokens are routed to the expert with the highest probability from\nthe router. In Stage 2 we look at all tokens that have over\ufb02owed and route them\nto the expert with which has the second highest probability. Tokens can still be\nover\ufb02owed if their second highest expert has too many tokens, but this allows\nmost of the tokens to be routed. This process can be iterated to guarantee\nvirtually no tokens are dropped at all.\nModel Quality (Neg. Log Perp.) ( \u2191)\nArgmax -1.471\nSample softmax -1.570\nInput dropout -1.480\nInput jitter -1.468\nTable 11: Router Exploration Strategies. Quality of the Switch Transformer, measured by", "ate new output tokens in sequence. The remaining small\n\u2217Equal contribution.\n1arXiv:2309.06180v1  [cs.LG]  12 Sep 2023"], "retrieved_docs_id": ["9a2cc490f3", "d10ccb16c7", "8ffb57762e", "f916395718", "2ef07a87b3"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How can the adaptability of MLLMs be improved according to the context?\n", "true_answer": "The adaptability of MLLMs can be improved by incorporating a more varied set of lightweight LLMs, which can be customized to cater to a broad spectrum of requirements.", "source_doc": "multimodal.pdf", "source_id": "f10976c224", "retrieved_docs": ["can reserve the original capacities of LLMs but likely have\na weak an adaptation performance, while the latter can\nfully adapt to multimodal tasks but suffer from the loss of\noriginal capacities of LLMs. More efforts should be made to\ninvestigate how to effectively balance the two aspects, so as\nto achieving improved multimodal capacities. In addition,\nexisting MLLMs are still overly dependent on the capacities\nof LLMs, which pose the limits on many multimodal tasks\n(e.g., space positioning). It will be meaningful to explore\nimproved training approaches of language models, so that\nmultimodal information can be also utilized in this process.\n\u2022Safety and alignment. Safety and alignment has been\nwidely discussed in LLMs, which aim to regulate the behav-\niors of models by technical approaches [66]. This topic is also\nimportant to MLLMs. Even a highly advanced MLLM ( e.g.,\nGPT-4V [133]) can be susceptible to safety issues. For exam-", "including the mPLUG-Owl series[3, 4], InternVL [5], EMU [6], LLaV A [7], InstructBLIP [8],\nMiniGPT-v2 [9], and MiniGPT-4[10]. These models circumvent the computational cost of train-\ning from scratch by effectively leveraging the pre-training knowledge of each modality. MLLMs\ninherit the cognitive capabilities of LLMs, showcasing numerous remarkable features such as robust\nlanguage generation and transfer learning abilities. Moreover, by establishing strong representa-\ntional connections and alignments with other modality-based models, MLLMs can process inputs\nfrom multiple modalities, significantly broadening their application scope.\nThe success of MLLMs is largely attributed to the scaling law: the performance of an AI model\nimproves as more resources, such as data, computational power, or model size, are invested into it.\nHowever, scalability comes at the cost of high resource demands, which hinders the development", "and preserving user privacy.\nIn light of these challenges, there has been growing attention on the study of efficient MLLMs.\nThe primary objective of these endeavors is to decrease the resource consumption of MLLMs\nand broaden their applicability while minimizing performance degradation. Research on efficient\nMLLMs began with replacing large language models with lightweight counterparts and performing\ntypical visual instruction tuning. Subsequent studies further enhanced capabilities and expanded\nuse cases in the following ways: (1) lighter architectures were introduced with an emphasis on ef-\nficiency, aiming to reduce the number of parameters or computational complexity[25, 13, 18]; (2)\nmore specialized components were developed, focusing on efficiency optimizations tailored to ad-\nvanced architectures or imbuing specific properties, such as locality[19, 17, 12]; and (3) support\nfor resource-sensitive tasks was provided, with some works employing visual token compression", "Figure 3: The architectures of efficient MLLMs.\nquestion-answering, this section highlights the potential of efficient MLLMs to broaden\ntheir application scope and contribute to real-world problem-solving.\nIn summary, this survey delves into these research endeavors, exploring various strategies for making\nMLLMs more resource-efficient. We review the development history of efficient MLLMs, provide\na taxonomy of the strategies for efficient MLLMs, and comprehensively compare the performance\nof existing efficient MLLMs.Through this exploration, we aspire to provide a comprehensive under-\nstanding of the current state-of-the-art, thereby illuminating the intricate nuances of this emerging\nfield. Furthermore, this survey serves as a roadmap, highlighting potential avenues for future re-\nsearch, and fostering a deeper comprehension of the challenges and opportunities that lie ahead in\nthe domain of efficient MLLMs. In addition to the survey, we have established a GitHub repository", "edge and the capability to interact with the real world has far-reaching implications, poten-\ntially revolutionizing fields such as robotics, automation, and artificial intelligence.\n8.2 Conclusion\nIn this study, we take a deep dive into the realm of efficient MLLM literature, providing an all-\nencompassing view of its central themes, including foundational theories and their extensions. Our\ngoal is to identify and highlight areas that require further research and suggest potential avenues\nfor future studies. We aim to provide a comprehensive perspective on the current state of efficient\nMLLM, with the hope of inspiring additional research. Given the dynamic nature of this field, it\u2019s\npossible that some recent developments may not be fully covered. To counter this, we\u2019ve set up a\ndedicated website that uses crowdsourcing to keep up with the latest advancements. This platform\nis intended to serve as a continually updated source of information, promoting ongoing growth in"], "retrieved_docs_id": ["32fb098424", "7a547e4fbb", "04b6ebc53f", "d5970c4389", "17ac4e37d9"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What is one of the processes involved in post-retrieval processing to enhance the quality of information retrieval?\n", "true_answer": "Information compression is one of the processes involved in post-retrieval processing. It is used to optimize the relevant information retrieved by the retriever from a large document database.", "source_doc": "RAG.pdf", "source_id": "faf8e03358", "retrieved_docs": ["rely on well-recognized large language models like GPT-\n4[OpenAI, 2023 ]to leverage their robust internal knowl-\nedge for the comprehensive retrieval of document knowledge.\nHowever, inherent issues of these large models, such as con-\ntext length restrictions and vulnerability to redundant infor-\nmation, persist. To mitigate these issues, some research has\nmade efforts in post-retrieval processing. Post-retrieval pro-\ncessing refers to the process of further treating, filtering, or\noptimizing the relevant information retrieved by the retriever\nfrom a large document database. Its primary purpose is to en-\nhance the quality of retrieval results to better meet user needs\nor for subsequent tasks. It can be understood as a process of\nreprocessing the documents obtained in the retrieval phase.\nThe operations of post-retrieval processing usually involve in-\nformation compression and result rerank.\nInformation Compression\nEven though the retriever can fetch relevant information from", "put forward various methods to optimize the retrieval process.\nIn terms of specific implementation, Advanced RAG can be\nadjusted either through a pipeline or in an end-to-end manner.\nPre-Retrieval Process\n\u2022Optimizing Data Indexing\nThe purpose of optimizing data indexing is to enhance\nthe quality of indexed content. Currently, there are five\nmain strategies employed for this purpose: increasing\nthe granularity of indexed data, optimizing index struc-\ntures, adding metadata, alignment optimization, and\nmixed retrieval.\n1.Enhancing Data Granularity: The objective of\npre-index optimization is to improve text standard-\nization, consistency, and ensure factual accuracy\nand contextual richness to guarantee the perfor-\nmance of the RAG system. Text standardization in-\nvolves removing irrelevant information and special\ncharacters to enhance the efficiency of the retriever.\nIn terms of consistency, the primary task is to elim-\ninate ambiguity in entities and terms, along with", "retrieved information. In RAG, the generator\u2019s input includes\nnot only traditional contextual information but also relevant\ntext segments obtained through the retriever. This allows the\ngenerator to better comprehend the context behind the ques-\ntion and produce responses that are more information-rich.\nFurthermore, the generator is guided by the retrieved text toensure consistency between the generated content and the re-\ntrieved information. It is the diversity of input data that has\nled to a series of targeted efforts during the generation phase,\nall aimed at better adapting the large model to the input data\nfrom queries and documents. We will delve into the intro-\nduction of the generator through aspects of post-retrieval pro-\ncessing and fine-tuning.\n5.1 How Can Retrieval Results be Enhanced via\nPost-retrieval Processing?\nIn terms of untuned large language models, most studies\nrely on well-recognized large language models like GPT-", "Recite-Read [Sunet al. , 2022 ]transforms external re-\ntrieval into retrieval from model weights, initially hav-\ning LLM memorize task-relevant information and gener-\nate output for handling knowledge-intensive natural lan-\nguage processing tasks.\n\u2022Adjusting the Flow between Modules In the realm of\nadjusting the flow between modules, there is an empha-\nsis on enhancing interaction between language models\nand retrieval models. DSP [Khattab et al. , 2022 ]intro-\nduces the Demonstrate-Search-predict framework, treat-\ning the context learning system as an explicit program\nrather than a terminal task prompt to address knowledge-\nintensive tasks. ITER-RETGEN [Shao et al. , 2023 ]\nutilizes generated content to guide retrieval, itera-\ntively performing \u201cretrieval-enhanced generation\u201d and\n\u201cgeneration-enhanced retrieval\u201d in a Retrieve-Read-\nRetrieve-Read flow. Self-RAG [Asai et al. , 2023b ]fol-\nlows the decide-retrieve-reflect-read process, introduc-", "(e.g., lexical overlap with the query). Figure 13\npresents the results of this experiment. Although\nall models have higher absolute accuracy in this\nsetting, they surprisingly still struggle to reason\nover their entire input context, indicating that their\nperformance degradation is not solely due to an\ninability to identify relevant documents.\nC Randomizing Distractor Order in\nMulti-Document QA\nOur prompt instructs the language model to use\nthe provided search results to answer the question.\nThere may be a prior in the pre-training or instruc-\ntion fine-tuning data to treat search results as sorted\nby decreasing relevance (i.e., the documents near\nthe beginning of the input context are more likely to\nbe useful than those at the end). To validate that our\nconclusions are not simply a byproduct of this bias,\nwe run experiments with the modified instruction\n\u201cWrite a high-quality answer for the given ques-\ntion using only the provided search results (some"], "retrieved_docs_id": ["faf8e03358", "8a71abd00a", "fefa202c19", "dfac20a7d8", "e86cd0b386"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "What is the speed difference in training between Switch Transformer and Google's T5-XXL?\n", "true_answer": "The Switch Transformer trains four times faster than T5-XXL under the same computational resources.", "source_doc": "multimodal.pdf", "source_id": "45effa0e86", "retrieved_docs": ["with equal FLOPs per example. For a \ufb01xed amount of computation and training\ntime, Switch Transformers signi\ufb01cantly outperform the dense Transformer base-\nline. Our 64 expert Switch-Base model achieves the same quality in one-seventh\nthe time of the T5-Base and continues to improve.\nFigures 5 and 6 address this question. Figure 5 measures the pre-training model quality\nas a function of time. For a \ufb01xed training duration and computational budget, Switch\nTransformers yield a substantial speed-up. In this setting, our Switch-Base 64 expert model\ntrains in one-seventh the time that it would take the T5-Base to get similar perplexity.\n3.3 Scaling Versus a Larger Dense Model\nThe above analysis shows that a computationally-matched dense model is outpaced by its\nSwitch counterpart. Figure 6 considers a di\ufb00erent scenario: what if we instead had allocated\nour resources to a larger dense model? We do so now, measuring Switch-Base against the", "Switch Transformers\n3.2 Scaling Results on a Time-Basis\nFigure 4 demonstrates that on a step basis, as we increase the number of experts, the\nperformance consistently improves. While our models have roughly the same amount of\nFLOPS per token as the baseline, our Switch Transformers incurs additional communication\ncosts across devices as well as the extra computation of the routing mechanism. Therefore,\nthe increased sample e\ufb03ciency observed on a step-basis doesn\u2019t necessarily translate to a\nbetter model quality as measured by wall-clock. This raises the question:\nFor a \ufb01xed training duration and computational budget, should one train a dense or a\nsparse model?\n50 100 150 200 250 300 350\nTraining Time2.0\n1.9\n1.8\n1.7\n1.6\n1.5\n1.4\n1.3\n1.2\nNeg Log Perplexity7x Speedup\nSwitch-Base: 128e\nSwitch-Base: 64e\nSwitch-Base: 32e\nT5-Base\nFigure 5: Speed advantage of Switch Transformer. All models trained on 32 TPUv3 cores\nwith equal FLOPs per example. For a \ufb01xed amount of computation and training", "Fedus, Zoph and Shazeer\nSwitch-Base is still more sample e\ufb03cient and yields a 2.5x speedup. Furthermore, more\ngains can be had simply by designing a new, larger sparse version, Switch-Large, which is\nFLOP-matched to T5-Large. We do this and demonstrate superior scaling and \ufb01ne-tuning\nin the following section.\n0 1 2 3 4\nTraining Step 1e52.0\n1.9\n1.8\n1.7\n1.6\n1.5\n1.4\n1.3\n1.2\nNeg Log Perplexity\nSwitch-Base: 64e\nT5-Large\nT5-Base\n50 100 150 200 250 300 350\nTraining Time2.0\n1.9\n1.8\n1.7\n1.6\n1.5\n1.4\n1.3\n1.2\nNeg Log Perplexity7.0x Speedup2.5x Speedup\nSwitch-Base: 64e\nT5-Large\nT5-Base\nFigure 6: Scaling Transformer models with Switch layers or with standard dense model\nscaling. Left Plot: Switch-Base is more sample e\ufb03cient than both the T5-Base,\nand T5-Large variant, which applies 3.5x more FLOPS per token. Right Plot: As\nbefore, on a wall-clock basis, we \ufb01nd that Switch-Base is still faster, and yields a\n2.5x speedup over T5-Large.\n4. Downstream Results", "Switch Transformers\n0.0 0.2 0.4 0.6 0.8\nTraining Step 1e52.0\n1.9\n1.8\n1.7\n1.6\n1.5\nNeg Log PerplexitySwitch-Base: 8e\nSwitch-Base: 4e\nSwitch-Base: 2e\nT5-Base\nFigure 12: Switch Transformer with few experts. Switch Transformer improves over the\nbaseline even with very few experts. Here we show scaling properties at very\nsmall scales, where we improve over the T5-Base model using 2, 4, and 8 experts.\n31", "the same performance of the T5-Base model at step 60k at step 450k, which is a 7.5x\nspeedup in terms of step time. In addition, consistent with the \ufb01ndings of Kaplan et al.\n(2020), we \ufb01nd that larger models are also more sample e\ufb03cient \u2014learning more quickly\nfor a \ufb01xed number of observed tokens.\n1091010\nSparse Model Parameters4.85.05.25.45.65.86.0Test Loss\n1e\n2e\n4e\n8e\n16e\n32e\n64e\n128e\n256e\n0 1 2 3 4\nTraining Step 1e52.0\n1.9\n1.8\n1.7\n1.6\n1.5\n1.4\n1.3\n1.2\nNeg Log PerplexitySwitch-Base: 128e\nSwitch-Base: 64e\nSwitch-Base: 32e\nSwitch-Base: 16e\nT5-Base\nFigure 4: Scaling properties of the Switch Transformer. Left Plot: We measure the quality\nimprovement, as measured by perplexity, as the parameters increase by scaling\nthe number of experts. The top-left point corresponds to the T5-Base model with\n223M parameters. Moving from top-left to bottom-right, we double the number of\nexperts from 2, 4, 8 and so on until the bottom-right point of a 256 expert model"], "retrieved_docs_id": ["85347c86b3", "0ec3d81b96", "7c79461c75", "5fd0ed3206", "155ec011de"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How does Efficient Vision aim to optimize visual fracture extraction strategies?\n", "true_answer": "Efficient Vision explores optimizing visual fracture extraction strategies by emphasizing methods that enhance efficiency without compromising accuracy. It also focuses on integrating high-quality visual data for effective cross-modal understanding.", "source_doc": "multimodal.pdf", "source_id": "f53fc9e54d", "retrieved_docs": ["the development of novel technologies.\n\u2022 Efficient Vision explores optimizing efficient visual fracture extraction strategies, empha-\nsizing methods that boost efficiency while maintaining accuracy. It addresses integrating\nhigh-quality visual data for effective cross-modal understanding.\n\u2022 Efficient LLMs explores these strategies of improving the computational efficiency and\nscalability of language models. It examines the trade-offs between model complexity and\nperformance while suggesting promising avenues for balancing these competing factors.\n2", "Figure 10: Efficient vision transformer techniques in [138]. The dashed orange block highlights the\ncomponent on which each optimization technique mainly focuses.\ndetermining the pruning rate. Additionally, VTP [110] reduces embedding dimensions through the\nintegration of control coefficients, concurrently removing neurons with negligible coefficients. Tang\net al. [111] eliminate redundant patches by first identifying effective patches in the last layer and\nthen leveraging them to guide the selection process of previous layers, where patches with minimal\nimpact on the final output feature are subsequently discarded.\nHybrid Pruning , such as [137], investigates both unstructured and structured sparsity, intro-\nducing a first-order importance approximation approach for attention head removal. SPViT [112]\ndevelops a dynamic attention-based multi-head token selector for adaptive instance-wise token se-", "gpu hardware accelerators. Proceedings of the\nIEEE , 106(11):2040\u20132055, 2018.\nEagleman, D. M. and Sejnowski, T. J. Mo-\ntion integration and postdiction in visual\nawareness. Science , 287(5460):2036\u2013\n2038, 2000. ISSN 0036-8075. doi:\n10.1126/science.287.5460.2036. URL\n13", "to lose some visual details compared to pure vision models like DINO ViT [ 10]. Therefore, recent\nstudies have proposed complementing this information loss by incorporating visual features from\nother vision encoders. The work of [ 98] proposes mixing features from CLIP ViT and DINO ViT.\nSpecifically, it experimented with additive and interleaved features. Both settings show that there\nis a trade-off between the two types of features. A more dedicated mechanism is needed.\nConcurrently, a visual expert-based model proposed in [ 38] aims to mitigate the information\nloss caused by the CLIP image encoder. Instead of merely mixing features, this paper enhances\nthe visual perception ability of MLLMs by focusing on knowledge enhancement, relying on two\npivotal modules: multi-task encoders and the structural knowledge enhancement module. The multi-\ntask encoders are dedicated to integrating various types of latent visual information extracted by", "[38] Olga Russakovsky, Jia Deng, Hao Su, Jonathan Krause, Sanjeev Satheesh, Sean Ma, Zhiheng\nHuang, Andrej Karpathy, Aditya Khosla, Michael Bernstein, et al. Imagenet large scale visual\nrecognition challenge. International Journal of Computer Vision , 115(3):211\u2013252, 2015.\n[39] Sidak Pal Singh and Dan Alistarh. WoodFisher: Ef\ufb01cient second-order approximation for neural\nnetwork compression. In Conference on Neural Information Processing Systems (NeurIPS) ,\n2020.\n12"], "retrieved_docs_id": ["f53fc9e54d", "ad28faccc0", "0beccd4822", "c20c82af54", "b975ecf791"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does the VQAv2-IDK benchmark categorize \"I Know (IK)\" hallucination in machine-learned language models?\n", "true_answer": "The VQAv", "source_doc": "hallucination.pdf", "source_id": "d18c108916", "retrieved_docs": ["Based on powerful large language models, multimodal large language models demonstrate remark-\nable performance across various multimodal tasks. However, the phenomenon of hallucination\npresents a significant challenge to the practical applications of MLLMs, giving rise to undeniable\nconcerns about safety, reliability, and trustworthiness. In this comprehensive survey, we conducted\na thorough examination of hallucinations within multimodal large language models, focusing\non their underlying causes, evaluation metrics, benchmarks, and mitigation methods. Despite\nconsiderable progress, hallucination remains a complex and persistent concern that warrants ongo-\ning investigation. The challenge of hallucination in multimodal large language models remains\ncompelling, requiring continuous scrutiny and innovation. In light of these challenges, we have\noutlined several promising future directions in this burgeoning domain. Through navigating the", "Hallucination of Multimodal Large Language Models: A Survey 3\ncontrast, there are very few surveys on hallucination in the field of MLLMs. To the best of our\nknowledge, there is only one concurrent work [ 76], a short survey on the hallucination problem of\nLVLMs. However, our survey distinguishes itself in terms of both taxonomy and scope. We present a\nlayered and granular classification of hallucinations, as shown in Fig. 1, drawing a clearer landscape\nof this field. Additionally, our approach does not limit itself to specific model architectures as\nprescribed in the work of [ 76], but rather dissects the causes of hallucinations by tracing back to\nvarious affecting factors. We cover a larger range of literature both in terms of paper number and\ntaxonomy structure. Furthermore, our mitigation strategies are intricately linked to the underlying\ncauses, ensuring a cohesive and targeted approach.\nOrganization of this survey. In this paper, we present a comprehensive survey of the latest", "desired answer is \u2019I don\u2019t know\u2019. The concept is defined as \u2019I Know (IK)\u2019 hallucination in the work\nof [11]. Accordingly, a new benchmark, VQAv2-IDK, is proposed to specifically evaluate this type of\nhallucination. VQAv2-IDK is a subset of VQAv2 comprising unanswerable image-question pairs as\ndetermined by human annotators. In this benchmark, \u2019I Know (IK)\u2019 hallucination has been further\ncategorized into four types:\n\u2022Unanswerable: no one can know.\n\u2022Don\u2019t know: human may not know, but robot might.\n\u2022False questions: refers non-existing.\n\u2022Not sure: ambiguous to answer.\nThis benchmark opens a new track for the study of hallucination in MLLMs.\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024.", "Hallucination of Multimodal Large Language Models: A\nSurvey\nZECHEN BAI, Show Lab, National University of Singapore, Singapore\nPICHAO WANG, Amazon Prime Video, USA\nTIANJUN XIAO, AWS Shanghai AI Lab, China\nTONG HE, AWS Shanghai AI Lab, China\nZONGBO HAN, Show Lab, National University of Singapore, Singapore\nZHENG ZHANG, AWS Shanghai AI Lab, China\nMIKE ZHENG SHOU\u2217,Show Lab, National University of Singapore, Singapore\nThis survey presents a comprehensive analysis of the phenomenon of hallucination in multimodal large\nlanguage models (MLLMs), also known as Large Vision-Language Models (LVLMs), which have demonstrated\nsignificant advancements and remarkable abilities in multimodal tasks. Despite these promising developments,\nMLLMs often generate outputs that are inconsistent with the visual content, a challenge known as hallucination,\nwhich poses substantial obstacles to their practical deployment and raises concerns regarding their reliability", "merely means the model generated an output that\ncan neither be grounded nor contradicted by the\nsource content. This is still, to some degree, un-\ndesirable as the provided information cannot be\nverified. We illustrate intrinsic and extrinsic hallu-\ncinations in Fig. 8.\nHallucination [293, 458, 241]\nGenerated text that is fluent and natural but\nunfaithful to the source content (intrinsic)\nand/or under-determined (extrinsic).\nLiu et al. [328] attribute hallucinations com-\nmonly observed in LLMs to an architectural flaw in\nTransformer models while observing that recurrent\nneural networks perfectly solve their minimalistic\nsynthetic benchmarks, designed to isolate the is-sue of hallucination in the context of algorithmic\nreasoning. Here, we focus on ways to address hal-\nlucinations in LLMs without changing the model\narchitecture itself, including (i) supplying the LLM\nwith relevant sources ( retrieval augmentation ) or\n(ii) decoding strategies."], "retrieved_docs_id": ["114f3dada8", "33d47ad8cc", "d18c108916", "72dc971633", "aa24958f00"], "reranker_type": "None", "search_type": "vector", "rr": 0.3333333333333333, "hit": 1}, {"question": "How does PRCA train the adapter?\n", "true_answer": "PRCA trains the adapter through the Contextual Extraction Stage and the Reward-Driven Stage.", "source_doc": "RAG.pdf", "source_id": "af13cfcd4c", "retrieved_docs": ["tokens, we learn the activations after every Transformer layer. The activations computed from pre-\nvious layers are simply replaced by trainable ones. The resulting number of trainable parameters is\n|\u0398|=L\u00d7dmodel\u00d7(lp+li), whereLis the number of Transformer layers.\nAdapter tuning as proposed in Houlsby et al. (2019) inserts adapter layers between the self-\nattention module (and the MLP module) and the subsequent residual connection. There are two\nfully connected layers with biases in an adapter layer with a nonlinearity in between. We call this\noriginal design AdapterH. Recently, Lin et al. (2020) proposed a more ef\ufb01cient design with the\nadapter layer applied only after the MLP module and after a LayerNorm. We call it AdapterL. This\nis very similar to another deign proposed in Pfeiffer et al. (2021), which we call AdapterP. We also\ninclude another baseline call AdapterDrop (R \u00a8uckl\u00b4e et al., 2020) which drops some adapter layers for", "linearity. The Adapter module is applied in series\nwith the feed-forward network (FFN). Having the\nadaptor module in-line with other blocks in the\nmodel can increase the inference time of the model.\nPA is a faster version of the Adapter, which can be\napplied in parallel with the FFN block. The com-\npactor is a more memory-ef\ufb01cient version of the\nAdapter, which deploys the sum of Kronecker prod-\nucts to reconstruct each up-projection and down-\nprojection matrices. All these low-rank adapters\nsuffer from two major issues: \ufb01rst, \ufb01nding the best\nrank requires heavy exhaustive training and search;\nsecond, the tuned adapter module works well only\nwith a particular rank.\nWhile there have been some efforts in the lit-\nerature towards dynamic networks such as Dyn-\naBERT (Hou et al., 2020) and GradMax (Evci et al.,\n2022), to the best of our knowledge, this problem\nfor factorized networks and low-rank adapters is\nstill open. DRONE (Chen et al., 2021) propose a", "igate alignment issues. PRCA [Yang et al. , 2023b ]lever-\naged reinforcement learning to train a context adapter\ndriven by LLM rewards, positioned between the re-\ntriever and generator. It optimizes the retrieved in-\nformation by maximizing rewards in the reinforcement\nlearning phase within the labeled autoregressive pol-\nicy. AAR [Yuet al. , 2023b ]proposed a universal plu-\ngin that learns LM preferences from known-source\nLLMs to assist unknown or non-co-finetuned LLMs.\nRRR [Maet al. , 2023a ]designed a module for rewriting\nqueries based on reinforcement learning to align queries\nwith documents in the corpus.\n\u2022Validation Module: In real-world scenarios, it is notalways guaranteed that the retrieved information is reli-\nable. Retrieving irrelevant data may lead to the occur-\nrence of illusions in LLM. Therefore, an additional val-\nidation module can be introduced after retrieving docu-\nments to assess the relevance between the retrieved doc-", "expressiveness and generalization capabilities. Adapter-based tuning introduces lightweight adapter\nmodules into the pre-trained model\u2019s architecture. These adapter modules, typically composed of\nfeed-forward neural networks with a small number of parameters, are inserted between the layers\nof the original model. During fine-tuning, only the adapter parameters are updated, while the pre-\ntrained model\u2019s parameters remain fixed. This method significantly reduces the number of trainable\nparameters, leading to faster training and inference times without compromising the model\u2019s per-\nformance. LLM-Adapters [154] presents a framework for integrating various adapters into large\nlanguage models, enabling parameter-efficient fine-tuning for diverse tasks. This framework en-\n16", "Feed F orward\ndown-projectNonlinearit yFeed F orward\nup-project+Adapter\nLayer\nMulti-Head\nAttentionAdd & NormFeed F orwardAdd & Norm\nAdapter\nAdapter\nMulti-Head\nAttentionAdd & NormFeed F orwardAdd & Norm\nAdapter\nxPretrained\nWeightsB\nAh\n(c) Series Adapter (d) Parallel Adapter (b) LoRAPrefix Transformer (Froz en)\n(a) Prefix-T uning \nAdapterFigure 1: A detailed illustration of the model architectures of three different adapters: (a) Prefix-Tuning, (b) LoRA,\n(c) Series Adapter, and (d) Parallel Adapter.\nlows:\nHo=Attn(HiWQ,[PK;HiWK],[PV;HiWV]),\n(1)\nwhere Hi\u2208RT\u00d7dandHo\u2208RT\u00d7dare the input\nand output of the attention layer respectively. Note\nthatTis the maximum input length and dis the\nvector dimension. PK\u2208RL\u00d7dandPV\u2208RL\u00d7d\nare the learnable vectors for PEFT. Lis the num-\nber of learnable tokens, which is discussed in the\nexperiment section in detail. Q, K, V denote the\nquery, key, value vectors of th attention module,\nrespectively.\nReparametrization-based method. This type of"], "retrieved_docs_id": ["eacae6e898", "54f8547c29", "8d0a82337c", "004ffc5dd9", "25c04fef23"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What is a hardware-aware quantization method for ViTs?\n", "true_answer": "GPUSQ-ViT", "source_doc": "multimodal.pdf", "source_id": "8a087225e4", "retrieved_docs": ["Impact Using pruning or quantization leads to power reduction on many architectures and enables\nnew applications on mobile platforms. We see only a positive impact from this on the whole.\nLimitations First, our work has not extensively considered the hardware implications of pruning or\nquantization. Second, we do not study combinations of pruning and quantization apart from analyzing\nthe inherent sparsity due to pruning. We leave this for future work. Finally, we consider only uniform\nquantization and ignore the other formats, such as low-precision floating or logarithmic quantization,\nalthough these are not likely to change the results presented in this paper.\n7 Related work\nQuantization Integer quantization, or fixed-point quantization, is one of the most widely used\ntechniques for inference, allowing to reduce the latency and improved energy efficiency. There are two\nmain families of methods for model quantization. The first family includes post-training quantization", "shared with most of the quantization algorithms, and\nthey are necessary for understanding and deploying\nexisting methods. Then we discuss more advanced topics\nin Section IV. These mostly involve recent state-of-the-art\nmethods, especially for low/mixed-precision quantization.\nThen we discuss the implications of quantization in\nhardware accelerators in Section V, with a special focus\non edge processors. Finally, we provide a summary and\nconclusions in Section VII.\nII. G ENERAL HISTORY OF QUANTIZATION\nGray and Neuhoff have written a very nice survey of the\nhistory of quantization up to 1998 [ 76]. The article is an\nexcellent one and merits reading in its entirety; however,\nfor the reader\u2019s convenience we will brie\ufb02y summarize\nsome of the key points here. Quantization, as a method\nto map from input values in a large (often continuous) set\nto output values in a small (often \ufb01nite) set, has a long\nhistory. Rounding and truncation are typical examples.", "64conv16464conv2/3+6464conv4/5+128128conv6/7+128128conv8/9+...\n...+512512conv16/17+4B i t s8B i t s4B i t s8B i t s4B i t s8B i t s4B i t s8B i t s4B i t s8B i t s4B i t s8B i t s4B i t s8B i t sFC&softmaxSensitivity: Flat vs. Sharp Local Minima\n\u00000.4\u00000.200.20.4\u00000.4\u00000.200.20.4\u00002\u0000101\n\u270f1\u270f2Loss(Log)Balance the Trade-offInference LatencyINT8INT4\n\u00000.4\u00000.200.20.4\u00000.4\u00000.200.20.400.51\n\u270f1\u270f2Loss(Log)17th Block\u00000=0.7Figure 8: Illustration of mixed-precision quantization. In mixed-precision quantization the goal is to keep sensitive\nand ef\ufb01cient layers in higher precision, and only apply low-precision quantization to insensitive and inef\ufb01cient\nlayers. The ef\ufb01ciency metric is hardware dependant, and it could be latency or energy consumption.\nhardware processors, including NVIDIA V100 and Titan\nRTX, support fast processing of low-precision arithmetic\nthat can boost the inference throughput and latency.\nMoreover, as illustrated in Figure 7 (right) for a 45nm", "dramatically improves the performance of all quantization meth-\nods, across all evaluation tasks. Remarkably, all quantization\nmethods\u2014even nearest\u2014are viable at two bits with our inco-\nherence processing. Our modifications in QuIP-RG sometimes\ngive an improvement over QuIP, but further study is required\nto evaluate these modifications. Figures for OPT-125M to 13B\nare in Supplement C.\nThroughput Comparison. We evaluate the additional overhead of our incoherence processing during\nmodel inference by modifying OPTQ\u2019s efficient forward pass. OPTQ\u2019s implementation contains a\nquantized-matrix full-precision-vector product kernel and was shown to offer speedups over a FP16\nbaseline. Our incoherence processing additions are performed in PyTorch. Table 4 shows that our\nQuIP implementation is about 1.5 \u00d7slower than OPTQ.\nFurther Ablation. QuIP\u2019s incoherence processing contains several sub-steps. Table 3 shows their", "since the \ufb01xed-point operations are more ef\ufb01cient\nthan their \ufb02oating-point counterparts (Horowitz,\n2014). However, exact latency improvements and\nenergy savings are highly dependent on the tar-\nget hardware. Therefore, in this work, we focus\non achieving high memory and compute reduction\nwhile maintaining acceptable model accuracy and\ndo not measure actual on-device performance gains.\nWe will cover the relevant basics of quantization\nbelow. For a more comprehensive overview of neu-\nral network quantization, please refer to Nagel et al.\n(2021).\nA commonly used scheme for quantization is\nuniform af\ufb01ne orasymmetric quantization (Zhou\net al., 2016; Hubara et al., 2017; Krishnamoorthi,\n2018) because it allows for ef\ufb01cient implementa-\ntion of \ufb01xed-point arithmetic. It is de\ufb01ned by bit-\nwidth b\u2208N,scale factor s\u2208R+, and zero-point\nz\u2208Z. We simulate the quantization process"], "retrieved_docs_id": ["7a815c3a72", "af436c9c53", "642c5f83c6", "9ccad3b4f6", "1fdb29fc07"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How does MARINE implement guided decoding?\n", "true_answer": "MARINE implements guided decoding by employing an additional vision encoder for object grounding and utilizing the grounded objects to guide the decoding process, using the classifier-free guidance technique.", "source_doc": "hallucination.pdf", "source_id": "9e707211bd", "retrieved_docs": ["20 Bai, et al.\nfocuses more on the image information. The image-based model is created by modifying the\nattention weight matrix structure within the original model, without altering its parameters. This\napproach emphasizes the knowledge of the image-biased model and diminishes that of the original\nmodel, which may be text-biased. Thus, it encourages the extraction of correct content while\nsuppressing hallucinations resulting from textual over-reliance.\nGuided Decoding. MARINE [ 131] proposes a training-free approach. It employs an additional\nvision encoder for object grounding and utilizes the grounded objects to guide the decoding process.\nSpecifically, it innovatively adapts the classifier-free guidance [ 40] technique to implement guided\ndecoding, showing promising performance in emphasizing the detected objects while reducing\nhallucination in the text response.\nSimilarly, GCD [ 24] devises a CLIP-Guided Decoding (GCD) approach. It first verifies that", "Exploring the Limits of Transfer Learning\nof FLOPs required for an L+L-layer encoder-decoder model or L-layer decoder-only model\nto process a given input-target pair. In total, we will compare:\n\u2022An encoder-decoder model with Llayers in the encoder and Llayers in the decoder.\nThis model has 2Pparameters and a computation cost of MFLOPs.\n\u2022An equivalent model, but with parameters shared across the encoder and decoder,\nresulting in Pparameters and an M-FLOP computational cost.\n\u2022An encoder-decoder model with L/2layers each in the encoder and decoder, giving P\nparameters and an M/2-FLOP cost.\n\u2022A decoder-only language model with Llayers and Pparameters and a resulting\ncomputational cost of MFLOPs.\n\u2022A decoder-only pre\ufb01x LM with the same architecture (and thus the same number\nof parameters and computational cost), but with fully-visible self-attention over the\ninput.\n3.2.3. Objectives\nAs an unsupervised objective, we will consider both a basic language modeling objective as", "to use the entire BART model (both encoder and de-\ncoder) as a single pretrained decoder for machine trans-\nlation, by adding a new set of encoder parameters that\nare learned from bitext (see Figure 3b).\nMore precisely, we replace BART\u2019s encoder embed-\nding layer with a new randomly initialized encoder.\nThe model is trained end-to-end, which trains the new\nencoder to map foreign words into an input that BART\ncan de-noise to English. The new encoder can use a\nseparate vocabulary from the original BART model.\nWe train the source encoder in two steps, in both\ncases backpropagating the cross-entropy loss from the\noutput of the BART model. In the \ufb01rst step, we freeze\nmost of BART parameters and only update the ran-\ndomly initialized source encoder, the BART positional\nembeddings, and the self-attention input projection ma-\ntrix of BART\u2019s encoder \ufb01rst layer. In the second step,\nwe train all model parameters for a small number of\niterations.\n4 Comparing Pre-training Objectives", "arXiv:1911.02150v1  [cs.NE]  6 Nov 2019Fast Transformer Decoding: One Write-Head is All\nYou Need\nNoam Shazeer\nGoogle\nnoam@google.com\nNovember 7, 2019\nAbstract\nMulti-head attention layers, as used in the Transformer neu ral sequence model, are a powerful alter-\nnative to RNNs for moving information across and between seq uences. While training these layers is\ngenerally fast and simple, due to parallelizability across the length of the sequence, incremental inference\n(where such paralleization is impossible) is often slow, du e to the memory-bandwidth cost of repeatedly\nloading the large \"keys\" and \"values\" tensors. We propose a v ariant called multi-query attention, where\nthe keys and values are shared across all of the di\ufb00erent atte ntion \"heads\", greatly reducing the size of\nthese tensors and hence the memory bandwidth requirements o f incremental decoding. We verify exper-\nimentally that the resulting models can indeed be much faste r to decode, and incur only minor quality", "shows these values as well as similar results for beam-searc h.\n1Due to system limitations requiring \ufb01xed shapes, we used pad ding and masking in our decoder-self-attention implementa tion.\nThe memory tensors were thus padded to the maximum length (12 8), or to the window-size (32) in the case of local attention.\nEach decoding step thus took the same amount of time. An alter native implementation of incrementally growing the tensor s\ncould save time near the beginning of the sequence.\n7"], "retrieved_docs_id": ["9e707211bd", "8427e8a5c2", "d708c93a55", "32682a487b", "533b5f9a8e"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does TinyLlava adjust pre-trained modules during pre-training?\n", "true_answer": "TinyLlava partially freezes pre-trained vision encoder and symmetric language model (SLM) modules to activate more parameters for learning alignment during the pre-training stage.", "source_doc": "multimodal.pdf", "source_id": "1bd741e7c9", "retrieved_docs": ["FastV[46], VTW[47]\nTraining (\u00a75)Pre-Training (\u00a75.1) Idefics2[48], TinyLLaV A[23], VILA[49]\nInstruction-Tuning (\u00a75.2) LaVIN[50], HyperLLaV A[51]\nDiverse Training Steps (\u00a75.3) SPHINX-X[14], Cobra[13], TinyGPT-V[28]\nParameter Efficient\nTransfer Learning (\u00a75.4)EAS [52], MemVP [53]\nData and Benchmarks (\u00a76)Pre-Training Data (\u00a76.1)CC595k[7], LLava-1.5-PT[54],\nShareGPT4V-PT[55],\nBunny-pretrain-LAION-2M[24],\nALLaV A-Caption-4V[29], etc.\nInstrcution-Tuning Data (\u00a76.2)LLaV A\u2019s IT[7], LLaV A-1.5\u2019s IT[54],\nShareGPT4V\u2019s IT[55], Bunny-695K[24],\nLVIS-INSTRUCT-4V[56], etc.\nBenchmarks (\u00a76.3)VQAv2[57], TextVQA[58], GQA[59],\nMME[60], MMBench[61], POPE[62]\nApplication (\u00a77)Biomedical Analysis (\u00a77.1) LLaV A-Rad [63], MoE-TinyMed [64]\nDocument Understanding (\u00a77.2)TextHawk [36], TinyChart [37],\nMonkey [65], HRVDA [66]\nVideo Comprehension (\u00a77.3)mPLUG-video [67], Video-LLaV A [44],\nMA-LMM [68], LLaMA-VID [69]\nFigure 2: Organization of efficient multimodal large language models advancements.", "This can be attributed to the pre-training phase already capturing significant information, leaving the fine-tuning\nstage primarily to focus on task-specific adjustments. In essence, LoRA offers a compelling approach to parameter\nreduction by leveraging the notion of intrinsic dimension in weight matrices. By adopting a mathematically rigorous\nframework, LoRA enables more efficient adaptation of pre-trained language models to new tasks during the fine-tuning", "There are many directions for future works. 1) LoRA can be combined with other ef\ufb01cient adapta-\ntion methods, potentially providing orthogonal improvement. 2) The mechanism behind \ufb01ne-tuning\nor LoRA is far from clear \u2013 how are features learned during pre-training transformed to do well\non downstream tasks? We believe that LoRA makes it more tractable to answer this than full \ufb01ne-\n12", "Pre-training/\ufb01ne-tuning has become a popular\nparadigm for solving many tasks in natural lan-\nguage processing (NLP) (Devlin et al., 2018; Liu\net al., 2019; Brown et al., 2020) and Computer Vi-\nsion (Simonyan and Zisserman, 2014; He et al.,\n2016; Howard et al., 2019; Bochkovskiy et al.,\n1github.com/huawei-noah/KD-NLP/tree/main/DyLoRA2020; Chen et al., 2020; Dosovitskiy et al., 2020).\npretrained models (PMs) such as pretrained lan-\nguage models (PLMs) (Devlin et al., 2018; Brown\net al., 2020), and pretrained visual-language mod-\nels (Lu et al., 2019; Li et al., 2019; Su et al., 2019;\nXia et al., 2021) have advanced a lot in recent years.\nWith the ever-growing size of these pretrained mod-\nels, \ufb01ne-tuning them on downstream tasks becomes\nmore expensive. Moreover, as the ratio of the num-\nber of parameters of models with respect to the\nlabeled data increases, the \ufb01ne-tuning process will\nbe more prone to over\ufb01tting (Karimi Mahabadi\net al., 2021). There are two categories of solutions:", "ity without being updated. In what follows, we discuss two\nkey questions about the ICL ability of LLMs, i.e.,\u201chow does\npre-training affect the ICL ability \u201d and \u201c how do LLMs perform\nICL during inference \u201d.\nHow Pre-Training Affects ICL? ICL is first proposed in\nGPT-3 [55], and it has been shown that the ICL ability\nbecomes more significant with a larger model size. Further,\nsome studies reveal that small-scale PLMs can also demon-\nstrate a strong ICL ability by continual pre-training [490]\nor fine-tuning [491] on specially designed training tasks,\nwhich typically involve additional task examples in theinput during the training process. It suggests that the design\nof training tasks is an important influence factor on the ICL\ncapability of LLMs. Besides training tasks, recent studies\nhave also investigated the relationship between ICL and\npre-training corpora [488, 492]. For example, ICL can be\ntheoretically explained as the product of pre-training on"], "retrieved_docs_id": ["d85947fa4f", "bf757f65af", "93e75b2efb", "3c072f09a9", "b0a5af4ba8"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What is the focus of the survey presented in the paper?\n", "true_answer": "The focus of the survey presented in the paper is the latest developments regarding hallucinations in multimodal large language models (MLLMs).", "source_doc": "hallucination.pdf", "source_id": "e1b4ac9436", "retrieved_docs": ["(a)Do the main claims made in the abstract and introduction accurately re\ufb02ect the paper\u2019s\ncontributions and scope? [Yes]\n(b) Did you describe the limitations of your work? [Yes] See the limitation section\n(c)Did you discuss any potential negative societal impacts of your work?[Yes] See the\nBroader Impacts section\n(d)Have you read the ethics review guidelines and ensured that your paper conforms to\nthem?[Yes] Yes, we believe our work conforms to these guidelines.\n2. If you are including theoretical results...\n(a) Did you state the full set of assumptions of all theoretical results? [N/A]\n(b) Did you include complete proofs of all theoretical results? [N/A]\n3. If you ran experiments...\n(a)Did you include the code, data, and instructions needed to reproduce the main experi-\nmental results (either in the supplemental material or as a URL)? [Yes] We will include\nour code in the supplemental material.\n(b)Did you specify all the training details (e.g., data splits, hyperparameters, how they", "G Details of Task Phrasing and Speci\ufb01cations\nThe following \ufb01gures illustrate the formatting and phrasing of all the tasks included in the paper. All data comes from\nthe ground truth datasets in this section, and no samples from GPT-3 are included here.\nContext\u2192Article:\nInformal conversation is an important part of any business\nrelationship.Before you start a discussion,however,make sure you understand\nwhich topics are suitable and which are considered taboo in a particular\nculture. Latin Americans enjoy sharing information about their local\nhistory, art and customs.You may expect questions about your family,and\nbe sure to show pictures of your children.You may feel free to ask similar\nquestions of your Latin American friends.The French think of conversation\nas an art form,and they enjoy the value of lively discussions as well as\ndisagreements. For them,arguments can be interesting and they can cover\npretty much or any topic ---- as long as they occur in are respectful and", "a team of about 40 contractors on Upwork and through ScaleAI. Compared to earlier work that\ncollects human preference data on the task of summarization (Ziegler et al., 2019; Stiennon et al.,\n2020; Wu et al., 2021), our inputs span a much broader range of tasks, and can occasionally include\ncontroversial and sensitive topics. Our aim was to select a group of labelers who were sensitive to the\npreferences of different demographic groups, and who were good at identifying outputs that were\npotentially harmful. Thus, we conducted a screening test designed to measure labeler performance\non these axes. We selected labelers who performed well on this test; for more information about our\nselection procedure and labeler demographics, see Appendix B.1.\nDuring training and evaluation, our alignment criteria may come into con\ufb02ict: for example, when a\nuser requests a potentially harmful response. During training we prioritize helpfulness to the user (not\n7", "way. Then, we have extensively revised the writing and\ncontents in several passes. Due to the space limit, we can\nonly include a fraction of existing LLMs in Figure 3 and\nTable 1, by setting the selection criterion. However, we set\na more relaxed criterion for model selection on our GitHub\npage (https://github.com/RUCAIBox/LLMSurvey), which\nwill be regularly maintained. We release the initial version\non March 31, 2023, the major revision on June 29, 2023,\nand second version on September 10, 2023, and this latest\nversion (major revision) on November 23, 2023.\nSeeking for Advice . Despite all our efforts, this survey\nis still far from perfect: we are likely to miss important\nreferences or topics, and might also have non-rigorous\nexpressions or discussions. We will continuously update\nthis survey, and improve the quality as much as we can.\nFor us, survey writing is also a learning process for LLMs\nby ourselves. For readers with constructive suggestions to", "Example prompt and completion\nAnswer each question using information in the preceding passage.\nPassage: In the city, the population was spread out with 12.0% under the age\nof 18, 55.2% from 18 to 24, 15.3% from 25 to 44, 10.3% from 45 to 64, and 7.1%\nwho were 65 years of age or older. The median age was 22 years. For every 100\nfemales, there were 160.7 males. For every 100 females age 18 and over, there\nwere 173.2 males.\nQuestion: Which age group had the second most people?\nAnswer: [target completion: \u201c25 to 44\u201d]\nDataset features\n\u2022 9,536 examples\n\u2022 In the few-shot setting, there are 4 additional passages and associated questions.\n\u2022 Evaluation metric is the f1 score from the sample to the target completion.\nFigure 18: DROP: prompting, examples, and dataset features.\n46"], "retrieved_docs_id": ["a09d2355b0", "c742f5dcc3", "889d978e58", "affa67e9d3", "1b9f642c02"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How does D-Abstractor maintain the local context in visual feature abstraction?\n", "true_answer": "D-Abstractor, or Deformable attention-based Abstractor, maintains the local context through a 2-D coordinate-based sampling process, using reference points and sampling offsets.", "source_doc": "multimodal.pdf", "source_id": "3a3d9edb48", "retrieved_docs": ["additional LResNet blocks, which facilitate the abstraction of visual features to any squared num-\nber of visual tokens. Conversely, D-Abstractor, or Deformable attention-based Abstractor utilizes\ndeformable attention, which maintains the local context through a 2-D coordinate-based sampling\nprocess, using reference points and sampling offsets.\n6", "original LDP[20].\nMamba-based VL-Mamba[18] implements the 2D vision selective scanning(VSS) technique\nwithin its vision-language projector, facilitating the amalgamation of diverse learning method-\nologies. The VSS module primarily resolves the distinct processing approaches between one-\ndimensional sequential processing and two-dimensional non-causal visual information.\nHybrid Structure Honeybee [19] put forward two visual projectors, namely C-Abstractor and D-\nAbstractor, which adhere to two primary design principles: (i) providing adaptability in terms of the\nnumber of visual tokens, and (ii) efficiently maintaining the local context. C-Abstractor, or Convo-\nlutional Abstractor, focuses on proficiently modeling the local context by employing a convolutional\narchitecture. This structure consists of LResNet blocks, followed by adaptive average pooling and\nadditional LResNet blocks, which facilitate the abstraction of visual features to any squared num-", "121\n\u201cReform-eval: Evaluating large vision language mod-\nels via unified re-formulation of task-oriented bench-\nmarks,\u201d CoRR , vol. abs/2310.02569, 2023.\n[854] B. Li, R. Wang, G. Wang, Y. Ge, Y. Ge, and\nY. Shan, \u201cSeed-bench: Benchmarking multimodal\nllms with generative comprehension,\u201d CoRR , vol.\nabs/2307.16125, 2023.\n[855] W. Yu, Z. Yang, L. Li, J. Wang, K. Lin, Z. Liu,\nX. Wang, and L. Wang, \u201cMm-vet: Evaluating large\nmultimodal models for integrated capabilities,\u201d CoRR ,\nvol. abs/2308.02490, 2023.\n[856] J. Wang, L. Meng, Z. Weng, B. He, Z. Wu, and Y. Jiang,\n\u201cTo see is to believe: Prompting GPT-4V for better\nvisual instruction tuning,\u201d CoRR , vol. abs/2311.07574,\n2023.\n[857] Y. Zhang, R. Zhang, J. Gu, Y. Zhou, N. Lipka, D. Yang,\nand T. Sun, \u201cLlavar: Enhanced visual instruction tun-\ning for text-rich image understanding,\u201d arXiv preprint\narXiv:2306.17107 , 2023.\n[858] X. Qi, K. Huang, A. Panda, M. Wang, and P . Mittal,\n\u201cVisual adversarial examples jailbreak aligned large", "[84]Sinong Wang, Belinda Z Li, Madian Khabsa, Han Fang, and Hao Ma. Linformer: Self-attention with\nlinear complexity. arXiv preprint arXiv:2006.04768 , 2020.\n[85]Samuel Williams, Andrew Waterman, and David Patterson. Roo\ufb02ine: an insightful visual performance\nmodel for multicore architectures. Communications of the ACM , 52(4):65\u201376, 2009.\n[86]Michael E Wolf and Monica S Lam. A data locality optimizing algorithm. In Proceedings of the ACM\nSIGPLAN 1991 conference on Programming language design and implementation , pages 30\u201344, 1991.\n15", "vectors, or (right) the way how persistent vectors integrate with self-attention.\nimportance of feedforward layers in transformer models. However, it maintains decent performances\nbecause it still has a lot of parameters ( 38M) in the Wq,k,v,o matrices.\nWe also compare several different ways of integrating persistent vectors into self-attention:\n\u2022All-attn : this is our default model presented in Section 4 where persistent vectors are simply\nconcatenated to context vectors.\n\u2022Attn-split : this is the same as \u201call-attn\u201d except the attention over context and persistent\nvectors are computed separately. In other words, we replace the softmax in Eq. 13 with two\nseparate softmax functions: one for context vectors only and one for persistent vectors only.\n\u2022Head-split : this is the same as \u201call-attn\u201d except we constrain half of the heads to attend\nonly to context vectors, and the other half to attend only to persistent vectors."], "retrieved_docs_id": ["3a3d9edb48", "3238be52f9", "2678016e21", "8fab57d9bc", "a9c7970b35"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How does Mamba Cobra [13] incorporate the efficient Mamba [77] language model into the vision modality?\n", "true_answer": "Mamba Cobra [13] incorporates the efficient Mamba [77] language model into the vision modality by exploring different modal fusion schemes to develop an effective multi-modal Mamba.", "source_doc": "multimodal.pdf", "source_id": "5510d4cc4e", "retrieved_docs": ["iments show that it not only achieves competitive performance with state-of-the-art efficient meth-\nods but also boasts faster speeds due to its linear sequential modeling.It also excels in overcom-\ning visual illusions and spatial relationship judgments in closed-set challenging prediction bench-\nmarks and achieves performance comparable to LLaV A while using only 43% of the parameters.\nVL-Mamba[18] substitutes the Transformer-based backbone language model with the pre-trained\nMamba language model. It explores how to effectively implement the 2D vision selective scan\nmechanism for multimodal learning and the combinations of different vision encoders and pre-\ntrained Mamba language model variants.\nInference Acceleration SPD[45] proposes the speculative decoding with a language-only model\nto improve inference efficiency. By employing a language-only model as a draft model for specu-\n9", "original LDP[20].\nMamba-based VL-Mamba[18] implements the 2D vision selective scanning(VSS) technique\nwithin its vision-language projector, facilitating the amalgamation of diverse learning method-\nologies. The VSS module primarily resolves the distinct processing approaches between one-\ndimensional sequential processing and two-dimensional non-causal visual information.\nHybrid Structure Honeybee [19] put forward two visual projectors, namely C-Abstractor and D-\nAbstractor, which adhere to two primary design principles: (i) providing adaptability in terms of the\nnumber of visual tokens, and (ii) efficiently maintaining the local context. C-Abstractor, or Convo-\nlutional Abstractor, focuses on proficiently modeling the local context by employing a convolutional\narchitecture. This structure consists of LResNet blocks, followed by adaptive average pooling and\nadditional LResNet blocks, which facilitate the abstraction of visual features to any squared num-", "mising the inference speed. MoE-LLaV A[25] presents an MoE-based sparse MLLM framework\nthat effectively increases the number of parameters without compromising computational efficiency.\nFurthermore, it introduces MoE-Tuning, a three-stage training strategy designed to adapt MoE [89]\nto MLLMs and prevent model degradation caused by sparsity. MM1[30] designs two variants of\nMoE models. The first is a 3B-MoE model that employs 64 experts and substitutes a dense layer\nwith a sparse one every two layers. The second is a 7B-MoE model that utilizes 32 experts and\nsubstitutes a dense layer with a sparse one every four layers.\nMamba Cobra [13] incorporates the efficient Mamba [77] language model into the vision modal-\nity and explores different modal fusion schemes to develop an effective multi-modal Mamba. Exper-\niments show that it not only achieves competitive performance with state-of-the-art efficient meth-", "further engineering challenges and adjustments to the model that are not discussed in this paper.\n6 Conclusion\nWe introduce a selection mechanism to structured state space models, allowing them to perform context-dependent\nreasoning while scaling linearly in sequence length. When incorporated into a simple attention-free architecture,\nMamba achieves state-of-the-art results on a diverse set of domains, where it matches or exceeds the performance\nof strong Transformer models. We are excited about the broad applications of selective state space models to\nbuild foundation models for di\ufb00erent domains, especially in emerging modalities requiring long context such as\ngenomics, audio, and video. Our results suggest that Mamba is a strong candidate to be a general sequence model\nbackbone.\nAcknowledgments\nWe thank Karan Goel, Arjun Desai, and Kush Bhatia for helpful feedback on the draft.\nReferences", "elements. (iii)Long context: the quality and e\ufb03ciency together yield performance improvements on real data up\nto sequence length 1M.\nWe empirically validate Mamba\u2019s potential as a general sequence FM backbone, in both pretraining quality and\ndomain-speci\ufb01c task performance, on several types of modalities and settings:\n\u2022Synthetics. On important synthetic tasks such as copying and induction heads that have been proposed as being\nkey to large language models, Mamba not only solves them easily but can extrapolate solutions inde\ufb01nitely long\n(>1M tokens).\n\u2022Audio and Genomics. Mamba out-performs prior state-of-the-art models such as SaShiMi, Hyena, and Transform-\ners on modeling audio waveforms and DNA sequences, both in pretraining quality and downstream metrics (e.g.\nreducing FID on a challenging speech generation dataset by more than half). In both settings, its performance\nimproves with longer context up to million-length sequences."], "retrieved_docs_id": ["6bebc6e320", "3238be52f9", "5510d4cc4e", "53f73ec6b6", "22e268ba33"], "reranker_type": "None", "search_type": "vector", "rr": 0.3333333333333333, "hit": 1}, {"question": "How does the RETRO system retrieve and integrate information for chunk-level language generation?\n", "true_answer": "RETRO retrieves the nearest neighboring chunk (N(Ci\u22121)) from the retrieval database and integrates this information with the contextual information of the previous chunk to guide the generation of the next chunk.", "source_doc": "RAG.pdf", "source_id": "92f5901d31", "retrieved_docs": ["retrieved information. In RAG, the generator\u2019s input includes\nnot only traditional contextual information but also relevant\ntext segments obtained through the retriever. This allows the\ngenerator to better comprehend the context behind the ques-\ntion and produce responses that are more information-rich.\nFurthermore, the generator is guided by the retrieved text toensure consistency between the generated content and the re-\ntrieved information. It is the diversity of input data that has\nled to a series of targeted efforts during the generation phase,\nall aimed at better adapting the large model to the input data\nfrom queries and documents. We will delve into the intro-\nduction of the generator through aspects of post-retrieval pro-\ncessing and fine-tuning.\n5.1 How Can Retrieval Results be Enhanced via\nPost-retrieval Processing?\nIn terms of untuned large language models, most studies\nrely on well-recognized large language models like GPT-", "Retrieval-Augmented Generation for Large Language Models: A Survey\nYunfan Gao1,Yun Xiong2,Xinyu Gao2,Kangxiang Jia2,Jinliu Pan2,Yuxi Bi3,Yi\nDai1,Jiawei Sun1and Haofen Wang1,3\u2217\n1Shanghai Research Institute for Intelligent Autonomous Systems, Tongji University\n2Shanghai Key Laboratory of Data Science, School of Computer Science, Fudan University\n3College of Design and Innovation,Tongji University\ngaoyunfan1602@gmail.com\nAbstract\nLarge language models (LLMs) demonstrate pow-\nerful capabilities, but they still face challenges in\npractical applications, such as hallucinations, slow\nknowledge updates, and lack of transparency in\nanswers. Retrieval-Augmented Generation (RAG)\nrefers to the retrieval of relevant information from\nexternal knowledge bases before answering ques-\ntions with LLMs. RAG has been demonstrated\nto significantly enhance answer accuracy, reduce\nmodel hallucination, particularly for knowledge-\nintensive tasks. By citing sources, users can verify", "mentation for pre-training a self-regressive language model,\nenabling large-scale pre-training from scratch by retrieving\nfrom a massive set of labeled data and significantly reducing\nmodel parameters. RETRO shares the backbone structure\nwith GPT models and introduces an additional RETRO\nencoder to encode features of neighboring entities retrieved\nfrom an external knowledge base. Additionally, RETRO\nincorporates block-wise cross-attention layers in its decoder\ntransformer structure to effectively integrate retrieval infor-\nmation from the RETRO encoder. RETRO achieves lower\nperplexity than standard GPT models. Moreover, it provides\nflexibility in updating knowledge stored in the language\nmodels by updating the retrieval database without the need\nfor retraining the language models [Petroni et al. , 2019 ].\nAtla[Izacard et al. , 2022 ]employs a similar approach, in-\ncorporating a retrieval mechanism using the T5 architecture", "Given the same prompt text, we visualize the generated text with OPT- 6.7B and LLaMA- 7B across\ndifferent methods, including the baseline model with full cache, our H2O, and the \"Local\" strategy.\nResults are reported in Figure 6 and 7. Even with less KV cache budget, our H2Ocan generate\nmore diverse content. Specifically, with the OPT- 6.7B, the full model generates some redundant\nworks, like \"a few years after the events of the first game\" while our H2Odescribes \"the game is\na first-person exploration game\". As a comparison, when all KV cache budget is assigned to the\nmost recent tokens, the model fails to generate meaningful text and only repeats the word \".\" and\n\",\". Similar observations can also be drawn from the results of LLaMA- 7B, in which the full model\nrepeatedly says \"so moving that\", \"so moved that\", and \"began to cry\" while our H2Odescribes both\nthe people and the environment.\nMoreover, We conducted a quantitative comparison via diversity metric(Self-BELU [ 93]). We", "Wenzek, G., Lachaux, M.-A., Conneau, A., Chaudhary, V ., Guzm\u00e1n, F., Joulin, A., and Grave, E.\n(2020). CCNet: Extracting high quality monolingual datasets from web crawl data. In Proceedings\nof the 12th Language Resources and Evaluation Conference , pages 4003\u20134012, Marseille, France.\nEuropean Language Resources Association.\n13"], "retrieved_docs_id": ["fefa202c19", "af911eac69", "422e1adde8", "aff46ab022", "263524d37a"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "How can cross-modal alignment be improved in MLLMs training?\n", "true_answer": "Cross-modal alignment in MLLMs training can be improved by designing more advanced architectures, introducing additional learning objectives, or incorporating diverse supervision signals.", "source_doc": "hallucination.pdf", "source_id": "83c3718d9d", "retrieved_docs": ["generated content remains consistent and contextually relevant to the input modality requires\nsophisticated techniques for capturing and modeling cross-modal relationships. The direction of\ncross-modal alignment encompasses both MLLMs training and hallucination evaluation. Regarding\ntraining, future research should explore methods for aligning representations between different\nmodalities. Achieving this goal may involve designing more advanced architectures, introducing\nadditional learning objectives [ 52], or incorporating diverse supervision signals [ 16]. Regarding\nevaluation, cross-modal consistency checking has been a long-standing topic, ranging from multi-\nmodal understanding [ 66,88] to text-to-image generation [ 13,17]. Drawing on proven experiences\nfrom these domains to improve the assessment of MLLM hallucination, or unifying them into an\noverall framework, may be promising research directions.\n6.3 Advancements in Model Architecture", "alignment between different modalities, fine-tune the models on specific tasks, and minimize the\ncomputational and parameter costs associated with the transfer learning process. Figure.14 presents\na schematic representation of the different training stages involved in the development of efficient\nMLLMs. In the following subsections, we delve deeper into each of these aspects and discuss their\nsignificance in the context of efficient MLLMs.\n5.1 Pre-Training\nIn the pre-training stage, the primary focus is on aligning different modalities in the embedding\nspace, enabling the language model to accept inputs from various modalities. This phase of training\nmainly involves large-scale text-paired data, predominantly in the form of image-caption pairs. An\nimage-caption pair (X, Y )is typically expanded into a single-turn conversation (Xinstruct , Xa),\nwhere Xinstruct contains an image Xvand a randomly sampled question Xqfrom a set of instruc-", "pacities. To improve the alignment performance, it is crucial\nto design effective training strategies and select appropriate\npre-training data [829, 830]. Existing work mainly employs\nthe following strategies for cross-modality alignment: (1) if\nthe number of image-text pairs is not sufficiently large ( e.g.,\nless than 1M), it is often suggested to only update the\nconnection module [831]; (2) if the training data includes\nhigh-quality text corpora [832] or image-text pairs with\nfine-grained annotations [833], fine-tuning the LLM can be\nconducted to boost the performance; (3) if the number of\nimage-text pairs is very large ( e.g., about 1B), fine-tuning\nthe vision encoder is also plausible [829, 830], but the benefit\nremains further verification.\n\u2022Visual instruction tuning. After vision-language pre-\ntraining, the second-stage training, i.e., visual instruction\ntuning, aims to improve the instruction-following and task-\nsolving abilities of MLLMs. Generally, the input of vi-", "benchmarks employed to assess the performance of these models. The discussion highlights the\nimportance of diverse and high-quality datasets in achieving robust and accurate MLLMs, as well\nas the various strategies employed to generate and refine these datasets. Furthermore, we present a\ncomprehensive comparison of MLLM performance across established benchmarks, emphasizing the\nneed for a thorough evaluation to ensure the effectiveness of these models in real-world applications.\n6.1 Pre-Training Data\nPre-training data primarily serve two critical objectives: (1) promoting the integration of various\nmodalities and (2) conveying comprehensive knowledge. Large-scale image-caption pair datasets\nnaturally fulfill these requirements. Firstly, they predominantly originate from the internet, provid-\ning an extensive data volume with a broad knowledge coverage. Secondly, the direct alignment\nbetween the two modalities is beneficial for training modality projectors. However, captions in such", "directly inputs image patches and employs a linear projection to transform the raw pixels of each\npatch into embeddings.\nThe abstracted pipeline is depicted in Fig. 2. MLLMs take input from both visual and textual\nmodalities, learning from multimodal instructions and responses, which leads to remarkable per-\nformance across various multimodal tasks. Regarding the training of MLLMs, we provide a concise\noverview of the training process for interface-based MLLMs. Given that end-to-end models are\nclosed-source, the training details are unknown. Typically, the training of interface-based MLLMs\nconsists of two stages: 1) pre-training, 2) instruction tuning.\nPreprint, Vol. 1, No. 1, Article . Publication date: April 2024."], "retrieved_docs_id": ["83c3718d9d", "3dbb490826", "687ba2bcbe", "8f79f68811", "a8f0bda3b0"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}, {"question": "How can a token-wise optimal visual context reduce hallucination in MLLMs?\n", "true_answer": "By providing the most informative visual grounding when decoding a specific token in the MLLM, it can effectively reduce hallucination.\n\nHere, MLLMs refer to Multimodal Language Learning Models. The factoid answer is derived from the context, specifically the key insight provided by HALC [15].", "source_doc": "hallucination.pdf", "source_id": "17a462daf3", "retrieved_docs": ["supervises MLLMs with mask prediction loss using a state-of-the-art expert vision model, SAM [ 57],\nguiding MLLMs to focus on highly-related image content. With the additional supervision from\nthe mask prediction loss, MLLMs are encouraged to extract features that can better represent these\ncrucial instances, thus generating more accurate responses and mitigating vision hallucination. The\nintuitive idea of supervising MLLMs with grounding shows promising performance in mitigating\nhallucination.\nAnother line of work analyzes the training loss from the perspective of embedding space distri-\nbution. As introduced earlier, popular MLLMs typically project the encoded vision features into the\ninput space of a specific LLM. A recent work, HACL [ 52], argues that an ideal projection should\nblend the distribution of visual and textual embeddings. However, despite visual projection, a sig-\nnificant modality gap exists between textual and visual tokens, suggesting that the current learned", "in real-world applications. This problem has attracted increasing attention, prompting efforts to detect\nand mitigate such inaccuracies. We review recent advances in identifying, evaluating, and mitigating these\nhallucinations, offering a detailed overview of the underlying causes, evaluation benchmarks, metrics, and\nstrategies developed to address this issue. Additionally, we analyze the current challenges and limitations,\nformulating open questions that delineate potential pathways for future research. By drawing the granular\nclassification and landscapes of hallucination causes, evaluation benchmarks, and mitigation methods, this\nsurvey aims to deepen the understanding of hallucinations in MLLMs and inspire further advancements in\nthe field. Through our thorough and in-depth review, we contribute to the ongoing dialogue on enhancing the\nrobustness and reliability of MLLMs, providing valuable insights and resources for researchers and practitioners", "Organization of this survey. In this paper, we present a comprehensive survey of the latest\ndevelopments regarding hallucinations in MLLMs. The survey is organized as follows: We begin by\nproviding sufficient context and defining concepts related to LLMs, MLLMs, hallucination, etc. Next,\nwe delve into an in-depth analysis of the factors contributing to hallucinations in MLLMs. Following\nthis, we present a set of metrics and benchmarks employed for evaluating hallucinations in MLLMs.\nWe then elaborate on a range of approaches designed to mitigate hallucinations in MLLMs. Finally,\nwe delve into the challenges and open questions that frame the current limitations and future\nprospects of this field, offering insights and delineating potential pathways for forthcoming research.\n2 DEFINITIONS\n2.1 Large Language Models\nBefore moving to multimodal large language models, it is essential to introduce the concept of large", "Based on powerful large language models, multimodal large language models demonstrate remark-\nable performance across various multimodal tasks. However, the phenomenon of hallucination\npresents a significant challenge to the practical applications of MLLMs, giving rise to undeniable\nconcerns about safety, reliability, and trustworthiness. In this comprehensive survey, we conducted\na thorough examination of hallucinations within multimodal large language models, focusing\non their underlying causes, evaluation metrics, benchmarks, and mitigation methods. Despite\nconsiderable progress, hallucination remains a complex and persistent concern that warrants ongo-\ning investigation. The challenge of hallucination in multimodal large language models remains\ncompelling, requiring continuous scrutiny and innovation. In light of these challenges, we have\noutlined several promising future directions in this burgeoning domain. Through navigating the", "Hallucination of Multimodal Large Language Models: A Survey 3\ncontrast, there are very few surveys on hallucination in the field of MLLMs. To the best of our\nknowledge, there is only one concurrent work [ 76], a short survey on the hallucination problem of\nLVLMs. However, our survey distinguishes itself in terms of both taxonomy and scope. We present a\nlayered and granular classification of hallucinations, as shown in Fig. 1, drawing a clearer landscape\nof this field. Additionally, our approach does not limit itself to specific model architectures as\nprescribed in the work of [ 76], but rather dissects the causes of hallucinations by tracing back to\nvarious affecting factors. We cover a larger range of literature both in terms of paper number and\ntaxonomy structure. Furthermore, our mitigation strategies are intricately linked to the underlying\ncauses, ensuring a cohesive and targeted approach.\nOrganization of this survey. In this paper, we present a comprehensive survey of the latest"], "retrieved_docs_id": ["c505f06d1a", "c7f1da1e07", "e1b4ac9436", "114f3dada8", "33d47ad8cc"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "In what month and year was the preprint with arXiv ID 2404.1893v1 published in the field of computer vision?\n", "true_answer": "The preprint was published in the field of computer vision in April 2024.", "source_doc": "hallucination.pdf", "source_id": "35a7709274", "retrieved_docs": ["soning. arXiv preprint arXiv:2202.07206 , 2022.\nRombach, R., Blattmann, A., Lorenz, D., Esser, P., and\nOmmer, B. High-resolution image synthesis with latent\ndiffusion models. In Proceedings of the IEEE/CVF Con-\nference on Computer Vision and Pattern Recognition , pp.\n10684\u201310695, 2022.\nSanh, V ., Webson, A., Raffel, C., Bach, S. H., Sutawika, L.,\nAlyafeai, Z., Chaffin, A., Stiegler, A., Scao, T. L., Raja,\nA., Dey, M., Bari, M. S., Xu, C., Thakker, U., Sharma,\nS. S., Szczechla, E., Kim, T., Chhablani, G., Nayak, N.,\nDatta, D., Chang, J., Jiang, M. T.-J., Wang, H., Manica,\nM., Shen, S., Yong, Z. X., Pandey, H., Bawden, R., Wang,T., Neeraj, T., Rozen, J., Sharma, A., Santilli, A., F \u00b4evry,\nT., Fries, J. A., Teehan, R., Biderman, S., Gao, L., Bers, T.,\nWolf, T., and Rush, A. M. Multitask prompted training en-\nables zero-shot task generalization. Computing Research\nRepository , 2021. doi: 10.48550/arXiv.2110.08207. URL\nhttps://arxiv.org/abs/2110.08207v3 . Ver-\nsion 3.", "of convolutional neural networks. arXiv preprint\narXiv:1604.03168 , 2016.\n[81] Philipp Gysel, Jon Pimentel, Mohammad Mo-\ntamedi, and Soheil Ghiasi. Ristretto: A framework\nfor empirical study of resource-ef\ufb01cient inference\nin convolutional neural networks. IEEE transac-\ntions on neural networks and learning systems ,\n29(11):5784\u20135789, 2018.\n[82] Hai Victor Habi, Roy H Jennings, and Arnon\nNetzer. Hmq: Hardware friendly mixed preci-\nsion quantization block for cnns. arXiv preprint\narXiv:2007.09952 , 2020.\n[83] Kai Han, Yunhe Wang, Yixing Xu, Chunjing Xu,\nEnhua Wu, and Chang Xu. Training binary neural\nnetworks through learning with noisy supervision.\nInInternational Conference on Machine Learning ,\npages 4017\u20134026. PMLR, 2020.\n[84] Song Han, Huizi Mao, and William J Dally. Deep\ncompression: Compressing deep neural networks\nwith pruning, trained quantization and huffman\ncoding. arXiv preprint arXiv:1510.00149 , 2015.\n[85] Matan Haroush, Itay Hubara, Elad Hoffer, and", "abling high-performance low-precision deep learning inference. arXiv preprint arXiv:2101.05615 .\nKovaleva, O., Kulshreshtha, S., Rogers, A., and Rumshisky, A. (2021). Bert busters: Outlier\ndimensions that disrupt transformers. arXiv preprint arXiv:2105.06990 .\nLi, R., Wang, Y ., Liang, F., Qin, H., Yan, J., and Fan, R. (2019). Fully quantized network for object\ndetection. In IEEE Conference on Computer Vision and Pattern Recognition, CVPR 2019, Long\nBeach, CA, USA, June 16-20, 2019 , pages 2810\u20132819. Computer Vision Foundation / IEEE.\nLin, Y ., Li, Y ., Liu, T., Xiao, T., Liu, T., and Zhu, J. (2020). Towards fully 8-bit integer inference for\nthe transformer model. arXiv preprint arXiv:2009.08034 .\nLiu, Y ., Ott, M., Goyal, N., Du, J., Joshi, M., Chen, D., Levy, O., Lewis, M., Zettlemoyer, L., and\nStoyanov, V . (2019). Roberta: A robustly optimized bert pretraining approach. arXiv preprint\narXiv:1907.11692 .", "preprint arXiv:2105.05912 .\nOren Rippel, Michael Gelbart, and Ryan Adams.\n2014. Learning ordered representations with nested\ndropout. In Proceedings of the 31st International\nConference on Machine Learning , volume 32 of\nProceedings of Machine Learning Research , pages\n1746\u20131754, Bejing, China. PMLR.\nKaren Simonyan and Andrew Zisserman. 2014. Very\ndeep convolutional networks for large-scale image\nrecognition. arXiv preprint arXiv:1409.1556 .\nWeijie Su, Xizhou Zhu, Yue Cao, Bin Li, Lewei Lu,\nFuru Wei, and Jifeng Dai. 2019. Vl-bert: Pre-\ntraining of generic visual-linguistic representations.\narXiv preprint arXiv:1908.08530 .\nTianxiang Sun, Yunfan Shao, Hong Qian, Xuanjing\nHuang, and Xipeng Qiu. 2022. Black-box tun-\ning for language-model-as-a-service. arXiv preprint\narXiv:2201.03514 .\nMarzieh S Tahaei, Ella Charlaix, Vahid Partovi Nia,\nAli Ghodsi, and Mehdi Rezagholizadeh. 2021. Kro-\nneckerbert: Learning kronecker decomposition for\npre-trained language models via knowledge distilla-", "complexity. arXiv preprint arXiv:2006.04768 , 2020.\n[66]Felix Wu, Angela Fan, Alexei Baevski, Yann N Dauphin, and Michael Auli. Pay less attention with\nlightweight and dynamic convolutions. In The International Conference on Learning Representations\n(ICLR), 2019.\n[67]Yunyang Xiong, Zhanpeng Zeng, Rudrasis Chakraborty, Mingxing Tan, Glenn Fung, Yin Li, and Vikas\nSingh. Nystromformer: A Nystrom-based algorithm for approximating self-attention. arXiv preprint\narXiv:2102.03902 , 2021.\n[68]Zhilin Yang, Zihang Dai, Yiming Yang, Jaime Carbonell, Ruslan Salakhutdinov, and Quoc V Le. Xlnet:\nGeneralized autoregressive pretraining for language understanding. arXiv preprint arXiv:1906.08237 ,\n2019.\n[69]Li Yuan, Yunpeng Chen, Tao Wang, Weihao Yu, Yujun Shi, Francis EH Tay, Jiashi Feng, and Shuicheng\nYan. Tokens-to-token vit: Training vision transformers from scratch on imagenet. arXiv preprint\narXiv:2101.11986 , 2021."], "retrieved_docs_id": ["e4fdc8e0f0", "5f5696fcee", "4f4cbd5041", "919c2844b9", "28b324708e"], "reranker_type": "None", "search_type": "vector", "rr": 0.0, "hit": 0}, {"question": "What is the optimization goal of the information condenser training process in RECOMP [Xuet al., 2023a]?\n", "true_answer": "The optimization goal is to minimize the contrastive loss, which involves maximizing the similarity between a data point and its positive sample while minimizing the similarity between the data point and negative samples.", "source_doc": "RAG.pdf", "source_id": "ba4f3a6fe9", "retrieved_docs": ["input document. The objective of the training process is to\nminimize the discrepancy between Cextracted and the actual\ncontext Ctruth as much as possible. The loss function they\nadopted is as follows:\nminL (\u03b8) =\u22121\nNNX\ni=1C(i)\ntruthlog(f.(S(i)\ninput;\u03b8)) (3)\nwhere f.is the information extractor and \u03b8is the parameter\nof the extractor. RECOMP [Xuet al. , 2023a ]similarly trains\nan information condenser by leveraging contrastive learning.\nFor each training data point, there exists one positive sample\nand five negative samples. The encoder is trained using con-\ntrastive loss [Karpukhin et al. , 2020 ]during this process.The\nspecific optimization goals are as follows:\n\u2212logesim(xi,pi)\nsim(xi, pi) +P\nnj\u2208Niesim(xi,pi)(4)", "zero-optimization.reduce-scatter True\nzero-optimization.stage 1\nTable 1: The full con\ufb01guration details for GPT-NeoX-\n20B training", "30\ntures and pre-training objectives are in need to analyze how\nthe choices of the architecture and pre-training tasks affect\nthe capacity of LLMs, especially for encoder-decoder archi-\ntectures. Despite the effectiveness of decoder-only architec-\nture, it is also suggested to make more diverse exploration\non architecture design. Besides the major architecture, the\ndetailed configuration of LLM is also worth attention, which\nhas been discussed in Section 4.2.2.\n4.3 Model Training\nIn this part, we review the important settings, techniques,\nor tricks for training LLMs.\n4.3.1 Optimization Setting\nFor parameter optimization of LLMs, we present the com-\nmonly used settings for batch training, learning rate, opti-\nmizer, and training stability.\nBatch Training. For language model pre-training, existing\nwork generally sets the batch size to a large number ( e.g.,\n2,048 examples or 4M tokens) to improve the training\nstability and throughput. For LLMs such as GPT-3 and", "Information Compression\nEven though the retriever can fetch relevant information from\na vast knowledge base, we are still confronted with the chal-\nlenge of dealing with a substantial amount of information in\nretrieval documents. Some existing research attempts to solve\nthis problem by increasing the context length of large lan-\nguage models, but current large models still confront context\nlimitations. Thus, in certain situations, information conden-\nsation is necessary. In short, the importance of information\ncondensation mainly embodies in the following aspects: re-\nduction of noise, coping with context length restrictions, and\nenhancing generation effects.\nPRCA [Yang et al. , 2023b ]addressed this issue by train-\ning an information extractor. In the context extraction stage,\ngiven an input text Sinput , it can generate an output sequence\nCextracted , which represents the condensed context from the\ninput document. The objective of the training process is to", "0.01. To achieve a higher training throughput, we\nopt to use the same batch size as OpenAI\u2019s 175B\nmodel\u2013approximately 3.15M tokens, or 1538 con-\ntexts of 2048 tokens each, and train for a total of\n150,000steps, decaying the learning rate with a\ncosine schedule to 10% of its original value at the\nend of training.\nWe use the AdamW (Loshchilov and Hutter,\n2019) optimizer, with beta values of 0.9and0.95\nrespectively, and an epsilon of 1.0E\u22128. We extend\nAdamW with the ZeRO optimizer (Rajbhandari"], "retrieved_docs_id": ["ba4f3a6fe9", "44332bb85b", "6f172cf8fc", "c5e55b3041", "34cb561471"], "reranker_type": "None", "search_type": "vector", "rr": 1.0, "hit": 1}]